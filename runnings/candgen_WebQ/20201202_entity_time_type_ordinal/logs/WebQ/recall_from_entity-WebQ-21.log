[smart_candgen] ...  {
  Loading Webquestions from cPickle ...
  5810 WebQuesetions loaded.
args.linking_only: False
  QueryService initialize ...  {
    Loading ComplexQuestions from cPickle ...
    2100 ComplexQuestions loaded.
    Loading Webquestions from cPickle ...
    5810 WebQuesetions loaded.
    7910 QA loaded from WebQ & CompQ.
    Loading SPARQL cache ... {
      1897 SPARQL cache loaded.
    } [0.315s]
    Loading <q_sc, stat> cache ... {
      17672 <q_sc, stat> cache loaded.
    } [0.485s]
    Initialize complete.
  } [0.841s]
  Loading <word, idx> pairs from [../../data/word_emb_in_use/word_emb.indices] ... 
  84320 <word, idx> loaded.
  Loading word embeddings for [../../data/word_emb_in_use/word_emb.glove_300.npy] ...
  (84320, 300) word embedding loaded.
  44 dependency name loaded.
  GlobalLinker initializing ...  {
    201 ordinal & 235 superlative words loaded.
    Load entity linking table from [../../data/linkings/WebQ/webq.all.top3_source_ensemble_data.q_links]: {
      5810 questions of link data loaded.
    } [0.255s]
    FBHelper: 12237 type names loaded.
    12237 type embedding loaded.
    Initialize complete.
  } [0.850s]
  simple type match = False
  simple time match = False
  Entering Q 2100 / 5810 [b'where are brembo brakes from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2101 / 5810 [b'what did taylor swift do at the vmas 2012?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2102 / 5810 [b'who did russians descend from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2103 / 5810 [b'what to see and do in san diego california?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2104 / 5810 [b'what is the zip code for clarksville tn?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2105 / 5810 [b"where's wayne state?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2106 / 5810 [b'what dialect do most chinese speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2107 / 5810 [b'who is the president of cuba in 2009?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2108 / 5810 [b'who does avril lavigne play in over the hedge?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2109 / 5810 [b'where is the university of alabama?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2110 / 5810 [b'where is the country of armenia?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2111 / 5810 [b'who tom cruise been married to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2112 / 5810 [b'which country is gaza city located?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2113 / 5810 [b'who is president of pakistan 2012?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2114 / 5810 [b'what country did james watt come from?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2115 / 5810 [b'what instrument did louis armstrong like to play?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2116 / 5810 [b'what is the currency in germany in 2010?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2117 / 5810 [b'what types of government does china have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2118 / 5810 [b'where is the boeing company?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2119 / 5810 [b'what does bill gates own?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2120 / 5810 [b'what organism did mendel use?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2121 / 5810 [b'what are the two houses in congress?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2122 / 5810 [b'what team does ladainian tomlinson play 4?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2123 / 5810 [b'what is the major language spoken in canada?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2124 / 5810 [b'what did camille grammer do for a living?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2125 / 5810 [b'what jamaican language called?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2126 / 5810 [b'what planet was luke skywalker raised on?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2127 / 5810 [b"who did georgia o'keeffe inspired?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2128 / 5810 [b'who does brandon jacobs play for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2129 / 5810 [b'what is the government structure of germany?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2130 / 5810 [b"who was queen elizabeth the first's mother?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2131 / 5810 [b'who is the leader of the dominican republic 2011?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2132 / 5810 [b'where did the anglican church start?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2133 / 5810 [b'who does obama look up to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2134 / 5810 [b'where did william mckinley go to high school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2135 / 5810 [b'who played heath barkley?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2136 / 5810 [b'what year did baltimore ravens win the superbowl?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2137 / 5810 [b'what is the name of the money used in spain?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2138 / 5810 [b'what did edward jenner do for a living?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2139 / 5810 [b'when did shawn johnson won the gold medal?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2140 / 5810 [b'what did brittany murphy died of?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2141 / 5810 [b'what type of political system does north korea have?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2142 / 5810 [b'when does ramadan end 2012 indonesia?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2143 / 5810 [b'who will play clary in city of bones?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2144 / 5810 [b'what books did frances hodgson burnett wrote?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2145 / 5810 [b'what year did edgar allan poe go to college?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2146 / 5810 [b'where is amsterdam ohio?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2147 / 5810 [b'who are the two current senators of illinois?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2148 / 5810 [b'when did the orioles win the pennant?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2149 / 5810 [b'who did stephenie meyer play in twilight?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2150 / 5810 [b'what 3 countries does mexico border?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2151 / 5810 [b'who played giles on buffy the vampire slayer?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2152 / 5810 [b'what teams are in the american league west?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2153 / 5810 [b'what books did robert burns wrote?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2154 / 5810 [b'where does drogba play now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2155 / 5810 [b'who owns chrysler corporation 2012?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2156 / 5810 [b'what are the name of mitt romney sons?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2157 / 5810 [b'what was the cause of death of larry hagman?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2158 / 5810 [b'what is the rainforest in south america called?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2159 / 5810 [b'what school did sir isaac newton go to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2160 / 5810 [b"what was robert hooke's contributions to science?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2161 / 5810 [b'how many major dialects are there in china?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2162 / 5810 [b'in which country is mount everest found?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2163 / 5810 [b'what form of government does germany use?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2164 / 5810 [b'what age do scottish people go to university?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2165 / 5810 [b'what language do haitian speak?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2166 / 5810 [b'who is nick grimshaw?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2167 / 5810 [b'what did florence sabin do?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2168 / 5810 [b'who played betty rizzo in grease?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2169 / 5810 [b'who played wesley crusher on star trek the next generation?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2170 / 5810 [b'when did sherlock holmes live?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2171 / 5810 [b'where did audie murphy grow up?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2172 / 5810 [b'what school does bart simpson go to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2173 / 5810 [b'where is mark sanchez now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2174 / 5810 [b'where was the battle of verdun ww1?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2175 / 5810 [b'what year did kobe bryant go to high school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2176 / 5810 [b'where is okemos michigan?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2177 / 5810 [b'where did caroline kennedy go to school?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2178 / 5810 [b'what type of government is the us government?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2179 / 5810 [b"what is shakespeare's parents names?"]: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2180 / 5810 [b'what was sir arthur conan doyle famous for?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2181 / 5810 [b'who is the ravens coach?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2182 / 5810 [b'what college did ron jaworski go to?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2183 / 5810 [b'what team does allen iverson play for now?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2184 / 5810 [b'where did sir richard grenville explore?']: {
    Skip this question, already saved.
  } [0.000s]
  Entering Q 2185 / 5810 [b'what years did the atlanta braves win the world series?']: {
    Read 12 links from file.
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [4, 6) (atlanta braves) == m.0x2p (Atlanta_Braves) {'score': 41648.601303, 'source': 0.0}
      #01 Entity: [8, 10) (world series) == m.0fjp3 (World_Series) {'score': 15589.844692, 'source': 0.0}
      #02 Type: [9, 10) (series) == film.film_series (film series) {'sim': 0.805849}
      #03 Type: [9, 10) (series) == travel.guidebook_series (guidebook series) {'sim': 0.805833}
      #04 Type: [1, 4) (years did the) == time.day_of_year (day of year) {'sim': 0.803403}
      #05 Type: [9, 10) (series) == comic_books.comic_book_series (comic book series) {'sim': 0.802737}
      #06 Type: [9, 10) (series) == visual_art.art_series (art series) {'sim': 0.798734}
      #07 Type: [9, 10) (series) == book.literary_series (literary series) {'sim': 0.786984}
      #08 Type: [9, 10) (series) == conferences.conference_series (conference series) {'sim': 0.785124}
      #09 Type: [9, 10) (series) == book.book_edition_series (book edition series) {'sim': 0.777785}
      #10 Type: [1, 4) (years did the) == media_common.lost_work (lost work) {'sim': 0.775522}
      #11 Type: [9, 10) (series) == book.series_editor (series editor) {'sim': 0.743742}
    } [0.000s]
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:15:41) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0fjp3 ?p1 ?o1 . }
        [2020-12-03 14:15:41] SPARQL hit!
        FBHelper: 66554 domain + 65935 range info loaded.
        FBHelper: 1729 mediator types loaded.
        Filt_Query_Ret = 4 / 13 ( 0.172s)
        FBHelper: 11388 inverse predicate info loaded.
        [Len-1||F1/2||2/2-1] (2020-12-03 14:15:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 fb:m.0x2p . }
          [2020-12-03 14:15:41] SPARQL hit!
          Filt_Query_Ret = 4 / 4 ( 0.000s)
        } [0.000s]
      } [0.188s]
      [Len-1||F2/2] (2020-12-03 14:15:41) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0x2p ?p1 ?o1 . }
        [2020-12-03 14:15:41] SPARQL hit!
        Filt_Query_Ret = 14 / 31 ( 0.000s)
        [Len-1||F2/2||1/2-1] (2020-12-03 14:15:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0x2p ?p1 ?o1 . ?o1 ?p2 fb:m.0fjp3 . }
          [2020-12-03 14:15:41] SPARQL hit!
          Filt_Query_Ret = 2 / 2 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-2||F1/2] (2020-12-03 14:15:41) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:41] SPARQL hit!
        Filt_Query_Ret = 2 / 132 ( 0.000s)
        [Len-2||F1/2||2/2-1] (2020-12-03 14:15:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0x2p . }
          [2020-12-03 14:15:41] SPARQL hit!
          Filt_Query_Ret = 0 / 56 ( 0.000s)
        } [0.000s]
        [Len-2||F1/2||2/2-2] (2020-12-03 14:15:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0x2p . }
          [2020-12-03 14:15:41] SPARQL hit!
          Filt_Query_Ret = 0 / 8 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F2/2] (2020-12-03 14:15:41) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0x2p ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:41] SPARQL hit!
        Filt_Query_Ret = 33 / 382 ( 0.002s)
        [Len-2||F2/2||1/2-1] (2020-12-03 14:15:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0x2p ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0fjp3 . }
          [2020-12-03 14:15:41] SPARQL hit!
          Filt_Query_Ret = 0 / 28 ( 0.000s)
        } [0.000s]
        [Len-2||F2/2||1/2-2] (2020-12-03 14:15:41) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0x2p ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0fjp3 . }
          [2020-12-03 14:15:41] SPARQL hit!
          Filt_Query_Ret = 1 / 7 ( 0.000s)
        } [0.000s]
      } [0.002s]
      60 coarse schemas retrieved from scratch.
      Calculating F1 for 60 coarse schemas: {
        Current: 0 / 60
        Checking schema 0 / 60: {
          [('Main', '==', 'm.0fjp3', ['time.recurring_event.instances'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 106, P = 0.009434, R = 1.000000, F1 = 0.018692
        } [0.000s]
        Checking schema 1 / 60: {
          [('Main', '==', 'm.0fjp3', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 2 / 60: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 110, P = 0.009091, R = 1.000000, F1 = 0.018018
        } [0.000s]
        Checking schema 3 / 60: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.league'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.league ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 4 / 60: {
          [('Main', '==', 'm.0fjp3', ['time.recurring_event.instances']), ('Entity', '==', 'm.0x2p', ['sports.sports_championship_event.runner_up'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:sports.sports_championship_event.runner_up fb:m.0x2p . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 5 / 60: {
          [('Main', '==', 'm.0fjp3', ['time.recurring_event.instances']), ('Entity', '==', 'm.0x2p', ['sports.sports_championship_event.champion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:sports.sports_championship_event.champion fb:m.0x2p . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 6 / 60: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.events']), ('Entity', '==', 'm.0x2p', ['sports.sports_championship_event.runner_up'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:sports.sports_championship_event.runner_up fb:m.0x2p . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 60: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.events']), ('Entity', '==', 'm.0x2p', ['sports.sports_championship_event.champion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:sports.sports_championship_event.champion fb:m.0x2p . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 8 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:baseball.baseball_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 9 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0x2p fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 10 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.team_mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 11 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.previously_known_as'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.previously_known_as ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 12 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.league'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:baseball.baseball_team.league ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 13 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.current_manager'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:baseball.baseball_team.current_manager ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 14 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 15 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 16 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.championships'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.championships ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 17 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.historical_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:baseball.baseball_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 18 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.division'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:baseball.baseball_team.division ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.professional_sports_team.owner_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.championships']), ('Entity', '==', 'm.0fjp3', ['time.event.instance_of_recurring_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.championships ?o1 . ?o1 fb:time.event.instance_of_recurring_event fb:m.0fjp3 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 23 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.championships']), ('Entity', '==', 'm.0fjp3', ['sports.sports_championship_event.championship'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0x2p fb:sports.sports_team.championships ?o1 . ?o1 fb:sports.sports_championship_event.championship fb:m.0fjp3 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 24 / 60: {
          [('Main', '==', 'm.0fjp3', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fjp3 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 60: {
          [('Main', '==', 'm.0fjp3', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fjp3 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 108, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 30 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 31 / 60: {
          [('Main', '==', 'm.0x2p', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 32 / 60: {
          [('Main', '==', 'm.0x2p', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 33 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 34 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 35 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.from ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 36 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.current_coaches', 'baseball.current_coaching_tenure.coaching_position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.coaching_position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 37 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.wins'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.wins ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 38 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 39 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 40 / 60: {
          [('Main', '==', 'm.0x2p', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 41 / 60: {
          [('Main', '==', 'm.0x2p', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 42 / 60: {
          [('Main', '==', 'm.0x2p', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 43 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 44 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.school'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.school ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 45 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.to ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 46 / 60: {
          [('Main', '==', 'm.0x2p', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 47 / 60: {
          [('Main', '==', 'm.0x2p', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 48 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 49 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.current_coaches', 'baseball.current_coaching_tenure.baseball_coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.baseball_coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 50 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.losses'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.losses ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 51 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 52 / 60: {
          [('Main', '==', 'm.0x2p', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 53 / 60: {
          [('Main', '==', 'm.0x2p', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.pick_overall'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0x2p fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.pick_overall ?o2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.draft'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.draft ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.manager'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.manager ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 57 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 58 / 60: {
          [('Main', '==', 'm.0x2p', ['baseball.baseball_team.current_coaches', 'baseball.current_coaching_tenure.baseball_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.baseball_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 59 / 60: {
          [('Main', '==', 'm.0x2p', ['sports.sports_team.league', 'sports.sports_league_participation.league']), ('Entity', '==', 'm.0fjp3', ['sports.sports_league.championship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0x2p fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:sports.sports_league.championship fb:m.0fjp3 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:15:41] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        57 / 60 coarse schemas kept with ans_size > 0.
      } [0.006s]
      Coarse level ended, resulting in 57 schemas.
    } [0.197s]
    Type level searching (total types = 10): {
      Current: 0 / 57
[{'time.event'}]
      FBHelper: 1870 sub/super type pairs loaded.
[{'book.written_work'}]
[{'sports.sports_championship_event'}]
[{'sports.sports_league'}]
[{'time.event'}]
[{'time.event'}]
[{'sports.sports_championship_event'}]
[{'sports.sports_championship_event'}]
[{'type.datetime'}]
[{'sports.mascot'}]
[{'sports.defunct_sports_team'}]
[{'baseball.baseball_league'}]
[{'baseball.baseball_manager'}]
[{'sports.sports_team_location'}]
[{'visual_art.color'}]
[{'sports.sports_championship_event'}]
[{'baseball.baseball_division'}]
[{'sports.sport'}]
[{'sports.sports_facility'}]
[{'sports.sports_team_owner'}]
[{'sports.sports_championship_event'}]
[{'sports.sports_championship_event'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'baseball.baseball_team_stats'}, {'baseball.baseball_team'}]
[{'baseball.baseball_team_stats'}, {'sports.sports_league_season'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'sports.sports_league_draft_pick'}, {'sports.professional_sports_team'}]
[{'baseball.baseball_historical_managerial_position'}, {'baseball.baseball_team'}]
[{'baseball.baseball_historical_managerial_position'}, {'type.datetime'}]
[{'baseball.current_coaching_tenure'}, {'baseball.baseball_coaching_position'}]
[{'baseball.baseball_team_stats'}, {'type.int'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_league_draft_pick'}, {'education.educational_institution'}]
[{'baseball.baseball_historical_managerial_position'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'baseball.current_coaching_tenure'}, {'baseball.baseball_coach'}]
[{'baseball.baseball_team_stats'}, {'type.int'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'sports.sports_league_draft_pick'}, {'type.int'}]
[{'sports.sports_league_draft_pick'}, {'sports.sports_league_draft'}]
[{'baseball.baseball_historical_managerial_position'}, {'baseball.baseball_manager'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'baseball.current_coaching_tenure'}, {'baseball.baseball_team'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
      0 typed schemas retrieved from 57 coarse schemas.
      Calculating F1 for 0 typed schemas: {
        0 / 0 typed schemas kept with ans_size > 0.
      } [0.000s]
      Typed level ended, resulting in 57 schemas.
    } [0.012s]
    Time level searching (total times = 0): {
      Current: 0 / 57
      FBHelper: 31940 predicate names loaded.
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [{'baseball.current_coaching_tenure.started'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'baseball.current_coaching_tenure.started'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_league_draft.year'}]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'baseball.current_coaching_tenure.started'}, set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 57 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 57 schemas.
    } [0.213s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 57
[{'time.event.start_date', 'time.event.end_date'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set(), set()]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[{'baseball.current_coaching_tenure.started'}, set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[{'baseball.current_coaching_tenure.started'}, set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'award.award_nomination.year'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), set()]
[set(), {'sports.sports_league_draft.year'}]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[set(), set()]
[{'baseball.current_coaching_tenure.started'}, set()]
[set(), set()]
      0 ordinal schemas retrieved from 57 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 57 schemas.
    } [0.003s]
    [2020-12-03 14:15:41] buffer saved.
    57 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2185_schema].
  } [4.134s]
  Entering Q 2186 / 5810 [b'when does school start in hillsborough county?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [2, 3) (school) == m.06zdj (school) {'score': 13372.53158, 'source': 2.0}
      #01 Entity: [5, 7) (hillsborough county) == m.0jj6k (Hillsborough_County%2c_Florida) {'score': 30356.904649, 'source': 0.0}
      #02 Entity: [5, 7) (hillsborough county) == m.0n5yh (Hillsborough_County%2c_New_Hampshire) {'score': 30.496127, 'source': 0.0}
      #03 Type: [2, 3) (school) == education.school (school) {'sim': 1.0}
      #04 Type: [2, 3) (school) == education.school_district (school district) {'sim': 0.861301}
      #05 Type: [6, 7) (county) == location.hud_county_place (hud county place) {'sim': 0.841621}
      #06 Type: [6, 7) (county) == location.us_county (us county) {'sim': 0.838246}
      #07 Type: [2, 5) (school start in) == fictional_universe.school_in_fiction (school in fiction) {'sim': 0.816228}
      #08 Type: [2, 3) (school) == education.school_mascot (school mascot) {'sim': 0.805989}
      #09 Type: [2, 3) (school) == education.school_category (school category) {'sim': 0.80301}
      #10 Type: [2, 3) (school) == education.school_newspaper (school newspaper) {'sim': 0.795735}
      #11 Type: [2, 3) (school) == sports.school_sports_team (school sports team) {'sim': 0.786386}
      #12 Type: [2, 3) (school) == education.school_magazine (school magazine) {'sim': 0.77129}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:15:46) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06zdj ?p1 ?o1 . }
        [2020-12-03 14:15:46] SPARQL hit!
        Filt_Query_Ret = 8 / 18 ( 0.000s)
        [Len-1||F1/3||2/3-1] (2020-12-03 14:15:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 fb:m.0jj6k . }
          [2020-12-03 14:15:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 fb:m.0jj6k . }
            Query return lines = 0
          } [9.012s]
          Filt_Query_Ret = 0 / 0 ( 9.012s)
        } [9.012s]
        [Len-1||F1/3||3/3-1] (2020-12-03 14:15:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 fb:m.0n5yh . }
          [2020-12-03 14:15:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 fb:m.0n5yh . }
            Query return lines = 0
          } [0.621s]
          Filt_Query_Ret = 0 / 0 ( 0.621s)
        } [0.621s]
      } [9.633s]
      [Len-1||F2/3] (2020-12-03 14:15:55) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0jj6k ?p1 ?o1 . }
        [2020-12-03 14:15:55] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0jj6k ?p1 ?o1 . }
          Query return lines = 38
        } [0.005s]
        Filt_Query_Ret = 11 / 38 ( 0.005s)
        [Len-1||F2/3||1/3-1] (2020-12-03 14:15:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jj6k ?p1 ?o1 . ?o1 ?p2 fb:m.06zdj . }
          [2020-12-03 14:15:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jj6k ?p1 ?o1 . ?o1 ?p2 fb:m.06zdj . }
            Query return lines = 0
          } [0.333s]
          Filt_Query_Ret = 0 / 0 ( 0.333s)
        } [0.333s]
      } [0.339s]
      [Len-1||F3/3] (2020-12-03 14:15:56) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0n5yh ?p1 ?o1 . }
        [2020-12-03 14:15:56] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0n5yh ?p1 ?o1 . }
          Query return lines = 34
        } [0.006s]
        Filt_Query_Ret = 11 / 34 ( 0.007s)
        [Len-1||F3/3||1/3-1] (2020-12-03 14:15:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0n5yh ?p1 ?o1 . ?o1 ?p2 fb:m.06zdj . }
          [2020-12-03 14:15:56] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0n5yh ?p1 ?o1 . ?o1 ?p2 fb:m.06zdj . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.018s]
      [Len-2||F1/3] (2020-12-03 14:15:56) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:15:56] SPARQL hit!
        Filt_Query_Ret = 2 / 207 ( 0.002s)
        [Len-2||F1/3||2/3-1] (2020-12-03 14:15:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0jj6k . }
          [2020-12-03 14:15:56] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0jj6k . }
            Query return lines = 0
          } [0.419s]
          Filt_Query_Ret = 0 / 0 ( 0.419s)
        } [0.419s]
        [Len-2||F1/3||2/3-2] (2020-12-03 14:15:56) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0jj6k . }
          [2020-12-03 14:15:56] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0jj6k . }
            Query return lines = 1
          } [1.950s]
          Filt_Query_Ret = 0 / 1 ( 1.950s)
        } [1.950s]
        [Len-2||F1/3||3/3-1] (2020-12-03 14:15:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0n5yh . }
          [2020-12-03 14:15:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0n5yh . }
            Query return lines = 0
          } [0.051s]
          Filt_Query_Ret = 0 / 0 ( 0.051s)
        } [0.051s]
        [Len-2||F1/3||3/3-2] (2020-12-03 14:15:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0n5yh . }
          [2020-12-03 14:15:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06zdj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0n5yh . }
            Query return lines = 1
          } [2.142s]
          Filt_Query_Ret = 0 / 1 ( 2.142s)
        } [2.142s]
      } [4.565s]
      [Len-2||F2/3] (2020-12-03 14:16:00) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jj6k ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:00] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0jj6k ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 0
        } [1.541s]
        Filt_Query_Ret = 0 / 0 ( 1.541s)
      } [1.541s]
      [Len-2||F3/3] (2020-12-03 14:16:02) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0n5yh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:02] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0n5yh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 0
        } [3.001s]
        Filt_Query_Ret = 0 / 0 ( 3.001s)
      } [3.001s]
      32 coarse schemas retrieved from scratch.
      Calculating F1 for 32 coarse schemas: {
        Current: 0 / 32
        Checking schema 0 / 32: {
          [('Main', '==', 'm.06zdj', ['base.skosbase.vocabulary_equivalent_topic.equivalent_concept'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 1
            Final Answer: {'Schools'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 1 / 32: {
          [('Main', '==', 'm.06zdj', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 16
            Final Answer: {'No trace of slavery ought to mix with the studies of the freeborn man. No study, pursued under compulsion, remains rooted in the memory.', 'Jails and prisons are the complement of schools; so many less as you have of the latter, so many more must you have of the former.', 'It is always safe to learn, even from our enemies; seldom safe to venture to instruct, even our friends.', 'In the schoolroom her quick mind had taken readily that strong starch of unexplained rules and disconnected facts which saves ignorance from any painful sense of limpness.', 'I was asked to memorize what I did not understand; and, my memory being so good, it refused to be insulted in that manner.', 'My plan of instruction is extremely simple and limited. They learn, on week-days, such coarse works as may fit them for servants. I allow of no writing for the poor. My object is not to make fanatics, but to train up the lower classes in habits of industry and piety.', "School-days, I believe, are the unhappiest in the whole span of human existence. They are full of dull, unintelligible tasks, new and unpleasant ordinances, brutal violations of common sense and common decency. It doesn't take a reasonably bright boy long to discover that most of what is rammed into him is nonsense, and that no one really cares very much whether he learns it or not.", 'I have found it; I have discovered the cause of all the misfortunes which befell him. A public school, Joseph, was the cause of all the calamities which he afterwards suffered. Public schools are the nurseries of all vice and immorality.', 'Minerva House was a finishing establishment for young ladies, where some twenty girls of the ages from thirteen to nineteen inclusive, acquired a smattering of everything and a knowledge of nothing.', 'Were I to deduce any system from my feelings on leaving Eton, it might be called The Theory of Permanent Adolescence. It is the theory that the experiences undergone by boys at the great public schools, their glories and disappointments, are so intense as to dominate their lives and to arrest their development. From these it results that the greater part of the ruling class remains adolescent, school-minded, self-conscious, cowardly, sentimental, and in the last analysis homosexual.', 'The first idea that the child must acquire, in order to be actively disciplined, is that of the difference between good and evil; and the task of the educator lies in seeing that the child does not confound good with immobility, and evil with activity.', "That's the public-school system all over. They may kick you out, but they never let you down.", 'No one can look back on his schooldays and say with truth that they were altogether unhappy.', 'The chief reason for going to school is to get the impression fixed for life that there is a book side for everything.', 'Probably the battle of Waterloo was won on the playing-fields of Eton, but the opening battles of all subsequent wars have been lost there.', 'Of all cursed places under the sun, where the hungriest soul can hardly pick up a few grains of knowledge, a girls boarding-school is the worst. They are called finishing schools, and the name tells accurately what they are. They finish everything but imbecility and weakness, and that they cultivate. They are nicely adapted machines for experimenting on the question, Into how little space a human being can be crushed? I have seen some souls so compressed that they would have fitted into a small thimble, and found room to move there -- wide room. A woman who has been for many years at one of those places carries the mark of the beast on her till she dies.'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 32: {
          [('Main', '==', 'm.06zdj', ['tv.tv_genre.programs'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:tv.tv_genre.programs ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:tv.tv_genre.programs ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 14
            Final Answer: {'Hello My Teacher', 'Miley Jab Hum Tum', 'The X-Family', "Queen's", 'The Legend of Brown Sugar Chivalries', 'K.O.3an Guo', 'Sharp 2', 'KO One', 'Hikaru no Go', 'The White Shadow', 'Bump Off Lover', 'Another', 'Mysterious Incredible Terminator', 'Brown Sugar Macchiato'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 3 / 32: {
          [('Main', '==', 'm.06zdj', ['base.animemanga.anime_manga_genre.anime_manga_franchises'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.animemanga.anime_manga_genre.anime_manga_franchises ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.animemanga.anime_manga_genre.anime_manga_franchises ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 2
            Final Answer: {'Hikaru no Go', 'IS'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 32: {
          [('Main', '==', 'm.06zdj', ['base.onephylogeny.type_of_thing.includes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.onephylogeny.type_of_thing.includes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.onephylogeny.type_of_thing.includes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 1
            Final Answer: {'Classroom'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 32: {
          [('Main', '==', 'm.06zdj', ['fictional_universe.fictional_organization_type.organizations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:fictional_universe.fictional_organization_type.organizations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:fictional_universe.fictional_organization_type.organizations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 3
            Final Answer: {"St. Austin's", 'Hogwarts School of Witchcraft and Wizardry', 'Durmstrang Institute for Magical Learning'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 6 / 32: {
          [('Main', '==', 'm.06zdj', ['architecture.building_function.buildings'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:architecture.building_function.buildings ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:architecture.building_function.buildings ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 8
            Final Answer: {'DeLand Hall', 'Johnson School', 'Edgewood Fine Arts Academy', 'Divinity School, Oxford', 'Ursuline Academy', 'Mayfield School', 'Lyndhurst', 'Jefferson School'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 7 / 32: {
          [('Main', '==', 'm.06zdj', ['base.fires.type_of_flammable_thing.burnt_in_type_of_fire'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.fires.type_of_flammable_thing.burnt_in_type_of_fire ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06zdj fb:base.fires.type_of_flammable_thing.burnt_in_type_of_fire ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 1
            Final Answer: {'School fire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.us_county.hud_section_8_area'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.us_county.hud_section_8_area ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.us_county.hud_section_8_area ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'Tampa-St. Petersburg-Clearwater, FL MSA HUD Section 8 Area'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 9 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jj6k fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 WHERE { fb:m.0jj6k fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'1834'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 10 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 397
            Final Answer: {'US Census 2000 Tract 12057012205', 'Adamsville', 'US Census 2000 Tract 12057006500', 'IADT Tampa', 'Branchton', 'Ybor City Museum State Park', 'US Census 2000 Tract 12057014107', 'School District of Hillsborough County', 'US Census 2000 Tract 12057011611', 'US Census 2000 Tract 12057010804', 'Sulphur Springs', 'US Census 2000 Tract 12057010808', 'US Census 2000 Tract 12057011506', 'House at 124 Baltic Circle', 'Boyette', 'US Census 2000 Tract 12057013002', 'US Census 2000 Tract 12057010203', 'Palm', 'US Census 2000 Tract 12057010701', 'Progress Village', 'Lake Fern', 'Gary', 'US Census 2000 Tract 12057010900', 'US Census 2000 Tract 12057012208', 'US Census 2000 Tract 12057005900', 'US Census 2000 Tract 12057007300', 'US Census 2000 Tract 12057013308', 'US Census 2000 Tract 12057010205', 'House at 59 Aegean Avenue', 'US Census 2000 Tract 12057005700', 'Greater Carrollwood', 'US Census 2000 Tract 12057011205', 'US Census 2000 Tract 12057013805', 'Lillibridge', 'US Census 2000 Tract 12057003100', 'House at 97 Adriatic Avenue', 'US Census 2000 Tract 12057003900', 'Greater Northdale', 'US Census 2000 Tract 12057010401', 'US Census 2000 Tract 12057011705', 'Shilow', 'Tampa International Airport', 'Hillsborough River State Park', 'Egmont Key', 'Port Sutton', 'US Census 2000 Tract 12057012002', 'US Census 2000 Tract 12057011511', 'US Census 2000 Tract 12057011011', 'US Census 2000 Tract 12057001700', 'Sydney', 'Dover', 'US Census 2000 Tract 12057010805', 'US Census 2000 Tract 12057011410', 'US Census 2000 Tract 12057013310', 'US Census 2000 Tract 12057011603', 'Spivey', "Town 'n' Country", 'Hillsborough County / County Place 1205799999', 'Sunset Beach', 'US Census 2000 Tract 12057000900', 'US Census 2000 Tract 12057012303', 'US Census 2000 Tract 12057013405', 'US Census 2000 Tract 12057011416', 'US Census 2000 Tract 12057011513', 'US Census 2000 Tract 12057013307', 'US Census 2000 Tract 12057013910', 'US Census 2000 Tract 12057001600', 'Chapman', 'Tampa', 'Glover School', 'Valrico', 'US Census 2000 Tract 12057011009', 'Temple Terrace Junction', 'US Census 2000 Tract 12057010500', 'The Art Institute of Tampa', 'US Census 2000 Tract 12057004900', 'C. W. Bill Young Regional Reservoir', 'US Census 2000 Tract 12057001500', 'Pleasant Grove', 'Clair-Mel City', 'Knights', 'US Census 2000 Tract 12057011708', 'US Census 2000 Tract 12057011007', 'East Lake-Orient Park', 'Forest Hills', 'Lithia', 'US Census 2000 Tract 12057011108', 'US Census 2000 Tract 12057010806', 'US Census 2000 Tract 12057011606', 'US Census 2000 Tract 12057010107', 'US Census 2000 Tract 12057010803', 'Jolly Corner', 'US Census 2000 Tract 12057011516', 'Brandon', 'Beattys Corner', 'US Census 2000 Tract 12057013602', 'Marvina', 'US Census 2000 Tract 12057013906', 'US Census 2000 Tract 12057005000', 'Cosme', 'US Census 2000 Tract 12057001900', 'Keysville', 'US Census 2000 Tract 12057011412', 'Kennedy Hill', 'Gardenville', 'US Census 2000 Tract 12057006400', 'Apollo Beach', 'Coronet', 'US Census 2000 Tract 12057014002', 'US Census 2000 Tract 12057010108', 'US Census 2000 Tract 12057012403', 'US Census 2000 Tract 12057013803', 'Fort Lonesome', 'US Census 2000 Tract 12057013907', 'US Census 2000 Tract 12057004300', 'US Census 2000 Tract 12057005400', 'US Census 2000 Tract 12057013206', 'US Census 2000 Tract 12057013207', 'US Census 2000 Tract 12057013100', 'US Census 2000 Tract 12057011512', 'US Census 2000 Tract 12057010807', 'US Census 2000 Tract 12057010305', 'Sun City Center', 'US Census 2000 Tract 12057006200', 'Antioch', 'West Tampa', 'Foxs Corner', 'US Census 2000 Tract 12057010207', 'Cheval', 'US Census 2000 Tract 12057012402', 'US Census 2000 Tract 12057011707', 'US Census 2000 Tract 12057013003', 'US Census 2000 Tract 12057011802', 'Tampa-St. Petersburg-Clearwater', 'US Census 2000 Tract 12057006600', 'US Census 2000 Tract 12057011509', 'US Census 2000 Tract 12057000200', 'US Census 2000 Tract 12057003500', 'US Census 2000 Tract 12057003200', 'US Census 2000 Tract 12057010206', 'US Census 2000 Tract 12057013312', 'US Census 2000 Tract 12057005101', 'US Census 2000 Tract 12057013504', 'Greater Sun Center', 'US Census 2000 Tract 12057012104', 'US Census 2000 Tract 12057013501', 'Riverview', 'US Census 2000 Tract 12057011411', 'Deer Park', 'Bruing', 'US Census 2000 Tract 12057002500', 'Harney', 'US Census 2000 Tract 12057013404', 'US Census 2000 Tract 12057002900', 'US Census 2000 Tract 12057013908', 'US Census 2000 Tract 12057005800', 'US Census 2000 Tract 12057013409', 'US Census 2000 Tract 12057004100', 'North Ruskin', 'US Census 2000 Tract 12057011803', 'US Census 2000 Tract 12057011006', 'US Census 2000 Tract 12057011612', 'Drew Park', 'US Census 2000 Tract 12057000500', 'US Census 2000 Tract 12057014109', 'US Census 2000 Tract 12057013909', 'US Census 2000 Tract 12057011902', 'US Census 2000 Tract 12057012501', 'Palm River-Clair Mel', 'Plant City', 'US Census 2000 Tract 12057011104', 'Clarkwild', 'Trapnell', 'US Census 2000 Tract 12057011507', 'US Census 2000 Tract 12057010208', 'US Census 2000 Tract 12057000300', 'Ybor City', 'Wimauma', 'Remlap', 'South Tampa', 'US Census 2000 Tract 12057013701', 'Goldstein', 'Temple Terrace', 'US Census 2000 Tract 12057013406', 'East Tampa', 'US Census 2000 Tract 12057013601', 'House at 84 Adalia Avenue', 'US Census 2000 Tract 12057011408', 'US Census 2000 Tract 12057014106', 'US Census 2000 Tract 12057011406', 'US Census 2000 Tract 12057011515', 'US Census 2000 Tract 12057014004', 'Mango', 'US Census 2000 Tract 12057001300', 'Egypt Lake-Leto', 'Citrus Park', 'Rocky Creek', 'US Census 2000 Tract 12057005300', 'US Census 2000 Tract 12057010304', 'US Census 2000 Tract 12057011804', 'Pebble Creek', 'House at 125 Baltic Circle', 'Tarpon', 'Cockroach Key', 'US Census 2000 Tract 12057010204', 'US Census 2000 Tract 12057012103', 'US Census 2000 Tract 12057013912', 'US Census 2000 Tract 12057012204', 'US Census 2000 Tract 12057000401', 'US Census 2000 Tract 12057012600', 'US Census 2000 Tract 12057004500', 'House at 53 Aegean Avenue', 'Moriczville', 'US Census 2000 Tract 12057004800', 'Youmans', 'US Census 2000 Tract 12057010303', 'Fort Foster', 'Limona', 'US Census 2000 Tract 12057006900', 'Orient Park', 'US Census 2000 Tract 12057014003', 'US Census 2000 Tract 12057013911', 'US Census 2000 Tract 12057006801', 'US Census 2000 Tract 12057011003', 'US Census 2000 Tract 12057010106', 'US Census 2000 Tract 12057011008', 'US Census 2000 Tract 12057013203', 'US Census 2000 Tract 12057011504', 'US Census 2000 Tract 12057001000', 'US Census 2000 Tract 12057005500', 'US Census 2000 Tract 12057012900', 'US Census 2000 Tract 12057011010', 'US Census 2000 Tract 12057007100', 'US Census 2000 Tract 12057011610', 'US Census 2000 Tract 12057000800', 'US Census 2000 Tract 12057002600', 'US Census 2000 Tract 12057003800', 'US Census 2000 Tract 12057005102', 'Palma Ceia', 'Egmont Key State Park', 'US Census 2000 Tract 12057011203', 'US Census 2000 Tract 12057012800', 'US Census 2000 Tract 12057003400', 'US Census 2000 Tract 12057010402', 'US Census 2000 Tract 12057013801', 'Westchase', 'Gulf City', 'US Census 2000 Tract 12057011605', 'US Census 2000 Tract 12057000402', 'US Census 2000 Tract 12057004700', 'Lake Magdalene', 'US Census 2000 Tract 12057012206', 'US Census 2000 Tract 12057012701', 'Carrollwood', 'US Census 2000 Tract 12057011103', 'US Census 2000 Tract 12057002000', 'Nowatney', 'US Census 2000 Tract 12057013903', 'Ruskin', 'US Census 2000 Tract 12057011414', 'US Census 2000 Tract 12057013306', 'US Census 2000 Tract 12057011608', 'US Census 2000 Tract 12057006100', 'US Census 2000 Tract 12057002100', 'US Census 2000 Tract 12057010103', 'US Census 2000 Tract 12057012401', 'Egypt Lake', 'Aldermans Ford', 'US Census 2000 Tract 12057013407', 'US Census 2000 Tract 12057010105', 'Valroy', 'US Census 2000 Tract 12057014108', 'US Census 2000 Tract 12057012301', 'US Census 2000 Tract 12057002400', 'US Census 2000 Tract 12057014105', 'US Census 2000 Tract 12057011107', 'Sixmile Creek', 'US Census 2000 Tract 12057011005', 'US Census 2000 Tract 12057011302', 'US Census 2000 Tract 12057002300', 'US Census 2000 Tract 12057012106', 'Stetson University College of Law', 'Midway', 'US Census 2000 Tract 12057012702', 'US Census 2000 Tract 12057014006', 'US Census 2000 Tract 12057006000', 'US Census 2000 Tract 12057007200', 'Durant', 'US Census 2000 Tract 12057004600', 'US Census 2000 Tract 12057001400', 'Fish Hawk', 'US Census 2000 Tract 12057011105', 'University', 'US Census 2000 Tract 12057001800', 'Carrollwood Village', 'US Census 2000 Tract 12057013311', 'US Census 2000 Tract 12057011204', 'US Census 2000 Tract 12057012207', 'US Census 2000 Tract 12057002200', 'North Tampa Heights', 'Balm', 'Snows Corner', 'US Census 2000 Tract 12057011301', 'US Census 2000 Tract 12057011413', 'US Census 2000 Tract 12057011613', 'Pinecrest', 'US Census 2000 Tract 12057013001', 'West Park', 'US Census 2000 Tract 12057013309', 'Lutz', 'Bealsville', 'Remington College, Tampa', 'US Census 2000 Tract 12057007000', 'US Census 2000 Tract 12057010600', 'Gibsonton', 'US Census 2000 Tract 12057011510', 'Mount Enon', 'US Census 2000 Tract 12057011505', 'US Census 2000 Tract 12057012304', 'Rattlesnake', 'US Census 2000 Tract 12057013802', 'US Census 2000 Tract 12057011901', 'US Census 2000 Tract 12057014104', 'Mango Hills', 'House at 161 Bosporous Avenue', 'US Census 2000 Tract 12057012502', 'US Census 2000 Tract 12057003600', 'West Chase', 'US Census 2000 Tract 12057013804', 'US Census 2000 Tract 12057013505', 'Palm River', 'US Census 2000 Tract 12057011415', 'US Census 2000 Tract 12057013702', 'US Census 2000 Tract 12057000600', 'Upper Tampa Bay Park', 'US Census 2000 Tract 12057010702', 'US Census 2000 Tract 12057011514', 'US Census 2000 Tract 12057011409', 'US Census 2000 Tract 12057006700', 'US Census 2000 Tract 12057003000', 'US Census 2000 Tract 12057004400', 'US Census 2000 Tract 12057000700', 'Historic Turkey Creek High School', 'US Census 2000 Tract 12057013503', 'US Census 2000 Tract 12057011407', 'US Census 2000 Tract 12057001100', 'US Census 2000 Tract 12057013204', 'US Census 2000 Tract 12057013408', 'US Census 2000 Tract 12057011609', 'Fort Lonely', 'US Census 2000 Tract 12057011508', 'Sun City', 'US Census 2000 Tract 12057004200', 'Little Manatee River State Park', 'US Census 2000 Tract 12057006300', 'US Census 2000 Tract 12057013208', 'House at 190 Bosporous Avenue', 'US Census 2000 Tract 12057012001', 'Bloomingdale', 'US Census 2000 Tract 12057011903', 'US Census 2000 Tract 12057014005', 'US Census 2000 Tract 12057012105', 'US Census 2000 Tract 12057004000', 'House at 132 Baltic Circle', 'Seffner', 'Hillsborough Community College', 'US Census 2000 Tract 12057013313', 'US Census 2000 Tract 12057001200', 'US Census 2000 Tract 12057011607', 'US Census 2000 Tract 12057013305', 'US Census 2000 Tract 12057003700', 'US Census 2000 Tract 12057002800', 'US Census 2000 Tract 12057011106', 'Port Tampa', 'US Census 2000 Tract 12057000100', 'US Census 2000 Tract 12057006802', 'US Census 2000 Tract 12057013314', 'Del Rio', 'US Census 2000 Tract 12057011706', 'Edison', 'US Census 2000 Tract 12057003300', 'US Census 2000 Tract 12057011703', 'Mullis City', 'US Census 2000 Tract 12057011206', 'Keystone', 'Welcome', 'US Census 2000 Tract 12057013205', 'US Census 2000 Tract 12057002700', 'Thonotosassa', 'Turkey Creek', 'Hopewell', 'House at 36 Aegean Avenue', 'US Census 2000 Tract 12057013004', 'Alafia River State Park'}
            Answers = 394, P = 0.002538, R = 1.000000, F1 = 0.005063
          } [0.019s]
          Answers = 394, P = 0.002538, R = 1.000000, F1 = 0.005063
        } [0.019s]
        Checking schema 11 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.us_county.hud_county_place'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.us_county.hud_county_place ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.us_county.hud_county_place ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 34
            Final Answer: {'Hillsborough County / County Place 1205799999', 'Temple Terrace', 'Cheval', 'Greater Carrollwood', 'Apollo Beach', 'East Lake-Orient Park', 'Westchase', 'Greater Northdale', 'Lutz', 'Greater Sun Center', 'Mango', 'Boyette', 'Tampa', 'Palm River-Clair Mel', 'Egypt Lake-Leto', 'Bloomingdale', 'Riverview', 'Plant City', 'Valrico', 'Lake Magdalene', 'Dover', 'Gibsonton', 'Progress Village', 'Fish Hawk', 'Citrus Park', 'Brandon', 'Keystone', 'Seffner', 'University', 'Wimauma', 'Pebble Creek', 'Thonotosassa', 'Ruskin', "Town 'n' Country"}
            Answers = 34, P = 0.029412, R = 1.000000, F1 = 0.057143
          } [0.006s]
          Answers = 34, P = 0.029412, R = 1.000000, F1 = 0.057143
        } [0.006s]
        Checking schema 12 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.us_county.county_seat'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.us_county.county_seat ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.us_county.county_seat ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'Tampa'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 13 / 32: {
          [('Main', '==', 'm.0jj6k', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'Tampa Bay Times'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.administrative_division.second_level_division_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.administrative_division.second_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.administrative_division.second_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 15 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 2
            Final Answer: {'UTC-5', 'Eastern Time Zone'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0jj6k fb:location.location.area ?o1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 WHERE { fb:m.0jj6k fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'3278.92'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 17 / 32: {
          [('Main', '==', 'm.0jj6k', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 2
            Final Answer: {'Tampa-St. Petersburg-Clearwater, FL Metropolitan Statistical Area', 'Florida'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 32: {
          [('Main', '==', 'm.0jj6k', ['user.joehughes.default_domain.transit_service_area.transit_agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:user.joehughes.default_domain.transit_service_area.transit_agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:user.joehughes.default_domain.transit_service_area.transit_agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'Hillsborough Area Regional Transit'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 19 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 1
            Final Answer: {'James Foster'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 20 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.us_county.hud_section_8_area'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.us_county.hud_section_8_area ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.us_county.hud_section_8_area ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 3
            Final Answer: {'Manchester, NH HUD Metro FMR Area', 'Hillsborough County, NH (part) HUD Metro FMR Area', 'Nashua, NH HUD Metro FMR Area'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 21 / 32: {
          [('Main', '==', 'm.0n5yh', ['symbols.namesake.named_after'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 1
            Final Answer: {'Wills Hill, 1st Marquess of Downshire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 22 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0n5yh fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 WHERE { fb:m.0n5yh fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 1
            Final Answer: {'1769'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 23 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 269
            Final Answer: {'Hudson Center', '03281', 'Riverdale', 'Beech Street Grounds', 'US Census 2000 Tract 33011010200', 'County Farm Bridge', 'US Census 2000 Tract 33011016100', '03057', 'US Census 2000 Tract 33011011500', 'Field and Stream Travel Trailer Park', 'Lyndeborough Center Historic District', 'US Census 2000 Tract 33011002903', 'Curtis Corner', 'Cricket Corner', 'Hillsborough County, NH (part) HUD Metro FMR Area', 'Silver Lake State Park', 'South Merrimack', 'Elmwood', '03103', 'Varick Park', 'US Census 2000 Tract 33011002600', 'East Milford', 'John F. Kennedy Memorial Coliseum', 'Johnson Corner', 'Stonyfield Farm', 'Hollis Depot', 'Hillsboro Upper Village', 'Bank', 'US Census 2000 Tract 33011010100', 'US Census 2000 Tract 33011000400', 'Goffs Falls', 'Clinton Village', 'Gibson Four Corners', 'Davis', 'Reeds Ferry', 'US Census 2000 Tract 33011015100', 'Hillsborough', 'US Census 2000 Tract 33011011402', 'Lyndeborough', 'Litchfield', 'Manchester', '03060', 'North Village', 'US Census 2000 Tract 33011015200', 'US Census 2000 Tract 33011000300', 'Bennington', 'US Census 2000 Tract 33011024000', 'Crotched Mountain', 'Happy Valley', 'Deering', 'South Brookline', 'Temple', '03084', 'Tavern Village', '03104', '03043', 'US Census 2000 Tract 33011002300', 'US Census 2000 Tract 33011000600', 'US Census 2000 Tract 33011200200', 'US Census 2000 Tract 33011017100', 'Pinardville', 'Hudson', 'New Ipswich Center', 'Hillsborough County / County Place 3301199999', '03049', 'US Census 2000 Tract 33011012100', '03449', 'Lincoln Park', 'Mason', 'US Census 2000 Tract 33011011401', 'North Weare', 'West Brookline', 'US Census 2000 Tract 33011001000', '03052', 'US Census 2000 Tract 33011010800', 'Perham Corner', 'Hillsboro Lower Village', 'Wilton', 'Potash Corner', 'US Census 2000 Tract 33011000101', 'Weare Reservoir', 'Amoskeag Falls', 'US Census 2000 Tract 33011023000', 'US Census 2000 Tract 33011011100', '03048', 'US Census 2000 Tract 33011019500', 'Hampshire Plaza', '03033', 'US Census 2000 Tract 33011000201', 'Wilder', 'Drury', 'US Census 2000 Tract 33011000102', 'US Census 2000 Tract 33011001400', 'Slab City', 'US Census 2000 Tract 33011016202', 'US Census 2000 Tract 33011014100', 'Sheldrick Forest Preserve', 'Levi Woodbury Homestead', '03062', 'Southern New Hampshire Fieldhouse', 'Russell', 'Baboosic Lake', 'Nashua Municipal Airport', 'Milford', 'US Census 2000 Tract 33011016201', 'Browns Corner', 'US Census 2000 Tract 33011000901', 'New England Glassworks Site', 'East Deering', 'Davisville', 'US Census 2000 Tract 33011001100', 'North Brookline', 'South Milford', 'Grenier Air Force Base', 'Weare', 'US Census 2000 Tract 33011000500', '03070', 'US Census 2000 Tract 33011012300', '03086', 'US Census 2000 Tract 33011001500', 'US Census 2000 Tract 33011001300', 'US Census 2000 Tract 33011022000', 'US Census 2000 Tract 33011025000', 'Pratt', 'US Census 2000 Tract 33011020000', 'US Census 2000 Tract 33011002200', 'Antrim Center', 'West Wilton', '03442', 'US Census 2000 Tract 33011012200', 'Southern New Hampshire Medical Center', '03440', 'US Census 2000 Tract 33011021000', 'Gill Stadium', 'Franklin Pierce Lake', 'City Hall Plaza', 'Francestown', 'West Deering', 'Merrimack', 'US Census 2000 Tract 33011000902', 'US Census 2000 Tract 33011002100', 'US Census 2000 Tract 33011019000', 'US Census 2000 Tract 33011001800', '03051', 'US Census 2000 Tract 33011002500', 'New Boston Air Force Station', 'Verizon Wireless Arena', 'South Lyndeborough', 'US Census 2000 Tract 33011001700', 'Oliver Whiting Homestead', '03110', 'Elliot Hospital', 'US Census 2000 Tract 33011011300', 'Milford CDP', 'Massabesic', 'Parker', 'Catholic Medical Center', 'Sebbins Pond', 'Goffstown', 'US Census 2000 Tract 33011002700', 'Antrim CDP', 'South Weare', 'Lawrence Corner', 'US Census 2000 Tract 33011014201', 'New Ipswich', 'Thorntons Ferry', 'Mont Vernon', 'Franklin Pierce Homestead', 'US Census 2000 Tract 33011001200', 'Daniel Cragin Mill', 'US Census 2000 Tract 33011010600', 'US Census 2000 Tract 33011010900', 'US Census 2000 Tract 33011011200', 'US Census 2000 Tract 33011010301', 'Mountain Base', 'Wilton CDP', 'Peterborough CDP', 'Sharon', 'US Census 2000 Tract 33011002902', 'Pelham', '03109', '03064', 'US Census 2000 Tract 33011014202', 'Ponemah', 'Manchester–Boston Regional Airport', '03055', 'St. Stanislaus Parish, Nashua', 'Lamson Farm', 'US Census 2000 Tract 33011018000', 'Broad Acres', 'Hancock-Greenfield Bridge', 'Wilton Center', '03244', '03063', 'US Census 2000 Tract 33011002800', 'Hollis', 'West Peterborough', 'US Census 2000 Tract 33011013100', '03045', 'Brookline', 'Greenville CDP', 'Hillsboro Center', 'US Census 2000 Tract 33011025500', 'North Pelham', 'US Census 2000 Tract 33011014300', 'Jonathan Barnes House', 'US Census 2000 Tract 33011200100', '03054', 'US Census 2000 Tract 33011022500', 'Greenville', 'Wapack National Wildlife Refuge', 'US Census 2000 Tract 33011010302', 'Amherst', 'Wapack Range', 'Antrim', 'Wapack Trail', 'US Census 2000 Tract 33011002901', '03031', 'US Census 2000 Tract 33011010400', 'Woodland Park', 'US Census 2000 Tract 33011021500', '03076', 'Mall of New Hampshire', 'Clinton Grove', 'MacDowell Colony', 'Noone', 'St. Joseph Hospital', 'North Branch', 'Klondike Corner', 'US Census 2000 Tract 33011001900', 'US Census 2000 Tract 33011010700', '03082', 'US Census 2000 Tract 33011001600', 'US Census 2000 Tract 33011002000', 'Bedford', 'Greenfield', 'Chase Village', '03047', 'US Census 2000 Tract 33011002400', 'US Census 2000 Tract 33011000800', 'Grasmere', 'Deering Reservoir', 'US Census 2000 Tract 33011018500', 'Powder Mill Pond', 'Northeast Delta Dental Stadium', '03101', 'Hancock', 'East Merrimack', 'US Census 2000 Tract 33011011000', 'High Bridge', 'West Hollis', '1886 Mine Falls Gatehouse', '03071', 'US Census 2000 Tract 33011200300', 'Nashua', 'Loverens Mill', 'Windsor', 'US Census 2000 Tract 33011000700', '03102', 'US Census 2000 Tract 33011000202', 'Holton', 'New Boston', 'Smithville', 'Peterborough', '03458', 'US Census 2000 Tract 33011010500', "Signer's House and Matthew Thornton Cemetery", 'Old County Road South Historic District'}
            Answers = 268, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 268, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 24 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.us_county.hud_county_place'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.us_county.hud_county_place ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.us_county.hud_county_place ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 11
            Final Answer: {'Hillsborough', 'Milford CDP', 'Manchester', 'Antrim CDP', 'Wilton CDP', 'Peterborough CDP', 'East Merrimack', 'Pinardville', 'Greenville CDP', 'Hillsborough County / County Place 3301199999', 'Nashua'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 25 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.us_county.county_seat'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.us_county.county_seat ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.us_county.county_seat ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 1
            Final Answer: {'Manchester'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 26 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.administrative_division.second_level_division_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.administrative_division.second_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.administrative_division.second_level_division_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 27 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 1
            Final Answer: {'Eastern Time Zone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 28 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0n5yh fb:location.location.area ?o1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 WHERE { fb:m.0n5yh fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 1
            Final Answer: {'2310'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 29 / 32: {
          [('Main', '==', 'm.0n5yh', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 5
            Final Answer: {'United States of America', 'New Hampshire', 'New England', 'North America', 'Northeastern United States'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 30 / 32: {
          [('Main', '==', 'm.06zdj', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zdj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zdj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 31 / 32: {
          [('Main', '==', 'm.06zdj', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zdj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06zdj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06zdj'}
            Query return lines = 1
            Final Answer: {'School'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        32 / 32 coarse schemas kept with ans_size > 0.
      } [0.183s]
      Coarse level ended, resulting in 32 schemas.
    } [19.280s]
    Type level searching (total types = 10): {
      Current: 0 / 32
[{'base.skosbase.skos_concept'}]
[{'media_common.quotation'}]
[{'tv.tv_program'}]
[{'base.animemanga.anime_manga_franchise'}]
[{'base.onephylogeny.type_of_thing'}]
[{'fictional_universe.fictional_organization'}]
[{'architecture.building'}]
[{'base.fires.type_of_fire'}]
[{'location.hud_section_8_area'}]
[{'type.datetime'}]
[{'location.location'}]
[{'location.hud_county_place'}]
[{'location.citytown'}]
[{'book.newspaper'}]
[{'location.country'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'user.joehughes.default_domain.transit_agency'}]
[{'people.person'}]
[{'location.hud_section_8_area'}]
[{'symbols.name_source'}]
[{'type.datetime'}]
[{'location.location'}]
[{'location.hud_county_place'}]
[{'location.citytown'}]
[{'location.country'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
      5 typed schemas retrieved from 32 coarse schemas.
      Calculating F1 for 5 typed schemas: {
        Current: 0 / 5
        Checking schema 0 / 5: {
          [('Main', '==', 'm.0jj6k', ['location.location.contains']), ('Type', '==', 'education.school_district', ['type.object.type'])]
          var_types: [{'education.school_district', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 1
            Final Answer: {'School District of Hillsborough County'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 1 / 5: {
          [('Main', '==', 'm.0jj6k', ['periodicals.newspaper_circulation_area.newspapers']), ('Type', '==', 'education.school_newspaper', ['type.object.type'])]
          var_types: [{'education.school_newspaper', 'book.newspaper'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.type fb:education.school_newspaper . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.type fb:education.school_newspaper . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 5: {
          [('Main', '==', 'm.0jj6k', ['location.location.containedby']), ('Type', '==', 'education.school_district', ['type.object.type'])]
          var_types: [{'education.school_district', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0jj6k fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0jj6k'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 5: {
          [('Main', '==', 'm.0n5yh', ['location.location.contains']), ('Type', '==', 'education.school_district', ['type.object.type'])]
          var_types: [{'education.school_district', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 5: {
          [('Main', '==', 'm.0n5yh', ['location.location.containedby']), ('Type', '==', 'education.school_district', ['type.object.type'])]
          var_types: [{'education.school_district', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:05] Q_Schema Request: {
            WebQ_2186|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0n5yh fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:education.school_district . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0n5yh'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        1 / 5 typed schemas kept with ans_size > 0.
      } [0.027s]
      Typed level ended, resulting in 33 schemas.
    } [0.029s]
    Time level searching (total times = 0): {
      Current: 0 / 33
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 33 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 33 schemas.
    } [0.001s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 33
[set()]
[{'media_common.quotation.date'}]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set(), set()]
[set(), set()]
[set()]
      0 ordinal schemas retrieved from 33 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 33 schemas.
    } [0.001s]
    [2020-12-03 14:16:05] buffer saved.
    33 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2186_schema].
  } [24.157s]
  Entering Q 2187 / 5810 [b'where did jfk and his wife live?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [2, 3) (jfk) == m.09sr0 (JFK_(film)) {'score': 217.394571, 'source': 0.0}
      #01 Entity: [2, 3) (jfk) == m.0d3k14 (John_F._Kennedy) {'score': 2472.557453, 'source': 0.0}
      #02 Entity: [2, 3) (jfk) == m.0p1l2 (John_F._Kennedy_International_Airport) {'score': 6.475337, 'source': 0.0}
      #03 Type: [6, 7) (live) == music.live_album (live album) {'sim': 0.805337}
      #04 Type: [0, 2) (where did) == media_common.lost_work (lost work) {'sim': 0.737278}
      #05 Type: [0, 2) (where did) == people.place_lived (place lived) {'sim': 0.703608}
      #06 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #07 Type: [3, 5) (and his) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.660044}
      #08 Type: [0, 1) (where) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.659286}
      #09 Type: [3, 6) (and his wife) == people.family_name (family name) {'sim': 0.653619}
      #10 Type: [3, 5) (and his) == people.cause_of_death (cause of death) {'sim': 0.652249}
      #11 Type: [0, 1) (where) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.649255}
      #12 Type: [0, 2) (where did) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.641702}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:16:10) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.09sr0 ?p1 ?o1 . }
        [2020-12-03 14:16:10] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.09sr0 ?p1 ?o1 . }
          Query return lines = 41
        } [0.004s]
        Filt_Query_Ret = 24 / 41 ( 0.005s)
      } [0.005s]
      [Len-1||F2/3] (2020-12-03 14:16:10) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0d3k14 ?p1 ?o1 . }
        [2020-12-03 14:16:10] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0d3k14 ?p1 ?o1 . }
          Query return lines = 89
        } [0.013s]
        Filt_Query_Ret = 51 / 89 ( 0.013s)
      } [0.013s]
      [Len-1||F3/3] (2020-12-03 14:16:10) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0p1l2 ?p1 ?o1 . }
        [2020-12-03 14:16:10] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0p1l2 ?p1 ?o1 . }
          Query return lines = 23
        } [0.004s]
        Filt_Query_Ret = 9 / 23 ( 0.004s)
      } [0.004s]
      [Len-2||F1/3] (2020-12-03 14:16:10) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09sr0 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:10] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.09sr0 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 0
        } [1.500s]
        Filt_Query_Ret = 0 / 0 ( 1.500s)
      } [1.500s]
      [Len-2||F2/3] (2020-12-03 14:16:12) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d3k14 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:12] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d3k14 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1166
        } [1.983s]
        Filt_Query_Ret = 64 / 1166 ( 1.987s)
      } [1.988s]
      [Len-2||F3/3] (2020-12-03 14:16:13) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0p1l2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:13] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0p1l2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 451
        } [2.308s]
        Filt_Query_Ret = 10 / 451 ( 2.311s)
      } [2.311s]
      158 coarse schemas retrieved from scratch.
      Calculating F1 for 158 coarse schemas: {
        Current: 0 / 158
        Checking schema 0 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 2
            Final Answer: {'English Language', 'Spanish Language'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.music'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'John Williams'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.production_companies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.production_companies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.production_companies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 3
            Final Answer: {'StudioCanal', 'Warner Bros. Entertainment', 'Regency Enterprises'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.film_set_decoration_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'Crispian Sallis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 4 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.film_production_design_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_production_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_production_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'Victor Kempster'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 5 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.film_casting_director'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_casting_director ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_casting_director ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 3
            Final Answer: {'Risa Bramon Garcia', 'Billy Hopkins', 'Heidi Levitt'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 6 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 5
            Final Answer: {'Drama', 'Mystery', 'Biography', 'History', 'Thriller'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 7 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 2
            Final Answer: {'United States of America', 'France'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 8 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.film_art_direction_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_art_direction_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.film_art_direction_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 2
            Final Answer: {'Derek R. Hill', 'Alan Tomkins'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 9 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.directed_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'Oliver Stone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 10 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.initial_release_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.09sr0 fb:film.film.initial_release_date ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.09sr0 fb:film.film.initial_release_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'1991'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 11 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.tagline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.tagline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.tagline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 12 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.written_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 2
            Final Answer: {'Oliver Stone', 'Zachary Sklar'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 13 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.costume_design_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.costume_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.costume_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'Marlene Stewart'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 14 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.executive_produced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.executive_produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.executive_produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'Arnon Milchan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 15 / 158: {
          [('Main', '==', 'm.09sr0', ['media_common.netflix_title.netflix_genres'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 8
            Final Answer: {'Drama', 'Biography', 'Dramas Based on Real Life', 'Political drama', 'Period piece', 'Dramas', '20th Century Period Pieces', 'Biographical Dramas'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.produced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 2
            Final Answer: {'Oliver Stone', 'A. Kitman Ho'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.cinematography'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'Robert Richardson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 18 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.edited_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.edited_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.edited_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 2
            Final Answer: {'Pietro Scalia', 'Joe Hutshing'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 19 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.rating'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.rating ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.rating ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'R (USA)'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 20 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.story_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.story_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.story_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 2
            Final Answer: {'Jim Garrison', 'Jim Marrs'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 21 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.soundtrack'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'JFK'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 22 / 158: {
          [('Main', '==', 'm.09sr0', ['film.film.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.09sr0 fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 5
            Final Answer: {'Assassination of John F. Kennedy', 'Cover-up', 'Vietnam War', 'John F. Kennedy assassination conspiracy theories', 'John F. Kennedy'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 23 / 158: {
          [('Main', '==', 'm.09sr0', ['user.robert.default_domain.rated_film.ew_rating'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.09sr0 fb:user.robert.default_domain.rated_film.ew_rating ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.09sr0 fb:user.robert.default_domain.rated_film.ew_rating ?o1 . }|None|||None||None
            Forbidden mid: {'m.09sr0'}
            Query return lines = 1
            Final Answer: {'85'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 24 / 158: {
          [('Main', '==', 'm.0d3k14', ['user.alexander.misc.murdered_person.date_murdered'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.date_murdered ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.date_murdered ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1963'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 25 / 158: {
          [('Main', '==', 'm.0d3k14', ['user.alexander.misc.murdered_person.place_murdered'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.place_murdered ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.place_murdered ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Dallas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 26 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 27 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1917'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 28 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 29 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Irish American', 'Caucasian race'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 30 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Rose Fitzgerald Kennedy', 'Joseph P. Kennedy, Sr.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Catholicism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 32 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1.82'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 33 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Dallas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 34 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Arlington National Cemetery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 35 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.activism.activist.area_of_activism'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Anti-communism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 36 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 37 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwtopic.connections_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 12
            Final Answer: {'rachel carson influenced john f kennedy', 'richard milhous nixon lost election to john fitzgerald kennedy', 'andre malraux a fan was john fitzgerald kennedy', 'fidel castro defeated invasion by john fitzgerald kennedy', 'dwight david eisenhower succeeded by john fitzgerald kennedy', 'charles andre joseph marie de gaulle difficulties with john fitzgerald kennedy', 'igor stravinsky hosted by john fitzgerald kennedy', 'lyndon baines johnson vice president to john fitzgerald kennedy', 'nikita sergeyevich khrushchev met john fitzgerald kennedy', 'lee harvey oswald allegedly assassinated john fitzgerald kennedy', 'robert lee frost read at inauguration of john fitzgerald kennedy', 'william averell harriman appointed by john fitzgerald kennedy'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 38 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwconnection.other'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwconnection.other ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwconnection.other ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Rachel Carson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 39 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.us_president.vice_president'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Lyndon B. Johnson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 40 / 158: {
          [('Main', '==', 'm.0d3k14', ['medicine.notable_person_with_medical_condition.condition'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:medicine.notable_person_with_medical_condition.condition ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:medicine.notable_person_with_medical_condition.condition ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {"Addison's disease"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 41 / 158: {
          [('Main', '==', 'm.0d3k14', ['user.alexander.misc.murdered_person.murdered_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.murdered_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.murdered_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Lee Harvey Oswald'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 42 / 158: {
          [('Main', '==', 'm.0d3k14', ['influence.influence_node.influenced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Rachel Carson', 'Eleanor Roosevelt'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 43 / 158: {
          [('Main', '==', 'm.0d3k14', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 47
            Final Answer: {'John F. Kennedy Junior High School', 'John F Kennedy National Historic Site', 'John F. Kennedy Elementary School', 'John F. Kennedy Boulevard', 'John F. Kennedy High School', 'USS John F. Kennedy', 'John F. Kennedy Catholic High School', 'John F. Kennedy Memorial Coliseum', 'John F. Kennedy Center for the Performing Arts', 'John F. Kennedy Memorial Highway', 'John F. Kennedy Stadium', 'John F. Kennedy Special Warfare Center and School', 'John F. Kennedy Memorial High School', 'John F. Kennedy School of Government', 'John F. Kennedy Library', 'John F. Kennedy University', 'John Kennedy Catholic High School', 'John-F.-Kennedy-Platz', 'John F. Kennedy Bus Depot', 'John F. Kennedy School, Berlin', 'John F. Kennedy International Airport', 'Universidad Argentina John F. Kennedy', 'Kennedy Space Center', 'John F Kennedy Catholic School', 'John F. Kennedy College', 'John F. Kennedy Middle School', 'John Fitzgerald Kennedy Memorial', 'John F. Kennedy School, The American School of Querétaro', 'John F. Kennedy Memorial Bridge'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 44 / 158: {
          [('Main', '==', 'm.0d3k14', ['book.author.book_editions_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'Profiles in courage', 'Profiles in Courage'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 45 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.schemastaging.context_name.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 46 / 158: {
          [('Main', '==', 'm.0d3k14', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 4
            Final Answer: {'Films from the Sixth Floor', 'Thirteen Days', 'JFK', 'An American Affair'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 47 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.family_member.family'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.family_member.family ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Kennedy family'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 48 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 152
            Final Answer: {"You never know what's hit you. A gunshot is the perfect way.", 'The margin is narrow, but the responsibility is clear.', 'If this nation is to be wise as well as strong, if we are to achieve our destiny, then we need more new ideas for more wise men reading more good books in more public libraries. These libraries should be open to allexcept the censor. We must know all the facts and hear all the alternatives and listen to all the criticisms. Let us welcome controversial books and controversial authors. For the Bill of Rights is the guardian of our security as well as our liberty.', 'I dont think that unless a greater effort is made by the Government to win popular support that the war can be won out there. In the final analysis, it is their war. They are the ones who have to win it or lose it. We can help them, we can give them equipment, we can send our men out there as advisers, but they have to win it, the people of Viet-Nam, against the Communists.', 'We in this country, in this generation, areby destiny rather than choicethe watchmen on the walls of world freedom. We ask, therefore, that we may be worthy of our power and responsibility, that we may exercise our strength with wisdom and restraint, and that we may achieve in our time and for all time the ancient vision of peace on earth, good will toward men. That must always be our goal, and the righteousness of our cause must always underlie our strength. For as was written long ago: except the Lord keep the city, the watchman waketh but in vain.', 'The basis of effective government if public confidence.', 'The human mind is our fundamental resource.', 'According to the ancient Chinese proverb, A journey of a thousand miles must begin with a single step.', 'For if Freedom and Communism were to compete for mans allegiance in a world at peace, I would look to the future with ever increasing confidence.', 'Communism has never come to power in a country that was not disrupted by war or corruption, or both.', 'In the past, those who foolishly sought power by riding on the back of the tiger ended up inside.', 'So, let us not be blind to our differencesbut let us also direct attention to our common interests and to the means by which those differences can be resolved. And if we cannot end now our differences, at least we can help make the world safe for diversity.', 'Change is the law of life. And those who look only to the past or present are certain to miss the future.', 'In free society art is not a weapon. Artists are not engineers of the soul.', 'We stand today on the edge of a new frontier -- the frontier of the 1960s, a frontier of unknown opportunities and perils, a frontier of unfulfilled hopes and threats. The new frontier of which I speak is not a set of promises -- it is a set of challenges.', 'We dare not tempt them with weakness. For only when our arms are sufficient beyond doubt can we be certain beyond doubt that they will never be employed.', 'All my life Ive known better than to depend on the experts. How could I have been so stupid, to let them go ahead?', 'Life is unfair.', 'The energy, the faith, the devotion which we bring this endeavor will light our bounty and all who serve it, and the glow from that fire can truly light the world.', 'The farmer is the only man in our economy who buys everything at retail, sells everything at wholesale, and pays the freight both ways.', 'Economic growth without social progress lets the great majority of people remain in poverty, while a privileged few reap the benefits of rising abundance.', 'If anyone is crazy enough to want to kill a president of the United States, he can do it. All he must be prepared to do is give his life for the president s.', 'This country cannot afford to be materially rich and spiritually poor.', 'We want to be first; not first if, not first but; but first!', 'For of those to whom much is given, much is required. And when at some future date the high court of history sits in judgment on each of usrecording whether in our brief span of service we fulfilled our responsibilities to the stateour success or failure, in whatever office we hold, will be measured by the answers to four questions:First, were we truly men of couragewith the courage to stand up to ones enemiesand the courage to stand up, when necessary, to ones associatesthe courage to resist public pressure, as well as private greed?Secondly, were we truly men of judgmentwith perceptive judgment of the future as well as the pastof our mistakes as well as the mistakes of otherswith enough wisdom to know what we did not know and enough candor to admit it. Third, were we truly men of integritymen who never ran out on either the principles in which we believed or the men who believed in usmen whom neither financial gain nor political ambition could ever divert from the fulfillment of our sacred trust?Finally, were we truly men of dedicationwith an honor mortgaged to no single individual or group, and comprised of no private obligation or aim, but devoted solely to serving the public good and the national interest?Couragejudgmentintegritydedicationthese are the historic qualities which, with Gods help will characterize our Governments conduct in the 4 stormy years that lie ahead.', 'To those peoples in the huts and villages of half the globe struggling to break the bonds of mass misery, we pledge our best efforts to help them help themselves, for whatever period is requirednot because the communists may be doing it, not because we seek their votes, but because it is right. If a free society cannot help the many who are poor, it cannot save the few who are rich.', "I have just received the following wire from my generous Daddy. It says, Dear Jack: Don't buy a single vote more than is necessary. I'll be damned if I am going to pay for a landslide.", 'The United States has to move very fast to even stand still.', 'We will neglect our cities to our peril, for in neglecting them we neglect the nation.', 'The purpose of foreign policy is not to provide an outlet for our own sentiments of hope or indignation; it is to shape real events in a real world.', 'World peace, like community peace, does not require that each man love his neighbor -- it requires only that they live together with mutual tolerance, submitting their disputes to a just and peaceful settlement.', 'And if we are to open employment opportunities in this country for members of all races and creeds, then the Federal Government must set an example. The President himself must set the key example. I am not going to promise a Cabinet post or any other post to any race or ethnic group. That is racism in reverse at its worst. So I do not promise to consider race or religion in my appointments if I am successful. I promise only that I will not consider them.', 'Ask not what your country can do for you - ask what you can do for your country.', 'Lobbyists are in many cases expert technicians and capable of explaining complex and difficult subjects in a clear, understandable fashion. They engage in personal discussions with Members of Congress in which they can explain in detail the reasons for positions they advocate. Because our congressional representation is based on geographical boundaries, the lobbyists who speak for the various economic, commercial, and other functional interests of this country serve a very useful purpose and have assumed an important role in the legislative process.', 'Washington is a city of Southern efficiency and Northern charm.', 'Mankind must put an end to war, or war will put an end to mankind. War will exist until that distant day when the conscientious objector enjoys the same reputation and prestige that the warrior does today.', 'Our problems are man-made, therefore they may be solved by man. No problem of human destiny is beyond human beings.', 'Is this Nation stating it cannot afford to spend an additional $600 million to help the developing nations of the world become strong and free and independentan amount less than this countrys annual outlay for lipstick, face cream, and chewing gum?', 'Without belittling the courage with which men have died, we should not forget those acts of courage with which men have lived. The courage of life is often a less dramatic spectacle than the courage of a final moment; but it is no less a magnificent mixture of triumph and tragedy. A man does what he mustin spite of personal consequences, in spite of obstacles and dangers and pressuresand that is the basis of all human morality. In whatever arena of life one may meet the challenge of courage, whatever may be the sacrifices he faces if he follows his consciencethe loss of his friends, his fortune, his contentment, even the esteem of his fellow meneach man must decide for himself the course he will follow. The stories of past courage can define that ingredientthey can teach, they can offer hope, they can provide inspiration. But they cannot supply courage itself. For this each man must look into his own soul.', 'The great battleground for the defense and expansion of freedom today is the whole southern half of the globe... the lands of the rising peoples. Their revolution is the greatest in human history. They seek an end to injustice, tyranny and exploitation. More than an end, they seek a beginning.', 'Before my term has ended, we shall have to test anew whether a nation organized and governed such as ours can endure. The outcome is by no means certain.', 'Well, I am reading more and enjoying it less[laughter]and so on, but I have not complained nor do I plan to make any general complaints. I read and talk to myself about it, but I dont plan to issue any general statement on the press. I think that they are doing their task, as a critical branch, the fourth estate. And I am attempting to do mine. And we are going to live together for a period, and then go our separate ways. [Laughter].', 'I am deeply touchednot as deeply touched as you have been coming to this dinner, but nevertheless it is a sentimental occasion.', "Once you say you're going to settle for second, that's what happens to you in life.", 'True happiness is the full use of your powers along lines of excellence in a life affording scope.', 'Somebody once said that Washington was a city of Northern charm and Southern efficiency.', 'It is time for a new generation of leadership, to cope with new problems and new opportunities. For there is a new world to be won.', 'With a good conscience our only sure reward, with history the final judge of our deeds, let us go forth to lead the land we love, asking His blessing and His help, but knowing that here on earth Gods work must truly be our own.', 'Theres an old saying that victory has 100 fathers and defeat is an orphan.', "Don't buy a single vote more than necessary. I'll be damned if I'm going to pay for a landslide.", 'Dont teach my boy poetry, an English mother recently wrote the Provost of Harrow. Dont teach my boy poetry; he is going to stand for Parliament. Well, perhaps she was rightbut if more politicians knew poetry, and more poets knew politics, I am convinced the world would be a little better place to live on this Commencement Day of 1956.', 'War will exist until that distant day when the conscientious objector enjoys the same reputation and prestige that the warrior does today.', 'For without belittling the courage with which men have died, we should not forget those acts of courage with which men have lived.', 'Let us never negotiate out of fear but let us never fear to negotiate.', "When power leads man towards arrogance, poetry reminds him of his limitations. When power narrows the area of man's concern, poetry reminds him of the richness and diversity of existence. When power corrupts, poetry cleanses.", 'I think this is the most extraordinary collection of talent, of human knowledge, that has ever been gathered together at the White House, with the possible exception of when Thomas Jefferson dined alone.', 'I see little of more importance to the future of our country and of civilization than full recognition of the place of the artist. If art is to nourish the roots of our culture, society must set the artist free to follow his vision wherever it takes him.', 'The great enemy of the truth is very often not the lie -- deliberate, contrived, and dishonest -- but the myth -- persistent, persuasive, and unrealistic.', 'And we must face the fact that the United States is neither omnipotent or omniscientthat we are only 6 percent of the worlds populationthat we cannot impose our will upon the other 94 percent of mankindthat we cannot right every wrong or reverse every adversityand that therefore there cannot be an American solution to every world problem.', 'The one unchangeable certainty is that nothing is unchangeable or certain.', 'We would like to live as we once lived, but history will not permit it.', 'We must use time as a tool, not as a couch.', 'Most of us are conditioned for many years to have a political viewpoint -- Republican or Democratic, liberal, conservative, or moderate. The fact of the matter is that most of the problems that we now face are technical problems, are administrative problems. They are very sophisticated judgments, which do not lend themselves to the great sort of passionate movements which have stirred this country so often in the past. -- They deal with questions which are now beyond the comprehension of most men.', 'Man is still the most extraordinary computer of all.', 'I look forward to an America which will not be afraid of grace and beauty.', 'Our growing softness, our increasing lack of physical fitness, is a menace to our security.', 'A police state finds that it cannot command the grain to grow.', 'Never before has man had such capacity to control his own environment, to end thirst and hunger, to conquer poverty and disease, to banish illiteracy and massive human misery. We have the power to make this the best generation of mankind in the history of the worldor to make it the last.', 'And so it is that I carry with me from this State to that high and lonely office to which I now succeed more than fond memories and fast friendships. The enduring qualities of Massachusettsthe common threads woven by the Pilgrim and the Puritan, the fisherman and the farmer, the Yankee and the immigrantwill not be and could not be forgotten in the Nations Executive Mansion. They are an indelible part of my life, my convictions, my view of the past, my hopes for the future.', 'There is always inequity in life. Some men are killed in a war and some men are wounded, and some men never leave the country, and some men are stationed in the Antarctic and some are stationed in San Francisco. Its very hard in military or in personal life to assure complete equality. Life is unfair.', 'Now the trumpet summons us againnot as a call to bear arms, though arms we neednot as a call to battle, though embattled we arebut a call to bear the burden of a long twilight struggle, year in and year out, rejoicing in hope, patient in tribulationa struggle against the common enemies of man: tyranny, poverty, disease and war itself.', 'You can milk a cow the wrong way once and still be a farmer, but vote the wrong way on a water tower and you can be in trouble.', 'To further the appreciation of culture among all the people, to increase respect for the creative individual, to widen participation by all the processes and fulfillments of artthis is one of the fascinating challenges of these days.', 'The energy, the faith, the devotion which we bring to this endeavor will light our country and all who serve itand the glow from that fire can truly light the world.', 'The world is very different now. For man holds in his hands the power to abolish all forms of human poverty and all forms of human life.', 'Conformity is the jailer of freedom and the enemy of growth.', 'I never know when I press these whether I am going to blow up Massachusetts or start the project.', 'This increase in the life span and in the number of our senior citizens presents this Nation with increased opportunities: the opportunity to draw upon their skill and sagacityand the opportunity to provide the respect and recognition they have earned. It is not enough for a great nation merely to have added new years to lifeour objective must also be to add new life to those years.', 'The cost of freedom is always high, but Americans have always paid it. And one path we shall never choose, and that is the path of surrender, or submission.', 'We hold the view that the people make the best judgment in the long run.', 'I ask that you offer to the political arena, and to the critical problems of our society which are decided therein, the benefit of the talents which society has helped to develop in you. I ask you to decide, as Goethe put it, whether you will be an anvilor a hammer. The question is whether you are to be a hammerwhether you are to give to the world in which you were reared and educated the broadest possible benefits of that education.', 'In giving rights to others which belong to them, we give rights to ourselves and to our country.', 'We are under exercised as a nation. We look instead of play. We ride instead of walk. Our existence deprives us of the minimum of physical activity essential for healthy living.', 'Let us never negotiate out of fear. But let us never fear to negotiate.', 'Sometimes party loyalty asks too much.', 'In the long history of the world, only a few generations have been granted the role of defending freedom in its hour of maximum danger. I do not shrink from this responsibilityI welcome it.', 'When written in Chinese, the word crisis is composed of two characters -- one represents danger, and the other represents opportunity.', 'There is a connection, hard to explain logically but easy to feel, between achievement in public life and progress in the arts. The age of Pericles was also the age of Phidias. The age of Lorenzo de Medici was also the age of Leonardo da Vinci. The age of Elizabeth was also the age of Shakespeare. And the New Frontier for which I campaign in public life, can also be a New Frontier for American art.', 'I believe in an America where the separation of church and state is absolutewhere no Catholic prelate would tell the President how to act, and no Protestant minister would tell his parishioners for whom to votewhere no church or church school is granted any public funds or political preferenceand where no man is denied public office merely because his religion differs from the President who might appoint him or the people who might elect him. I believe in an America that is officially neither Catholic, Protestant nor Jewishwhere no public official either requests or accepts instructions on public policy from the Pope, the National Council of Churches or any other ecclesiastical sourcewhere no religious body seeks to impose its will directly or indirectly upon the general populace or the public acts of its officialsand where religious liberty is so indivisible that an act against one church is treated as an act against all. For while this year it may be a Catholic against whom the finger of suspicion is pointed, in other years it has been, and may someday be again, a Jewor a Quakeror a Unitarianor a Baptist. It was Virginias harassment of Baptist preachers, for example, that helped lead to Jeffersons statute of religious freedom. Today I may be the victimbut tomorrow it may be youuntil the whole fabric of our harmonious society is ripped at a time of great national peril. Finally, I believe in an America where religious intolerance will someday endwhere all men and all churches are treated as equalwhere every man has the same right to attend or not attend the church of his choicewhere there is no Catholic vote, no anti-Catholic vote, no bloc voting of any kindand where Catholics, Protestants and Jews, at both the lay and pastoral level, will refrain from those attitudes of disdain and division which have so often marred their works in the past, and promote instead the American ideal of brotherhood. That is the kind of America in which I believe. And it represents the kind of Presidency in which I believea great office that must neither be humbled by making it the instrument of any one religious group nor tarnished by arbitrarily withholding its occupancy from the members of any one religious group. I believe in a President whose religious views are his own private affair, neither imposed by him upon the Nation or imposed by the Nation upon him as a condition to holding that office.', "There is always inequity in life. Some men are killed in a war, and some men are wounded, and some men are stationed in the Antarctic and some are stationed in San Francisco. It's very hard in military or personal life to assure complete equality. Life", 'But peace does not rest in the charters and covenants alone. It lies in the hearts and minds of all people. So let us not rest all our hopes on parchment and on paper, let us strive to build peace, a desire for peace, a willingness to work for peace in the hearts and minds of all of our people. I believe that we can. I believe the problems of human destiny are not beyond the reach of human beings.', 'And so, my fellow Americans: ask not what your country can do for you, ask what you can do for your country. My fellow citizens of the world: ask not what America will do for you, but what, together, we can do for the freedom of man.', 'Every American ought to have the right to be treated as he would wish to be treated, as one would wish his children to be treated. this is not the case.', 'Failure has no friends.', 'People have not been horrified by war to a sufficient extent... War will exist until that distant day when the conscientious objector enjoys the same reputation and prestige as the warrior does today.', 'For the great enemy of the truth is very often not the liedeliberate, contrived, and dishonestbut the mythpersistent, persuasive, and unrealistic. Too often we hold fast to the cliches of our forebears. We subject all facts to a prefabricated set of interpretations. We enjoy the comfort of opinions without the discomfort of thought.', "As far as the job of President goes, its rewarding and I've given before this group the definition of happiness for the Greeks. I'll define it again: the full use of your powers along lines of excellence. I find, therefore, that the Presidency provides some happiness.", 'A child miseducated is a child lost.', 'A man does what he must -- in spite of personal consequences, in spite of obstacles and dangers -- and this is the basis of all human morality.', 'Many years ago the great British explorer George Mallory, who was to die on Mount Everest, was asked why did he want to climb it. He said Because it is there. Well, space is there, and were going to climb it, and the moon and the planets are there, and new hopes for knowledge and peace are there.', 'Every society gets the kind of criminal it deserves. What is also true is that every community gets the kind of law enforcement it insists on.', 'The time to repair the roof is when the sun is shinning.', 'Dante once said that the hottest places in hell are reserved for those who in a period of moral crisis maintain their neutrality.', 'A young man who does not have what it takes to perform military service is not likely to have what it takes to make a living. Todays military rejects include tomorrows hard core unemployed.', 'As they say on my own Cape Cod, a rising tide lifts all the boats. And a partnership, by definition, serves both partners, without domination or unfair advantage. Together we have been partners in adversitylet us also be partners in prosperity.', 'It is our task in our time and in our generation to hand down undiminished to those who come after us, as was handed down to us by those who went before, the natural wealth and beauty which is ours.', 'The ignorance of one voter in a democracy impairs the security of all.', 'In its [knowledges] light, we must think and act not only for the moment but for our time. I am reminded of the great French Marshal Lyautey, who once asked his gardener to plant a tree. The gardener objected that the tree was slow-growing and would not reach maturity for a hundred years. The Marshal replied, In that case, there is no time to lose, plant it this afternoon.', 'Let the word go forth from this time and place, to friend and foe alike, that the torch has been passed to a new generation of Americans.', 'I do not think it altogether inappropriate to introduce myself to this audience. I am the man who accompanied Jacqueline Kennedy to Paris, and I have enjoyed it.', 'The courage of life is often a less dramatic spectacle than the courage of the final moment; but it is no less a magnificent mixture of triumph and tragedy.', 'We prefer world law, in the age of self-determination, to world war in the age of mass extermination.', 'If we cannot end our differences at least we can make the world safe for diversity.', 'If a free society cannot help the many who are poor, it cannot save the few who are rich.', 'First, I believe that this nation should commit itself to achieving the goal, before this decade is out, of landing a man on the moon and returning him safely to the earth. I believe we should go to the moon. But there is no sense in agreeing or desiring that the United States take an affirmative position in outer space, unless we are prepared to do the work and bear the burdens to make it successful.', 'We believe that if men have the talent to invent new machines that put men out of work, they have the talent to put those men back to work.', 'When you have seven percent unemployed, you have ninety-three percent working.', "Tolerance implies no lack of commitment to one's own beliefs. Rather it condemns the oppression or persecution of others.", 'Let every nation know... that we shall pay any price, bear any burden, meet any hardship, support any friend, oppose any foe, in order to assure the survival and the success of liberty.', "The day before my inauguration President Eisenhower told me, You'll find that no easy problems ever come to the President of the United States. If they are easy to solve, somebody else has solved them. I found that hard to believe, but now I know it is true.", 'The New Frontier I speak of is not a set of promises -- it is a set of challenges. It sums up not what I intend to offer the American people, but what I intent to ask of them.', 'Written in Chinese, the word crisis, is composed of two characters. One represents danger and the other represent opportunity.', 'Peace is a daily, a weekly, a monthly process, gradually changing opinions, slowly eroding old barriers, quietly building new structures.', 'There is no city in the United States in which I can get a warmer welcome and fewer votes than Columbia, Ohio.', 'There are risks and costs to a program of action, but they are far less than the long-range risks and costs of comfortable inaction.', 'Forgive your enemies, but never forget their names.', "There is a terrific disadvantage in not having the abrasive quality of the press applied to you daily. Even though we never like it, and even though we wish they didn't write it, and even though we disapprove, there isn't any doubt that we could not do the job at all in a free society without a very, very active press.", 'So let us here resolve that Dag Hammarskjold did not live, or die, in vain. Let us call a truce to terror. Let us invoke the blessings of peace. And, as we build an international capacity to keep peace, let us join in dismantling the national capacity to wage war.', 'I am certain that after the dust of centuries has passed over our cities, we, too, will be remembered not for victories or defeats in battle or in politics, but for our contribution to the human spirit.', "When we got into office, the thing that surprised me most was to find that things were just as bad as we'd been saying they were.", 'It is an unfortunate fact that we can secure peace only by preparing for war.', 'If art is to nourish the roots of our culture, society must set the artist free to follow his vision wherever it takes him.', 'Our progress as a nation can be no swifter than our progress in education. The human mind is our fundamental resource.', 'To those people in the huts and villages of half the globe struggling to break the bonds of mass misery, we pledge our best efforts to help them help themselves, for whatever period is required, not because the Communists may be doing it, not because we seek their votes, but because it is right. If a free society cannot help the many who are poor, it cannot save the few who are rich.', 'Of course, both major parties today seek to serve the national interest. They would do so in order to obtain the broadest base of support, if for no nobler reason. But when party and officeholder differ as to how the national interest is to be served, we must place first the responsibility we owe not to our party or even to our constituents but to our individual consciences.', 'In the long history of the world, only a few generations have been granted the role of defending freedom in its hour of maximum danger. I do not shrink from this responsibility -- I welcome it.', 'The unity of freedom has never relied on uniformity of opinion.', 'Those who make peaceful revolution impossible will make violent revolution inevitable.', 'This Nation was founded by men of many nations and backgrounds. It was founded on the principle that all men are created equal, and that the rights of every man are diminished when the rights of one man are threatened.', 'Let every nation know, whether it wishes us well or ill, that we shall pay any price, bear any burden, meet any hardship, support any friend, oppose any foe to assure the survival and the success of liberty.', 'For only when our arms are sufficient beyond doubt can we be certain beyond doubt that they will never be employed.', 'All this will not be finished in the first one hundred days. Nor will it be finished in the first thousand days, nor in the life of this administration, nor even perhaps in our lifetime on this planet. But let us begin.', "Our most basic common link is that we all inhabit this planet. We all breathe the same air. We all cherish our children's future. And we are all mortal.", 'Let us think of education as the means of developing our greatest abilities, because in each of us there is a private hope and dream which, fulfilled, can be translated into benefit for everyone and greater strength for our nation.', 'The greater our knowledge increases, the greater our ignorance unfolds.', 'Efforts and courage are not enough without purpose and direction.', 'We cannot expect that everyone, to use the phrase of a decade ago, will talk sense to the American people. But we can hope that fewer people will listen to nonsense. And the notion that this Nation is headed for defeat through deficit, or that strength is but a matter of slogans, is nothing but just plain nonsense.', 'A young man who does not have what it takes to perform military service is not likely to have what it takes to make a living.', 'I look forward to an America which will reward achievement in the arts as we reward achievement in business or statecraft. I look forward to an America which will steadily raise the standards of artistic accomplishment and which will steadily enlarge cultural opportunities for all of our citizens. And I look forward to an America which commands respect throughout the world not only for its strength but for its civilization as well.', 'The supreme reality of our time is the vulnerability of this planet.', 'It might be said now that I have the best of both worlds: a Harvard education and a Yale degree.', 'Let us resolve to be masters, not the victims, of our history, controlling our own destiny without giving way to blind suspicions and emotions.'}
            Answers = 152, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 152, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 49 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 4
            Final Answer: {'Caroline Kennedy', 'John F. Kennedy, Jr.', 'Patrick Bouvier Kennedy', 'Arabella Kennedy'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 50 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.deceased_person.cause_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Assassination', 'Assassination by firearm'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 51 / 158: {
          [('Main', '==', 'm.0d3k14', ['military.military_person.participated_in_conflicts'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:military.military_person.participated_in_conflicts ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:military.military_person.participated_in_conflicts ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'World War II'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 52 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 53 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 55
            Final Answer: {'After a week of tension, Khrushchev ordered his ships to return home, and after direct communication with Kennedy, ordered the dismantling of the bases.', "Kennedy chose to intervene in Vietnam, sending Lyndon Johnson  to confirm America's support of the pro-Western Diem regime.", 'Through his father, the U.S. ambassador to Britain, Kennedy met European decision-makers in the period preceding the Second World War (1939-45.) His honors thesis for Harvard University dealt with British appeasement at Munich in 1938 and was published in 1940 as: ""Why England Slept"".', 'After Kennedy put on pressure, the companies withdrew the increases, but the episode created distrust between his administration and the business world.', 'None of the theories has been proved.', 'His ""New Frontier"" program aimed to improve educational, social and medical care, to provide low-cost housing, raise the national wage and rehabilitate depressed urban areas.', 'Lee Harvey Oswald, a young ex-Marine with links to the Soviet Union, was arrested.', 'His widow married Onassis Frost read a poem at his inauguration.', 'Two days later, Oswald was shot and killed while in police custody by Jack Ruby, a nightclub owner.', 'In October, 1962, alarmed at news of a Russian missile base in Cuba, Kennedy ordered a blockade of all imported offensive weapons.', 'The Soviets resumed building nuclear weapons, and Kennedy responded by resuming tests and increasing American missile production.', "Kennedy's record on civil rights was modest but in 1962 he enforced desegregation at the University of Mississippi.", 'Kennedy was elected by a slender majority, and at 43 became the youngest President and the first Catholic in the White House.', 'In Vienna, in June, 1961, Kennedy had an unproductive meeting with Soviet Prime Minister Krushchev.', 'After persuading the steel workers to accept a ""non-inflationary"" contract, he was outraged when the steel companies put up their prices a few days later.', 'He wanted to reform tax legislation, remodel the agricultural economy and develop natural resources.', 'In 1946, Kennedy was elected to Congress as a Democrat for the 11th Congressional District of Massachusetts.', 'Russian ships were already en route to Cuba.', 'He was turned down by the Army because of a bad back, but was accepted by the Navy in 1941.', 'When Communist China invaded India in 1962, Kennedy authorized an air-lift of arms to India.', 'The ex-ambassador to Russia, WA Harriman, urged Kennedy to give Khrushchev a chance to save face.', 'He then sent military envoys to assess the possibilities of military aid.', "The circumstances of Kennedy's death led to a multitude of theories about who was responsible for his death.", 'In 1943, when the PT (torpedo) boat he was commanding in the South Pacific was sunk by the Japanese, he got the survivors to an island, and was awarded the Purple Heart and the Navy and Marine Corps Medal.', 'The Republican candidate was Richard M. Nixon.', 'When he took office, Castro had already installed himself as the Marxist leader of Cuba and was forging close ties with the Soviet Union.', 'A conservative Congress was cool to his suggestions.', 'In June, 1963, after police in Birmingham, Alabama, used dogs against peaceful protesters in a civil rights march, Kennedy addressed the nation, expressing his revulsion for racial inequality, and called on Congress to pass extensive civil rights legislation.', 'His inaugural address included the now famous exhortation, ""Ask not what your country can do for you.  Ask what you can do for your country"".', 'Kennedy was given a state funeral, attended by the leaders of more than 90 nations.', '( In November, 1963, just before Kennedy was assassinated, President Diem was captured and killed and the area became more unstable.)', "Kennedy's huge majority in the Senate elections of 1958 made him a promising presidential contender, and in 1960 he defeated his chief rival for nomination, Hubert Humphrey.", '(Relations were to thaw, however, and in August, 1963, a limited Nuclear Test Ban Treaty was signed by the U.S., the Soviet Union, and Great Britain.)', "Kennedy's vision remained unfulfilled, largely because of his brief tenure and the reluctance of Congress to implement his New Frontier domestic policy.", 'Kennedy often clashed with big business.', 'He is buried in Arlington National Cemetery in a grave marked with an eternal flame.', 'He took a liberal stance on civil liberties, and in a speech in segregated Mississippi, he declared his support for bill to desegregate schools.', 'The youth and vigor of his staff compared with that of outgoing president Eisenhower,  raised public expectations.', 'During his lengthy convalescence, he wrote the Pulitzer-prize- winning ""Profiles of Courage"", published in 1956.', "He was a fan of Malraux's work.", "He supported President Harry S. Truman's Fair Deal, which proposed slum clearance and low-cost public housing, but criticized Truman for not halting the spread of communism in China.", 'He chose his other rival, Lyndon B. Johnson, as his running mate, to boost his chances in the South.', "Kennedy advocated America's entry into the war and volunteered for military service.", 'Though he lost his bid, his  popularity increased enormously.', 'He had Stravinsky to dinner Decided on NASA Apollo missions.', 'On November 22, 1963, Kennedy was assassinated as he and his wife drove through Dallas, Texas.', "In April 1961, Kennedy gave his blessing to the disastrous Bay of Pigs invasion of Cuba by Cuban exiles trained in the U.S. during Eisenhower's presidency.", "In the Senate elections of 1952, Kennedy won a resounding victory over Republican incumbent Henry Cabot Lodge Jr. In 1947, Kennedy was diagnosed with Addison's disease, a glandular disease, and underwent two risky spinal operations, which were only partially successful.", 'In his bid for the 1956 Democratic vice-presidential nomination, Kennedy gave speeches across the country, often taking his glamorous wife Jacqueline with him.', 'His main concern in foreign affairs was the threat from Soviet Communism.', 'He was re-elected in 1948 and 1950.', "In a televised debate with Nixon, Kennedy's charm and charisma made him an easy winner.", "Kennedy's hopes for closer defense and financial cooperation with Europe, came to little, mainly because of the hostility of French president de Gaulle.", 'Kennedy created the U.S. Peace Corps to assist Third World countries, and set up the Alliance for Progress with Latin America.', "Malaria and back surgery put an end to Kennedy's naval career."}
            Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 54 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.crime.crime_victim.crime'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.crime.crime_victim.crime ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.crime.crime_victim.crime ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Assassination of John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 55 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.jewlib.original_owner.originator_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.jewlib.original_owner.originator_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.jewlib.original_owner.originator_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John Fitzgerald Kennedy Letter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 56 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.inaugurations.inauguration_speaker.inauguration'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy 1961 presidential inauguration'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 57 / 158: {
          [('Main', '==', 'm.0d3k14', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Felix Dodds'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 158: {
          [('Main', '==', 'm.0d3k14', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 50
            Final Answer: {'The Cuban missile crisis', 'Prelude to leadership', 'Legacy of a president', 'Let us call a truce to terror', "America's challenge to a race for peace", 'Antología de John F. Kennedy', 'The strategy of peace', 'The wit and wisdom of John F. Kennedy', 'Quotations from the Scriptures', 'The burden and the glory', 'Strategie de la paix', 'The complete Kennedy wit', 'A Nation of Immigrants', 'unspoken speech of John F. Kennedy at Dallas, November 22, 1963', 'What kind of peace?', 'To turn the tide', 'Why England Slept', 'Profiles in Courage', 'As we remember Joe', 'New opportunities in the search for peace', 'More Kennedy wit', 'A step toward peace', 'The quotable Kennedy', 'Trade and the Atlantic partnership', 'The U.S. response to Soviet military buildup in Cuba; report to the people October 22, 1962', 'Remarks by the President to the Dallas Citizens Council, the Dallas Assembly and the Graduate Research Center of the Southwest, at the Trade Mart, Dallas, Texas, November 22, 1963', 'The humor of JFK', 'The uncommon wisdom of JFK', 'Glanz und Bürde', 'The Berlin crisis', 'Le tournant', 'Words to remember', 'Four speeches', 'The faith of JFK', 'Let the lady hold up her head', 'JFK wants to know', 'Back from the brink', 'The shining moments', 'Kennedy and the press', "Remarks of the President before a citizen's rally in front of the Texas Hotel, Fort Worth, Texas", 'The Kennedy wit', 'The wisdom of JFK', 'Kennedy through Indian eyes', 'Kennedy-Shriver conversation on the Peace Corps', 'Sam Houston & the Senate', 'The Kennedy presidential press conferences', "President John Fitzgerald Kennedy's grand and global alliance", 'The inaugural address', 'Le courage dans la politique', 'Some elements of the American character'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 59 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 4
            Final Answer: {'Writer', 'Author', 'Politician', 'Screenwriter'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 60 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 61 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Brookline'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1963'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 63 / 158: {
          [('Main', '==', 'm.0d3k14', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 29
            Final Answer: {'The Kennedy Assassination Tapes', 'America divided', 'Jackie, Ethel, Joan', 'Essence of Decision', 'Kennedy', 'The Advance Man: An Off-beat Look at What Really Happens in Political Campaigns', 'Kennedy and the promise of the sixties', 'The Dark Side of Camelot', 'Years of Discord', 'Conversations With Kennedy', 'The Making of the President, 1960', 'Four Days in November', 'JFK and LBJ', 'The Kennedy Promise: The Politics of Expectation', 'JFK in Ireland', 'Reflections on the Cuban missile crisis', 'The Kennedy Tapes: Inside the White House during the Cuban Missile Crisis', 'Boom!', 'Live by the sword', 'The JFK assassination', 'The Fitzgeralds and the Kennedys', 'One Minute to Midnight', 'An Unfinished Life: John F. Kennedy, 1917-1963', 'Forty ways to look at JFK', 'The Best and the Brightest', 'The Killing of a President', 'The Kennedy imprisonment', 'The Kennedy Women', 'One Hell of a Gamble: Khrushchev, Castro, and Kennedy, 1958-1964 - The Secret History of the Cuban Missile Crisis'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 64 / 158: {
          [('Main', '==', 'm.0d3k14', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 7
            Final Answer: {'Special Forces', 'NASA', 'Peace Corps', 'Presidential Commission on the Status of Women', 'Federal Executive Boards', 'Appalachian Regional Commission', 'United States Agency for International Development'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 65 / 158: {
          [('Main', '==', 'm.0d3k14', ['film.film_story_contributor.film_story_credits'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'The John Glenn Story'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 66 / 158: {
          [('Main', '==', 'm.0d3k14', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 67 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 7
            Final Answer: {'john fitzgerald kennedy hosted igor stravinsky', 'john fitzgerald kennedy allegedly assassinated by lee harvey oswald', 'john fitzgerald kennedy a fan of andre malraux', 'john fitzgerald kennedy inaugural poem read by robert lee frost', 'john fitzgerald kennedy attacked fidel castro', 'john fitzgerald kennedy disliked charles andre joseph marie de gaulle', 'john fitzgerald kennedy succeeded dwight david eisenhower'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 68 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 69 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 70 / 158: {
          [('Main', '==', 'm.0d3k14', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'John F. Kennedy', 'Retroactive I'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 71 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.crime.crime_victim.crime_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.crime.crime_victim.crime_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.crime.crime_victim.crime_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Assassination'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 72 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.us_president.presidency_number'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:government.us_president.presidency_number ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.0d3k14 fb:government.us_president.presidency_number ?o1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'35'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 73 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.americancomedy.impersonated_celebrity.impersonated_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Rich Little'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 74 / 158: {
          [('Main', '==', 'm.0d3k14', ['user.jschell.default_domain.orator.speech_given'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.jschell.default_domain.orator.speech_given ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.jschell.default_domain.orator.speech_given ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Inaugural address of John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 75 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.operator'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.operator ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.operator ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'Port Authority of New York and New Jersey'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 76 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.airport_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.airport_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.airport_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'Public'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 77 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.serves'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.serves ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.serves ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 2
            Final Answer: {'Queens', 'New York City'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 78 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.number_of_runways'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_runways ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_runways ?o1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'4'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 79 / 158: {
          [('Main', '==', 'm.0p1l2', ['symbols.namesake.named_after'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 80 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.hub_for'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.hub_for ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.hub_for ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 27
            Final Answer: {'Comair', 'Pinnacle Airlines', 'JetBlue', 'Evergreen International Airlines', 'Primaris Airlines', 'Kalitta Air', 'Gemini Air Cargo', 'American Airlines', 'Eastern Air Lines', 'American Eagle Airlines', 'Pan Am Express', 'Continental Airlines', 'Trans World Airlines', 'Song', 'Polar Air Cargo', 'United p.s.', 'Delta Air Lines-Northwest Airlines merger', 'Tower Air', 'OpenSkies', 'Eos Airlines', 'Pan American World Airways', 'National Airlines', 'Chautauqua Airlines', 'Scanderbeg Air', 'Freedom Airlines', 'Icon', 'Delta Air Lines'}
            Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 81 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.focus_city_for'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.focus_city_for ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.focus_city_for ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 18
            Final Answer: {'Avianca', 'JetBlue', 'Caribbean Airlines', 'American Airlines', 'TACA Airlines', 'APA International Air', 'Air Jamaica', 'Delta Express', 'Mesa Airlines', 'Caribbean Airlines-Air Jamaica Transition Limited', 'Air Santo Domingo', 'Song', 'Polar Air Cargo', 'Loftleiðir', 'OpenSkies', 'United p.s.', 'Virgin America', 'National Airlines'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 82 / 158: {
          [('Main', '==', 'm.0p1l2', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 83 / 158: {
          [('Main', '==', 'm.0p1l2', ['user.brendan.default_domain.top_architectural_city.structure_count'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0p1l2 fb:user.brendan.default_domain.top_architectural_city.structure_count ?o1 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 WHERE { fb:m.0p1l2 fb:user.brendan.default_domain.top_architectural_city.structure_count ?o1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 84 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1961'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 85 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 86 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Bachelor of Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 87 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 6
            Final Answer: {'1930', '1927', '1935', '1931', '1940'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 88 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 89 / 158: {
          [('Main', '==', 'm.0d3k14', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'National Book Award for Nonfiction', "Jane Addams Children's Book Award"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 90 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 9
            Final Answer: {'Kathleen Cavendish', 'Rosemary Kennedy', 'Eunice Kennedy Shriver', 'Robert F. Kennedy', 'Patricia Kennedy Lawford', 'Joseph P. Kennedy, Jr.', 'Jean Kennedy Smith', 'Ted Kennedy'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 91 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Jacqueline Kennedy Onassis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 92 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {"St. Mary's Church Complex"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 93 / 158: {
          [('Main', '==', 'm.0d3k14', ['military.military_person.served_aboard', 'user.patrick.default_domain.warship_crew_tenure.ship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.served_aboard ?o1 . ?o1 fb:user.patrick.default_domain.warship_crew_tenure.ship ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.served_aboard ?o1 . ?o1 fb:user.patrick.default_domain.warship_crew_tenure.ship ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Motor Torpedo Boat PT-109'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 94 / 158: {
          [('Main', '==', 'm.0d3k14', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'Subject of film', 'Him/Herself', 'Archive Footage'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 95 / 158: {
          [('Main', '==', 'm.0d3k14', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 5
            Final Answer: {'1963', '1945', '1964', '1943', '1957'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 96 / 158: {
          [('Main', '==', 'm.0d3k14', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Profiles in Courage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 97 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 98 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 99 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.political_appointer.appointees', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Current: 100 / 158
        Checking schema 100 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 101 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.political_appointer.appointees', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Secretary of State', 'Attorney general'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 102 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.political_appointer.appointees', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 6
            Final Answer: {'Cabinet of the United States', 'United States District Court for the Southern District of New York', 'United States Court of Appeals for the Fifth Circuit', 'U.S. Federal Communications Commission', 'United States Department of Defense', 'Executive Office of the President of the United States'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 103 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.politician.government_positions_held', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'United States House of Representatives', 'United States Senate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 104 / 158: {
          [('Main', '==', 'm.0d3k14', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 105 / 158: {
          [('Main', '==', 'm.0d3k14', ['military.military_commander.military_commands', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'Cuban missile crisis', 'Operation Chopper', 'War in Vietnam'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 106 / 158: {
          [('Main', '==', 'm.0d3k14', ['celebrities.celebrity.sexual_relationships', 'celebrities.romantic_relationship.relationship_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.relationship_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:16] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.relationship_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Paramour', 'Slept with'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 107 / 158: {
          [('Main', '==', 'm.0d3k14', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 108 / 158: {
          [('Main', '==', 'm.0d3k14', ['military.military_person.service', 'military.military_service.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.rank ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.rank ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Commander'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 109 / 158: {
          [('Main', '==', 'm.0d3k14', ['media_common.dedicatee.dedications', 'media_common.dedication.dedicated_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:media_common.dedicatee.dedications ?o1 . ?o1 fb:media_common.dedication.dedicated_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:media_common.dedicatee.dedications ?o1 . ?o1 fb:media_common.dedication.dedicated_to ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 110 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.firsts.first.achievements', 'base.firsts.first_achievement.achievement'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.achievement ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.achievement ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'President of the United States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 111 / 158: {
          [('Main', '==', 'm.0d3k14', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speaker_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 112 / 158: {
          [('Main', '==', 'm.0d3k14', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speech_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'Cold War', 'Anti-Apartheid', 'Berlin Wall'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 113 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Catholicism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 114 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.appointer.appointment_made', 'people.appointment.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 115 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 4
            Final Answer: {'Caroline Kennedy', 'John F. Kennedy, Jr.', 'Jacqueline Kennedy Onassis'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 116 / 158: {
          [('Main', '==', 'm.0d3k14', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'White Squall'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 117 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1963'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 118 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'International relations'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 119 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'Washington, D.C.', 'Massachusetts', 'Boston'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.008s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.008s]
        Checking schema 120 / 158: {
          [('Main', '==', 'm.0d3k14', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Profiles in Courage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 121 / 158: {
          [('Main', '==', 'm.0d3k14', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'1964', '1957'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 122 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1953'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 123 / 158: {
          [('Main', '==', 'm.0d3k14', ['military.military_person.served_aboard', 'user.patrick.default_domain.warship_crew_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.served_aboard ?o1 . ?o1 fb:user.patrick.default_domain.warship_crew_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.served_aboard ?o1 . ?o1 fb:user.patrick.default_domain.warship_crew_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 124 / 158: {
          [('Main', '==', 'm.0d3k14', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 26
            Final Answer: {'The Kingdom', 'The Fog of War: Eleven Lessons from the Life of Robert S. McNamara', 'King Kennedy', 'The Legend of Marilyn Monroe', 'Assassinations That Changed the World', 'The Lost Kennedy Home Movies', 'Transformers: Dark of the Moon', 'Crisis: Behind a Presidential Commitment', 'Zapruder film', 'Gonzo: The Life and Work of Dr. Hunter S. Thompson', 'Bigger, Stronger, Faster*', 'Secret Origin: The Story of DC Comics', 'The Storm', 'In the Shadow of the Moon', 'Trinity and Beyond: The Atomic Bomb Movie', 'Live Free or Die Hard', 'Tank on the Moon', 'What happened on the Moon', 'The Greatest Speeches of All Time: Vol. 1', 'Flashing on the Sixties: A Tribal Document', 'First World', 'Death Faces', 'Rendezvous with Death', 'Primary', 'Countdown to Zero', 'Going Upriver'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 125 / 158: {
          [('Main', '==', 'm.0d3k14', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 126 / 158: {
          [('Main', '==', 'm.0d3k14', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1957 Pulitzer Prize'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 127 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.political_appointer.appointees', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 17
            Final Answer: {'Robert McNamara', 'W. Willard Wirtz', 'Pierre Salinger', 'Cyrus Vance', 'Ted Sorensen', 'Newton N. Minow', 'Archibald Cox', 'Henry H. Fowler', 'Joseph W. Barr', 'C. Douglas Dillon', 'Robert F. Kennedy', 'Dean Rusk', 'Luther Terry', 'Kermit Gordon', 'David E. Bell', 'Irving Ben Cooper', 'Griffin Bell'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 128 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 129 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.political_appointer.appointees', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 13
            Final Answer: {'United States Surgeon General', 'Director, United States Office of Management and Budget', 'United States Attorney General', 'United States Secretary of the Treasury', 'United States Secretary of the Army', 'United States Solicitor General', 'United States Secretary of State', 'White House Press Secretary', 'United States federal judge', 'United States Secretary of Labor', 'Chairman, Federal Communications Commission', 'White House Counsel', 'United States Secretary of Defense'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 130 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'United States Representative', 'President of the United States', 'United States Senator'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 131 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.politician.government_positions_held', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {"Massachusetts's 11th congressional district", 'Massachusetts'}
            Answers = 2, P = 0.500000, R = 0.333333, F1 = 0.400000
          } [0.006s]
          Answers = 2, P = 0.500000, R = 0.333333, F1 = 0.400000
        } [0.006s]
        Checking schema 132 / 158: {
          [('Main', '==', 'm.0d3k14', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 133 / 158: {
          [('Main', '==', 'm.0d3k14', ['military.military_commander.military_commands', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_commander.military_commands ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 134 / 158: {
          [('Main', '==', 'm.0d3k14', ['celebrities.celebrity.sexual_relationships', 'celebrities.romantic_relationship.celebrity'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'Judith Exner', 'Marilyn Monroe'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 135 / 158: {
          [('Main', '==', 'm.0d3k14', ['celebrities.celebrity.sexual_relationships', 'celebrities.romantic_relationship.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.end_date ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_relationships ?o1 . ?o1 fb:celebrities.romantic_relationship.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1962'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 136 / 158: {
          [('Main', '==', 'm.0d3k14', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'843'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 137 / 158: {
          [('Main', '==', 'm.0d3k14', ['military.military_person.service', 'military.military_service.military_force'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:military.military_person.service ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'United States Navy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 138 / 158: {
          [('Main', '==', 'm.0d3k14', ['media_common.dedicatee.dedications', 'media_common.dedication.work_dedicated'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:media_common.dedicatee.dedications ?o1 . ?o1 fb:media_common.dedication.work_dedicated ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:media_common.dedicatee.dedications ?o1 . ?o1 fb:media_common.dedication.work_dedicated ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 3
            Final Answer: {'John Fitzgerald Kennedy Memorial', 'Symphony No. 3', 'Elegy for J.F.K.'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 139 / 158: {
          [('Main', '==', 'm.0d3k14', ['celebrities.celebrity.sexual_orientation', 'celebrities.sexual_orientation_phase.celebrity'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_orientation ?o1 . ?o1 fb:celebrities.sexual_orientation_phase.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:celebrities.celebrity.sexual_orientation ?o1 . ?o1 fb:celebrities.sexual_orientation_phase.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 140 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.firsts.first.achievements', 'base.firsts.first_achievement.category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'History of the term ""Catholic""'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 141 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.firsts.first.achievements', 'base.firsts.first_achievement.first'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.first ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.first ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 142 / 158: {
          [('Main', '==', 'm.0d3k14', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.presented_work'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Day of Affirmation speech', 'Ich bin ein Berliner'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 143 / 158: {
          [('Main', '==', 'm.0d3k14', ['people.appointer.appointment_made', 'people.appointment.appointed_role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Associate Justice of the Supreme Court of the United States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 144 / 158: {
          [('Main', '==', 'm.0d3k14', ['sports.sports_league.teams', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:sports.sports_league.teams ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:sports.sports_league.teams ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Manu Dibango'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 145 / 158: {
          [('Main', '==', 'm.0d3k14', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0d3k14 fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'1962'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 146 / 158: {
          [('Main', '==', 'm.0d3k14', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 147 / 158: {
          [('Main', '==', 'm.0d3k14', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 4
            Final Answer: {'Him/Herself', 'Archive Footage', 'Uncredited', 'Voice'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 148 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.number_of_aircraft_movements', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_aircraft_movements ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_aircraft_movements ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'443754'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 149 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.number_of_passengers', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_passengers ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_passengers ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'47810630'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 150 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.airlines', 'aviation.airline_airport_presence.airport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:aviation.airport.airlines ?o1 . ?o1 fb:aviation.airline_airport_presence.airport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:aviation.airport.airlines ?o1 . ?o1 fb:aviation.airline_airport_presence.airport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy International Airport'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 151 / 158: {
          [('Main', '==', 'm.0p1l2', ['travel.transport_terminus.travel_destinations_served', 'travel.transportation.transport_terminus'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:travel.transport_terminus.travel_destinations_served ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:travel.transport_terminus.travel_destinations_served ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 3
            Final Answer: {'LaGuardia Airport', 'Newark Liberty International Airport'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 152 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.runway_information', 'aviation.airport_runway.airport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:aviation.airport.runway_information ?o1 . ?o1 fb:aviation.airport_runway.airport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:aviation.airport.runway_information ?o1 . ?o1 fb:aviation.airport_runway.airport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'John F. Kennedy International Airport'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 153 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.runway_information', 'aviation.airport_runway.length'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.runway_information ?o1 . ?o1 fb:aviation.airport_runway.length ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.runway_information ?o1 . ?o1 fb:aviation.airport_runway.length ?o2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 4
            Final Answer: {'3460', '2560', '3048', '4442'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 154 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.number_of_aircraft_movements', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_aircraft_movements ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_aircraft_movements ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 155 / 158: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.number_of_passengers', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_passengers ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:aviation.airport.number_of_passengers ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 156 / 158: {
          [('Main', '==', 'm.0p1l2', ['location.location.geolocation', 'location.geocode.elevation'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.elevation ?o2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 WHERE { fb:m.0p1l2 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.elevation ?o2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'4'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 157 / 158: {
          [('Main', '==', 'm.0p1l2', ['travel.transport_terminus.travel_destinations_served', 'travel.transportation.travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:travel.transport_terminus.travel_destinations_served ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0p1l2 fb:travel.transport_terminus.travel_destinations_served ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 1
            Final Answer: {'New York City'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        151 / 158 coarse schemas kept with ans_size > 0.
      } [1.062s]
      Coarse level ended, resulting in 151 schemas.
    } [6.883s]
    Type level searching (total types = 10): {
      Current: 0 / 151
[{'language.human_language'}]
[{'film.music_contributor'}]
[{'film.production_company'}]
[{'film.film_set_designer'}]
[{'film.film_production_designer'}]
[{'film.film_casting_director'}]
[{'film.film_genre'}]
[{'location.country'}]
[{'film.film_art_director'}]
[{'film.director'}]
[{'type.datetime'}]
[{'film.writer'}]
[{'film.film_costumer_designer'}]
[{'film.producer'}]
[{'media_common.netflix_genre'}]
[{'film.producer'}]
[{'film.cinematographer'}]
[{'film.editor'}]
[{'film.content_rating'}]
[{'film.film_story_contributor'}]
[{'music.soundtrack'}]
[{'film.film_subject'}]
[{'type.int'}]
[{'type.datetime'}]
[{'location.location'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'base.activism.activism_issue'}]
[{'base.kwebbase.kwconnection'}]
[{'base.kwebbase.kwtopic'}]
[{'government.us_vice_president'}]
[{'medicine.disease'}]
[{'user.alexander.misc.murderer'}]
[{'influence.influence_node'}]
[{'symbols.namesake'}]
[{'book.book_edition'}]
[{'film.film'}]
[{'people.family'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'people.cause_of_death'}]
[{'military.military_conflict'}]
[{'base.kwebbase.kwsentence'}]
[{'base.crime.crime'}]
[{'base.jewlib.research_collection'}]
[{'base.inaugurations.inauguration'}]
[{'influence.influence_node'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'film.film'}]
[{'fictional_universe.fictional_character'}]
[{'base.kwebbase.kwconnection'}]
[{'visual_art.artwork'}]
[{'base.fight.crime_type'}]
[{'type.int'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'user.jschell.default_domain.famous_speech'}]
[{'aviation.airport_operator'}]
[{'aviation.airport_type'}]
[{'location.location'}]
[{'type.int'}]
[{'symbols.name_source'}]
[{'aviation.airline'}]
[{'aviation.airline'}]
[{'location.location'}]
[{'type.int'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'user.patrick.default_domain.warship_crew_tenure'}, {'user.patrick.default_domain.warship_v1_1'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'celebrities.romantic_relationship'}, {'celebrities.romantic_relationship_type'}]
      Current: 100 / 151
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'military.military_service'}, {'military.rank'}]
[{'media_common.dedication'}, {'media_common.dedicatee'}]
[{'base.firsts.first_achievement'}, {'base.firsts.achievement'}]
[{'event.speech_or_presentation'}, {'event.public_speaker'}]
[{'event.speech_or_presentation'}, {'event.speech_topic'}]
[{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
[{'people.appointment'}, {'people.appointer'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'film.performance'}, {'film.film'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'user.patrick.default_domain.warship_crew_tenure'}, {'military.military_person'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'celebrities.romantic_relationship'}, {'celebrities.celebrity'}]
[{'celebrities.romantic_relationship'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'military.military_service'}, {'military.armed_force'}]
[{'media_common.dedication'}, {'media_common.dedicated_work'}]
[{'celebrities.sexual_orientation_phase'}, {'celebrities.celebrity'}]
[{'base.firsts.first_achievement'}, {'base.firsts.first_achievement_category'}]
[{'base.firsts.first_achievement'}, {'base.firsts.first'}]
[{'event.speech_or_presentation'}, {'event.presented_work'}]
[{'people.appointment'}, {'people.appointed_role'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'aviation.airline_airport_presence'}, {'aviation.airport'}]
[{'travel.transportation'}, {'travel.transport_terminus'}]
[{'aviation.airport_runway'}, {'aviation.airport'}]
[{'aviation.airport_runway'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'location.geocode'}, {'type.float'}]
[{'travel.transportation'}, {'travel.travel_destination'}]
      8 typed schemas retrieved from 151 coarse schemas.
      Calculating F1 for 8 typed schemas: {
        Current: 0 / 8
        Checking schema 0 / 8: {
          [('Main', '==', 'm.0d3k14', ['user.alexander.misc.murdered_person.place_murdered']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.place_murdered ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:user.alexander.misc.murdered_person.place_murdered ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Dallas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 8: {
          [('Main', '==', 'm.0d3k14', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 1
            Final Answer: {'Dallas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 8: {
          [('Main', '==', 'm.0d3k14', ['people.deceased_person.cause_of_death']), ('Type', '==', 'people.cause_of_death', ['type.object.type'])]
          var_types: [{'people.cause_of_death'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.deceased_person.cause_of_death ?o1 . ?o1 fb:type.object.type fb:people.cause_of_death . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Assassination', 'Assassination by firearm'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 8: {
          [('Main', '==', 'm.0d3k14', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0d3k14 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 8: {
          [('Main', '==', 'm.0p1l2', ['aviation.airport.serves']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.serves ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:aviation.airport.serves ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 2
            Final Answer: {'Queens', 'New York City'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 8: {
          [('Main', '==', 'm.0p1l2', ['location.location.containedby']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0p1l2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0p1l2'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 6 / 8: {
          [('Main', '==', 'm.0d3k14', ['people.person.spouse_s', 'people.marriage.location_of_ceremony']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 7 / 8: {
          [('Main', '==', 'm.0d3k14', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:17] Q_Schema Request: {
            WebQ_2187|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0d3k14 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0d3k14'}
            Query return lines = 2
            Final Answer: {'Washington, D.C.', 'Boston'}
            Answers = 2, P = 1.000000, R = 0.666667, F1 = 0.800000
          } [0.006s]
          Answers = 2, P = 1.000000, R = 0.666667, F1 = 0.800000
        } [0.006s]
        5 / 8 typed schemas kept with ans_size > 0.
      } [0.052s]
      Typed level ended, resulting in 156 schemas.
    } [0.067s]
    Time level searching (total times = 0): {
      Current: 0 / 156
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'user.patrick.default_domain.warship_crew_tenure.from', 'user.patrick.default_domain.warship_crew_tenure.to'}, {'user.patrick.default_domain.warship_v1_1.commissioned', 'user.patrick.default_domain.warship_v1_1.decommissioned', 'user.patrick.default_domain.warship_v1_1.struck'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
      Current: 100 / 156
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'user.patrick.default_domain.warship_crew_tenure.from', 'user.patrick.default_domain.warship_crew_tenure.to'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
self.var_time_preds: [{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'celebrities.sexual_orientation_phase.end', 'celebrities.sexual_orientation_phase.start'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 timed schemas retrieved from 156 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 156 schemas.
    } [0.006s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 156
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[{'film.film.initial_release_date'}]
[set()]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[{'film.film.initial_release_date'}]
[set()]
[{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'user.patrick.default_domain.warship_crew_tenure.from', 'user.patrick.default_domain.warship_crew_tenure.to'}, {'user.patrick.default_domain.warship_v1_1.commissioned', 'user.patrick.default_domain.warship_v1_1.decommissioned', 'user.patrick.default_domain.warship_v1_1.struck'}]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
      Current: 100 / 156
[set(), set()]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[set(), set()]
[set(), set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'user.patrick.default_domain.warship_crew_tenure.from', 'user.patrick.default_domain.warship_crew_tenure.to'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
[{'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date'}, set()]
[set(), set()]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[set(), set()]
[{'celebrities.sexual_orientation_phase.end', 'celebrities.sexual_orientation_phase.start'}, set()]
[set(), set()]
[set(), set()]
[{'event.speech_or_presentation.date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), {'sports.sports_team.founded'}]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[set(), set()]
[set()]
[set()]
[set()]
[set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 ordinal schemas retrieved from 156 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 156 schemas.
    } [0.006s]
    [2020-12-03 14:16:17] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 "History of the term ""Catholic"""@en ?type2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name "History of the term ""Catholic"""@en . OPTIONAL { ?o2 fb:common.topic.notable_types ?type2 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o2 "History of the term ""Catholic"""@en ?type2 WHERE { fb:m.0d3k14 fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name "History of the term ""Catholic"""@en . OPTIONAL { ?o2 fb:type.object.type ?type2 .} }
    Return code 400.
    156 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2187_schema].
  } [15.556s]
  Entering Q 2188 / 5810 [b'what are the basic beliefs of islam religion?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [3, 5) (basic beliefs) == m.0647yh (basic belief) {'score': 175.994721, 'source': 2.0}
      #01 Entity: [6, 7) (islam) == m.0flw86 (Islam) {'score': 2.52999, 'source': 1.0}
      #02 Entity: [6, 8) (islam religion) == m.0flw86 (islam) {'score': 7450.169032, 'source': 2.0}
      #03 Type: [7, 8) (religion) == religion.religion (religion) {'sim': 1.0}
      #04 Type: [4, 5) (beliefs) == religion.belief (belief) {'sim': 0.838328}
      #05 Type: [5, 6) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #06 Type: [5, 6) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #07 Type: [5, 6) (of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.814276}
      #08 Type: [7, 8) (religion) == location.religion_percentage (religion percentage) {'sim': 0.791316}
      #09 Type: [5, 6) (of) == measurement_unit.time_unit (unit of time) {'sim': 0.759887}
      #10 Type: [0, 3) (what are the) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.752667}
      #11 Type: [7, 8) (religion) == religion.religious_practice (religious practice) {'sim': 0.744811}
      #12 Type: [5, 6) (of) == chemistry.phase_of_matter (phase of matter) {'sim': 0.74294}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:16:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0647yh ?p1 ?o1 . }
        [2020-12-03 14:16:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0647yh ?p1 ?o1 . }
          Query return lines = 4
        } [0.009s]
        Filt_Query_Ret = 0 / 4 ( 0.009s)
      } [0.009s]
      [Len-1||F2/3] (2020-12-03 14:16:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0flw86 ?p1 ?o1 . }
        [2020-12-03 14:16:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0flw86 ?p1 ?o1 . }
          Query return lines = 29
        } [0.010s]
        Filt_Query_Ret = 18 / 29 ( 0.010s)
        [Len-1||F2/3||1/3-1] (2020-12-03 14:16:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 fb:m.0647yh . }
          [2020-12-03 14:16:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 fb:m.0647yh . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
      } [0.019s]
      [Len-1||F3/3] (2020-12-03 14:16:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0flw86 ?p1 ?o1 . }
        [2020-12-03 14:16:26] SPARQL hit!
        Filt_Query_Ret = 18 / 29 ( 0.000s)
        [Len-1||F3/3||1/3-1] (2020-12-03 14:16:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 fb:m.0647yh . }
          [2020-12-03 14:16:26] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.001s]
      [Len-2||F1/3] (2020-12-03 14:16:26) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0647yh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:26] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0647yh ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 18
        } [0.025s]
        Filt_Query_Ret = 0 / 18 ( 0.025s)
      } [0.025s]
      [Len-2||F2/3] (2020-12-03 14:16:26) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:26] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 462
        } [0.121s]
        Filt_Query_Ret = 14 / 462 ( 0.123s)
        [Len-2||F2/3||1/3-1] (2020-12-03 14:16:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0647yh . }
          [2020-12-03 14:16:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0647yh . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F2/3||1/3-2] (2020-12-03 14:16:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0647yh . }
          [2020-12-03 14:16:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0647yh . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
      } [0.137s]
      [Len-2||F3/3] (2020-12-03 14:16:26) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:26] SPARQL hit!
        Filt_Query_Ret = 14 / 462 ( 0.002s)
        [Len-2||F3/3||1/3-1] (2020-12-03 14:16:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0647yh . }
          [2020-12-03 14:16:26] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/3||1/3-2] (2020-12-03 14:16:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0flw86 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0647yh . }
          [2020-12-03 14:16:26] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.002s]
      64 coarse schemas retrieved from scratch.
      Calculating F1 for 64 coarse schemas: {
        Current: 0 / 64
        Checking schema 0 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.includes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.includes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.includes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 2
            Final Answer: {'Shia Islam', 'Sunni Islam'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.founding_figures'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.founding_figures ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.founding_figures ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Muhammad'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.deities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.deities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.deities ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 2
            Final Answer: {'Allah', 'Mahdi'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 3 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.beliefs'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.beliefs ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.beliefs ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 10
            Final Answer: {'Monotheism', 'God in Islam', 'Tawhid', 'Predestination in Islam', 'Sharia', 'Islamic view of angels', 'Masih ad-Dajjal', 'Qiyamah', 'Islamic holy books', 'Prophets in Islam'}
            Answers = 10, P = 0.100000, R = 1.000000, F1 = 0.181818
          } [0.007s]
          Answers = 10, P = 0.100000, R = 1.000000, F1 = 0.181818
        } [0.007s]
        Checking schema 4 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.notable_figures'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.notable_figures ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.notable_figures ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 4
            Final Answer: {'Umar', 'Ali', 'Abu Bakr', 'Muhammad'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 64: {
          [('Main', '==', 'm.0flw86', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 2
            Final Answer: {'Sacred on Location', 'Sacred: Discover what we share'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 136
            Final Answer: {'Zeynep Sultan Mosque', 'Banya Bashi Mosque', 'Islamic Center of America', 'Jamia Masjid, Srinagar', 'Al-Hakim Mosque', 'Al Taqwa Mosque', 'Huaisheng Mosque', 'London Central Mosque', 'Chesham Mosque', 'Mosque of Islamic Solidarity', 'Jezzar Pasha Mosque', 'Bursa Grand Mosque', 'Murat Paşa Mosque', 'Great Mosque of Djenné', 'Al Fateh Grand Mosque', 'Baitul-Jame, Offenbach', 'Yavuz Selim Mosque', 'Stockholm Mosque', 'Temple Mount', 'Blue Mosque, Yerevan', 'Mohabbat Khan Mosque', 'Gazi Husrev-beg Mosque', 'Aqsunqur Mosque', 'Mosque of Ibn Tulun', 'Mosque in Sendling', 'Sultan Salahuddin Abdul Aziz Mosque', 'Auburn Gallipoli Mosque', 'Berlin Mosque', 'Binat Bibi Mosque', 'Mustafa Paşa Mosque', 'White Mosque', 'Paris Mosque', 'Qolşärif Mosque', 'Sultan Omar Ali Saifuddin Mosque', 'Sayed al-Hashim Mosque', "Islam-aga's Mosque", 'Id Gah Mosque', 'Selimiye Mosque, Nicosia', 'Reykjavík Mosque', 'Masjid e Tooba', 'Green Mosque', 'Antalya Ulu Camii', 'Dublin Mosque', 'Dar Al-Hijrah', 'Nurulla Mosque', 'Arnaudija Mosque', 'Saint Petersburg Mosque', 'Fazl Mosque', 'Lakemba Mosque', 'Mecca', 'Bagha Mosque', 'Masjid Hajjah Fatimah', 'Märcani Mosque', 'Dome of the Rock', 'Iske Tash Mosque', 'Shah Mosque', 'Jama Masjid, Delhi', 'Sultan Ahmed Mosque', 'İsa Bey Mosque', 'Mosque-Madrassa of Sultan Hassan', 'Great Synagogue', 'Al-Sadiq Mosque', 'Al-Masjid an-Nabawi', 'Ketchaoua Mosque', 'Fakr ad-Din Mosque', 'Shah Jahan Mosque, Thatta', 'Badshahi Mosque', 'Aqmar Mosque', 'Niujie Mosque', 'Great Mosque of Taza', 'Mansouri Great Mosque', 'East London Mosque', 'King Saud Mosque', 'Al-Aqsa Mosque', 'Masjid al-Qiblatain', 'Soltan Mosque', 'Yavuz Sultan Selim Mosque', 'Äcem Mosque', 'Faisal Mosque', 'Id Kah Mosque', "Al-Salih Tala'i Mosque", 'Mecca Masjid', 'Bornay Mosque', 'Masjid al-Haram', 'Bajrakli Mosque, Belgrade', 'Tipu Sultan Mosque', 'Ferhat Pasha Mosque', "Great Mosque of Sana'a", 'Hassan Bek Mosque', 'Grand Mosque', 'Tinmel', 'Shrine of Hazrat Ali', 'Masjid-an-Noor, Newfoundland', 'Ibrahim-al-Ibrahim Mosque', 'Mosque Maryam', 'Tombul Mosque', 'Malik Dinar Mosque', 'Pertevniyal Valide Sultan Mosque', 'Fatih Mosque, Bursa', 'Defterdar Mosque', 'Mosque of Uqba', 'Baitul Futuh', 'Selimiye Mosque', 'Cologne Central Mosque', 'Great Mosque of Tlemcen', 'Glasgow Central Mosque', 'Umayyad Mosque', 'Edinburgh Central Mosque', 'Star Mosque', 'Masjid Taha', 'Süleymaniye Mosque', 'Medina Mosque', 'Baiturrahman Grand Mosque', 'Koutoubia Mosque', 'Central Mosque of Lisbon', 'Mosque of Omar Ibn Al-Khattab', 'Islamic Center of Washington', 'Quba Mosque', 'Imam Ali Mosque', 'Birmingham Central Mosque', 'Ibn Uthman Mosque', 'Istiqlal Mosque', 'Chandanpura Masjid', 'Great Mosque of Algiers', 'Saleh Mosque', 'Hassan II Mosque', 'Teşvikiye Mosque', 'Chawk Mosque', 'Grand Mosque of Évry', 'Bibi-Khanym Mosque', 'North London Central Mosque', 'Jama Masjid of Herat', 'University of Al Karaouine', 'Wazir Khan Mosque', "Ali Pasha's Mosque", 'Jeni Mosque'}
            Answers = 136, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 136, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 7 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.practices'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.practices ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.practices ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 10
            Final Answer: {'Adab', 'Zakāt', 'Shahada', 'Islamic dietary laws', 'Mosque Carpet', 'Halal food', 'Hajj', 'Salah', 'Jihad', 'Sawm'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 8 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.collective_term_for_adherents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.collective_term_for_adherents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.collective_term_for_adherents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Muslims'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 9 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.holidays'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.holidays ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.holidays ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 4
            Final Answer: {"Isra and Mi'raj", 'Eid al-Adha', 'Eid al-Fitr', 'Ramadan'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 10 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.branched_into'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.branched_into ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.branched_into ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Sunni Islam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 11 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.types_of_places_of_worship'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.types_of_places_of_worship ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.types_of_places_of_worship ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Mosque'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 12 / 64: {
          [('Main', '==', 'm.0flw86', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 110
            Final Answer: {'Husband of a Fanatic', 'Theology of discontent', 'West Africa, Islam and the Arab World', 'The Golden Age of the Moor', 'Israel and Ishmael', 'Raymund Lull', 'Prayers for the Assassin', 'Ottoman Empire and Islamic tradition', 'The Oxford History of Islam', 'Islam: A Mosaic, Not a Monolith', 'Moslem World', "What's Right with Islam: A New Vision for Muslims and the West", 'Stress Management Techniques', 'Muslim Extremism in Egypt', 'Sufism and knowledge', 'Partisans of Allah: Jihad in South Asia', 'The approaching promise', 'On being a Muslim', 'Quran', 'Defining Islam', 'Bin Laden', 'Between Cross and Crescent', 'THE FIRST JIHAD', 'Sins of the Assassin', 'Raymond Lull', 'The lost-found Nation of Islam in America', 'Perfecting Women', 'Understanding Islam through Hadis', 'Constantinople and Its Problems', 'The Joy of Sacrifice', 'Sufism and wisdom', 'Understanding Islam', 'Making Malcolm', 'An Introduction to Islam', 'The Autobiography of Malcolm X', 'Malcolm X', 'Anthology of World Scriptures', 'Jews and Muslims in the Arab World', 'Studies in popular Islam', 'Covering Islam', 'Devotional Islam and Politics in British India', 'Journey into the Mind of an Islamic Terrorist', 'Ahmad Riza Khan', 'The Secret Order Of Assassins', 'Christians, Muslims, and Islamic Rage', 'Inventing America\'s ""Worst"" Family: Eugenics, Islam, and the Fall and Rise of the Tribe of Ishmael', 'The Fall and Rise of the Islamic State', 'Encyclopedia Of Islam', 'The History and Conquests of the Saracens', 'The revenge of God', 'Muhammad in Europe: A Thousand Years of Western Myth-Making', 'Staging a Revolution', 'Funding Evil', 'Muhammad', 'Trickster travels', 'The Shia Revival: How Conflicts within Islam Will Shape the Future', 'What Went Wrong', 'American Muslims', 'The siege of Valencia', 'Age of Science', 'The Losing Battle with Islam', 'Murder in Amsterdam: The Death of Theo van Gogh and the Limits of Tolerance', 'Poverty and charity in the Jewish community of Medieval Egypt', 'Women and Gender in Islam', 'Prime-time religion', 'Talking to the Other', 'The everlasting hatred', 'Islam Observed', 'The Battle for God', 'Influence of Animism on Islam', 'Government in Kano, 1350-1950', 'A Return to the Spirit', 'Silent No More', 'The Death of Feminism', 'Islam in the United States of America', 'Masnavi ravayeh', 'Muslims', 'Multiculturalism and the Jews', 'What the Bible Says About Muhammad', 'After Jihad', 'The War for Muslim Minds: Islam and the West', 'Islam and the Cross', 'Knighthoods of Christ', 'The Case for Islamo-Christian Civilization', 'Beyond Belief: Islamic Excursions among the Converted Peoples', 'Under Crescent and Cross', 'The Venture of Islam, Volume 1', 'A God Divided', 'Militant Islam Reaches America', 'The changing face of antisemitism', 'Women Claim Islam', 'The Calcutta Quran Petition', 'Islam', 'The Osama bin Laden I Know', 'Symbol and Archetype', 'Allah in the West', 'The road to Mecca', 'Why I Am a Muslim', 'The secret word', 'Truth and Narrative', "What Death of Osama Bin Laden Indicates About Barack Obama's Leadership", 'The End of Days', 'Turkish Labyrinth', 'Inventing God', 'Holy War, Inc.', 'Islamic contestations', 'Jews of a Saharan Oasis'}
            Answers = 107, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 107, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 13 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.is_part_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.is_part_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.is_part_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Abrahamic religions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.sacred_sites'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.sacred_sites ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.sacred_sites ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 3
            Final Answer: {'Jerusalem, Israel', 'Medina', 'Mecca'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 15 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.texts'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.texts ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.texts ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 3
            Final Answer: {'Sunnah', 'Sahih al-Bukhari', 'Quran'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 64: {
          [('Main', '==', 'm.0flw86', ['food.diet_follower.follows_diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Halal food'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 64: {
          [('Main', '==', 'm.0flw86', ['base.argumentmaps.thing_of_disputed_value.disparagement'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:base.argumentmaps.thing_of_disputed_value.disparagement ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:base.argumentmaps.thing_of_disputed_value.disparagement ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 48
            Final Answer: {'Why I Am Not a Muslim', 'Vita Mahumeti', 'American Jihad: The Terrorists Living Among Us', 'Fatima and the Daughters of Muhammad', 'Understanding Islam through Hadis', 'The Story of Islamic Imperialism in India', 'The Life and Religion of Mohammed', "The Trouble with Islam Today: A Muslim's Call for Reform in Her Faith", 'Crossroads to Islam: The Origins of the Arab Religion and the Arab State', 'The Politically Incorrect Guide to Islam (And the Crusades)', 'The River War', 'The Quest for the Historical Muhammad', 'The Legacy of Muslim Rule in India', 'Hindu Temples: What Happened to Them', 'The Savage Nation', 'The Decline of Eastern Christianity: From Jihad to Dhimmitude', 'Invasion: How America Still Welcomes Terrorists, Criminals, and Other Foreign Menaces to Our Shores', 'The Satanic Verses', 'The Caged Virgin', 'Mahomet', 'Rage Against the Veil', 'Leaving Islam: Apostates Speak Out', 'Hagarism: The Making of the Islamic World', 'Negationism in India: Concealing the Record of Islam', 'The God Delusion', 'Defeating Jihad', 'The Calcutta Quran Petition', 'The Truth About Muhammad', 'Liberalism Is a Mental Disorder', 'The Force of Reason', 'Infidel', 'The Dhimmi: Jews and Christians Under Islam', 'Inside Islam: A Guide for Catholics', 'Journey into the Mind of an Islamic Terrorist', 'Onward Muslim Soldiers', 'Alms for Jihad', 'Criticism of Islam', 'Apology of al-Kindy', 'The Myth of Islamic Tolerance', 'The Rage and the Pride', 'The Legacy of Jihad', 'Londonistan: How Britain is Creating a Terror State Within', 'Bruce Bawer', '23 Years', 'The End of Faith', "The West's Last Chance: Will We Win the Clash of Civilizations?", 'Islam and Dhimmitude: Where Civilizations Collide', 'Islam Unveiled'}
            Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 18 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.includes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.includes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.founding_figures'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.founding_figures ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.deities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.deities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.beliefs'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.beliefs ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 10, P = 0.100000, R = 1.000000, F1 = 0.181818
        } [0.000s]
        Checking schema 22 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.notable_figures'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.notable_figures ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 64: {
          [('Main', '==', 'm.0flw86', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 136, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.practices'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.practices ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 26 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.collective_term_for_adherents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.collective_term_for_adherents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.holidays'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.holidays ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.branched_into'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.branched_into ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.types_of_places_of_worship'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.types_of_places_of_worship ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 30 / 64: {
          [('Main', '==', 'm.0flw86', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 107, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 31 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.is_part_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.is_part_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 32 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.sacred_sites'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.sacred_sites ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 33 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.texts'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.texts ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 34 / 64: {
          [('Main', '==', 'm.0flw86', ['food.diet_follower.follows_diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 35 / 64: {
          [('Main', '==', 'm.0flw86', ['base.argumentmaps.thing_of_disputed_value.disparagement'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:base.argumentmaps.thing_of_disputed_value.disparagement ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 36 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.number_of_adherents', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'1300'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 38 / 64: {
          [('Main', '==', 'm.0flw86', ['base.popstra.religion.membership', 'base.popstra.religion_choice.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Islam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 39 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.from_date ?o2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 2
            Final Answer: {'1975', '1453'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 40 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.number_of_adherents', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 41 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'253'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 42 / 64: {
          [('Main', '==', 'm.0flw86', ['base.popstra.religion.membership', 'base.popstra.religion_choice.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.start_date ?o2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'2007'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 43 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Islam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 44 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.to_date ?o2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'1935'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 45 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.number_of_adherents', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Adherents.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 46 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Islam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 47 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 48 / 64: {
          [('Main', '==', 'm.0flw86', ['base.popstra.religion.membership', 'base.popstra.religion_choice.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 2
            Final Answer: {'T-Pain', 'T.I.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 49 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.place_of_worship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.place_of_worship ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.place_of_worship ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 4
            Final Answer: {'Babri Mosque', 'Hagia Sophia', 'Great Synagogue', 'Mecca'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 50 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.number_of_adherents', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 51 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 52 / 64: {
          [('Main', '==', 'm.0flw86', ['base.popstra.religion.membership', 'base.popstra.religion_choice.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 53 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.from_date ?o2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 54 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.number_of_adherents', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 55 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 56 / 64: {
          [('Main', '==', 'm.0flw86', ['base.popstra.religion.membership', 'base.popstra.religion_choice.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.start_date ?o2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 57 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 58 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.to_date ?o2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 59 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.number_of_adherents', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.number_of_adherents ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 60 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 61 / 64: {
          [('Main', '==', 'm.0flw86', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0flw86 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 62 / 64: {
          [('Main', '==', 'm.0flw86', ['base.popstra.religion.membership', 'base.popstra.religion_choice.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:base.popstra.religion.membership ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 63 / 64: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.place_of_worship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.place_of_worship ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        64 / 64 coarse schemas kept with ans_size > 0.
      } [0.241s]
      Coarse level ended, resulting in 64 schemas.
    } [0.435s]
    Type level searching (total types = 10): {
      Current: 0 / 64
[{'religion.religion'}]
[{'religion.founding_figure'}]
[{'religion.deity'}]
[{'religion.belief'}]
[{'people.person'}]
[{'exhibitions.exhibition'}]
[{'religion.place_of_worship'}]
[{'religion.religious_practice'}]
[{'religion.adherents'}]
[{'time.holiday'}]
[{'religion.religion'}]
[{'religion.type_of_place_of_worship'}]
[{'book.written_work'}]
[{'religion.religion'}]
[{'location.location'}]
[{'religion.religious_text'}]
[{'food.diet'}]
[{'base.argumentmaps.expression_of_disvalue'}]
[{'religion.religion'}]
[{'religion.founding_figure'}]
[{'religion.deity'}]
[{'religion.belief'}]
[{'people.person'}]
[{'exhibitions.exhibition'}]
[{'religion.place_of_worship'}]
[{'religion.religious_practice'}]
[{'religion.adherents'}]
[{'time.holiday'}]
[{'religion.religion'}]
[{'religion.type_of_place_of_worship'}]
[{'book.written_work'}]
[{'religion.religion'}]
[{'location.location'}]
[{'religion.religious_text'}]
[{'food.diet'}]
[{'base.argumentmaps.expression_of_disvalue'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
[{'religion.place_of_worship_historical_use'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.popstra.religion_choice'}, {'type.datetime'}]
[{'religion.place_of_worship_historical_use'}, {'religion.religion'}]
[{'religion.place_of_worship_historical_use'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.popstra.religion_choice'}, {'base.popstra.celebrity'}]
[{'religion.place_of_worship_historical_use'}, {'religion.place_of_worship'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
[{'religion.place_of_worship_historical_use'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.popstra.religion_choice'}, {'type.datetime'}]
[{'religion.place_of_worship_historical_use'}, {'religion.religion'}]
[{'religion.place_of_worship_historical_use'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.popstra.religion_choice'}, {'base.popstra.celebrity'}]
[{'religion.place_of_worship_historical_use'}, {'religion.place_of_worship'}]
      9 typed schemas retrieved from 64 coarse schemas.
      Calculating F1 for 9 typed schemas: {
        Current: 0 / 9
        Checking schema 0 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.includes']), ('Type', '==', 'religion.religion', ['type.object.type'])]
          var_types: [{'religion.religion'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.includes ?o1 . ?o1 fb:type.object.type fb:religion.religion . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.includes ?o1 . ?o1 fb:type.object.type fb:religion.religion . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 2
            Final Answer: {'Shia Islam', 'Sunni Islam'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.beliefs']), ('Type', '==', 'religion.belief', ['type.object.type'])]
          var_types: [{'religion.belief'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.beliefs ?o1 . ?o1 fb:type.object.type fb:religion.belief . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.beliefs ?o1 . ?o1 fb:type.object.type fb:religion.belief . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 10
            Final Answer: {'Monotheism', 'God in Islam', 'Tawhid', 'Predestination in Islam', 'Sharia', 'Islamic view of angels', 'Masih ad-Dajjal', 'Qiyamah', 'Islamic holy books', 'Prophets in Islam'}
            Answers = 10, P = 0.100000, R = 1.000000, F1 = 0.181818
          } [0.005s]
          Answers = 10, P = 0.100000, R = 1.000000, F1 = 0.181818
        } [0.005s]
        Checking schema 2 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.practices']), ('Type', '==', 'religion.religious_practice', ['type.object.type'])]
          var_types: [{'religion.religious_practice'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.practices ?o1 . ?o1 fb:type.object.type fb:religion.religious_practice . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.practices ?o1 . ?o1 fb:type.object.type fb:religion.religious_practice . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 10
            Final Answer: {'Adab', 'Zakāt', 'Shahada', 'Islamic dietary laws', 'Mosque Carpet', 'Halal food', 'Hajj', 'Salah', 'Jihad', 'Sawm'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.branched_into']), ('Type', '==', 'religion.religion', ['type.object.type'])]
          var_types: [{'religion.religion'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.branched_into ?o1 . ?o1 fb:type.object.type fb:religion.religion . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.branched_into ?o1 . ?o1 fb:type.object.type fb:religion.religion . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Sunni Islam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 4 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.types_of_places_of_worship']), ('Type', '==', 'religion.type_of_place_of_worship', ['type.object.type'])]
          var_types: [{'religion.type_of_place_of_worship'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.types_of_places_of_worship ?o1 . ?o1 fb:type.object.type fb:religion.type_of_place_of_worship . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.types_of_places_of_worship ?o1 . ?o1 fb:type.object.type fb:religion.type_of_place_of_worship . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Mosque'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.is_part_of']), ('Type', '==', 'religion.religion', ['type.object.type'])]
          var_types: [{'religion.religion'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.is_part_of ?o1 . ?o1 fb:type.object.type fb:religion.religion . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.is_part_of ?o1 . ?o1 fb:type.object.type fb:religion.religion . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Abrahamic religions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.beliefs']), ('Type', '==', 'religion.belief', ['type.object.type'])]
          var_types: [{'religion.belief'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.beliefs ?o1 . ?o1 fb:type.object.type fb:religion.belief . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 10, P = 0.100000, R = 1.000000, F1 = 0.181818
        } [0.000s]
        Checking schema 7 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.types_of_places_of_worship']), ('Type', '==', 'religion.type_of_place_of_worship', ['type.object.type'])]
          var_types: [{'religion.type_of_place_of_worship'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0flw86 fb:religion.religion.types_of_places_of_worship ?o1 . ?o1 fb:type.object.type fb:religion.type_of_place_of_worship . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:26] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 9: {
          [('Main', '==', 'm.0flw86', ['religion.religion.places_of_worship_historical', 'religion.place_of_worship_historical_use.religion']), ('Type', '==', 'religion.religion', ['type.object.type'])]
          var_types: [{'religion.place_of_worship_historical_use'}, {'religion.religion'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.religion ?o2 . ?o2 fb:type.object.type fb:religion.religion . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:26] Q_Schema Request: {
            WebQ_2188|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0flw86 fb:religion.religion.places_of_worship_historical ?o1 . ?o1 fb:religion.place_of_worship_historical_use.religion ?o2 . ?o2 fb:type.object.type fb:religion.religion . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0flw86'}
            Query return lines = 1
            Final Answer: {'Islam'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        9 / 9 typed schemas kept with ans_size > 0.
      } [0.047s]
      Typed level ended, resulting in 73 schemas.
    } [0.051s]
    Time level searching (total times = 0): {
      Current: 0 / 73
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
      0 timed schemas retrieved from 73 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 73 schemas.
    } [0.001s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 73
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[set(), set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[set(), set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'religion.place_of_worship_historical_use.from_date', 'religion.place_of_worship_historical_use.to_date'}, set()]
      0 ordinal schemas retrieved from 73 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 73 schemas.
    } [0.001s]
    [2020-12-03 14:16:26] buffer saved.
    73 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2188_schema].
  } [8.905s]
  Entering Q 2189 / 5810 [b'what is modern egyptian language?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [2, 5) (modern egyptian language) == m.02hx2cr (egyptian arabic) {'score': 4758.577224, 'source': 2.0}
      #01 Entity: [3, 4) (egyptian) == m.02k54 (Egypt) {'score': 20.772839, 'source': 1.0}
      #02 Entity: [3, 4) (egyptian) == m.0kg9 (Ancient_Egypt) {'score': 26.514444, 'source': 1.0}
      #03 Type: [4, 5) (language) == language.language_dialect (language dialect) {'sim': 0.917232}
      #04 Type: [4, 5) (language) == computer.programming_language (programming language) {'sim': 0.872471}
      #05 Type: [4, 5) (language) == language.language_writing_type (language writing type) {'sim': 0.830749}
      #06 Type: [4, 5) (language) == language.human_language (human language) {'sim': 0.830001}
      #07 Type: [4, 5) (language) == language.language_writing_system (language writing system) {'sim': 0.828647}
      #08 Type: [4, 5) (language) == computer.programming_language_paradigm (programming language paradigm) {'sim': 0.812534}
      #09 Type: [4, 5) (language) == language.language_creator (language creator) {'sim': 0.804178}
      #10 Type: [4, 5) (language) == language.language_family (language family) {'sim': 0.802832}
      #11 Type: [4, 5) (language) == fictional_universe.fictional_language (language in fiction) {'sim': 0.782061}
      #12 Type: [4, 5) (language) == computer.programming_language_developer (programming language developer) {'sim': 0.76792}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:16:34) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02hx2cr ?p1 ?o1 . }
        [2020-12-03 14:16:34] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02hx2cr ?p1 ?o1 . }
          Query return lines = 12
        } [0.010s]
        Filt_Query_Ret = 8 / 12 ( 0.010s)
      } [0.010s]
      [Len-1||F2/3] (2020-12-03 14:16:34) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02k54 ?p1 ?o1 . }
        [2020-12-03 14:16:34] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02k54 ?p1 ?o1 . }
          Query return lines = 126
        } [0.008s]
        Filt_Query_Ret = 56 / 126 ( 0.009s)
      } [0.009s]
      [Len-1||F3/3] (2020-12-03 14:16:34) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0kg9 ?p1 ?o1 . }
        [2020-12-03 14:16:34] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0kg9 ?p1 ?o1 . }
          Query return lines = 17
        } [0.006s]
        Filt_Query_Ret = 6 / 17 ( 0.006s)
      } [0.006s]
      [Len-2||F1/3] (2020-12-03 14:16:34) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02hx2cr ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:34] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02hx2cr ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 245
        } [0.029s]
        Filt_Query_Ret = 0 / 245 ( 0.030s)
      } [0.030s]
      [Len-2||F2/3] (2020-12-03 14:16:34) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02k54 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:34] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02k54 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1493
        } [1.034s]
        Filt_Query_Ret = 98 / 1493 ( 1.040s)
      } [1.041s]
      [Len-2||F3/3] (2020-12-03 14:16:35) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0kg9 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:16:35] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0kg9 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 217
        } [0.026s]
        Filt_Query_Ret = 5 / 217 ( 0.027s)
      } [0.027s]
      173 coarse schemas retrieved from scratch.
      Calculating F1 for 173 coarse schemas: {
        Current: 0 / 173
        Checking schema 0 / 173: {
          [('Main', '==', 'm.02hx2cr', ['language.human_language.main_country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.human_language.main_country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.human_language.main_country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 1
            Final Answer: {'Egypt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 173: {
          [('Main', '==', 'm.02hx2cr', ['language.human_language.language_family'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.human_language.language_family ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.human_language.language_family ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 1
            Final Answer: {'Afroasiatic languages'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 2 / 173: {
          [('Main', '==', 'm.02hx2cr', ['base.rosetta.languoid.local_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.local_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.local_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 9
            Final Answer: {'Arabic, Egyptian Spoken'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 3 / 173: {
          [('Main', '==', 'm.02hx2cr', ['base.rosetta.languoid.languoid_class'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.languoid_class ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.languoid_class ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 1
            Final Answer: {'Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 173: {
          [('Main', '==', 'm.02hx2cr', ['language.human_language.region'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.human_language.region ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.human_language.region ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 1
            Final Answer: {'Africa'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 5 / 173: {
          [('Main', '==', 'm.02hx2cr', ['base.rosetta.languoid.document'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.document ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.document ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 4
            Final Answer: {'Arabic, Egyptian Spoken Glossed Text', 'Arabic, Egyptian Spoken Table of Contents', 'Arabic, Egyptian Spoken Etc.', 'Arabic, Egyptian Spoken Grammar'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 173: {
          [('Main', '==', 'm.02hx2cr', ['base.rosetta.languoid.parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:base.rosetta.languoid.parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 1
            Final Answer: {'Arabic Group'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 7 / 173: {
          [('Main', '==', 'm.02hx2cr', ['language.language_dialect.language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.language_dialect.language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hx2cr fb:language.language_dialect.language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hx2cr'}
            Query return lines = 1
            Final Answer: {'Arabic Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 8 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 3
            Final Answer: {'Unitary state', 'Semi-presidential system', 'Republic'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Modern Standard Arabic'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.006s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.006s]
        Checking schema 10 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 29
            Final Answer: {'Al Sharqia Governorate', 'Gharbia Governorate', 'Matrouh Governorate', 'Qalyubia Governorate', 'Beheira Governorate', 'Al Minufiyah', 'Ismailia Governorate', 'Suez Governorate', 'Red Sea Governorate', 'Sohag Governorate', 'Kafr el-Sheikh Governorate', 'South Sinai Governorate', 'New Valley Governorate', 'Aswan Governorate', 'Giza Governorate', 'Alexandria Governorate', 'Port Said Governorate', 'Cairo Governorate', 'Faiyum Governorate', 'Dakahlia Governorate', 'Beni Suef Governorate', 'Minya Governorate', 'Cairo', 'Asyut', 'Qena Governorate', 'Qena', 'Beni Suef', 'Damietta Governorate', 'North Sinai Governorate'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 11 / 173: {
          [('Main', '==', 'm.02k54', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:35] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 12 / 173: {
          [('Main', '==', 'm.02k54', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 13 / 173: {
          [('Main', '==', 'm.02k54', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Earth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 14 / 173: {
          [('Main', '==', 'm.02k54', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Sovereign state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 15 / 173: {
          [('Main', '==', 'm.02k54', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 173: {
          [('Main', '==', 'm.02k54', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 3
            Final Answer: {'Parliament of Egypt', 'Shura Council', 'House of Representatives'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 17 / 173: {
          [('Main', '==', 'm.02k54', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 5
            Final Answer: {'Egyptian Ministry of Culture', 'Egyptian Ministry of Foreign Affairs', 'Egyptian Ministry of Agriculture and Land Reclamation', 'Egyptian Ministry of Education', 'Central Agency for Public Mobilization and Statistics'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 18 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 442
            Final Answer: {'Hassan Moustafa', 'Mohammed Abbas', 'George Michel Serkeis', 'Paphnutius of Thebes', 'Mansoura Ez-Eldin', 'Ken Malick', 'Muhammad Aladdin', 'Aziz Suryal Atiya', 'Mohamed Fadel', 'Iris Nazmy', 'Caesarion', 'Assem Allam', 'Mohamed Salah El Azab', 'Gamal al-Banna', 'Abdelhamid Abdou', 'Ibrahim Oweiss', 'Said Mohamed Otta', 'Shoukry Sarhan', 'Muhammed Hussein Heikal', 'Mohamed Azima', 'Salah Ragab', 'Thirwat Shehata', 'Hany El Banna', 'Mimi El-Sherbini', 'Hassan Raghab', 'Macarius of Alexandria', 'Ahmed Abdel-Raouf', 'Alaa Ali', 'Sami El-Sheshini', 'Reem Bassiouney', 'Karim Ali Fathy', 'Ramadan Ragap', 'Hagar', 'David Sheldrick', 'Bahgat Kamar', 'Ibrahim Shams', 'Gawhara Mohamed Hassan', 'Mohamed Shaaban', 'Marianne Khoury', 'Amr Barakat', 'Osama Hassan', 'Ahmed El Merghany', 'Sharif Fati Ali Al Mishad', 'Mohab Said', 'Riham Abdel Ghafour', 'Ibrahim Elsamni', 'Ahmed Badrakhan', 'Tarek Sharif', 'Hospitius', 'Ahmad ibn Muhammad al-Tahawi', 'Mohammed Atef', 'Colin Renshaw Lucas', 'Alaa Abdel-Ghany', 'Omar Nour', 'Adel Darwish', 'Saad Soleit', 'Magda El-Khatib', 'Shadi Taha', 'Mahmoud Khalil Al-Hussary', 'Moses', 'Mervat Tallawy', 'Ibrahim Abouleish', 'Francesco Foscari', 'Ibrahim El-Shayeb', 'Amro Sherif', 'Hamada Sedki', 'Magdy Tolba', 'Nezar AlSayyad', 'Kamel Mosaoud', 'Ahmed Salama', 'Zeinat Sedki', 'Kimon Evan Marengo', 'Hassan Heshmat', 'Osman Ahmed Osman', 'Abdallah Shahat', 'Mahmoud Riad', 'Mark A. Gabriel', 'Michael Black', 'Abdel Hakim Amer', 'Abbas Fares', 'Khaled Mohieddin', 'Aia Mohamed', 'Shehab El-Din Ahmed', 'Adel El Maamour', 'Saint Shenouda the Archimandrite', 'Maurice Cohen', 'Mohamed El Yamani', 'Kamal Khalil', 'Sami Hosni', 'Malak Koura', "'Aziz 'Ali al-Misri", 'Theophylact Simocatta', 'Judy Curry', 'Tahiya Karioka', 'Ahmed Khadr', 'Paul of Thebes', 'Shareef Abdelhaleem', 'Mahmud Shaltut', 'Ali Mahir Pasha', 'Hussein Kamal', 'Mohamed Abdelwahab Abdelfattah', 'Naguib Sawiris', 'Ibrahim Elfiky', 'Salama Ahmed Salama', 'Sameh Naguib', 'Karim Adel Abdel Fatah', 'Sheikh Ahmed Amir', 'Aida Abdel Aziz', 'Mahmoud Abdel Rahim', 'Ahmed Gamal el-din', 'Abdulhadi Isa Omran', 'Somaya El Khashab', 'Belal Fadl', 'Yacout El-Soury', 'Rami Serry', 'Reda Shehata', 'Anoushka', 'Saif al-Adel', 'Wael Khalil', 'Aziz Fahmy', 'Ahmad Ismail Ali', 'Mohamed Nagieb', 'Arsinoe II', 'Abdelwahed El-Sayed', 'Hossam Badrawi', 'Salah Marei', 'The Bottler', 'Sama El-Masry', 'Ahmed al-Senussi', 'Ahmed Mohammed Hamed Ali', 'Wael Zenga', 'Nagat el Saghira', 'Mohamed Abdel Ghani el-Gamasy', 'Salah Zulfikar', 'Ahmed Maher', 'Adel Iskandar', 'Hany Armanious', 'Homos', 'Gomaa Frahat', 'Ismail Rafaat', 'Emad Adeeb', 'Aly Hindy', 'Zainab al Ghazali', 'Nick Lalich', 'Ephraim', 'Mounir Sabet', 'Ezzat Abou Aouf', 'Princess Rym', 'Adel Adham', 'Ahmed Abdalla Rozza', 'Dawood Hosni', 'Nawāl Saʻdāwī', 'Adel Abdel Bari', 'Ehab Tawfik', 'Mostafa Abdel Satar', 'Ibrahim Moussa', 'Khaled El Hagar', 'Samy Abu Zaid', 'Michael Stern', 'Youssef Gamal', 'Pishoy', 'Reham Saeed', 'Abdul Hamid Bassiouny', 'Mohammed Salah', 'Pope Dioscorus I of Alexandria', 'Mohammed Bakhati', 'Tarek Yehia', 'Mamdouh Shoukri', 'Anthony Elgindy', 'Paul of Tammah', 'Amr Adel', 'Shaher Abdulhak', 'Mohamed Halim', 'Nader Nour', 'Ahmed Khaled', 'Fayez Sarofim', 'Mahmoud Abou El-Saoud', 'Emad El-Sayed', 'Al-Ashraf Khalil', 'Mohamed Reda', 'Sherif Hazem', 'Abdel Aziz Mahmoud', 'Fabio Morábito', 'Al-Sayed Hamdy', 'Amr Hamzawy', 'Hady Khashaba', 'Abd El-Razzak El-Sanhuri', 'MC Amin', 'Manasseh', 'Ahmad Mahir Pasha', 'Mary of Egypt', 'Emad Effat', 'Islam Osama Elkarim', 'Ali Idrees', 'Isaac Israeli ben Solomon', 'Omar Gamal', 'Mostafa El-Sayed', 'Ahmed Kattawi', 'Ahmed Gebrel', 'Samir Sabry', 'Abdel Nasser Tawfik', 'Karim Maamoun', 'Midhat Mursi', 'Hala Fakher', 'Frank Agrama', 'Wagih El-Kashef', 'Hassan El-Far', 'Gameel Al-Batouti', 'Gamal Abdelhamid', 'Khaled Mohamed Saeed', 'Hossam Abd El-Moneim', 'Nassef Sawiris', 'Ahmed Eid Abdel Malek', 'Rashad Khalifa', 'Qasim Amin', 'Alaa Ibrahim', 'Mostafa Gaafar', 'Ezz Eddin Hosny', 'Abdel-Moniem El-Ganayni', 'Ali Sabri', 'Noha Radwan', 'Mohamed Nasef', 'Mohamed Khalaf', 'Hazem Mohamed Emam', 'Ahmed Ali Kamel', 'Hadji Ali', 'Saint Menas', 'Yasser Rayyan', "Mostafa Saadeq Al-Rafe'ie", 'Labib Mahmoud', 'Taha Ismail', 'Ahmed Kamel Morsi', 'Al-Hakim bi-Amr Allah', 'Mona Soliman', 'Alaa Mayhoub', 'Hassan Youssef', 'Abdel Hamid Badawi', 'Yasser Abdel Rahman', 'Mahmoud El-Nigero', 'Nashoua Mostafa', 'Mohamed Riad Ibrahim', 'Murad Muwafi', 'Heba Kotb', 'Dalal Abdel Aziz', 'Mamoun Fandy', 'Mamdouh Habib', 'Hassan Youssif', 'Waguih Ghali', 'Said Ashour', 'Adel Abdelrahman', 'Wafaa El-Sadr', 'Essam al-Ridi', 'Shawky Gharib', 'Wael Abbas', 'Hakob Hakobian', 'Mohamed Sanad', 'Ali El-Said', 'Taj El-Din Hilaly', 'Mostafa Kamal Tolba', 'Ahmed El Maghrabi', 'Adham Wanly', 'Basil Gogos', 'Islam Siam', 'Ismail Fahmi', 'Ahmed Abdel Muti Hijazi', 'Tony Tuckson', 'Mohamed Khafagy', 'Sahar Tawfiq', 'Ash Atalla', 'Ibrahim El-Gohary', 'Ahmed El-Nahass', 'Osama Mohamed', 'Nabih Youssef', 'Aly Saleh', 'Yusef Greiss', 'Louis Awad', 'Zain Abdul Hady', 'Fadwa El Guindi', 'Hossam el-Hamalawy', 'Magdi Khalil', 'Ahmed Halim Ibrahim', 'Hala Elkoussy', 'Mohamed Abdel Monsef', 'Suleiman Khater', 'Manal Salama', 'Tatamkulu Afrika', 'Ali Shafi', 'Ihab El-Masry', 'Adel Sedra', 'Matt Flinders', 'Ahmed F. Mehalba', 'Mohammad Hosny', 'Mohamed Refaie', 'Ahmad Shedid Qinawi', 'Marwan Hamed', 'Khaled El Sawy', 'Ismail Farouk', 'Abdallah Said', 'Tahseen Bashir', 'Abdullah Farouk', 'Islam Saber', 'Ramadan Yasser', 'Wael Shafik', 'Mohamed Aboul Ela', 'Essam Mahmoud', 'Mohamed Abdelfatah', 'Moses the Black', 'Fathia Nkrumah', 'Ahmed Salah Hosny', 'Ezzedine Choukri Fishere', 'Amr Samaka', 'Ali Mohamed', 'Hafez Kasseb', 'Hassan Fayek', 'Sumi Helal', 'Ayten Amin', 'Hani Sarie-Eldin', 'Charles A. Watson', 'Abanoub', 'Al-Nasir Muhammad', 'Sherif Sabry', 'Emad Abdel Ghaffour', 'Ali Pasha Mubarak', 'Abu Hamza Rabia', 'Metropolitan Mikhail of Asyut', 'Vic Tablian', 'Mona Baker', 'Mohamed El-Shamy', 'Ibrahim Isaac Sidrak', 'Poemen', 'Heba Yossry', 'Gregory Woods', 'Salah Amin', 'Mohammed Mahdi Akef', 'Tewfik El Dekn', 'Barry Trivers', 'Mostafa Taha', 'Mohamed Youssef Ibrahim', 'Muhammad Abdel-Haleem', 'Abdul Rahman Hassan Azzam', 'Ahmed Tharwat', 'Ahmed Sabry', 'Abdel Waress Assar', 'Hesham Issawi', 'Tarek El-Bishry', 'Sosibius', 'Bishoy Kamel', 'Moatasem Salem', 'Ahmad Maher', 'Rashad Mehanna', 'Kamal Abbas', 'Ahmed Gaafar', 'Thirwat Salah Shirhata', 'Sherif El Azma', 'Yehia Osama', 'Mustafa Hussein', 'Sufi Abu Taleb', 'Gamal Abdel-Rahim', 'Madiha Kamel', 'Muhammad Husayn Haykal', 'Magdy Atwa', 'Shihab al-Din al-Qarafi', 'Ahmed Magdy', 'Makram Ebeid', 'Ahmed Shaaban', 'Hesham Youssef', 'Mostafa Hegab', 'Bishop Missael', 'Samha El-Kholy', 'Demiana', 'Mohammed al-Ghazali', 'Ali Hassan Kuban', 'Rami Imam', 'Saber Eid', 'Tewfik Saleh', 'Rehab Bassam', 'Yathreb Adel', 'Hassan Sabry Pasha', 'Ahmed Ghoneimy', 'Bishop Angaelos', 'Saint Amun', 'Khaled Samy Abdallah Ismail', 'George El Mozahem', 'Namir Abdel Messeeh', 'Salma Shabana', 'Ahmed El Aash', 'Fekry Abaza', 'Hagar in Islam', 'Sayed Darwish', 'Kamal El Sheikh', 'Attia Sharara', 'Mahmoud El-Badry', 'J. B. Gunn', 'Paul Antaki', 'Samah Selim', 'Abdul Latif Sharif', 'Abdel Hey Adib', 'Nabil Seidah', 'Ahmed Nabil ""Manga""', 'Jamal Badawi', 'Atef El-Tayeb', 'Iman Mersal', 'Raafat Attia', 'Abdul Khalek Hassouna', 'Kamal el-Fayoumi', 'Mohamed Reda Bobo', 'Princess Nazli Fazl', 'Yosri Fouda', 'Lena Cymbrowitz', 'Hamed Abdel-Samad', 'Niazi Mostafa', 'Nawal El Saadawi', 'Mansour el-Essawy', 'Kamal Selim', 'Ahmed Hassan Farag', 'Ahmed Mostafa', 'Mahmoud Hassan ""Trezeguet""', 'Abdallah Ragab', 'Rabei Osman', 'Boutros Ghali', 'Mahmoud Abdel Rahman Fahmy', 'Abdul-Monem Al-Mashat', 'Ibrahim Abdel Hamidu Sharli', 'Hassan Hathout', 'Maher Hammam', 'Hassan Mustafa Osama Nasr', 'Abd al-Hamid Kishk', 'Georges Hanna Sabbagh', 'Mahmoud Wagdy', 'Khaled El-Ghandour', "Isma'il Sidqi", 'Abu Ayyub al-Masri', 'Mahmoud Abdelaati', 'Mahmoud Mohieldin', 'Michael M. Meguid', 'Joseph Camilleri', 'Amram', 'Hussein Ali', 'Abdullah Ahmed Abdullah', 'Akmal Saleh'}
            Answers = 440, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 440, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 19 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Sahara', 'Libyan Desert'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 173: {
          [('Main', '==', 'm.02k54', ['military.military_combatant.belongs_to_combatant_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Triple Entente'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 21 / 173: {
          [('Main', '==', 'm.02k54', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Pwt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 22 / 173: {
          [('Main', '==', 'm.02k54', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 10
            Final Answer: {"Egypt men's national volleyball team", 'Egypt national football team', 'Egypt Davis Cup team', 'Egypt Fed Cup team', 'Egypt national futsal team', 'Egypt national beach handball team', 'Egypt national cricket team', 'Egypt national under-20 football team', "Egypt men's national water polo team", 'Egypt national handball team'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 173: {
          [('Main', '==', 'm.02k54', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Africa'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 24 / 173: {
          [('Main', '==', 'm.02k54', ['base.militaryinfiction.location_in_fiction.universe'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.universe ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.universe ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'I, the Sun universe', 'The Sacred Band of Stepsons universe'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 25 / 173: {
          [('Main', '==', 'm.02k54', ['base.militaryinfiction.location_in_fiction.works_set_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Tempus Unbound', 'I, the Sun'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 26 / 173: {
          [('Main', '==', 'm.02k54', ['base.militaryinfiction.location_in_fiction.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Ancient Egypt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 27 / 173: {
          [('Main', '==', 'm.02k54', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 5
            Final Answer: {'Al A Sakara King', 'Al Ahram Beverages Co. Stella Export', 'El Gouna Beverage Co. Sakara Premium', 'El Gouna Beverage Co. Sakara Gold', 'Al Ahram Beverages Co. Stella'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 28 / 173: {
          [('Main', '==', 'm.02k54', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 7
            Final Answer: {'Egyptian Mau', 'Abyssinian', 'Chausie', 'Sphynx', 'Armant', 'Egyptian Fayoumi', 'Saluki'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 29 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Egyptian pound'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 30 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 8
            Final Answer: {'Domari Language', 'Egyptian Arabic', 'Siwi Language', 'Bedawi Arabic', 'Nobiin Language', 'Arabic Language', 'Arabic, Sudanese Spoken Language', "Sa'idi Arabic"}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'eg'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 32 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.first_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 27
            Final Answer: {'Al Sharqia Governorate', 'Gharbia Governorate', 'Matrouh Governorate', 'Qalyubia Governorate', 'Beheira Governorate', 'Al Minufiyah', 'Ismailia Governorate', 'Suez Governorate', 'Red Sea Governorate', 'Asyut Governorate', 'Sohag Governorate', 'Kafr el-Sheikh Governorate', 'South Sinai Governorate', 'New Valley Governorate', 'Aswan Governorate', 'Giza Governorate', 'Alexandria Governorate', 'Port Said Governorate', 'Cairo Governorate', 'Faiyum Governorate', 'Dakahlia Governorate', 'Beni Suef Governorate', 'Minya Governorate', 'Qena Governorate', 'Luxor Governorate', 'Damietta Governorate', 'North Sinai Governorate'}
            Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 33 / 173: {
          [('Main', '==', 'm.02k54', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Egyptian governorate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 34 / 173: {
          [('Main', '==', 'm.02k54', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 3
            Final Answer: {'Speaker of the House of Representatives', 'Vice President of Egypt', 'Prime Minister of Egypt'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 35 / 173: {
          [('Main', '==', 'm.02k54', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Government of Egypt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 36 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 588
            Final Answer: {'Crocodilopolis', 'Babylon', 'American Cairo International College, main campus', 'Mount Catherine', 'Borg El Arab Airport', '6th October Bridge', 'Serabit el-Khadim', 'Asyut Governorate', 'Precinct of Amun-Re', 'TT81', 'Ismaïlia', 'Cairo International Stadium', 'Faculty of Dentistry', 'Victoria College, Alexandria', 'Hazeroth', 'Banha', 'Tahpanhes', 'Pyramid of Amenemhat III', 'Rosetta', 'Girga', 'Fraser Tombs', 'Tebtunis', 'Eileithyiaspolis', 'Maghagha', 'KV3', 'KV6', 'Talkha', 'Qalyub', 'Rahmaniyah Island', 'KV5', 'Heliopolis', 'Abu Simbel Airport', 'Arsinoe', 'Abu Qir Bay', 'Abu Suwayr Air Base', 'El Kab', 'Helwan University', 'Itbay', 'KV40', 'Syrian Monastery, Egypt', 'Meidum', 'El Shorouk Academy', 'Buto', 'Ptolemais Hermiou', 'Ahram Canadian University', 'Mersa Matruh', 'Zaafarana palace', 'Assiut University', 'Nekhen', 'Cairo Military Academy Stadium', 'Sidi Abdel Rahman', 'Giza Governorate', 'Naucratis', 'TT7', 'Temple of Dendur', 'Antinopolis', "Saint Clare's College, main campus", 'Misr University for Science and Technology', 'El homaydat, main campus', 'Mosque-Madrassa of Sultan Hassan', 'Qena Governorate', 'Aga Khan University, Egypt Campus', 'Atfih', 'Ramses Station', 'Arab Open University, Egypt', 'Sharuna', 'North Sinai Governorate', 'Marsa Alam International Airport', 'Pyramid of Khendjer', 'KV30', 'Edfu-Project', 'Convocation Center', 'Ismailia Governorate', 'KV27', 'Kafr el-Sheikh Governorate', 'New Valley Project', 'Gebel el-Silsila', 'New Valley Governorate', 'Temple of Kom Ombo', 'Ramesseum', 'Dendera Temple complex', 'Damanhour Stadium', 'KV39', 'Akoris', 'Pyramid of Ameny Qemau', 'Alexandria Governorate', 'El-Tor', 'KV11', 'Sporting', "Kitchener's Island", 'El-Assasif', 'Djebel Al Awaynat', 'Beni Suef', 'Petro Sport Stadium', 'Taba International Airport', 'Apis', 'Chapelle Rouge', 'TT71', 'Al Sharqia Governorate', 'Faculty of Medicine Tanta University', 'Suez Canal overhead powerline crossing', "Zawyet el'Aryan", 'Matai', 'Kharga Oasis', 'KV38', 'Koubbeh Palace', 'KV49', 'Halfaya Pass', 'Zagazig University', 'Arab Media & Society', 'Temple of Kalabsha', "Pharaoh's Island", 'Alexandria American College, main campus', 'Beni Hasan', 'Sais', 'Sallum', 'Sidi Barrani', 'Saint Mark Coptic Orthodox Church', 'Nile University', 'Arcadia Aegypti', 'Deir Mawas', 'Kassassin', 'Ismailia Stadium', 'Berenice Troglodytica', 'Hawara', 'Cairo Opera House', 'Hebenu', 'TT1', 'El Fateh', 'KV2', 'TT16', 'TT9', 'Greater Cairo', 'Athribis', 'Arab Academy for Science and Technology and Maritime Transport', "Saint Catherine's Monastery", 'TT106', 'Abusir', 'Port Said Airport', "Dra' Abu el-Naga'", 'Matrouh Governorate', 'Kellis', 'Egypt', 'Avaris', 'Shubra', 'Future University in Egypt', 'Youm 7', 'Beheira Governorate', 'Pithom', 'Shellal', 'Cairo Stadium Indoor Halls Complex', 'Nahda University, main campus', 'Damanhur', 'Musha, Egypt', 'Al Gharbiyah', 'Marina', 'TT38', 'TT18', 'Tennis, Egypt', 'Sabil-Kuttab of Katkhuda', 'KV37', 'KV48', 'Sadat academy', 'Faiyum Governorate', 'KV29', 'Suez Canal Bridge', 'WV22', 'Pyramid of Djoser', 'Beni Suef Governorate', 'Sidi Arif Mosque', 'Pyramid of Teti', 'Dahshur', 'Aswan International Airport', 'Mosque of Ibn Tulun', 'El-Lahun', 'Nile Delta', 'KV12', 'Wadi Maghareh', 'Mount Helal', 'TT31', 'El Ferdan Railway Bridge', 'Library of Alexandria', 'El Gora Airport', 'El Hiba', 'Famine Stela', 'White Monastery', 'El-Qantarah el-Sharqiyya', 'Port Fuad', 'TT3', "Al-Qatta'i", 'Ain Shams University Faculty of Medicine', 'Hurghada International Airport', 'Suez Governorate', 'El Mansoura Stadium', 'Pyramid of Userkaf', 'Pelusium', 'Sohag Governorate', 'Saqqara', 'Red Pyramid', 'KV13', 'KV44', 'Nabta Playa', 'The Hanging Church', 'Ain Shams', 'Faiyum Oasis', 'New Cairo', 'Amrit, Egypt', 'Apollonopolis Parva', 'Faiyum', 'Taba, Egypt', 'Sinai University', 'Wadi Al-Hitan', 'KV14', 'KV21', 'Leontopolis', 'Modern Sciences and Arts University', 'Pyramid of Khafre', 'Qus', 'Arish', 'El Araba El Madfuna', 'Suez Canal University', 'KV31', 'British University in Egypt', 'Helwan Governorate', "El-Mo'alla", 'Pyramid of Djedefre', 'Abutig', 'Port Said', 'Speos Artemidos', 'Pyramid of Neferefre', 'El Ghanayem', 'Gebelein', 'TT37', 'Dakhla', 'Pyramid of Unas', 'Sebennytos', 'TT96', 'Tomb C.3', 'Elephantine', 'TT51', 'Sehel Island', 'Higher technological institute', 'Leonardo da Vinci Art Institute', 'Memphis', 'Thmuis', 'Amarna', 'Tomb ANB', 'Tomb of Nebamun', 'Rudranath', 'Karanis', 'Dakahlia Governorate', 'Sharm el-Sheikh', 'Luxor International Airport', 'Al Ismailiyah Air Base', 'Mit Ghamr', 'Olbia', 'Modern Academy In Maadi', 'Suez', 'Farafra', 'Nuweiba', 'Theban Necropolis', 'Asyut International Airport', 'KV34', 'Plastic Stadium', 'Hurghada', 'Giza Necropolis', 'TT29', 'Lake Mariout', 'Gharbia Governorate', 'Khufu ship', 'TT55', 'Sharq Al-Owainat', 'White Chapel', 'Embaba Airport', 'South Valley University', "El-Sheikh Sa'id", 'Abnub', 'Faculty of Oral and Dental Medicine Misr International University, main campus', 'Malkata', 'Sohag University', 'Canadian International College', 'Suhaj', 'Heptapolis', 'Cairo University School of Medicine', 'Hellenion', 'Bir Gifgafa Airfield', 'KV42', 'Minya Governorate', 'Safaga', 'Asyut', 'Abu Mena', 'Temple of Amenhotep IV', 'Qena', 'Medamud', 'KV60', 'El-Balyana', 'KV17', 'Zagazig', 'Gulf of Suez', 'WV23', 'Manfalut', 'KV18', 'Qattara Depression', 'Faculty of Dentistry Ain Shams University, main campus', 'Assiut Airport', 'Faggala', 'Abu-Ageila', 'South Sinai Governorate', 'Shubra El-Kheima', 'Gidi Pass', 'Aswan Governorate', 'TT52', 'Ain Shams University', 'KV36', 'Mosque of Muhammad Ali', 'Karnak', 'Port Said Governorate', 'Imbaba', 'Zawyet el-Maiyitin', 'Esna', 'KV46', 'Xois', 'Mit Abu al-Kum', 'Gezira Island', 'Edfu', 'Lake Moeris', 'Luxor Governorate', 'TT13', 'Syout', 'TT11', 'KV26', 'Nasr City', 'Great Pyramid of Giza', 'TT2', 'El-Tod', 'Narmer American College, main campus', 'TT14', 'Colossi of Memnon', 'Ramadan 10 University, main campus', 'Fustat', 'KV43', 'KV55', 'TT60', 'Temple of Edfu', 'Minya', 'Agilkia Island', 'TT409', 'TT6', 'Sharm el-Sheikh International Airport', 'Mount Sinai', 'Yamit', 'TT33', 'El-Idwa', 'KV1', 'Monastery of Saint Anthony', 'Press Alex', 'Tombs of the Nobles', 'Governorates of Egypt', 'Khedivial Opera House, Cairo', 'Mosque of Amr ibn al-As', 'TT56', 'Port Tewfik Memorial', 'Al-Azhar University', 'El Maris', 'Acanthus', "St. George's College, Cairo", 'Giza', 'Genena Mall', 'Zawiyet Umm el-Rakham', 'Philae', 'Bahariya Oasis', 'RAF Fayid', 'Jebel Uweinat', 'Landing Ground 174', 'Coptic Museum', 'Lycopolis', 'Mit Okba Stadium', 'Abu Rawash', 'Military Technical College', 'Al-Qusayr, Egypt', 'El-Maragha', 'KV4', 'KV33', 'KV62', 'Thebes', '6th of October Governorate', 'Banha University', 'El-Hawawish', 'Misr International University', 'Sodfa', 'Al-Gawhara Palace', 'Cairo International Airport', 'Damietta', 'Damietta Governorate', 'Gezira Center for Modern Art', 'KV9', 'Mitla Pass', 'Pyramid of Neferirkare', 'TT192', 'KV7', 'Cairo Tower', 'Ballana', 'Badr City', 'New Kalabsha', 'Deir el-Medina', 'Busiris', 'Ramses College', 'Luxor', 'Delta University for Science and Technology, main campus', 'Basyoun', 'Deversoir Air Base', 'TT5', 'Abu Qir', 'KV20', 'TT89', 'Red Sea Governorate', 'Cave of Swimmers', 'Al-Fayyum University', 'Gerzeh culture', 'Tel-el-Kebir', 'Mansoura College International School AMG, main campus', 'TT39', 'KV28', 'Qaha', 'Wadi El Natrun', 'Heliopolis University', 'Mendes', 'Apollonos Hydreium', 'Hieracon', 'Tarkhan', 'TT120', 'Mansoura University', 'Mubarak International Stadium', 'Faculty of Dentistry Mansoura University, main campus', 'Valley of the Kings', 'White Pyramid', 'Modern Academy For Engineering & Technology', 'Mallawi', 'Al-Ahram Canadian University, main campus', 'Harras El-Hedoud Stadium', 'Serbonian Bog', 'Medinet Habu', 'St. Catherine International Airport', 'KV10', 'Nubian Monuments from Abu Simbel to Philae', 'Qasr al-Nil Bridge', 'TT12', 'KV16', 'Hermopolis', 'Tuna el-Gebel', 'Sinai Peninsula', 'Precinct of Mut', 'TT280', 'Alexandria International Airport', 'KV19', 'Abu Qirqas', 'Mersa Matruh Airport', 'Pyramid of Sahure', 'Shibin Al Kawm, Al Minufiyah', 'Bubastis', 'Suez Canal', 'KV56', "Université Française d'Égypte", 'Cairo West Airport', 'Beni Mazar', 'El-Khokha', "Mastabet el-Fara'un", 'Kom Ombo', 'Small Aten Temple', 'Desouk', "Saint Mark's Coptic Orthodox Cathedral, Cairo", 'Shalateen', 'Pyramid of Senusret I', 'Kafrelsheikh University', 'Cairo Governorate', 'DB320', 'Bahr Yussef', 'Pyramid of Djedkare-Isesi', 'Haram el-Shawaf', 'Oxyrhynchus', 'Tanda', 'Siwa Oasis', 'El Alamein', 'Al-Qurn', 'Kafr el-Sheikh', 'Helwan', 'Sakoula DNC', 'TT99', 'El Gouna', 'El Arish International Airport', 'Deir el-Bahari', 'Red Monastery', 'TT4', 'Herakleopolis Magna', 'Bab Zuweila', 'Islamic Cairo', 'Pachnamunis', 'Arab Contractors Stadium', 'Museum of Islamic Art, Cairo', 'Serapeum', 'Alexandria', 'Al Minufiyah', 'TT69', 'Dairut', 'Cusae', 'Maadi', 'Unfinished obelisk', 'Bawiti', 'October 6 University', 'Beni Mur', 'Mazghuna', 'KV61', 'Belqas', 'TT36', 'Aswan', 'Babylon Fortress', 'Great Sphinx of Giza', 'TT57', 'Nag Hammadi', 'Alexandria University', "Hala'ib", 'Aidab', 'Coptic Cairo', 'Tima, Egypt', 'Cairo', 'Cairo Citadel', 'TT319', 'RAF El Amiriya', 'Tahta', 'KV8', 'Akhmim', 'Dahab', 'Luxor Temple', 'Noubarya', 'El Tor Airport', 'Kottomia Observatory', 'Hermonthis', 'Sheikh Zayed City', 'Qift', 'Qasr Ibrim', 'Deir el-Bersha', 'Tanis', 'WV24', 'El-Mahalla El-Kubra', 'KV15', 'Aswan Dam', 'Sidi Haneish Airfield', 'University of Tanta', 'El Senbellawein', 'WV25', 'Mit Gazal', 'Bent Pyramid', 'Sheikh Abd el-Qurna', 'RAF El Daba', 'TT10', 'German University in Cairo', 'Qalyubia Governorate', 'Faculty of Medicine-Misr University for Science and Technology, main campus', 'Grand Egyptian Museum', 'Mansoura, Egypt', 'Kafr el-Dawwar', 'Minufiya University', 'Bilbeis', 'Samalut', 'Abu Simbel temples', 'Naqada', 'Ras Sedr', 'TT240', 'Egyptian Museum', 'Idku', 'Heliopolis Palace', 'Tanta', 'Sohag International Airport', 'Sharq Al-Owainat Airport', 'KV35', 'TT188', 'El Gorah', 'Cairo University', 'Dendera'}
            Answers = 579, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 579, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 37 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 51
            Final Answer: {'Byzantine–Sassanid War of 602–28', '2011 Egyptian protests', 'Seventh Crusade', 'Arab–Byzantine wars', 'Kitos War', 'Byzantine–Sassanid wars', 'Middle East Theatre of World War II', 'French Revolutionary Wars', 'North African theatre', 'Egyptian Revolution of 1952', 'Libyan–Egyptian War', '1976 Arab League summit', 'Operation Tagar', 'Battle of Toski', 'Alexandria expedition of 1807', 'Kosheh Massacres', 'Crusader invasions of Egypt', 'North African Campaign', 'Greco-Persian Wars', 'Battle of al-Babein', 'Muslim conquest of Egypt', 'Anglo-Egyptian War', '1970 Arab League summit', 'Mahdist War', 'Religious violence in Egypt', 'Suez Crisis', 'Ocean transport and erection of Cleopatra’s Needle, (from Egypt to) London, 1878', 'Second Crusade', 'Italian invasion of Egypt', 'Roman–Persian Wars', 'Battle of Fariskur', 'Ras Burqa massacre', 'Sinai and Palestine Campaign', 'Wars of the Diadochi', 'Western Desert Campaign', 'Operation Brevity', 'Senussi Campaign', 'Siege of Prosoptis', 'Battle of Ridaniya', 'Libyan resistance movement', 'Battle of Nikiou', '2008 Egyptian general strike', 'October 22nd Scud missile attack', 'French campaign in Egypt and Syria', '1964 Arab League summit', 'Ottoman–Mamluk War', 'Fifth Crusade', 'Battle of Abukir', 'Operation Crusader', 'Egyptian Camel Transport Corps'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 38 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 39 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Western Asia', 'North Africa'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 40 / 173: {
          [('Main', '==', 'm.02k54', ['military.military_combatant.armed_forces'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Egyptian Armed Forces'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 41 / 173: {
          [('Main', '==', 'm.02k54', ['fictional_universe.fictional_setting.universe'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:fictional_universe.fictional_setting.universe ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:fictional_universe.fictional_setting.universe ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {"JoJo's Bizarre Adventure"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 42 / 173: {
          [('Main', '==', 'm.02k54', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 3
            Final Answer: {'1952 Summer Olympics', '2008 Summer Olympics', '1936 Summer Olympics'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 43 / 173: {
          [('Main', '==', 'm.02k54', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Samsara', 'Cleopatra'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 44 / 173: {
          [('Main', '==', 'm.02k54', ['tv.tv_subject.tv_episodes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:tv.tv_subject.tv_episodes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:tv.tv_subject.tv_episodes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Jeana Luttrull - Egypt Missions'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 45 / 173: {
          [('Main', '==', 'm.02k54', ['base.militaryinfiction.location_in_fiction.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 3
            Final Answer: {'Hittite language', 'Egyptian language', 'Akkadian language'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 46 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Cairo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 47 / 173: {
          [('Main', '==', 'm.02k54', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02k54 fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 WHERE { fb:m.02k54 fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'20'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 48 / 173: {
          [('Main', '==', 'm.02k54', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 9
            Final Answer: {'Al-Shorouk', 'Al-Ahram', 'Youm7', 'Akhbar el-Yom', 'Gaza Weekly Newspaper', 'Akher Saa', 'Almesryoon', 'Al-Ahram Weekly', "Al-Waqa'i'a al-Masriya"}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 49 / 173: {
          [('Main', '==', 'm.02k54', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 26
            Final Answer: {'Al Sharqia Governorate', 'Gharbia Governorate', 'Matrouh Governorate', 'Qalyubia Governorate', 'Beheira Governorate', 'Al Minufiyah', 'Ismailia Governorate', 'Suez Governorate', 'Red Sea Governorate', 'Sohag Governorate', 'Kafr el-Sheikh Governorate', 'South Sinai Governorate', 'New Valley Governorate', 'Aswan Governorate', 'Giza Governorate', 'Alexandria Governorate', 'Port Said Governorate', 'Cairo Governorate', 'Faiyum Governorate', 'Dakahlia Governorate', 'Beni Suef Governorate', 'Minya Governorate', 'Asyut', 'Qena Governorate', 'Damietta Governorate', 'North Sinai Governorate'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 50 / 173: {
          [('Main', '==', 'm.02k54', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 51 / 173: {
          [('Main', '==', 'm.02k54', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Egyptian governorate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 52 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Eastern European Time', 'UTC+02:00'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 53 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02k54 fb:location.location.area ?o1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 WHERE { fb:m.02k54 fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'1.00245e+06'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 54 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 3
            Final Answer: {'Middle East', 'Arab world', 'DVD Region 2'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 55 / 173: {
          [('Main', '==', 'm.02k54', ['location.location.primarily_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.primarily_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.primarily_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'North Africa', 'Africa'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 56 / 173: {
          [('Main', '==', 'm.02k54', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 192
            Final Answer: {'Never trust a cat who wears earrings', 'The Golden One', 'The Anubis slayings', 'The White Nile', 'I, the Sun', 'The Egyptologist', 'Three Empires on the Nile', 'Egyptian Mummies', 'Sugar Street', 'The Map of Love', 'Aisha', 'Paneb the Ardent', 'The Anubis Gates', 'Twisted Journeys, Escape from Pyramid X', 'Brothers in Egypt', 'The stargate conspiracy', 'Mummies', 'The Last Camel Died at Noon', 'The Temptation of Saint Anthony', 'Natural Genesis, Part 1, or the Second Part of a Book of the Beginnings', 'The Wise Woman', 'The Serpent on the Crown', 'Gods and Pharaohs from Egyptian Mythology', 'Mummy Dearest', 'Moon Tiger', 'King and goddess', 'Muslim Extremism in Egypt', 'Mara, Daughter of the Nile', 'Snakes with Wings and Gold-Digging Ants', 'Secrets of the Nile', 'The murder of Tutankhamen', 'Tales of Ancient Egypt', 'Egypt And Nubia', 'The Hippopotamus Pool', 'Tripoli the Mysterious', 'The classical novels', 'The shepherd kings', 'Pepi and the secret names', 'Rotten Ralph helps out', 'Lion in the Valley', 'Seeing a Large Cat', 'The Blue Nile', 'Black Women in Antiquity', 'The Natural Genesis, Volume II', 'The War of the Crowns', 'Channeling Cleopatra', 'The economic diplomacy of the Suez crisis', 'The twelfth transforming', "Down the Nile: Alone in a Fisherman's Skiff", 'The Egyptians', 'Nefer the Silent', 'Guardian of the Horizon', 'Ancient Evenings', 'The origin of the Egyptians', 'The mysteries of Egypt', 'Egyptian Ideas Of The Future Life', 'The Deeds of the Disturber', 'Pharaoh', 'Children of the Storm', 'For the Love of Philae', 'Omdurman', 'Manners and Customs of the Modern Egyptians', 'The Curse of the Pharaohs', 'Egyptology', 'The Message of the Sphinx', 'Pyramid', 'The Historical Jesus, and The Mythical Christ', 'Egypt Revisited', 'Tutankhamen', 'The Giza Death Star Deployed', 'The Wisdom of Ptah-Hotep', 'The Innocents Abroad', 'The Judgement of Caesar', 'The Voice of the Poor in the Middle Ages', 'The Book of Thoth', 'Rimonah of the Flashing Sword', 'The oasis', 'Antony and Cleopatra', 'The ancient Egyptian world', 'Howard Carter and the Discovery of the Tomb of Tutankhamun', 'Realm of the Ring Lords', 'The mask of Ra', 'The Pyramid', 'Daily life of the ancient Egyptians', 'Ages in Chaos', 'Men of Bronze', 'The Battles of Armageddon', 'Description of Egypt', 'The Horus killings', 'Kleopatra', 'Our Oriental Heritage', 'The Falcon at the Portal', 'The Horus Road', 'Giza', 'The Salt Roads', 'Mummies and the secrets of ancient Egypt', 'The Great Pyramid of Giza', 'Decrees of Memphis and Canopus', 'Egyptian Magic', 'Nile', 'True Love, the Sphinx, and Other Unsolvable Riddles', 'Crocodile on the Sandbank', 'The October Horse', 'Fascinating hieroglyphics', 'Captive Bride', 'From Atlantis to the Sphinx', 'The Empire of Darkness', 'Gods and androids', 'Your mummy is a nose picker', 'The Egyptian', 'The flaming sword', 'The River War', 'The mummy', 'The dispersion of Egyptian Jewry', 'History of Ancient Egypt', 'Ancient Egypt the Light of the World, Part 1', 'British victory in Egypt, 1801', 'Akhenaten', 'The hippopotamus marsh', 'Gazelle', 'As Egypt Howls and History Tweets', 'For All Time', 'The Ape Who Guards the Balance', 'Angeline', 'The Dervish Wars', 'Shadow hawk', 'Khai of Khem', 'Prisoners of the Mahdi', 'Vintage Egypt: Travels on the Nile, 1917-1952', 'The Rulers of the Mediterranean', 'Cleopatra', 'Workers on the Nile', 'The Egyptian book of the dead & the ancient mysteries of Amenta', 'Age of Science', 'Poverty and charity in the Jewish community of Medieval Egypt', 'Egypt to the end of the Old Kingdom', 'House of illusions', 'The sands of Sakkara', 'The Tutankamun Affair', 'The beloved enemy', 'A Narrative of the Expedition to Dongola And Sennaar', 'The Ancient Engineers', 'Egypt at the Crossroads', 'Death on the Nile', 'Mountolive', 'Moses and Monotheism', 'Arab Society in the Time of The Thousand and One Nights', 'He Shall Thunder in the Sky', 'The Akhenaten Adventure', 'Early America revisited', 'Escape from Pyramid X', 'Egyptian Palaces and Villas: Pashas, Khedives, and Kings', 'Lady of the reeds', 'The Transvaal Surrounded', 'Child of the morning', 'The cat of Bubastes', 'The Place of Truth', 'The Mummy', 'Brothers', 'Under the western acacia', 'The slayers of Seth', 'Ancient Egypt', 'The battle of Kadesh', 'Maimonides', 'An Account Of The Manners And Customs Of The Modern Egyptians', 'The Code Book: The Evolution Of Secrecy From Mary, Queen Of Scots To Quantum Cryptography', 'The Golden Goblet', 'Genesis of the Grail Kings', 'Moses in Egypt', 'Alamein', 'The Snake, the Crocodile, and the Dog', 'Valley of the Kings', 'The lost trumpet', 'Short History of the Egyptian People', 'The Egyptian box', 'Monuments of Egypt or Egypt A Witness for the Bible', 'Pharaohs of Egypt', 'In the Eye of the Sun', 'Egypt and Babylon from Sacred and Profane Sources', 'Modern Egypt', 'Lord of the Silent', 'In an antique land', 'Peoples of the Sea', 'Murders on the Nile', 'Scenes from the Life of Cleopatra', 'SPQR IV: The Temple of the Muses', 'The Mummy Case', 'Egyptian Art', 'Explore It', 'The Giza Death Star Destroyed', 'Ancient Egyptian magic', 'Myths and legends of the desert'}
            Answers = 192, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 192, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 57 / 173: {
          [('Main', '==', 'm.02k54', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United Nations'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 58 / 173: {
          [('Main', '==', 'm.02k54', ['fictional_universe.fictional_setting.characters_that_have_lived_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:fictional_universe.fictional_setting.characters_that_have_lived_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:fictional_universe.fictional_setting.characters_that_have_lived_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Tutankhamun'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 59 / 173: {
          [('Main', '==', 'm.02k54', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 34
            Final Answer: {'Al-Nour Party', 'New Wafd Party', 'Egypt 2000 Party', "People's Democratic Party", 'Muslim Brotherhood', 'National Democratic Party', 'Democratic Union Party', "Egypt's Future Party", 'El-Ghad Party', 'National Progressive Unionist Party', 'Democratic Peace Party', 'Young Egypt Party', 'Arab Democratic Nasserist Party', 'Egyptian Marxist Organisation', 'Egypt Youth Party', 'Flag Party', 'Solidarity Party', 'Liberal Party', 'Wafd Party', 'Egyptian Islamic Labour Party', 'Democratic Movement for National Liberation', 'Freedom and Justice Party', 'National Conciliation Party', 'Egyptian Arab Socialist Party', 'Umma Party', "B'nai B'rith District Grand Lodge 16", 'Liberal Socialists Party', 'Egyptian Communist Party', 'Democratic Front Party', 'Social Justice Party', 'Green Party of Egypt', 'Egyptian Trade Union Federation', 'Liberal Egyptian Party', 'Free Egyptians Party'}
            Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 60 / 173: {
          [('Main', '==', 'm.02k54', ['base.militaryinfiction.location_in_fiction.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {"Tiye tries to change Akhenaten's fate"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 61 / 173: {
          [('Main', '==', 'm.02k54', ['base.militaryinfiction.location_in_fiction.setting_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.setting_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.setting_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 4
            Final Answer: {'Ancient city-state', 'Hittite Empire', 'Capital city', 'Ancient Egypt'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 62 / 173: {
          [('Main', '==', 'm.02k54', ['base.folklore.mythical_creature_location.mythical_creature_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.folklore.mythical_creature_location.mythical_creature_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.folklore.mythical_creature_location.mythical_creature_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Phoenix', 'Sphinx'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 63 / 173: {
          [('Main', '==', 'm.02k54', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Egypt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 64 / 173: {
          [('Main', '==', 'm.0kg9', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 15
            Final Answer: {'Joshua', 'Gregory Djanikian', 'Alexander Badawy', 'Sneferu', 'Youssef Ziedan', 'Ahmed Fakhry', 'Ahmose', 'Alec R. Costandinos', 'Arturo Schwarz', 'Khufu', 'Tutankhamun', 'Nagui', 'Nectanebo II', 'Soliman Gamil', 'Amenhotep I'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 65 / 173: {
          [('Main', '==', 'm.0kg9', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 2
            Final Answer: {'Maharet', 'Tiye'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 66 / 173: {
          [('Main', '==', 'm.0kg9', ['base.casinos.casino_theme.casinos_in_this_theme'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:base.casinos.casino_theme.casinos_in_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:base.casinos.casino_theme.casinos_in_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 1
            Final Answer: {'Luxor Las Vegas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 67 / 173: {
          [('Main', '==', 'm.0kg9', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 3
            Final Answer: {'New Kingdom of Egypt', 'Greco-Persian Wars', 'First Intermediate Period of Egypt'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 68 / 173: {
          [('Main', '==', 'm.0kg9', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 3
            Final Answer: {'Nefertiti', 'I, the Sun', 'The Rise and Fall of Ancient Egypt'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 69 / 173: {
          [('Main', '==', 'm.0kg9', ['amusement_parks.ride_theme.rides'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:amusement_parks.ride_theme.rides ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:amusement_parks.ride_theme.rides ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 2
            Final Answer: {'Revenge of the Mummy', 'Treasure Hunters'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 70 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 17
            Final Answer: {'835500', '865500', '680000', '678500', '768000', '450000', '445000', '780000', '672000', '798000', '610000', '424000', '430000', '434000', '773000', '866000', '799000'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 71 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'76941572', '57952386', '59004372', '41033408', '39258086', '75568453', '79716203', '31771227', '50659625', '30970067', '2864', '37577248', '64199588', '74203215', '62063810', '78323298', '55667119', '66457136', '40132189', '32586961', '35089893', '44952497', '82536770', '81121077', '63120498', '51899728', '53166492', '46025305', '56843275', '33415926', '30182426', '60020423', '54433720', '47133557', '2940', '61032081', '70174632', '41961731', '35923283', '34252634', '68888032', '2790', '72844998', '43917526', '67648419', '65309201', '36751162', '42921556', '38409289', '49453054', '48276547', '71498433'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 72 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 10
            Final Answer: {'-696601', '-239700', '-1109238', '-651818', '-626796', '-945704', '-346922', '-848440', '-50100', '-370780'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 73 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 40
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1976', '1987', '2009', '1996', '1977', '2008', '1990', '2007', '1988', '1979', '2002', '2005', '1995', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1978', '2000', '1972', '1983', '1971', '1975', '1980', '1973', '1981', '2004', '2010'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 74 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 40
            Final Answer: {'296.413', '192.67', '1483', '506.015', '575.475', '687.996', '897.393', '606.679', '646.971', '1284', '1099', '403.278', '442.593', '189.59', '956.857', '669.367', '483.363', '1548', '196.348', '851.236', '1211', '1167', '1356', '263.176', '623.033', '334.104', '368.033', '712.741', '209.154', '1607', '1440', '310.077', '694.271', '748.584', '994.051', '727.699', '487.317', '1047', '809.563', '230.737'}
            Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 40, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 75 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 8
            Final Answer: {'0.1', '0.07', '0.08', '0.18', '0.09', '0.2', '0.32', '0.12'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 76 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 53
            Final Answer: {'691.34', '1364', '1422', '413.27', '1221', '178.35', '250.37', '154.4', '709.36', '1417', '509.7', '2370', '1298', '619.64', '850.34', '969.31', '2780', '758.76', '224.92', '148.52', '1251', '195.55', '712.24', '2078', '1695', '163.85', '345.98', '761.91', '637.95', '348.79', '325.6', '1159', '285.01', '542.98', '1082', '1475', '229.64', '776.05', '233.23', '160.89', '1208', '151.28', '2698', '166.96', '137.84', '136.13', '508.53', '1071', '643.8', '582.84', '5500', '213.86', '684.76'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 77 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 42
            Final Answer: {'3.11376e+10', '4.83541e+09', '2.91717e+10', '4.61119e+10', '2.88616e+10', '1.49058e+10', '1.28578e+10', '1991', '3.49702e+10', '3.35094e+10', '2.20776e+10', '3.07436e+10', '2.73232e+10', '2.99262e+10', '6.35734e+09', '4.5646e+10', '1.91307e+10', '2.99318e+10', '3.24687e+10', '2.20948e+09', '3.06312e+10', '2.98846e+10', '3.22672e+10', '3.02125e+10', '3.64273e+10', '3.50007e+10', '3.21835e+10', '3.98683e+10', '3.34439e+10', '3.10529e+10', '2.72768e+10', '48000', '3.61134e+10', '4.41205e+10', '3.06218e+10', '3.29633e+10', '3.41494e+10', '2049', '1.17335e+10', '3.1484e+10', '3.25928e+10', '1952'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 78 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'729520000', '1173', '1272', '2.94084e+09', '2.56193e+09', '3.83958e+09', '1964', '9.22424e+09', '3.13518e+09', '3.11776e+09', '995680000', '806850000', '1308', '8.52604e+09', '1491', '592410000', '1117', '2.22634e+09', '1102', '3.80682e+09', '1790', '2649', '3.23506e+09', '3.98559e+09', '1741', '2.81753e+09', '3.51749e+09', '3.02768e+09', '687630000', '2.73053e+09', '5.67273e+09', '1700', '9.25265e+09', '2554', '7.96473e+09', '1883', '1.15928e+09', '2.47861e+09', '8.523e+09', '70860000', '381090000', '807290000', '3.61589e+09', '4.10248e+09', '7.60578e+09', '614210000', '1514', '984570000', '2.748e+09', '5.23348e+09', '2.70863e+09', '3.25232e+09'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 79 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 35
            Final Answer: {'4.83027e+10', '1.10554e+11', '2.74067e+11', '1.19584e+11', '2.17516e+11', '6.35057e+10', '1.6485e+11', '4.70844e+11', '1.5384e+11', '4.88213e+11', '2.0578e+11', '1.29499e+11', '4.47247e+11', '5.43792e+10', '7.1129e+10', '2.33435e+11', '3.07899e+11', '1.90554e+11', '5.04756e+11', '4.89151e+11', '1.00748e+11', '1.77346e+11', '4.0862e+11', '2.66044e+11', '8.64432e+10', '3.32275e+11', '1.46964e+11', '2.8809e+11', '4.69668e+11', '5.08214e+11', '2.50856e+11', '8.34413e+10', '1.37541e+11', '3.69323e+11', '7.8248e+10'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 80 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1.48499e+10', '8.48288e+10', '9.07107e+10', '1.815e+10', '8.29237e+10', '2.34054e+10', '3.50446e+10', '5.1898e+10', '5.33952e+09', '7.88452e+10', '9.61673e+09', '3.58803e+10', '2.29531e+11', '7.84366e+10', '2.18894e+11', '2.55924e+10', '8.96857e+10', '4.00332e+09', '5.57917e+09', '8.78507e+10', '4.14424e+09', '1.07484e+11', '8.76396e+09', '4.18555e+10', '4.16047e+09', '5.11162e+09', '1.88984e+11', '4.05079e+10', '3.06429e+10', '6.76297e+10', '4.31304e+10', '4.7817e+09', '6.86174e+09', '2.81374e+10', '4.65786e+10', '7.68249e+09', '6.10911e+09', '3.96484e+10', '4.33405e+09', '9.98385e+10', '1.4636e+10', '9.7632e+10', '6.01592e+10', '1.30478e+11', '8.266e+09', '1.1438e+10', '2.29125e+10', '1.62818e+11', '3.46896e+10', '9.01517e+09', '3.69706e+10', '1.33605e+10'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 81 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 35
            Final Answer: {'1180', '3510', '6160', '1070', '4480', '2150', '1580', '2030', '3210', '3020', '2280', '3860', '2370', '1650', '5710', '6120', '3710', '3910', '4030', '2490', '5310', '6020', '5910', '2860', '5890', '1670', '1470', '2560', '1890', '3330', '6030', '2700', '4230', '1350', '4890'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 82 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 7
            Final Answer: {'-5.2101e+09', '-5.2836e+09', '-9.8944e+09', '1108', '-1.09133e+10', '-7.5744e+09', '-6.1404e+09'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 83 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 24
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '1990', '2008', '2007', '2002', '2005', '1995', '1994', '1989', '1993', '1985', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 84 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '1979', '2002', '1961', '2005', '1995', '1994', '1985', '1993', '1989', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 85 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 11
            Final Answer: {'1980', '1985', '2005', '1970', '1990', '1965', '2000', '1960', '1975', '2010', '1995'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 86 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Electricity consumption per capita, World Development Indicators, World Bank', 'Electricity consumption per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 87 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 88 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 89 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 90 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 91 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 92 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 93 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 94 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 95 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Pump price for fuel, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 96 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'GDP per capita (current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 97 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Debt stock, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 98 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Aid flows at constant US$, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 99 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Gross National Income in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'Gross National Income in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Current: 100 / 173
        Checking schema 100 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Gross Domestic Product'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 101 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'GNI per capita in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'GNI per capita in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 102 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Foreign direct investment, net (BoP, current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 103 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Population growth rate, World Development Indicators, World Bank', 'Population Growth Rate, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 104 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'GDP growth rate, World Development Indicators, World Bank', 'World Bank, World Development Indicators, GDP Growth Rate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 105 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Military expenditure as percentage of GDP, World Development Indicators and Global Development Finance, World Bank', 'Military expenditure as percentage of GDP, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 106 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Merchandise trade (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 107 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'GDP production (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 108 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'High-technology exports (% of manufactured exports), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 109 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 2
            Final Answer: {'Internet users as percentage of population, World Development Indicators and Global Development Finance, World Bank', 'Internet users as percentage of population, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 110 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Gross savings (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 111 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'GDP expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 112 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Labor participation rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 113 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Inflation, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 114 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Health expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 115 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Interest rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 116 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Prevalence of undernourishment (% of population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 117 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Proportion of seats held by women in national parliaments (%), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 118 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Total debt service (% of exports of goods, services and income), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 119 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Market capitalization of listed companies (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 120 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Literacy rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 121 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Armed forces personnel, total, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 122 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Population'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 123 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02k54 fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Net migration, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 124 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 11
            Final Answer: {'1991', '2008', '1998', '1992', '2012', '2002', '2000', '2004', '2006', '2010', '1995'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 125 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:36] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '2002', '1979', '1961', '1995', '2005', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 126 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.external_debt_stock', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.external_debt_stock ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 42
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1976', '1987', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '1979', '2002', '2005', '1995', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1978', '2000', '1972', '1983', '1971', '1975', '1980', '2011', '1973', '1981', '2004', '2010'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 127 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.official_development_assistance', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.official_development_assistance ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '1990', '2007', '1988', '1979', '2002', '1961', '1995', '2005', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 128 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 32
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '2008', '1990', '2007', '1988', '2002', '2005', '1995', '1994', '1985', '1993', '1989', '1999', '2003', '1986', '1998', '2000', '1983', '1980', '2011', '1981', '2004', '2010'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 129 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '1979', '2002', '1961', '2005', '1995', '1994', '1985', '1993', '1989', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 130 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 32
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '2008', '2007', '1990', '1988', '2002', '2005', '1995', '1994', '1985', '1993', '1989', '1999', '2003', '1986', '1998', '2000', '1983', '1980', '2011', '1981', '2004', '2010'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 131 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 7
            Final Answer: {'2009', '2011', '2008', '2007', '2010', '2006', '2005'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 132 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 39
            Final Answer: {'2.51', '2.41', '1.85', '1.74', '1.69', '2.33', '1.78', '2.19', '1.87', '1.73', '2.35', '1.93', '2.62', '1.68', '2.64', '2.09', '1.67', '2.29', '1.7', '2.54', '2.6', '1.8', '2.47', '1.75', '2.4', '2.38', '2.28', '2.36', '2.22', '1.82', '2.58', '1.76', '2.26', '2.65', '2.24', '1.71', '2.42', '2.55', '2.2'}
            Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 133 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 51
            Final Answer: {'10.0113', '4.98873', '6.85666', '5.14662', '2.72142', '7.15628', '6.60205', '2.51942', '4.97238', '8.14231', '5.49113', '4.47174', '4.09207', '6.09152', '4.40037', '4.64246', '2.64658', '6.84384', '9.90717', '0.625935', '9.05553', '4.03637', '6.10546', '9.22508', '3.97317', '7.40114', '0.705247', '3.19352', '2.37049', '2.0289', '5.70175', '1.8', '6.81255', '1.05665', '5.30072', '5.36801', '1.07884', '3.75608', '7.08783', '3.44091', '5.77971', '2.4855', '14.6272', '3.53523', '6.03886', '2.90079', '5.59852', '12.837', '4.432', '8.93917', '4.68613'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 134 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 24
            Final Answer: {'2.85385', '2.50215', '3.02576', '2.29302', '3.18936', '2.13731', '4.38338', '4.45363', '3.19782', '5.07871', '3.34084', '3.89412', '4.85777', '1.99851', '3.49433', '6.46373', '3.21229', '3.28427', '3.30611', '4.66414', '3.36263', '2.74033', '1.86245', '4.17257'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 135 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 51
            Final Answer: {'31.28', '19.67', '39.43', '36.26', '40.96', '30.1', '24.51', '44.57', '51.26', '51.58', '57', '29.81', '47.94', '42.9', '31.21', '20.68', '21.59', '18.64', '20.85', '27.21', '28.57', '22.75', '38.96', '50.79', '24.55', '43.17', '25.28', '31.8', '42.72', '21.08', '82.76', '46.65', '45.82', '24.3', '19.89', '34.56', '24.34', '31.39', '40.23', '32.48', '20.15', '36.84', '26.39', '39.89', '47.66', '21.17', '35.99', '21.84', '27.35', '34.51', '45.38'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 136 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 46
            Final Answer: {'28.29', '19.67', '14.07', '30.5', '27.94', '29.44', '13.22', '28.56', '29.43', '18.96', '20.49', '27.05', '13.68', '16.74', '17.57', '20.79', '16.34', '17.11', '16.54', '29.03', '13.99', '16.46', '18.26', '16.71', '16.78', '31.08', '29.85', '15.18', '29.17', '28.6', '25.34', '20.91', '19.99', '30.67', '16.87', '20.05', '16.56', '16.95', '13.95', '19.57', '17.26', '19.64', '20.09', '19.37', '17.32', '14.86'}
            Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 46, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 137 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 17
            Final Answer: {'0.9', '0.84', '0.19', '0.78', '0.54', '0.41', '0.88', '0.53', '0.22', '0.55', '0.58', '0.71', '0.97', '0.4', '0.31', '0.27', '0.64'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 138 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 26
            Final Answer: {'0.147987', '0.03132', '2.72', '11.6984', '16.03', '0.000976', '0.641265', '30.2', '13.66', '35.62', '0.09048', '0.006383', '4.03789', '11.92', '0.290445', '18.01', '24.03', '5.15067', '0.838946', '12.5528', '0', '16.05', '0.061467', '12.75', '24.28', '38.69'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 139 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 34
            Final Answer: {'34.19', '19.44', '27.12', '19.38', '26.56', '25.93', '18.53', '18.32', '21.93', '24.94', '18.56', '23.55', '18.51', '22.97', '30.87', '29.92', '20.98', '31.08', '17.9', '21.11', '21.04', '16.5', '17.79', '29.16', '23.28', '18.9', '16.87', '26.2', '12.89', '18.05', '23.62', '17.64', '21.84', '16.85'}
            Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 34, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 140 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 51
            Final Answer: {'-11.73', '-2.52', '-9.5', '-6.64', '-5.18', '-17.84', '-6.05', '-1.36', '-9.86', '-7.98', '-10.21', '-5.87', '-5.78', '-5.15', '-6.85', '-15.43', '-4.85', '-3.12', '-4.35', '-2.95', '-5.49', '-3.48', '-5.59', '-4.78', '-14.46', '-2.59', '-13.46', '-21.1', '-4.57', '-12.13', '-15.27', '-5.1', '-12.67', '-16.73', '-6.62', '-10.71', '-6.55', '-2.27', '-4.25', '-1.62', '-3.81', '-8.26', '-5.45', '-4.58', '-10.95', '-12.35', '-14.9', '-18.61', '-4.55', '-3.3', '-0.58'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 141 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 22
            Final Answer: {'21.14', '20.94', '21.68', '24.46', '21.48', '21.93', '22.33', '22.25', '23.4', '20.85', '24.18', '23.69', '23.8', '23.95', '23.73', '21.42', '22.85', '24.34', '26.52', '24.07', '21.19', '21.18'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 142 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 49
            Final Answer: {'4.87', '-3', '0.7', '3.87', '2.68', '3.14', '16.76', '21.26', '2.27', '11.08', '3.66', '10.32', '4.63', '18.32', '3.41', '0.75', '4.51', '3.08', '23.86', '12.73', '17.66', '10.05', '12.09', '7.64', '19.69', '8.15', '13.64', '17.04', '20.82', '14.82', '9.67', '12.11', '9.32', '14.84', '2.1', '5.11', '9.9', '19.75', '2.74', '7.19', '0.69', '11.76', '11.27', '15.74', '9.04', '-1.68', '10.02', '3.76', '16.08'}
            Answers = 49, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 49, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 143 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 17
            Final Answer: {'4.94', '5', '5.07', '4.88', '3.86', '5.15', '5.34', '5.25', '5.28', '4.74', '6.13', '5.63', '5.43', '4.26', '4.97', '5.78', '4.81'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 144 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 26
            Final Answer: {'11', '10', '10.92', '6.58', '6.74', '4.67', '9.84', '3', '9.33', '10.54', '6.1', '9.36', '7', '6.23', '7.73', '6.49', '8.33', '9.46', '5.88', '7.23', '6.02', '12', '11.83', '11.67', '8.23', '9.22'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 145 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'5'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 146 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 6
            Final Answer: {'12.7', '1.8', '3.9', '2.9', '2.4', '2'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 147 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 35
            Final Answer: {'32.08', '38.68', '36.47', '7.39', '6.2', '17.54', '12.39', '18.96', '12.87', '16.03', '6.11', '42.26', '7.78', '12.99', '15.94', '6.94', '16.54', '22.07', '9.81', '13.79', '28.57', '6.05', '28.63', '6.44', '32.83', '21.77', '14.58', '11.07', '12.67', '11.6', '23.74', '11.83', '5.59', '22.92', '22.37'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 148 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 24
            Final Answer: {'8.18', '48.85', '20.96', '26.56', '52.75', '47.6', '13.44', '4.31', '21.21', '88.83', '32.65', '28.74', '8.21', '29.7', '28.79', '24.93', '4.08', '37.69', '7.79', '7.17', '5.02', '106.75', '86.97', '36.2'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 149 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 6
            Final Answer: {'55.59', '44.42', '72.05', '66.37', '71.41', '38.2'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 150 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '1990', '2007', '1988', '2002', '1979', '2005', '1961', '1995', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 151 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 51
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '2002', '1979', '1961', '1995', '2005', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 152 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 24
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '2008', '2007', '1990', '1988', '2002', '2005', '1995', '1994', '1989', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 153 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '1979', '2002', '2005', '1995', '1961', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 154 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 47
            Final Answer: {'1982', '2001', '1991', '1997', '1968', '1992', '1984', '2006', '1976', '1987', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '1979', '2002', '2005', '1995', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 47, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 155 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 18
            Final Answer: {'2009', '1994', '2011', '1996', '2005', '2001', '2008', '2007', '1997', '1999', '2003', '1998', '2004', '2000', '2002', '2006', '2010', '1995'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 156 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 20
            Final Answer: {'2009', '1994', '2011', '1996', '1993', '2005', '2001', '2008', '2007', '1997', '1999', '2003', '1990', '1998', '2004', '2002', '2000', '2006', '2010', '1995'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 157 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 35
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '1977', '1990', '2007', '2008', '1988', '2002', '1979', '2005', '1995', '1994', '1985', '1993', '1989', '1999', '2003', '1986', '1998', '1978', '2000', '1983', '1980', '2011', '1981', '2004', '2010'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 158 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '2002', '1979', '1961', '1995', '2005', '1994', '1985', '1993', '1989', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 159 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 22
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '1990', '2007', '2008', '2002', '2005', '1995', '1994', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 160 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 51
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '2002', '1979', '1961', '1995', '2005', '1994', '1985', '1989', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 161 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 17
            Final Answer: {'2009', '2011', '1996', '2001', '2008', '2007', '1999', '1997', '2003', '2010', '1998', '2004', '2002', '2000', '2006', '2005', '1995'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 162 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 36
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1976', '1987', '2009', '1996', '1977', '1990', '2008', '2007', '1988', '2002', '1979', '2005', '1995', '1994', '1985', '1993', '1989', '1999', '2003', '1986', '1998', '1978', '2000', '1983', '1980', '2011', '1981', '2004', '2010'}
            Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 163 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 5
            Final Answer: {'2011', '2008', '1991', '2000', '2005'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 164 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 17
            Final Answer: {'2009', '2011', '2001', '2008', '2007', '1990', '1999', '2003', '1997', '2010', '1998', '2012', '2004', '2002', '2000', '2006', '2005'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 165 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.debt_service_as_percent_of_trade_volume', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.debt_service_as_percent_of_trade_volume ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 35
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '1977', '2008', '1990', '2007', '1988', '2002', '1979', '2005', '1995', '1994', '1985', '1989', '1993', '1999', '2003', '1986', '1998', '1978', '2000', '1983', '1980', '2011', '1981', '2004', '2010'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 166 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 24
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '2008', '2007', '1990', '1988', '2002', '2005', '1995', '1994', '1989', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 167 / 173: {
          [('Main', '==', 'm.02k54', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 WHERE { fb:m.02k54 fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 6
            Final Answer: {'2005', '1996', '1986', '2006', '1976', '2010'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 168 / 173: {
          [('Main', '==', 'm.0kg9', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 169 / 173: {
          [('Main', '==', 'm.0kg9', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 1
            Final Answer: {'Ancient Egypt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 170 / 173: {
          [('Main', '==', 'm.0kg9', ['base.symbols.symbol_user.symbols', 'base.symbols.symbolism.used_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.symbols.symbol_user.symbols ?o1 . ?o1 fb:base.symbols.symbolism.used_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.symbols.symbol_user.symbols ?o1 . ?o1 fb:base.symbols.symbolism.used_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 1
            Final Answer: {'Ancient Egypt'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 171 / 173: {
          [('Main', '==', 'm.0kg9', ['base.symbols.symbol_user.symbols', 'base.symbols.symbolism.concept'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.symbols.symbol_user.symbols ?o1 . ?o1 fb:base.symbols.symbolism.concept ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.symbols.symbol_user.symbols ?o1 . ?o1 fb:base.symbols.symbolism.concept ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 1
            Final Answer: {'Life'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 172 / 173: {
          [('Main', '==', 'm.0kg9', ['base.symbols.symbol_user.symbols', 'base.symbols.symbolism.symbol'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.symbols.symbol_user.symbols ?o1 . ?o1 fb:base.symbols.symbolism.symbol ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0kg9 fb:base.symbols.symbol_user.symbols ?o1 . ?o1 fb:base.symbols.symbolism.symbol ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 2
            Final Answer: {'Frog', 'Ankh'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        168 / 173 coarse schemas kept with ans_size > 0.
      } [1.523s]
      Coarse level ended, resulting in 168 schemas.
    } [2.647s]
    Type level searching (total types = 10): {
      Current: 0 / 168
[{'location.country'}]
[{'language.language_family'}]
[{'base.rosetta.local_name'}]
[{'base.rosetta.languoid_class'}]
[{'location.location'}]
[{'base.rosetta.rosetta_document'}]
[{'base.rosetta.languoid'}]
[{'language.human_language'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'military.military_combatant'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'base.locations.continents'}]
[{'fictional_universe.fictional_universe'}]
[{'fictional_universe.work_of_fiction'}]
[{'base.militaryinfiction.location_in_fiction'}]
[{'food.beer'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'military.armed_force'}]
[{'fictional_universe.fictional_universe'}]
[{'olympics.olympic_games'}]
[{'film.film'}]
[{'tv.tv_series_episode'}]
[{'fictional_universe.fictional_language'}]
[{'location.citytown'}]
[{'type.int'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'organization.organization'}]
[{'base.militaryinfiction.event_in_fiction'}]
[{'fictional_universe.type_of_fictional_setting'}]
[{'base.folklore.mythical_creature'}]
[{'type.object'}]
[{'people.person'}]
[{'fictional_universe.fictional_character'}]
[{'base.casinos.casino'}]
[{'time.event'}]
[{'book.written_work'}]
[{'amusement_parks.ride'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
      Current: 100 / 168
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'base.symbols.symbolism'}, {'base.symbols.symbol_user'}]
[{'base.symbols.symbolism'}, {'base.symbols.symbolized_concept'}]
[{'base.symbols.symbolism'}, {'base.symbols.symbol'}]
      5 typed schemas retrieved from 168 coarse schemas.
      Calculating F1 for 5 typed schemas: {
        Current: 0 / 5
        Checking schema 0 / 5: {
          [('Main', '==', 'm.02k54', ['location.country.official_language']), ('Type', '==', 'language.human_language', ['type.object.type'])]
          var_types: [{'language.human_language'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.official_language ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.official_language ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 1
            Final Answer: {'Modern Standard Arabic'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.007s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.007s]
        Checking schema 1 / 5: {
          [('Main', '==', 'm.02k54', ['location.location.people_born_here']), ('Type', '==', 'language.language_creator', ['type.object.type'])]
          var_types: [{'language.language_creator', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:language.language_creator . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:language.language_creator . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 5: {
          [('Main', '==', 'm.02k54', ['location.country.languages_spoken']), ('Type', '==', 'language.human_language', ['type.object.type'])]
          var_types: [{'language.human_language'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.type fb:language.human_language . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 8
            Final Answer: {'Domari Language', 'Egyptian Arabic', 'Siwi Language', 'Bedawi Arabic', 'Nobiin Language', 'Arabic Language', 'Arabic, Sudanese Spoken Language', "Sa'idi Arabic"}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 5: {
          [('Main', '==', 'm.02k54', ['base.militaryinfiction.location_in_fiction.languages']), ('Type', '==', 'fictional_universe.fictional_language', ['type.object.type'])]
          var_types: [{'fictional_universe.fictional_language'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.languages ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_language . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02k54 fb:base.militaryinfiction.location_in_fiction.languages ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_language . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02k54'}
            Query return lines = 3
            Final Answer: {'Hittite language', 'Egyptian language', 'Akkadian language'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 4 / 5: {
          [('Main', '==', 'm.0kg9', ['location.location.people_born_here']), ('Type', '==', 'language.language_creator', ['type.object.type'])]
          var_types: [{'language.language_creator', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:language.language_creator . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:16:37] Q_Schema Request: {
            WebQ_2189|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0kg9 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.type fb:language.language_creator . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0kg9'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        3 / 5 typed schemas kept with ans_size > 0.
      } [0.040s]
      Typed level ended, resulting in 171 schemas.
    } [0.047s]
    Time level searching (total times = 0): {
      Current: 0 / 171
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'amusement_parks.ride.closed', 'amusement_parks.ride.opened'}]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
      Current: 100 / 171
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 171 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 171 schemas.
    } [0.003s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 171
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[set()]
[set()]
[{'food.beer.first_brewed'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[{'tv.tv_series_episode.air_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[{'type.object.timestamp'}]
[{'people.person.date_of_birth'}]
[set()]
[{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
[{'time.event.start_date', 'time.event.end_date'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'amusement_parks.ride.closed', 'amusement_parks.ride.opened'}]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
      Current: 100 / 171
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set()]
[set()]
[set()]
      0 ordinal schemas retrieved from 171 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 171 schemas.
    } [0.003s]
    [2020-12-03 14:16:37] buffer saved.
    171 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2189_schema].
  } [51.759s]
  Entering Q 2190 / 5810 [b'where does sam shepard live?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 4) (sam shepard) == m.016yzz (Sam_Shepard) {'score': 30030.433543, 'source': 0.0}
      #01 Entity: [2, 4) (sam shepard) == m.02ngl7 (Sam_Sheppard) {'score': 5.966199, 'source': 1.0}
      #02 Type: [4, 5) (live) == music.live_album (live album) {'sim': 0.805337}
      #03 Type: [0, 1) (where) == location.place_with_neighborhoods (place with neighborhoods) {'sim': 0.687732}
      #04 Type: [0, 2) (where does) == business.company_name_change (organization name change) {'sim': 0.685718}
      #05 Type: [0, 2) (where does) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.681662}
      #06 Type: [0, 2) (where does) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.677683}
      #07 Type: [0, 1) (where) == people.place_lived (place lived) {'sim': 0.669691}
      #08 Type: [0, 2) (where does) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.66433}
      #09 Type: [0, 2) (where does) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.664325}
      #10 Type: [0, 2) (where does) == media_common.lost_work (lost work) {'sim': 0.658004}
      #11 Type: [0, 2) (where does) == film.film_company_role_or_service (film company role or service) {'sim': 0.65187}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:17:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.016yzz ?p1 ?o1 . }
        [2020-12-03 14:17:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.016yzz ?p1 ?o1 . }
          Query return lines = 34
        } [0.014s]
        Filt_Query_Ret = 16 / 34 ( 0.014s)
      } [0.014s]
      [Len-1||F2/2] (2020-12-03 14:17:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02ngl7 ?p1 ?o1 . }
        [2020-12-03 14:17:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02ngl7 ?p1 ?o1 . }
          Query return lines = 15
        } [0.015s]
        Filt_Query_Ret = 7 / 15 ( 0.015s)
      } [0.015s]
      [Len-2||F1/2] (2020-12-03 14:17:26) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016yzz ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:26] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.016yzz ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 606
        } [0.146s]
        Filt_Query_Ret = 34 / 606 ( 0.149s)
      } [0.149s]
      [Len-2||F2/2] (2020-12-03 14:17:26) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02ngl7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:26] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02ngl7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 345
        } [0.038s]
        Filt_Query_Ret = 4 / 345 ( 0.039s)
      } [0.039s]
      61 coarse schemas retrieved from scratch.
      Calculating F1 for 61 coarse schemas: {
        Current: 0 / 61
        Checking schema 0 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.016yzz fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 WHERE { fb:m.016yzz fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'1943'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 1 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'Jane Elaine Schook', 'Samuel Shepard Rogers, Jr.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 3 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.016yzz fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 WHERE { fb:m.016yzz fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'1.87'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 61: {
          [('Main', '==', 'm.016yzz', ['influence.influence_node.influenced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 3
            Final Answer: {'Samuel Beckett', 'Joseph Chaikin', 'Harold Pinter'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 5 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 3
            Final Answer: {'Hannah Jane Shepard', 'Samuel Walker Shepard', 'Jesse Mojo Shepard'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 6 / 61: {
          [('Main', '==', 'm.016yzz', ['film.director.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:film.director.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'Silent Tongue', 'Far North'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 7 / 61: {
          [('Main', '==', 'm.016yzz', ['theater.theater_director.plays_directed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:theater.theater_director.plays_directed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:theater.theater_director.plays_directed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Fool For Love'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 8 / 61: {
          [('Main', '==', 'm.016yzz', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Leo Butler'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 9 / 61: {
          [('Main', '==', 'm.016yzz', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 43
            Final Answer: {'Seven plays', 'The Tooth of Crime', 'Four Two-Act Plays', 'Action and The unseen hand', 'Mad dog blues, and other plays', 'Plays', 'Paris, Texas/Screenplay', 'Seduced', 'Fool for Love', 'Spencer Tracy ist nicht tot', 'Geography of a Horse Dreamer', 'Locos de Amor (Contrasenas)', 'Unseen Hand/other Pl', 'Motel chronicles ; &, Hawk moon', 'Cowboy Mouth', 'Great dream of heaven', 'States of shock', 'Luna Halcon', 'Operation Sidewinder', 'The late Henry Moss', 'Novel (1994)', 'Estados de Shock', 'Cronicas De Motel/Motel Chronicles', 'Sam Shepard: Seven plays', 'A Lie of the Mind', 'Heartless', 'Tongues', 'Buried child : A Play', 'Rolling Thunder logbook', 'Suicide in B Flat', 'Eyes for Consuela', 'La turista', 'True West', 'Cruising Paradise', 'Buried Child', '4 Two Act Plays         Paprback', 'Curse of the Starving Class', 'Cruzando El Paraiso', 'Chicago', 'El Gran Sueno del Paraiso', 'The God of Hell', 'Chicago and Other Plays', 'Simpatico'}
            Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 43, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 10 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 7
            Final Answer: {'Actor', 'Film Director', 'Television Director', 'Writer', 'Author', 'Screenwriter', 'Playwright'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 11 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 12 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 13 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Fort Sheridan'}
            Answers = 1, P = 1.000000, R = 0.250000, F1 = 0.400000
          } [0.004s]
          Answers = 1, P = 1.000000, R = 0.250000, F1 = 0.400000
        } [0.004s]
        Checking schema 14 / 61: {
          [('Main', '==', 'm.016yzz', ['film.film_story_contributor.film_story_credits'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:26] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'Hit and Run', 'True West'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 15 / 61: {
          [('Main', '==', 'm.016yzz', ['film.writer.film'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:film.writer.film ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:film.writer.film ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 6
            Final Answer: {'Fool for Love', 'Renaldo and Clara', 'Me and My Brother', "Don't Come Knocking", 'Paris, Texas', 'Simpatico'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 16 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02ngl7 fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 WHERE { fb:m.02ngl7 fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'1923'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 18 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Physician'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 19 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 20 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Cleveland'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 21 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02ngl7 fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 WHERE { fb:m.02ngl7 fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'1970'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 22 / 61: {
          [('Main', '==', 'm.02ngl7', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'The Wrong Man: The Final Verdict on the Sam Sheppard Murder Case'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 23 / 61: {
          [('Main', '==', 'm.016yzz', ['music.group_member.membership', 'music.group_membership.group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.group ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'The Holy Modal Rounders'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 24 / 61: {
          [('Main', '==', 'm.016yzz', ['music.group_member.membership', 'music.group_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.group_member.membership ?o1 . ?o1 fb:music.group_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 25 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 26 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.places_lived', 'people.place_lived.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.end_date ?o2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'1973'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 27 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 7
            Final Answer: {'Golden Globe Award for Best Performance by an Actor in a Mini-Series or Motion Picture Made for Television', 'Tony Award for Best Play', 'Pulitzer Prize for Drama', 'BAFTA Award for Best Screenplay, Adapted', 'Academy Award for  Actor in a Supporting Role', 'Primetime Emmy Award for Outstanding Lead Actor - Miniseries or a Movie', 'Screen Actors Guild Award for Best Actor - Miniseries or Television Movie'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 28 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 3
            Final Answer: {'Sandy Rogers', 'Roxanne Rogers'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 29 / 61: {
          [('Main', '==', 'm.016yzz', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.series'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.series ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Streets of Laredo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 30 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 3
            Final Answer: {'O-Lan Jones', 'Jessica Lange'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 31 / 61: {
          [('Main', '==', 'm.016yzz', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 3
            Final Answer: {'Him/Herself', 'Voice', 'Narrator'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 32 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'1992', '1979'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 33 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Buried Child'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 34 / 61: {
          [('Main', '==', 'm.016yzz', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 59
            Final Answer: {'Curtain Call', 'Felon', 'The Accidental Husband', 'Hamlet', 'The Good Old Boys', 'The Only Thrill', "Charlotte's Web", 'Dash and Lilly', 'Purgatory', 'Swordfish', 'Resurrection', 'Frances', 'Brothers', 'Country', 'One Kill', 'Fool for Love', 'Renaldo and Clara', 'Black Hawk Down', 'Bandidas', 'Leo', 'Fair Game', "Don't Come Knocking", 'Inhale', 'Bright Angel', 'Voyager', 'Stealth', 'After the Harvest', 'Border Crosses', 'Steel Magnolias', 'Crimes of the Heart', 'Paris, Texas', 'The Pledge', 'Mud', 'Defenseless', 'Snow Falling on Cedars', 'Shoedog', 'Savannah', 'Safe House', 'Killing Them Softly', 'Blackthorn', 'Thunderheart', 'Days of Heaven', 'Walker Payne', 'The Pelican Brief', 'Ruffian', 'Safe Passage', 'Brand X', 'Darling Companion', 'The Notebook', 'Baby Boom', 'Blind Horizon', 'All the Pretty Horses', 'Raggedy Man', 'The Return', 'Shot in the Heart', 'The Assassination of Jesse James by the Coward Robert Ford', 'The Right Stuff', 'Tough Trade'}
            Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.036s]
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.036s]
        Checking schema 35 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 4
            Final Answer: {'Fort Sheridan', 'Stillwater', 'England', 'New York'}
            Answers = 4, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 4, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 36 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 8
            Final Answer: {'True West', 'Buried Child', 'The Right Stuff', 'Fool for Love', 'Paris, Texas', 'Dash and Lilly', 'Ruffian'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 37 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 6
            Final Answer: {'1996', '2008', '1999', '1984', '2000', '1983'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 38 / 61: {
          [('Main', '==', 'm.016yzz', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 39 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'1982', '1969'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 40 / 61: {
          [('Main', '==', 'm.016yzz', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 10
            Final Answer: {'This So-Called Disaster', 'The Presence of Joseph Chaikin', 'Trudell', 'Kurosawa: A Documentary on the Acclaimed Director', 'Play On, John: A Life in Music', 'Patti Smith: Dream of Life', "One Fast Move or I'm Gone: Kerouac's Big Sur", 'Wanderlust', 'Shepard & Dark', 'The Holy Modal Rounders: Bound to Lose'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 41 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 42 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'1979 Pulitzer Prize'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 43 / 61: {
          [('Main', '==', 'm.016yzz', ['music.artist.track_contributions', 'music.track_contribution.contributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 44 / 61: {
          [('Main', '==', 'm.016yzz', ['music.artist.track_contributions', 'music.track_contribution.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'guest', 'banjo'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 45 / 61: {
          [('Main', '==', 'm.016yzz', ['film.actor.film', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 55
            Final Answer: {'Eddie', 'Butch Cassidy', 'Eric Pollack', 'Dillon', 'Gil Ivy', 'Mr. Stubbs', 'Jack', 'Bill Buck', 'Thomas Callahan', 'Maj. Nelson Gray', 'Harry York', 'Hank Cahill', 'Howard Spence', 'Arthur Chambers', 'James Harrison', 'Bailey', 'Walter Faber', 'Tom Blakenship', 'Wilder', 'Rodeo', 'Frank James', 'Sam Plame', 'Dashiell Hammett', 'J.C. Franklin', 'Doc Porter', 'Harlan Whitford', 'Cal', 'Wild Bill Hickok', 'Caleb Gare', 'Syrus', 'Ed Mills', 'Vic', 'Frank Coutelle', 'Senator James Reisman', 'Garrison', 'Patrick Singer', 'Frank Gilmore, Sr.', 'Gordon', 'Chuck Yeager', "Ghost of Hamlet's father", 'Reece McHenry', 'Sheriff Morris', 'Sheriff Forrest', 'Frank Whiteley', 'Det. Beutel', 'Dr. Jeff Cooper', 'Capt. George Cummings', 'Walter', 'Will Dodge', 'Tarnell', 'The Farmer', 'Frank Calhoun', 'Grimes', 'Sheriff Jack Kolb', 'Spud Jones'}
            Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 46 / 61: {
          [('Main', '==', 'm.016yzz', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 47 / 61: {
          [('Main', '==', 'm.016yzz', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'Narrator', 'Voice'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 48 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.places_lived', 'people.place_lived.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.start_date ?o2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'1971', '1963'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 49 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 9
            Final Answer: {'Jane Harmon', 'Ron Kastner', 'Nina Keneally', 'Liz Oliver', 'Nicholas Paleologos', 'Frederick M. Zollo', 'Edwin W. Schloss', 'Gary Sinise'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 50 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_nominee.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 51 / 61: {
          [('Main', '==', 'm.016yzz', ['tv.tv_actor.starring_roles', 'tv.regular_tv_appearance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:tv.tv_actor.starring_roles ?o1 . ?o1 fb:tv.regular_tv_appearance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Pete Davenport'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 52 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.spouse_s', 'people.marriage.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'1984', '2010'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 53 / 61: {
          [('Main', '==', 'm.016yzz', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'Domestic partnership', 'Marriage'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 54 / 61: {
          [('Main', '==', 'm.016yzz', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 55 / 61: {
          [('Main', '==', 'm.016yzz', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'American Academy of Arts and Letters Gold Medal for Drama', 'Pulitzer Prize for Drama'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 56 / 61: {
          [('Main', '==', 'm.016yzz', ['music.artist.track_contributions', 'music.track_contribution.track'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Smells Like Teen Spirit'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 57 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Sam Sheppard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 58 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Cleveland'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 59 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 2
            Final Answer: {'Hanover College', 'Cleveland Heights High School'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 60 / 61: {
          [('Main', '==', 'm.02ngl7', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Sam Sheppard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        60 / 61 coarse schemas kept with ans_size > 0.
      } [0.700s]
      Coarse level ended, resulting in 60 schemas.
    } [0.917s]
    Type level searching (total types = 10): {
      Current: 0 / 60
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'type.float'}]
[{'influence.influence_node'}]
[{'people.person'}]
[{'film.film'}]
[{'theater.theater_production'}]
[{'influence.influence_node'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'language.human_language'}]
[{'location.location'}]
[{'film.film'}]
[{'film.film'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'book.written_work'}]
[{'music.group_membership'}, {'music.musical_group'}]
[{'music.group_membership'}, {'music.group_member'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.place_lived'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_program'}]
[{'people.marriage'}, {'people.person'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'film.performance'}, {'film.film'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_actor'}]
[{'people.marriage'}, {'type.datetime'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'music.track_contribution'}, {'music.artist'}]
[{'music.track_contribution'}, {'music.performance_role'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'people.place_lived'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'tv.regular_tv_appearance'}, {'tv.tv_character'}]
[{'people.marriage'}, {'type.datetime'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'music.track_contribution'}, {'music.recording'}]
[{'people.place_lived'}, {'people.person'}]
[{'people.place_lived'}, {'location.location'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
      12 typed schemas retrieved from 60 coarse schemas.
      Calculating F1 for 12 typed schemas: {
        Current: 0 / 12
        Checking schema 0 / 12: {
          [('Main', '==', 'm.016yzz', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 1 / 12: {
          [('Main', '==', 'm.016yzz', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 12: {
          [('Main', '==', 'm.016yzz', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.016yzz fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 3 / 12: {
          [('Main', '==', 'm.02ngl7', ['people.person.place_of_birth']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02ngl7 fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.place_with_neighborhoods . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Cleveland'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 4 / 12: {
          [('Main', '==', 'm.016yzz', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 5 / 12: {
          [('Main', '==', 'm.016yzz', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 6 / 12: {
          [('Main', '==', 'm.016yzz', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 2
            Final Answer: {'Jessica Lange'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 7 / 12: {
          [('Main', '==', 'm.016yzz', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 8 / 12: {
          [('Main', '==', 'm.016yzz', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.016yzz fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.016yzz'}
            Query return lines = 1
            Final Answer: {'Sam Shepard'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 9 / 12: {
          [('Main', '==', 'm.02ngl7', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 10 / 12: {
          [('Main', '==', 'm.02ngl7', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.place_with_neighborhoods', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.place_with_neighborhoods', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.place_with_neighborhoods . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 1
            Final Answer: {'Cleveland'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 12: {
          [('Main', '==', 'm.02ngl7', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:27] Q_Schema Request: {
            WebQ_2190|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02ngl7 fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02ngl7'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        6 / 12 typed schemas kept with ans_size > 0.
      } [0.098s]
      Typed level ended, resulting in 66 schemas.
    } [0.102s]
    Time level searching (total times = 0): {
      Current: 0 / 66
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'theater.theater_production.date_opened', 'theater.theater_production.date_closed'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'music.group_membership.end', 'music.group_membership.start'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), {'music.artist.active_end', 'music.artist.active_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'music.recording.date'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 timed schemas retrieved from 66 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 66 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 66
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[{'film.film.initial_release_date'}]
[{'theater.theater_production.date_opened', 'theater.theater_production.date_closed'}]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'music.group_membership.end', 'music.group_membership.start'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), {'music.artist.active_end', 'music.artist.active_start'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'tv.regular_tv_appearance.to', 'tv.regular_tv_appearance.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'music.recording.date'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
      0 ordinal schemas retrieved from 66 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 66 schemas.
    } [0.002s]
    [2020-12-03 14:17:27] buffer saved.
    66 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2190_schema].
  } [6.953s]
  Entering Q 2191 / 5810 [b'in what state was the air force academy established?']: {
    Show 5 E + 10 T + 0 Tm + 0 Ord = 15 linkings: {
      #00 Entity: [2, 3) (state) == m.0g6k2 (papal states) {'score': 2554.481125, 'source': 2.0}
      #01 Entity: [4, 8) (the air force academy) == m.0k9wp (united states air force academy) {'score': 8765.667942, 'source': 2.0}
      #02 Entity: [5, 8) (air force academy) == m.0215bz (Pakistan_Air_Force) {'score': 12.098973, 'source': 1.0}
      #03 Entity: [5, 8) (air force academy) == m.0d2m7m (Air_Force_Falcons_football) {'score': 5.145543, 'source': 0.0}
      #04 Entity: [5, 8) (air force academy) == m.0k9wp (United_States_Air_Force_Academy) {'score': 2721.70066, 'source': 0.0}
      #05 Type: [1, 3) (what state) == location.us_state (us state) {'sim': 0.898197}
      #06 Type: [6, 7) (force) == military.armed_force (armed force) {'sim': 0.869408}
      #07 Type: [6, 7) (force) == military.force_strength (force strength) {'sim': 0.863357}
      #08 Type: [4, 7) (the air force) == measurement_unit.unit_of_force (unit of force) {'sim': 0.802041}
      #09 Type: [4, 7) (the air force) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.801981}
      #10 Type: [2, 3) (state) == location.australian_state (australian state) {'sim': 0.776533}
      #11 Type: [2, 5) (state was the) == government.form_of_government (form of government) {'sim': 0.76584}
      #12 Type: [2, 5) (state was the) == government.national_anthem_of_a_country (national anthem of a country) {'sim': 0.75245}
      #13 Type: [0, 2) (in what) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.751621}
      #14 Type: [2, 3) (state) == location.mx_state (mexican state) {'sim': 0.742354}
    } [0.000s]
    15 link data save to file.
    Coarse level searching (total entities = 5): {
      [Len-1||F1/5] (2020-12-03 14:17:33) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0215bz ?p1 ?o1 . }
        [2020-12-03 14:17:33] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0215bz ?p1 ?o1 . }
          Query return lines = 11
        } [0.006s]
        Filt_Query_Ret = 1 / 11 ( 0.006s)
        [Len-1||F1/5||3/5-1] (2020-12-03 14:17:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 fb:m.0g6k2 . }
          [2020-12-03 14:17:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 fb:m.0g6k2 . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.022s]
      [Len-1||F2/5] (2020-12-03 14:17:33) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0d2m7m ?p1 ?o1 . }
        [2020-12-03 14:17:33] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0d2m7m ?p1 ?o1 . }
          Query return lines = 7
        } [0.008s]
        Filt_Query_Ret = 0 / 7 ( 0.008s)
      } [0.008s]
      [Len-1||F3/5] (2020-12-03 14:17:33) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0g6k2 ?p1 ?o1 . }
        [2020-12-03 14:17:33] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0g6k2 ?p1 ?o1 . }
          Query return lines = 17
        } [0.010s]
        Filt_Query_Ret = 8 / 17 ( 0.010s)
        [Len-1||F3/5||1/5-1] (2020-12-03 14:17:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 fb:m.0215bz . }
          [2020-12-03 14:17:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 fb:m.0215bz . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-1||F3/5||2/5-1] (2020-12-03 14:17:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 fb:m.0d2m7m . }
          [2020-12-03 14:17:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 fb:m.0d2m7m . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F3/5||4/5-1] (2020-12-03 14:17:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 fb:m.0k9wp . }
          [2020-12-03 14:17:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 fb:m.0k9wp . }
            Query return lines = 0
          } [0.049s]
          Filt_Query_Ret = 0 / 0 ( 0.049s)
        } [0.049s]
        [Len-1||F3/5||5/5-1] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 fb:m.0k9wp . }
          [2020-12-03 14:17:34] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.089s]
      [Len-1||F4/5] (2020-12-03 14:17:34) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0k9wp ?p1 ?o1 . }
        [2020-12-03 14:17:34] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0k9wp ?p1 ?o1 . }
          Query return lines = 31
        } [0.017s]
        Filt_Query_Ret = 10 / 31 ( 0.017s)
        [Len-1||F4/5||3/5-1] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 fb:m.0g6k2 . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 fb:m.0g6k2 . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.028s]
      [Len-1||F5/5] (2020-12-03 14:17:34) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0k9wp ?p1 ?o1 . }
        [2020-12-03 14:17:34] SPARQL hit!
        Filt_Query_Ret = 10 / 31 ( 0.000s)
        [Len-1||F5/5||3/5-1] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 fb:m.0g6k2 . }
          [2020-12-03 14:17:34] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.000s]
      [Len-2||F1/5] (2020-12-03 14:17:34) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:34] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 65
        } [0.036s]
        Filt_Query_Ret = 8 / 65 ( 0.037s)
        [Len-2||F1/5||3/5-1] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0g6k2 . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0g6k2 . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
        [Len-2||F1/5||3/5-2] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0g6k2 . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0215bz ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0g6k2 . }
            Query return lines = 0
          } [0.127s]
          Filt_Query_Ret = 0 / 0 ( 0.127s)
        } [0.127s]
      } [0.185s]
      [Len-2||F2/5] (2020-12-03 14:17:34) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d2m7m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:34] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0d2m7m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 37
        } [0.006s]
        Filt_Query_Ret = 0 / 37 ( 0.006s)
      } [0.006s]
      [Len-2||F3/5] (2020-12-03 14:17:34) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:34] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 193
        } [0.031s]
        Filt_Query_Ret = 6 / 193 ( 0.032s)
        [Len-2||F3/5||1/5-1] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0215bz . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0215bz . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F3/5||1/5-2] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0215bz . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0215bz . }
            Query return lines = 0
          } [0.069s]
          Filt_Query_Ret = 0 / 0 ( 0.069s)
        } [0.069s]
        [Len-2||F3/5||2/5-1] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0d2m7m . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0d2m7m . }
            Query return lines = 0
          } [0.004s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-2||F3/5||2/5-2] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0d2m7m . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0d2m7m . }
            Query return lines = 0
          } [0.065s]
          Filt_Query_Ret = 0 / 0 ( 0.065s)
        } [0.065s]
        [Len-2||F3/5||4/5-1] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0k9wp . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0k9wp . }
            Query return lines = 0
          } [0.049s]
          Filt_Query_Ret = 0 / 0 ( 0.049s)
        } [0.049s]
        [Len-2||F3/5||4/5-2] (2020-12-03 14:17:34) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0k9wp . }
          [2020-12-03 14:17:34] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0k9wp . }
            Query return lines = 0
          } [1.334s]
          Filt_Query_Ret = 0 / 0 ( 1.334s)
        } [1.334s]
        [Len-2||F3/5||5/5-1] (2020-12-03 14:17:35) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0k9wp . }
          [2020-12-03 14:17:35] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F3/5||5/5-2] (2020-12-03 14:17:35) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0g6k2 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0k9wp . }
          [2020-12-03 14:17:35] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [1.562s]
      [Len-2||F4/5] (2020-12-03 14:17:35) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:35] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 460
        } [0.170s]
        Filt_Query_Ret = 39 / 460 ( 0.172s)
        [Len-2||F4/5||3/5-1] (2020-12-03 14:17:36) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0g6k2 . }
          [2020-12-03 14:17:36] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0g6k2 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F4/5||3/5-2] (2020-12-03 14:17:36) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0g6k2 . }
          [2020-12-03 14:17:36] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0g6k2 . }
            Query return lines = 0
          } [0.040s]
          Filt_Query_Ret = 0 / 0 ( 0.040s)
        } [0.040s]
      } [0.232s]
      [Len-2||F5/5] (2020-12-03 14:17:36) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:36] SPARQL hit!
        Filt_Query_Ret = 39 / 460 ( 0.002s)
        [Len-2||F5/5||3/5-1] (2020-12-03 14:17:36) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0g6k2 . }
          [2020-12-03 14:17:36] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
        [Len-2||F5/5||3/5-2] (2020-12-03 14:17:36) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0k9wp ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0g6k2 . }
          [2020-12-03 14:17:36] SPARQL hit!
          Filt_Query_Ret = 0 / 0 ( 0.000s)
        } [0.000s]
      } [0.003s]
      121 coarse schemas retrieved from scratch.
      Calculating F1 for 121 coarse schemas: {
        Current: 0 / 121
        Checking schema 0 / 121: {
          [('Main', '==', 'm.0215bz', ['organization.organization.organization_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0215bz fb:organization.organization.organization_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0215bz fb:organization.organization.organization_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 1
            Final Answer: {'Air force'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 1 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 2
            Final Answer: {'Theocracy', 'Elective monarchy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 2 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 2
            Final Answer: {'Latin Language', 'Italian Language'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.dated_location.date_dissolved'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0g6k2 fb:location.dated_location.date_dissolved ?o1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 WHERE { fb:m.0g6k2 fb:location.dated_location.date_dissolved ?o1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'1870'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 2
            Final Answer: {'Emanuele Ruspoli, 1st Prince of Poggio Suasa', 'Pope Honorius II'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 5 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 2
            Final Answer: {'Papal lira', 'Roman scudo'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0g6k2 fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 WHERE { fb:m.0g6k2 fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'0754'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 7 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 8 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0g6k2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'Italian Peninsula'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 9 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 10 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Falcon Stadium'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 11 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.colors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 2
            Final Answer: {'Blue', 'Silver'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 12 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.mascot ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy Falcon'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 13 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution_campus.educational_institution'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution_campus.educational_institution ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution_campus.educational_institution ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 14 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0k9wp fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 WHERE { fb:m.0k9wp fb:organization.organization.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'1954'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 15 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 4
            Final Answer: {'Colorado Springs', 'United States of America', 'El Paso County', 'Colorado'}
            Answers = 4, P = 0.250000, R = 1.000000, F1 = 0.400000
          } [0.013s]
          Answers = 4, P = 0.250000, R = 1.000000, F1 = 0.400000
        } [0.013s]
        Checking schema 16 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.campuses'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.campuses ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.campuses ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.subsidiary_or_constituent_schools'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.subsidiary_or_constituent_schools ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.subsidiary_or_constituent_schools ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy Preparatory School'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 18 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.sports_teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.sports_teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.sports_teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {"Air Force Falcons men's basketball"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 19 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 22 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution_campus.educational_institution'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution_campus.educational_institution ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 24 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0k9wp fb:organization.organization.date_founded ?o1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 25 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 4, P = 0.250000, R = 1.000000, F1 = 0.400000
        } [0.000s]
        Checking schema 26 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.campuses'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.campuses ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 27 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.subsidiary_or_constituent_schools'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.subsidiary_or_constituent_schools ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 28 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.sports_teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:education.educational_institution.sports_teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 29 / 121: {
          [('Main', '==', 'm.0215bz', ['organization.organization.child', 'organization.organization_relationship.child'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.child ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 1
            Final Answer: {'Pakistan Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 30 / 121: {
          [('Main', '==', 'm.0215bz', ['aviation.aircraft_owner.aircraft_fleet_composition', 'aviation.aircraft_ownership_count.aircraft_owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 1
            Final Answer: {'Pakistan Air Force'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 31 / 121: {
          [('Main', '==', 'm.0215bz', ['military.armed_force.personnel', 'military.military_service.military_force'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:military.armed_force.personnel ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:military.armed_force.personnel ?o1 . ?o1 fb:military.military_service.military_force ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 1
            Final Answer: {'Pakistan Air Force'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 32 / 121: {
          [('Main', '==', 'm.0215bz', ['projects.project_participant.projects', 'projects.project_participation.project'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.project ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.project ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 1
            Final Answer: {'Project ROSE'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 33 / 121: {
          [('Main', '==', 'm.0215bz', ['projects.project_participant.projects', 'projects.project_participation.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:projects.project_participant.projects ?o1 . ?o1 fb:projects.project_participation.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 1
            Final Answer: {'Pakistan Air Force'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 34 / 121: {
          [('Main', '==', 'm.0215bz', ['aviation.aircraft_owner.aircraft_fleet_composition', 'aviation.aircraft_ownership_count.aircraft_model'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_model ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:aviation.aircraft_owner.aircraft_fleet_composition ?o1 . ?o1 fb:aviation.aircraft_ownership_count.aircraft_model ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 15
            Final Answer: {'Auster Aiglet Trainer', 'Saab Safari', 'Nanchang Q-5', 'PAC MFI-17 Mushshak', 'Hawker Sea Fury', 'Lockheed C-130 Hercules', 'PAC Super Mushshak', 'North American F-86 Sabre', 'Hongdu JL-8', 'Supermarine Attacker', 'Chengdu J-10', 'Chengdu Super-10', 'CAC/PAC JF-17 Thunder', 'Chengdu J-7', 'Martin B-57 Canberra'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 35 / 121: {
          [('Main', '==', 'm.0215bz', ['military.armed_force.personnel', 'military.military_service.military_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:military.armed_force.personnel ?o1 . ?o1 fb:military.military_service.military_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:military.armed_force.personnel ?o1 . ?o1 fb:military.military_service.military_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 6
            Final Answer: {'Muhammad Mahmood Alam', 'Asghar Khan', 'Władysław Turowicz', 'Zafar Chaudhry', 'Nur Khan', 'Saeedullah Khan'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 36 / 121: {
          [('Main', '==', 'm.0215bz', ['organization.organization.child', 'organization.organization_relationship.parent'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0215bz fb:organization.organization.child ?o1 . ?o1 fb:organization.organization_relationship.parent ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0215bz'}
            Query return lines = 1
            Final Answer: {'Pakistan Air Force'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 37 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'Papal States'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 38 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'1857'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 39 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'42.8211'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 40 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 1
            Final Answer: {'12.6028'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 41 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_until'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_until ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_until ?o2 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 2
            Final Answer: {'1857', '1870'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 42 / 121: {
          [('Main', '==', 'm.0g6k2', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0g6k2 fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0g6k2'}
            Query return lines = 2
            Final Answer: {'Noi vogliam Dio, Vergine Maria', 'Marcia trionfale'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 43 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'204'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 44 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 2
            Final Answer: {'4619', '4634'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 45 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'2.37288e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 46 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Colorado Springs'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 47 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'1999'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 48 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Admissions Liaison Officer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 49 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Bachelor of Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 50 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 8
            Final Answer: {'1982', '1980', '1973', '1998', '1969', '1978', '1979', '1975'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 51 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.specialization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Leadership & Counseling'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 52 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'33'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 53 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Superintendent'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 54 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.acceptance_rate', 'education.acceptance_rate.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 55 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 56 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 2
            Final Answer: {'2009', '2010'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 57 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.street_address'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 59 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Colorado'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.011s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.011s]
        Checking schema 60 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 61 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 9
            Final Answer: {'Basic Sciences', 'Behavioural sciences', 'Astronautics', 'Electrical engineering', 'Psychology', 'Computer Science', 'Political Science', 'Engineering Sciences', 'Mathematics'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 62 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 63 / 121: {
          [('Main', '==', 'm.0k9wp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 64 / 121: {
          [('Main', '==', 'm.0k9wp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 65 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 66 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.acceptance_rate', 'education.acceptance_rate.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.rate ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'11'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 67 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 68 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.postal_code'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'80840'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 69 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'38.9903'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 70 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'-104.858'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 71 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Alan D. Jagolinzer'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 72 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 73 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 74 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 237
            Final Answer: {'Robert Wilburn', 'Stephen Joseph Rossetti', 'William J. Begert', 'Richard E. Hawley', 'Ronald M. Sega', 'Charles V. Bush', 'Larry E. Morton', 'Gregory A. Biscone', 'Grady Booch', 'James M. Kelly', 'Mark C. Lee', 'John Gunyou', 'Len Salvemini', 'Danny Bolin', 'Richard E. Webber', 'Charlie Brown', 'Ronald W. Yates', 'John M. Loh', 'Charles R. Holland', 'William T. Lord', 'John Tree', 'Chuck Reed', 'Randall Schmidt', 'Richard A. Searfoss', 'Kent Lambert', 'Troy Calhoun', 'Paul K. Carlton, Jr.', 'Eric Boe', 'Richard T. Schlosberg', 'Loren Shriver', 'William T. Coleman III', 'Nicole Malachowski', 'Bryce Fisher', 'Héctor Andrés Negroni', 'Chesley Sullenberger', 'Clarence Gilyard', 'Ruben A. Cubero', 'Charles J. Precourt', 'Ralph Eberhart', 'Terry W. Virts, Jr.', 'Susan Y. Desjardins', 'Steve Russ', 'Daryl Jones', 'Charles T. Robertson, Jr.', 'Bill Coleman', 'John G. Lorber', 'Thomas David Jones', 'Anthony Schlegel', 'Frederick D. Gregory', 'Gregory H. Johnson', 'Susan J. Helms', 'Sidney M. Gutierrez', 'Les Schneider', 'Craig Tanner', 'Hila Levy', 'Jack D. Fischer', 'Randy Spetman', 'Roel Campos', 'Roy D. Bridges, Jr.', 'T. Allan McArtor', 'Chad Hennings', 'Carrol Chandler', 'Eugene S. Kraay', 'Henry Viccellio Jr.', 'Jeff Gallino', 'Stéphane Abrial', 'David Scantling', 'Brian Dubie', 'Ted Sundquist', 'Dee Dowis', 'Robertus Remkes', 'Curtis Brown', 'Thomas Mikolajcik', 'Bill Stealey', 'James Dutton', 'Janet C. Wolfenbarger', 'Justin Olsen', 'Edward A. Rice, Jr.', 'Heather Wilson', 'Sid Abramowitz', 'Kevin R. Kregel', 'Tad J. Oelstrom', 'Hans J. Mueh', 'Guy Gardner', 'Donald J. Hoffman', 'Tim DeRuyter', 'Mike Hill', 'John E. Blaha', 'William A. Pailes', 'Gregg Popovich', 'John J. Garstka', 'Roger P. Lempke', 'Martha McSally', 'LeRoy Homer, Jr.', 'Alonzo Babers', 'John Robb', 'Ervin J. Rokke', 'Eric Hanushek', 'Bradley C. Hosmer', 'Scott L. Fenstermaker', 'Michael E. Ryan', 'L. Blaine Hammond', 'B. Alvin Drew', 'William R. Looney III', 'Donald G. Davis', 'David P. Cooley', 'Jeffrey Feinstein', 'Chris Foster', 'Michael W. Doyle', 'Charles C. Baldwin', 'Justice Calo Reign', 'Charlie Jackson', 'Charles Beames', 'Charles Phillips', 'Karl W. Richter', 'Tome H. Walters Jr.', 'Frank Klotz', 'Michael P. C. Carns', 'Harry Chapin', 'John Stratton', 'Gregory S. Martin', 'Robert C. Oaks', 'Mike Ming', 'James Lesure', 'John C. Inglis', 'Nicholas Lumpp', 'Kelly Flinn incident', 'Paul E. Stein', 'Gary A. Grappo', 'Katrina Mumaw', 'Joseph R. McLaughlin', 'Matt Fong', 'Jeffrey Pelehac', 'Joe Vasta', 'Jon-Erik Beckjord', 'Kevin P. Chilton', 'Timothy A. Kinnan', 'John F. Regni', 'Brian Billick', 'Douglas M. Fraser', 'Steven Lindsey', 'Richard O. Covey', 'Chris Gizzi', 'C. Donald Alston', 'Josh Seefried', 'Bob Gardner', 'Charles L. Veach', 'Livingston L. Holder, Jr.', 'Donald C. Wurster', 'Peter DeGraaf', 'Linda Garcia Cubero', 'Dean W. Gonzalez', 'Trulan A. Eyre', 'Garrett Harencak', 'Duncan McNabb', 'Chad Hall', 'Norton A. Schwartz', "Miles O'Keeffe", 'Gregory R. Ball', 'Brian L. Losey', 'Susan Grant', 'Reichen Lehmkuhl', 'Jamil Walker', 'Marshall B. Webb', 'David A. Robinson', 'James D. Halsell', 'Charlie Ross', 'Kjell N. Lindgren', 'Denny Poland', 'Brian Knorr', 'David L. Englin', 'Lance Sijan', 'Hansford T. Johnson', 'Ronald J. Grabe', 'George Lee Butler', 'Shawna Rochelle Kimbrell', 'Larry Cole', 'Richard Stephen Ritchie', 'Brent Brandon', 'Daniel Lorenzetti', 'Cormac J. Carney', 'James L. Jamerson', 'John D. W. Corley', 'Kim Campbell', 'Darryl Wimberley', 'John Ragan', 'Joe Lombardi', 'Charles Edward Jones', 'Jim Parco', 'Michael L. Weinstein', 'Howell M. Estes III', 'Frank Gorenc', 'Michael J. Bloomfield', 'Brian Duffy', 'Dale Meyerrose', 'P. Michael Leahy', 'Charles Patrick Garcia', 'John Casper', 'Eli Bremer', 'Brock Strom', 'Steven L. Kwast', 'Jared Greenberg', 'J. Greg Hanson', 'Donald R. McMonagle', 'William G. Gregory', 'Alberto Gonzales', 'Terry W. Virts', 'Gary Payton', 'Larry D. James', 'John A. Warden III', 'Jody Powell', 'Karol J. Bobko', 'Eric Thorson', 'Stephen R. Lorenz', 'Terence T. Henricks', 'Michelle D. Johnson', 'Lawrence Romo', 'William H. Lacy', 'Nichi Farnham', 'Ronald Fogleman', 'Nicholas Kehoe', 'Doug Beason', 'Michael Blassie', 'Ron George', 'F. Michael Burkett', 'Burton M. Field', 'Raymond E. Johns, Jr.', 'Christopher B. Howard', 'William L. Shelton', 'John R. Dallager', 'Will A. Gunn', 'Vernon Robinson', 'John F. Nichols', 'R. David Yost', 'Owen J. Hill', 'Dana H. Born', 'Michael C. Gould'}
            Answers = 237, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.043s]
          Answers = 237, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.044s]
        Checking schema 75 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 2
            Final Answer: {'1983', '1994'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 76 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'US News & World Report: National Liberal Arts College Rankings'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 77 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 78 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 79 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Michael C. Gould'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 80 / 121: {
          [('Main', '==', 'm.0k9wp', ['military.military_post.used_by_armed_forces', 'military.military_post_use.armed_force'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:military.military_post.used_by_armed_forces ?o1 . ?o1 fb:military.military_post_use.armed_force ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:military.military_post.used_by_armed_forces ?o1 . ?o1 fb:military.military_post_use.armed_force ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 81 / 121: {
          [('Main', '==', 'm.0k9wp', ['military.military_post.used_by_armed_forces', 'military.military_post_use.military_post'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:military.military_post.used_by_armed_forces ?o1 . ?o1 fb:military.military_post_use.military_post ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:military.military_post.used_by_armed_forces ?o1 . ?o1 fb:military.military_post_use.military_post ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'United States Air Force Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 82 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 83 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 84 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 85 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 86 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 87 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 88 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 89 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 90 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.specialization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 91 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 92 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 93 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.acceptance_rate', 'education.acceptance_rate.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 94 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.faculty', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.faculty ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 95 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.number_of_undergraduates', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.number_of_undergraduates ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 96 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 97 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.street_address'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.street_address ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 98 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 99 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Current: 100 / 121
        Checking schema 100 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 101 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 102 / 121: {
          [('Main', '==', 'm.0k9wp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 103 / 121: {
          [('Main', '==', 'm.0k9wp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 104 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 105 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.university.acceptance_rate', 'education.acceptance_rate.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.university.acceptance_rate ?o1 . ?o1 fb:education.acceptance_rate.rate ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 106 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.endowed_organization.endowment', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:organization.endowed_organization.endowment ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 107 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.postal_code'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.postal_code ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 108 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 109 / 121: {
          [('Main', '==', 'm.0k9wp', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 110 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 111 / 121: {
          [('Main', '==', 'm.0k9wp', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 112 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 113 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 237, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 114 / 121: {
          [('Main', '==', 'm.0k9wp', ['education.educational_institution.students_graduates', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:education.educational_institution.students_graduates ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 115 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 116 / 121: {
          [('Main', '==', 'm.0k9wp', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0k9wp fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 117 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 118 / 121: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.leadership', 'organization.leadership.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.leadership ?o1 . ?o1 fb:organization.leadership.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 119 / 121: {
          [('Main', '==', 'm.0k9wp', ['military.military_post.used_by_armed_forces', 'military.military_post_use.armed_force'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:military.military_post.used_by_armed_forces ?o1 . ?o1 fb:military.military_post_use.armed_force ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 120 / 121: {
          [('Main', '==', 'm.0k9wp', ['military.military_post.used_by_armed_forces', 'military.military_post_use.military_post'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:military.military_post.used_by_armed_forces ?o1 . ?o1 fb:military.military_post_use.military_post ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:36] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        115 / 121 coarse schemas kept with ans_size > 0.
      } [0.919s]
      Coarse level ended, resulting in 115 schemas.
    } [3.055s]
    Type level searching (total types = 10): {
      Current: 0 / 115
[{'organization.organization_type'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'type.datetime'}]
[{'people.person'}]
[{'finance.currency'}]
[{'type.datetime'}]
[{'location.citytown'}]
[{'location.location'}]
[{'location.location'}]
[{'visual_art.color'}]
[{'education.school_mascot'}]
[{'education.educational_institution'}]
[{'type.datetime'}]
[{'location.location'}]
[{'education.educational_institution_campus'}]
[{'education.educational_institution'}]
[{'sports.school_sports_team'}]
[{'location.location'}]
[{'visual_art.color'}]
[{'education.school_mascot'}]
[{'education.educational_institution'}]
[{'type.datetime'}]
[{'location.location'}]
[{'education.educational_institution_campus'}]
[{'education.educational_institution'}]
[{'sports.school_sports_team'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'aviation.aircraft_ownership_count'}, {'aviation.aircraft_owner'}]
[{'military.military_service'}, {'military.armed_force'}]
[{'projects.project_participation'}, {'projects.project'}]
[{'projects.project_participation'}, {'projects.project_participant'}]
[{'aviation.aircraft_ownership_count'}, {'aviation.aircraft_model'}]
[{'military.military_service'}, {'military.military_person'}]
[{'organization.organization_relationship'}, {'organization.organization'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'award.ranking'}, {'type.int'}]
[{'organization.leadership'}, {'organization.role'}]
[{'education.acceptance_rate'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'organization.leadership'}, {'organization.organization'}]
[{'education.acceptance_rate'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'location.mailing_address'}, {'location.postal_code'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'military.military_post_use'}, {'military.armed_force'}]
[{'military.military_post_use'}, {'military.military_post'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'location.mailing_address'}, {'location.location'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'award.ranking'}, {'type.int'}]
[{'organization.leadership'}, {'organization.role'}]
[{'education.acceptance_rate'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'location.mailing_address'}, {'location.administrative_division'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'organization.leadership'}, {'organization.organization'}]
      Current: 100 / 115
[{'education.acceptance_rate'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'location.mailing_address'}, {'location.postal_code'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'organization.leadership'}, {'business.board_member'}]
[{'military.military_post_use'}, {'military.armed_force'}]
[{'military.military_post_use'}, {'military.military_post'}]
      24 typed schemas retrieved from 115 coarse schemas.
      Calculating F1 for 24 typed schemas: {
        Current: 0 / 24
        Checking schema 0 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.australian_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.australian_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:36] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.australian_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 2 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mx_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.mx_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.mx_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 3 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Colorado'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.005s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.005s]
        Checking schema 4 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.australian_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.australian_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.australian_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mx_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.mx_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.mx_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 6 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 7 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.australian_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.australian_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 8 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.contains']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mx_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.contains ?o1 . ?o1 fb:type.object.type fb:location.mx_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 9 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 10 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.australian_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.australian_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 11 / 24: {
          [('Main', '==', 'm.0k9wp', ['location.location.containedby']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mx_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0k9wp fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:location.mx_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 12 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 13 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.australian_state', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.australian_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.australian_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 14 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.mx_state', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.mx_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.mx_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 15 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.us_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 1
            Final Answer: {'Colorado'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.027s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.027s]
        Checking schema 16 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.australian_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.australian_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.australian_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.mx_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.mx_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema Request: {
            WebQ_2191|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.mx_state . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0k9wp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 18 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.australian_state', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.australian_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.citytown']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.mx_state', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.citytown ?o2 . ?o2 fb:type.object.type fb:location.mx_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.us_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.us_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 22 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.australian_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.australian_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.australian_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 23 / 24: {
          [('Main', '==', 'm.0k9wp', ['organization.organization.headquarters', 'location.mailing_address.state_province_region']), ('Type', '==', 'location.mx_state', ['type.object.type'])]
          var_types: [{'location.mailing_address'}, {'location.mx_state', 'location.administrative_division'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0k9wp fb:organization.organization.headquarters ?o1 . ?o1 fb:location.mailing_address.state_province_region ?o2 . ?o2 fb:type.object.type fb:location.mx_state . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:17:37] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        4 / 24 typed schemas kept with ans_size > 0.
      } [0.136s]
      Typed level ended, resulting in 119 schemas.
    } [0.144s]
    Time level searching (total times = 0): {
      Current: 0 / 119
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [{'projects.project_participation.to_date', 'projects.project_participation.from_date'}, {'projects.project.planned_completion_date', 'projects.project.start_date', 'projects.project.actual_completion_date'}]
self.var_time_preds: [{'projects.project_participation.to_date', 'projects.project_participation.from_date'}, set()]
self.var_time_preds: [set(), {'aviation.aircraft_model.retired', 'aviation.aircraft_model.maiden_flight', 'aviation.aircraft_model.introduced'}]
self.var_time_preds: [{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
self.var_time_preds: [{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
self.var_time_preds: [{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
      Current: 100 / 119
self.var_time_preds: [{'education.acceptance_rate.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
self.var_time_preds: [{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
self.var_time_preds: [{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 119 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 119 schemas.
    } [0.003s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 119
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
[set(), set()]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[{'projects.project_participation.to_date', 'projects.project_participation.from_date'}, {'projects.project.planned_completion_date', 'projects.project.start_date', 'projects.project.actual_completion_date'}]
[{'projects.project_participation.to_date', 'projects.project_participation.from_date'}, set()]
[set(), {'aviation.aircraft_model.retired', 'aviation.aircraft_model.maiden_flight', 'aviation.aircraft_model.introduced'}]
[{'military.military_service.from_date', 'military.military_service.to_date'}, set()]
[{'organization.organization_relationship.from', 'organization.organization_relationship.to', 'organization.organization_relationship.as_of_date'}, {'organization.organization.date_founded'}]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.ranking.year'}, set()]
[{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[set(), set()]
[{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
[{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
[{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.ranking.year'}, set()]
[{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[set(), set()]
[{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, {'organization.organization.date_founded'}]
      Current: 100 / 119
[{'education.acceptance_rate.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'organization.leadership.from', 'organization.leadership.to', 'organization.leadership.as_of_date'}, set()]
[{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
[{'military.military_post_use.from_date', 'military.military_post_use.to_date'}, set()]
[set()]
[set()]
[set(), set()]
[set(), set()]
      0 ordinal schemas retrieved from 119 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 119 schemas.
    } [0.003s]
    [2020-12-03 14:17:37] buffer saved.
    119 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2191_schema].
  } [17.629s]
  Entering Q 2192 / 5810 [b'where did the battle of the alamo start?']: {
    Show 7 E + 10 T + 0 Tm + 0 Ord = 17 linkings: {
      #00 Entity: [2, 4) (the battle) == m.0j6_v (battle of worcester) {'score': 7.685873, 'source': 2.0}
      #01 Entity: [2, 7) (the battle of the alamo) == m.02hztm (battle of the alamo) {'score': 5838.80248, 'source': 2.0}
      #02 Entity: [3, 5) (battle of) == m.01bvx (Battle) {'score': 1.335651, 'source': 1.0}
      #03 Entity: [3, 7) (battle of the alamo) == m.02hztm (battle of the alamo) {'score': 5879.100188, 'source': 2.0}
      #04 Entity: [5, 7) (the alamo) == m.0121j3 (Alamo_Mission_in_San_Antonio) {'score': 2.540705, 'source': 1.0}
      #05 Entity: [5, 7) (the alamo) == m.04v8dx (The_Alamo_(2004_film)) {'score': 3.331566, 'source': 1.0}
      #06 Entity: [5, 7) (the alamo) == m.04v8h1 (The_Alamo_(1960_film)) {'score': 4.224292, 'source': 1.0}
      #07 Type: [4, 6) (of the) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.836032}
      #08 Type: [4, 6) (of the) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.825366}
      #09 Type: [4, 5) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #10 Type: [4, 6) (of the) == measurement_unit.time_unit (unit of time) {'sim': 0.776986}
      #11 Type: [4, 6) (of the) == symbols.heraldic_variation_of_the_field (heraldic variation of the field) {'sim': 0.768408}
      #12 Type: [4, 6) (of the) == book.place_of_publication_period (place of publication period) {'sim': 0.767254}
      #13 Type: [4, 6) (of the) == government.form_of_government (form of government) {'sim': 0.766525}
      #14 Type: [4, 6) (of the) == chemistry.phase_of_matter (phase of matter) {'sim': 0.762461}
      #15 Type: [2, 5) (the battle of) == people.cause_of_death (cause of death) {'sim': 0.759329}
      #16 Type: [2, 5) (the battle of) == military.military_unit_place_of_origin (military unit place of origin) {'sim': 0.754689}
    } [0.000s]
    17 link data save to file.
    Coarse level searching (total entities = 7): {
      [Len-1||F1/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0121j3 ?p1 ?o1 . }
        [2020-12-03 14:17:51] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0121j3 ?p1 ?o1 . }
          Query return lines = 12
        } [0.005s]
        Filt_Query_Ret = 5 / 12 ( 0.005s)
        [Len-1||F1/7||2/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 fb:m.01bvx . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 fb:m.01bvx . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-1||F1/7||7/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 fb:m.0j6_v . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 fb:m.0j6_v . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
      } [0.026s]
      [Len-1||F2/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01bvx ?p1 ?o1 . }
        [2020-12-03 14:17:51] SPARQL hit!
        Filt_Query_Ret = 2 / 9 ( 0.000s)
        [Len-1||F2/7||1/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 fb:m.0121j3 . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 fb:m.0121j3 . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.014s)
        } [0.014s]
        [Len-1||F2/7||5/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 fb:m.04v8dx . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 fb:m.04v8dx . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-1||F2/7||6/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 fb:m.04v8h1 . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 fb:m.04v8h1 . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
      } [0.029s]
      [Len-1||F3/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02hztm ?p1 ?o1 . }
        [2020-12-03 14:17:51] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02hztm ?p1 ?o1 . }
          Query return lines = 14
        } [0.007s]
        Filt_Query_Ret = 7 / 14 ( 0.007s)
      } [0.007s]
      [Len-1||F4/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02hztm ?p1 ?o1 . }
        [2020-12-03 14:17:51] SPARQL hit!
        Filt_Query_Ret = 7 / 14 ( 0.000s)
      } [0.000s]
      [Len-1||F5/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.04v8dx ?p1 ?o1 . }
        [2020-12-03 14:17:51] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.04v8dx ?p1 ?o1 . }
          Query return lines = 36
        } [0.011s]
        Filt_Query_Ret = 23 / 36 ( 0.011s)
        [Len-1||F5/7||2/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 fb:m.01bvx . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 fb:m.01bvx . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-1||F5/7||7/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 fb:m.0j6_v . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 fb:m.0j6_v . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
      } [0.029s]
      [Len-1||F6/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.04v8h1 ?p1 ?o1 . }
        [2020-12-03 14:17:51] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.04v8h1 ?p1 ?o1 . }
          Query return lines = 29
        } [0.015s]
        Filt_Query_Ret = 14 / 29 ( 0.015s)
        [Len-1||F6/7||2/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 fb:m.01bvx . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 fb:m.01bvx . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-1||F6/7||7/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 fb:m.0j6_v . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 fb:m.0j6_v . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
      } [0.043s]
      [Len-1||F7/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0j6_v ?p1 ?o1 . }
        [2020-12-03 14:17:51] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0j6_v ?p1 ?o1 . }
          Query return lines = 13
        } [0.017s]
        Filt_Query_Ret = 6 / 13 ( 0.017s)
        [Len-1||F7/7||1/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 fb:m.0121j3 . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 fb:m.0121j3 . }
            Query return lines = 0
          } [0.036s]
          Filt_Query_Ret = 0 / 0 ( 0.036s)
        } [0.036s]
        [Len-1||F7/7||5/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 fb:m.04v8dx . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 fb:m.04v8dx . }
            Query return lines = 0
          } [0.022s]
          Filt_Query_Ret = 0 / 0 ( 0.022s)
        } [0.022s]
        [Len-1||F7/7||6/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 fb:m.04v8h1 . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 fb:m.04v8h1 . }
            Query return lines = 0
          } [0.025s]
          Filt_Query_Ret = 0 / 0 ( 0.025s)
        } [0.025s]
      } [0.100s]
      [Len-2||F1/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:51] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 325
        } [0.056s]
        Filt_Query_Ret = 2 / 325 ( 0.058s)
        [Len-2||F1/7||2/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bvx . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bvx . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F1/7||2/7-2] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bvx . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bvx . }
            Query return lines = 0
          } [0.079s]
          Filt_Query_Ret = 0 / 0 ( 0.079s)
        } [0.079s]
        [Len-2||F1/7||7/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j6_v . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j6_v . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-2||F1/7||7/7-2] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j6_v . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0121j3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j6_v . }
            Query return lines = 0
          } [0.065s]
          Filt_Query_Ret = 0 / 0 ( 0.065s)
        } [0.065s]
      } [0.233s]
      [Len-2||F2/7] (2020-12-03 14:17:51) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:51] SPARQL hit!
        Filt_Query_Ret = 2 / 76 ( 0.001s)
        [Len-2||F2/7||1/7-1] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0121j3 . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0121j3 . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.014s)
        } [0.014s]
        [Len-2||F2/7||1/7-2] (2020-12-03 14:17:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0121j3 . }
          [2020-12-03 14:17:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0121j3 . }
            Query return lines = 0
          } [1.936s]
          Filt_Query_Ret = 0 / 0 ( 1.936s)
        } [1.936s]
        [Len-2||F2/7||5/7-1] (2020-12-03 14:17:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8dx . }
          [2020-12-03 14:17:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8dx . }
            Query return lines = 0
          } [0.018s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
        [Len-2||F2/7||5/7-2] (2020-12-03 14:17:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8dx . }
          [2020-12-03 14:17:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8dx . }
            Query return lines = 0
          } [1.983s]
          Filt_Query_Ret = 0 / 0 ( 1.983s)
        } [1.983s]
        [Len-2||F2/7||6/7-1] (2020-12-03 14:17:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8h1 . }
          [2020-12-03 14:17:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8h1 . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
        [Len-2||F2/7||6/7-2] (2020-12-03 14:17:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8h1 . }
          [2020-12-03 14:17:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01bvx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8h1 . }
            Query return lines = 0
          } [1.987s]
          Filt_Query_Ret = 0 / 0 ( 1.987s)
        } [1.987s]
      } [5.955s]
      [Len-2||F3/7] (2020-12-03 14:17:57) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02hztm ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:57] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02hztm ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 273
        } [0.020s]
        Filt_Query_Ret = 2 / 273 ( 0.021s)
      } [0.021s]
      [Len-2||F4/7] (2020-12-03 14:17:57) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02hztm ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:57] SPARQL hit!
        Filt_Query_Ret = 2 / 273 ( 0.001s)
      } [0.001s]
      [Len-2||F5/7] (2020-12-03 14:17:57) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:57] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 676
        } [0.204s]
        Filt_Query_Ret = 18 / 676 ( 0.206s)
        [Len-2||F5/7||2/7-1] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bvx . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bvx . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F5/7||2/7-2] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bvx . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bvx . }
            Query return lines = 0
          } [0.088s]
          Filt_Query_Ret = 0 / 0 ( 0.088s)
        } [0.088s]
        [Len-2||F5/7||7/7-1] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j6_v . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j6_v . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F5/7||7/7-2] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j6_v . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8dx ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j6_v . }
            Query return lines = 0
          } [0.035s]
          Filt_Query_Ret = 0 / 0 ( 0.035s)
        } [0.035s]
      } [0.344s]
      [Len-2||F6/7] (2020-12-03 14:17:58) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:58] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 597
        } [0.084s]
        Filt_Query_Ret = 30 / 597 ( 0.086s)
        [Len-2||F6/7||2/7-1] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bvx . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01bvx . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F6/7||2/7-2] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bvx . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01bvx . }
            Query return lines = 0
          } [0.103s]
          Filt_Query_Ret = 0 / 0 ( 0.103s)
        } [0.103s]
        [Len-2||F6/7||7/7-1] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j6_v . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0j6_v . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F6/7||7/7-2] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j6_v . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04v8h1 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0j6_v . }
            Query return lines = 0
          } [0.036s]
          Filt_Query_Ret = 0 / 0 ( 0.036s)
        } [0.036s]
      } [0.253s]
      [Len-2||F7/7] (2020-12-03 14:17:58) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:17:58] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 137
        } [0.017s]
        Filt_Query_Ret = 2 / 137 ( 0.018s)
        [Len-2||F7/7||1/7-1] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0121j3 . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0121j3 . }
            Query return lines = 0
          } [0.064s]
          Filt_Query_Ret = 0 / 0 ( 0.064s)
        } [0.064s]
        [Len-2||F7/7||1/7-2] (2020-12-03 14:17:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0121j3 . }
          [2020-12-03 14:17:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0121j3 . }
            Query return lines = 0
          } [1.298s]
          Filt_Query_Ret = 0 / 0 ( 1.298s)
        } [1.298s]
        [Len-2||F7/7||5/7-1] (2020-12-03 14:17:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8dx . }
          [2020-12-03 14:17:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8dx . }
            Query return lines = 0
          } [0.048s]
          Filt_Query_Ret = 0 / 0 ( 0.048s)
        } [0.048s]
        [Len-2||F7/7||5/7-2] (2020-12-03 14:17:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8dx . }
          [2020-12-03 14:17:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8dx . }
            Query return lines = 0
          } [1.952s]
          Filt_Query_Ret = 0 / 0 ( 1.952s)
        } [1.952s]
        [Len-2||F7/7||6/7-1] (2020-12-03 14:18:01) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8h1 . }
          [2020-12-03 14:18:01] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04v8h1 . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F7/7||6/7-2] (2020-12-03 14:18:01) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8h1 . }
          [2020-12-03 14:18:01] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0j6_v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04v8h1 . }
            Query return lines = 0
          } [1.983s]
          Filt_Query_Ret = 0 / 0 ( 1.983s)
        } [1.983s]
      } [5.380s]
      122 coarse schemas retrieved from scratch.
      Calculating F1 for 122 coarse schemas: {
        Current: 0 / 122
        Checking schema 0 / 122: {
          [('Main', '==', 'm.0121j3', ['travel.tourist_attraction.near_travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:travel.tourist_attraction.near_travel_destination ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:travel.tourist_attraction.near_travel_destination ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 1
            Final Answer: {'San Antonio'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.009s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.009s]
        Checking schema 1 / 122: {
          [('Main', '==', 'm.0121j3', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 2
            Final Answer: {'UTC−06:00', 'Central Time Zone'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 2 / 122: {
          [('Main', '==', 'm.0121j3', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 3
            Final Answer: {'Texas', 'United States of America', 'San Antonio'}
            Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
          } [0.021s]
          Answers = 3, P = 0.333333, R = 1.000000, F1 = 0.500000
        } [0.021s]
        Checking schema 3 / 122: {
          [('Main', '==', 'm.0121j3', ['architecture.structure.opened'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0121j3 fb:architecture.structure.opened ?o1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 WHERE { fb:m.0121j3 fb:architecture.structure.opened ?o1 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 1
            Final Answer: {'1744'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 122: {
          [('Main', '==', 'm.0121j3', ['projects.project_focus.projects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:projects.project_focus.projects ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:projects.project_focus.projects ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 1
            Final Answer: {'Construction of the Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 5 / 122: {
          [('Main', '==', 'm.01bvx', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bvx fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bvx fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bvx'}
            Query return lines = 24
            Final Answer: {'""And what do the Theban hoplites see in this extended rending of the sky, this white-bright glory of Enlil\'s lightning?  The future, but not theirs:  paired cavalry fighters; formed ranks of armored death; grim men on their tall horses with lightning limning weapons tailored to the task; men spoiling for a fight if the gods allowed -- the Sacred Band of Stepsons, out from shadows and the dark.""', 'War consisteth not in battle only, or the act of fighting; but in a tract of time, wherein the will to contend by battle is sufficiently known.', '\u200e""Gather the shards of your courage. Patch together what resolve you can. We\'ll find this thing -- and kill it.""', 'Revenge is never the best driver for a battle, but a common one.', 'This was what men fought for, what men died for:  a chance at life, and to fight on other days -- the battle of your choice, of the body, or the heart, or the soul.', 'Everyone prepares for battle in his own way.', 'Wisdom, Niko thought as he leaned his cheek against his long-handled rake, cannot be had without price. And that price is blood. The sound of it in your veins. The pound of it in your head. The volume of it in a human body; the sickness when you’ve spilled it.', "Any coward can fight a battle when he's sure of winning, but give me the man who has pluck to fight when he's sure of losing. That's my way, sir; and there are many victories worse than a defeat.", "In a battle all you need to make you fight is a little hot blood and the knowledge that it's more dangerous to lose than to win.", 'And Tempus thought then that nothing was more worthwhile than what was growing in this whitewashed barracks, where he has come to build a force such as men or gods have never seen -- a force worth reckoning with, if you were of a mind.  And something was of that mind.  And something else opposed it.  He should have expected that.  Battle in the heavens, battle on the earth.', '""Honorable battle sustains a Sacred Band.""', '""Strife brings all things into being on her battlefield.  This I know.  I have been there many times,” says Vashanka, lord of sack and pillage.  “I have died before.”', '\u200e""For Tempus...was a dozen storm gods\' avatar; no army he sanctified could know defeat; no war he fought could not be won. Combat was life to him; he fought like the gods themselves...""', '“These Stepsons tread where mortals don’t belong, some of us think.  They seek out battle high above their station.  Who knows what powers may yet take them and their mystic allies to task, bring them their comeuppance?""', '\u200e""Then what difference does human striving make: mortal struggle, valor, pain? If you live, then live for the test of spirit, for the celebration of the heart. Live to fight on other days. Lose your beloveds one by one. And remember. Exalt the kiss of friend and horse and wind and sun, which venality cannot cheapen nor stupidity belittle.""', 'The battle had shaken all three of them. Life seemed so fragile, each  Sacred Band fighter so vulnerable.', 'When soldiers have been baptized in the fire of a battle-field, they have all one rank in my eyes.', '\u200e""Dreamers and dreaming dead, lots of them from neither here nor there with no chance of getting home again, lost in place and time...""', "And what do the Theban hoplites see in this extended rending of the sky, this white-bright glory of Enlil's lightning?  The future, but not theirs:  paired cavalry fighters; formed ranks of armored death; grim men on their tall horses with lightning limning weapons tailored to the task; men spoiling for a fight if the gods allowed -- the Sacred Band of Stepsons, out from shadows and the dark.", "\u200eWhat doesn't bend must break, when dooms are apportioned and destiny takes the lead. As it will now, and as it must, until this struggle ends.", 'France has lost a battle. But France has not lost the war.', 'After all the field of battle possesses many advantages over the drawing-room. There at least is no room for pretension or excessive ceremony, no shaking of hands or rubbing of noses, which make one doubt your sincerity, but hearty as well as hard hand-play. It at least exhibits one of the faces of humanity, the former only a mask.', 'War seared its specter into your memory. Doubled the beat of your heart. Humbled you because it would take you if it could. Living had become very important, the only thing that mattered.'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 6 / 122: {
          [('Main', '==', 'm.01bvx', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bvx fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01bvx fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01bvx'}
            Query return lines = 1
            Final Answer: {"Sharpe's Triumph"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 7 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 1
            Final Answer: {'San Antonio'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.017s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.017s]
        Checking schema 8 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.start_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02hztm fb:time.event.start_date ?o1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 WHERE { fb:m.02hztm fb:time.event.start_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 1
            Final Answer: {'1836'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 9 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.included_in_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 1
            Final Answer: {'Texas Revolution'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 10 / 122: {
          [('Main', '==', 'm.02hztm', ['base.culturalevent.event.event_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:03] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 11 / 122: {
          [('Main', '==', 'm.02hztm', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 1
            Final Answer: {'A Line in the Sand: The Alamo in Blood and Memory'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 12 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.end_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02hztm fb:time.event.end_date ?o1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 WHERE { fb:m.02hztm fb:time.event.end_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 1
            Final Answer: {'1836'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 13 / 122: {
          [('Main', '==', 'm.02hztm', ['base.culturalevent.event.entity_involved'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 5
            Final Answer: {'Jim Bowie', 'Republic of Texas', 'Antonio López de Santa Anna', 'William B. Travis', 'Mexico'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 14 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.000s]
        Checking schema 15 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.start_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02hztm fb:time.event.start_date ?o1 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 16 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.included_in_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 17 / 122: {
          [('Main', '==', 'm.02hztm', ['base.culturalevent.event.event_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 18 / 122: {
          [('Main', '==', 'm.02hztm', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 19 / 122: {
          [('Main', '==', 'm.02hztm', ['time.event.end_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02hztm fb:time.event.end_date ?o1 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 20 / 122: {
          [('Main', '==', 'm.02hztm', ['base.culturalevent.event.entity_involved'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02hztm fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 21 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'English Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 22 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.music'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Carter Burwell'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 23 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.production_companies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.production_companies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.production_companies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 2
            Final Answer: {'Imagine Entertainment', 'Touchstone Pictures'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 24 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.featured_film_locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.featured_film_locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.featured_film_locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Austin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 25 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.film_set_decoration_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Carla Curry'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 26 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.film_production_design_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_production_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_production_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Michael Corenblith'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 27 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.film_casting_director'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_casting_director ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_casting_director ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Ronna Kress'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 28 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 7
            Final Answer: {'Action film', 'Western', 'Drama', 'Costume drama', 'War film', 'Period piece', 'Action/Adventure'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 29 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 30 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.film_art_direction_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_art_direction_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.film_art_direction_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 2
            Final Answer: {'Dan Webster', 'Lauren E. Polizzi'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 31 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.directed_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'John Lee Hancock'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 32 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.initial_release_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.04v8dx fb:film.film.initial_release_date ?o1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 WHERE { fb:m.04v8dx fb:film.film.initial_release_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 33 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.tagline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.tagline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.tagline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 34 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.written_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 3
            Final Answer: {'Leslie Bohem', 'Stephen Gaghan', 'John Lee Hancock'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 35 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.costume_design_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.costume_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.costume_design_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Daniel Orlandi'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 36 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.executive_produced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.executive_produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.executive_produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 2
            Final Answer: {'Todd Hallowell', 'Philip Steuer'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 37 / 122: {
          [('Main', '==', 'm.04v8dx', ['media_common.netflix_title.netflix_genres'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 10
            Final Answer: {'Military & War Dramas', 'Western', 'Military Action & Adventure', 'Dramas Based on Real Life', 'Military Dramas', 'Military & War Action', 'Period piece', 'Dramas', 'Pre-20th Century Period Pieces', 'Action/Adventure'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 38 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.produced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 2
            Final Answer: {'Ron Howard', 'Mark Johnson'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 39 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.cinematography'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Dean Semler'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 40 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.edited_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.edited_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.edited_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Eric L. Beason'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 41 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.rating'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.rating ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.rating ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'PG-13 (USA)'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 42 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.soundtrack'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 43 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8dx fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo and the Texas War of Independence, September 30, 1835 to April 21, 1836'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 44 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 2
            Final Answer: {'English Language', 'Spanish Language'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 45 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.music'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.music ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'Dimitri Tiomkin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 46 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.film_set_decoration_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.film_set_decoration_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'Victor A. Gangelin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 47 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.film_format'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.film_format ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.film_format ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'70 mm Todd-AO'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 48 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 8
            Final Answer: {'Action film', 'Western', 'Drama', 'Epic film', 'Biography', 'War film', 'Roadshow theatrical release', 'Action/Adventure'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 49 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 50 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.directed_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.directed_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'John Wayne'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 51 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.initial_release_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.04v8h1 fb:film.film.initial_release_date ?o1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 WHERE { fb:m.04v8h1 fb:film.film.initial_release_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'1960'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 52 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.written_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.written_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'James Edward Grant'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 53 / 122: {
          [('Main', '==', 'm.04v8h1', ['media_common.netflix_title.netflix_genres'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:media_common.netflix_title.netflix_genres ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 16
            Final Answer: {'Classic Westerns', 'Military & War Dramas', 'Western', 'Epic film', 'Biography', 'Military Action & Adventure', 'Dramas Based on Real Life', 'Military Dramas', 'Classic Dramas', 'Military & War Action', 'Blockbuster', 'Dramas', 'Action Classics', 'Classic War Stories', 'Biographical Dramas', 'Action/Adventure'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 54 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.produced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.produced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'John Wayne'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 55 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.cinematography'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.cinematography ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'William H. Clothier'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 56 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.soundtrack'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.soundtrack ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 57 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04v8h1 fb:film.film.subjects ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo and the Texas War of Independence, September 30, 1835 to April 21, 1836'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 58 / 122: {
          [('Main', '==', 'm.0j6_v', ['time.event.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 1
            Final Answer: {'Worcester'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 59 / 122: {
          [('Main', '==', 'm.0j6_v', ['time.event.start_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0j6_v fb:time.event.start_date ?o1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 WHERE { fb:m.0j6_v fb:time.event.start_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 1
            Final Answer: {'1651'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 60 / 122: {
          [('Main', '==', 'm.0j6_v', ['time.event.included_in_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 2
            Final Answer: {'English Civil War', 'Scotland in the Wars of the Three Kingdoms'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 61 / 122: {
          [('Main', '==', 'm.0j6_v', ['base.culturalevent.event.event_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 62 / 122: {
          [('Main', '==', 'm.0j6_v', ['time.event.end_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0j6_v fb:time.event.end_date ?o1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 WHERE { fb:m.0j6_v fb:time.event.end_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 1
            Final Answer: {'1651'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 63 / 122: {
          [('Main', '==', 'm.0j6_v', ['base.culturalevent.event.entity_involved'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0j6_v fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 2
            Final Answer: {'Oliver Cromwell', 'Charles II of England'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 64 / 122: {
          [('Main', '==', 'm.0121j3', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0121j3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.0121j3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 1
            Final Answer: {'29.4258'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 65 / 122: {
          [('Main', '==', 'm.0121j3', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0121j3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.0121j3 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 1
            Final Answer: {'-98.4861'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 66 / 122: {
          [('Main', '==', 'm.01bvx', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bvx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bvx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bvx'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 67 / 122: {
          [('Main', '==', 'm.01bvx', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bvx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01bvx fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01bvx'}
            Query return lines = 1
            Final Answer: {'Battle'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 68 / 122: {
          [('Main', '==', 'm.02hztm', ['military.military_conflict.combatants', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02hztm fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02hztm fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 1
            Final Answer: {'Battle of the Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 69 / 122: {
          [('Main', '==', 'm.02hztm', ['military.military_conflict.combatants', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02hztm fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02hztm fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02hztm'}
            Query return lines = 1
            Final Answer: {'Mexico'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 70 / 122: {
          [('Main', '==', 'm.02hztm', ['military.military_conflict.combatants', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02hztm fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 71 / 122: {
          [('Main', '==', 'm.02hztm', ['military.military_conflict.combatants', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02hztm fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema hit!
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.000s]
        Checking schema 72 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.estimated_budget', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'1.45e+08'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 73 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.release_date_s', 'film.film_regional_release_date.release_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.release_date ?o2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.release_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 2
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 74 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.estimated_budget', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 75 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.starring', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.starring ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.starring ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 76 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.runtime', 'film.film_cut.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 77 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.distributors', 'film.film_film_distributor_relationship.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 78 / 122: {
          [('Main', '==', 'm.04v8dx', ['base.wfilmbase.film.w_id', 'base.wfilmbase.siteid.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:base.wfilmbase.film.w_id ?o1 . ?o1 fb:base.wfilmbase.siteid.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:base.wfilmbase.film.w_id ?o1 . ?o1 fb:base.wfilmbase.siteid.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 79 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_distribution_medium'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_distribution_medium ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_distribution_medium ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 2
            Final Answer: {'Theatrical', 'DVD'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 80 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 81 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.other_crew', 'film.film_crew_gig.crewmember'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.other_crew ?o1 . ?o1 fb:film.film_crew_gig.crewmember ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.other_crew ?o1 . ?o1 fb:film.film_crew_gig.crewmember ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 32
            Final Answer: {'Patrick Loungway', 'Kip Larsen', 'Thomas Real', 'Charles Maynes', 'Tracie Laymon', 'Jon Johnson', 'David E. Fluhr', 'Greg Funk', 'Jacenda Burkett', 'Chelsea Carpenter', 'Tim Drnec', 'Edouard F. Henriques', 'Dan Crawley', 'Todd Semmes', 'Brian W. Jennings', 'Flax Glor', 'Eric Gotthelf', 'Kay Colvin', 'Tami Treadwell', 'Carol F. Doran', 'Krystyna Demkowicz', 'Hill Vinot', 'Kevin Lin', 'Charisse Cardenas', 'Gabriel Guy', 'Keith Bilderbeck', 'John Pritchett', 'Steve Kohler', 'Craig Barron', 'Larz Anderson', 'Patrick Phillips', 'Kim Santantonio'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 82 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.other_crew', 'film.film_crew_gig.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.other_crew ?o1 . ?o1 fb:film.film_crew_gig.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.other_crew ?o1 . ?o1 fb:film.film_crew_gig.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 83 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.starring', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.starring ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.starring ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 20
            Final Answer: {'Micajah Autry', 'Tom Waters', 'Private Gregorio Esparza', 'Susanna Dickinson', 'Rosanna Travis', 'James Bowie', 'Albert Grimes', 'Lieutenant John Forsythe', 'Sgt. William Ward', 'Davy Crockett', 'Mial Scurlock', 'Boy in store', 'Sam Houston', 'Daniel Cloud', 'William Travis', 'Colonel Green Jameson', 'James Bonham', 'Captain Almeron Dickinson', 'Juan Seguin', 'Antonio Lopez de Santa Ana'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 84 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.starring', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.starring ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.starring ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 22
            Final Answer: {'Emilio Echevarría', 'Robert Prentiss', 'Marc Blucas', 'Tom Davidson', 'Ricardo Antonio Chavira', 'Kevin Page', 'Joe Stevens', 'William Earl Brown', "Matt O'Leary", 'Leon Rippy', 'Stephen Bruton', 'Emily Deschanel', 'Laura Clifton', 'Steven Chester Prince', 'Patrick Wilson', 'Dennis Quaid', 'Nick Kokich', 'Billy Bob Thornton', 'Wes Studi', 'Jason Patric', 'Craig Erickson', 'Jordi Mollà'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 85 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.runtime', 'film.film_cut.runtime'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.runtime ?o2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.runtime ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'137'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 86 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.distributors', 'film.film_film_distributor_relationship.distributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.distributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.distributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'Touchstone Pictures'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 87 / 122: {
          [('Main', '==', 'm.04v8dx', ['base.wfilmbase.film.w_id', 'base.wfilmbase.siteid.document_order'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:base.wfilmbase.film.w_id ?o1 . ?o1 fb:base.wfilmbase.siteid.document_order ?o2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8dx fb:base.wfilmbase.film.w_id ?o1 . ?o1 fb:base.wfilmbase.siteid.document_order ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'0'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.134s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.134s]
        Checking schema 88 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.release_date_s', 'film.film_regional_release_date.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 89 / 122: {
          [('Main', '==', 'm.04v8dx', ['film.film.other_crew', 'film.film_crew_gig.film_crew_role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.other_crew ?o1 . ?o1 fb:film.film_crew_gig.film_crew_role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.other_crew ?o1 . ?o1 fb:film.film_crew_gig.film_crew_role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 35
            Final Answer: {'Sound Editor', 'Sound Effects Editor', 'Sound Mixer', 'Spydercam Coordinator', 'Makeup Department Head', 'Set Designer', 'Visual Effects Cameraman', 'Key Hair Stylist', 'ADR Mixer', 'Special Effects Director', 'Visual Effects Executive Producer', 'Dubbing Mixer', 'Wig Maker', 'Sound Effects Designer', 'Supervising Sound Editor', 'Sound Re-Recording Mixer', 'Utility Sound Technician', 'ADR Recordist', 'Special Effects Foreman', 'Makeup Artist', 'Sound Recordist', 'Special Effects Office Coordinator', 'Mould-Maker', 'Key Makeup Artist', 'Visual Effects Supervisor', 'Hair Stylist', 'Visual Effects Producer', 'Visual Effects', 'Aerial Effects Coordinator', 'Special Effects', 'Quality Control Coordinator, Digital Intermediate', 'Mold Maker', 'Special Effects Foreperson', 'Pre-Mix Recordist', 'Hair Department Head'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 90 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.estimated_budget', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'1.2e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 91 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:04] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 9
            Final Answer: {'Academy Award for Sound Mixing', 'Academy Award for Film Editing', 'Academy Award for Best Cinematography', 'Academy Award for Best Picture', 'Academy Award for Original Music Score', 'Academy Award for  Actor in a Supporting Role', 'Academy Awards for Best Music, Scoring of a Dramatic or Comedy Picture', 'Academy Awards for Best Cinematography, Color', 'Golden Globe Award for Best Original Score'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 92 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.runtime', 'film.film_cut.note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.105s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.105s]
        Checking schema 93 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_winning_work.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 2
            Final Answer: {'1960', '1961'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 94 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_winning_work.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 95 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_winning_work.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 96 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'1755'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 97 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.release_date_s', 'film.film_regional_release_date.release_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.release_date ?o2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.release_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'1960'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 98 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.estimated_budget', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.estimated_budget ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 99 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.starring', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.starring ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.starring ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.067s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.067s]
        Current: 100 / 122
        Checking schema 100 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_nominated_work.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 101 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_nominated_work.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 2
            Final Answer: {'1960', '1961'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 102 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.runtime', 'film.film_cut.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 103 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_winning_work.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 3
            Final Answer: {'Dimitri Tiomkin', 'Fred Hynes', 'Gordon E. Sawyer'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 104 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_winning_work.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 2
            Final Answer: {'18th Golden Globe Awards', '33rd Academy Awards'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 105 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 106 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 107 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.distributors', 'film.film_film_distributor_relationship.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 108 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_distribution_medium'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_distribution_medium ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_distribution_medium ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'Theatrical'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 109 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_region'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 110 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.starring', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.starring ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.starring ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 3
            Final Answer: {'Davy Crockett', 'Smitty', 'Capt. Almeron Dickinson'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 111 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.starring', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.starring ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.starring ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 12
            Final Answer: {'Richard Widmark', 'Denver Pyle', 'Frankie Avalon', 'John Dierkes', 'Joseph Calleia', 'John Wayne', 'Ken Curtis', 'Chill Wills', "Joan O'Brien", 'Laurence Harvey', 'Linda Cristal', 'Patrick Wayne'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 112 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 7
            Final Answer: {'Gordon E. Sawyer', 'John Wayne', 'Dimitri Tiomkin', 'Chill Wills', 'Stuart Gilmore', 'Fred Hynes', 'William H. Clothier'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 113 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_nominated_work.award_nominations', 'award.award_nomination.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 114 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.runtime', 'film.film_cut.runtime'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.runtime ?o2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:film.film.runtime ?o1 . ?o1 fb:film.film_cut.runtime ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 4
            Final Answer: {'167', '202', '120', '162'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 115 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.award_winning_work.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 2
            Final Answer: {'Academy Award for Sound Mixing', 'Golden Globe Award for Best Original Score'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 116 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Movie List: the first 9200'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 117 / 122: {
          [('Main', '==', 'm.04v8h1', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 WHERE { fb:m.04v8h1 fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 118 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.distributors', 'film.film_film_distributor_relationship.distributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.distributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.distributors ?o1 . ?o1 fb:film.film_film_distributor_relationship.distributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'United Artists'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 119 / 122: {
          [('Main', '==', 'm.04v8h1', ['film.film.release_date_s', 'film.film_regional_release_date.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 1
            Final Answer: {'The Alamo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 120 / 122: {
          [('Main', '==', 'm.0j6_v', ['military.military_conflict.combatants', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j6_v fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j6_v fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 1
            Final Answer: {'Battle of Worcester'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 121 / 122: {
          [('Main', '==', 'm.0j6_v', ['military.military_conflict.combatants', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j6_v fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0j6_v fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0j6_v'}
            Query return lines = 1
            Final Answer: {'Roundhead'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        114 / 122 coarse schemas kept with ans_size > 0.
      } [1.675s]
      Coarse level ended, resulting in 114 schemas.
    } [14.099s]
    Type level searching (total types = 10): {
      Current: 0 / 114
[{'travel.travel_destination'}]
[{'time.time_zone'}]
[{'location.location'}]
[{'type.datetime'}]
[{'projects.project'}]
[{'media_common.quotation'}]
[{'book.written_work'}]
[{'location.location'}]
[{'type.datetime'}]
[{'time.event'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'common.topic'}]
[{'location.location'}]
[{'type.datetime'}]
[{'time.event'}]
[{'book.written_work'}]
[{'type.datetime'}]
[{'common.topic'}]
[{'language.human_language'}]
[{'film.music_contributor'}]
[{'film.production_company'}]
[{'film.film_location'}]
[{'film.film_set_designer'}]
[{'film.film_production_designer'}]
[{'film.film_casting_director'}]
[{'film.film_genre'}]
[{'location.country'}]
[{'film.film_art_director'}]
[{'film.director'}]
[{'type.datetime'}]
[{'film.writer'}]
[{'film.film_costumer_designer'}]
[{'film.producer'}]
[{'media_common.netflix_genre'}]
[{'film.producer'}]
[{'film.cinematographer'}]
[{'film.editor'}]
[{'film.content_rating'}]
[{'music.soundtrack'}]
[{'film.film_subject'}]
[{'language.human_language'}]
[{'film.music_contributor'}]
[{'film.film_set_designer'}]
[{'film.film_format'}]
[{'film.film_genre'}]
[{'location.country'}]
[{'film.director'}]
[{'type.datetime'}]
[{'film.writer'}]
[{'media_common.netflix_genre'}]
[{'film.producer'}]
[{'film.cinematographer'}]
[{'music.soundtrack'}]
[{'film.film_subject'}]
[{'location.location'}]
[{'type.datetime'}]
[{'time.event'}]
[{'type.datetime'}]
[{'common.topic'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'film.film_regional_release_date'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'film.performance'}, {'film.film'}]
[{'film.film_cut'}, {'film.film'}]
[{'film.film_film_distributor_relationship'}, {'film.film'}]
[{'base.wfilmbase.siteid'}, {'base.wfilmbase.film'}]
[{'film.film_regional_release_date'}, {'film.film_distribution_medium'}]
[{'film.film_regional_release_date'}, {'location.location'}]
[{'film.film_crew_gig'}, {'film.film_crewmember'}]
[{'film.film_crew_gig'}, {'film.film'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.film_cut'}, {'type.float'}]
[{'film.film_film_distributor_relationship'}, {'film.film_distributor'}]
[{'base.wfilmbase.siteid'}, {'type.int'}]
[{'film.film_regional_release_date'}, {'film.film'}]
[{'film.film_crew_gig'}, {'film.film_job'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'award.ranking'}, {'type.int'}]
[{'film.film_regional_release_date'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'film.performance'}, {'film.film'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'film.film_cut'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'award.ranking'}, {'award.ranked_item'}]
      Current: 100 / 114
[{'film.film_film_distributor_relationship'}, {'film.film'}]
[{'film.film_regional_release_date'}, {'film.film_distribution_medium'}]
[{'film.film_regional_release_date'}, {'location.location'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'film.film_cut'}, {'type.float'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'film.film_film_distributor_relationship'}, {'film.film_distributor'}]
[{'film.film_regional_release_date'}, {'film.film'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
      3 typed schemas retrieved from 114 coarse schemas.
      Calculating F1 for 3 typed schemas: {
        Current: 0 / 3
        Checking schema 0 / 3: {
          [('Main', '==', 'm.0121j3', ['location.location.containedby']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0121j3 fb:location.location.containedby ?o1 . ?o1 fb:type.object.type fb:military.military_unit_place_of_origin . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0121j3'}
            Query return lines = 1
            Final Answer: {'Texas'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 1 / 3: {
          [('Main', '==', 'm.04v8dx', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_region']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'film.film_regional_release_date'}, {'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8dx fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8dx'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 2 / 3: {
          [('Main', '==', 'm.04v8h1', ['film.film.release_date_s', 'film.film_regional_release_date.film_release_region']), ('Type', '==', 'military.military_unit_place_of_origin', ['type.object.type'])]
          var_types: [{'film.film_regional_release_date'}, {'military.military_unit_place_of_origin', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:05] Q_Schema Request: {
            WebQ_2192|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04v8h1 fb:film.film.release_date_s ?o1 . ?o1 fb:film.film_regional_release_date.film_release_region ?o2 . ?o2 fb:type.object.type fb:military.military_unit_place_of_origin . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04v8h1'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        1 / 3 typed schemas kept with ans_size > 0.
      } [0.040s]
      Typed level ended, resulting in 115 schemas.
    } [0.046s]
    Time level searching (total times = 0): {
      Current: 0 / 115
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'projects.project.planned_completion_date', 'projects.project.start_date', 'projects.project.actual_completion_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'film.film_film_distributor_relationship.year'}, {'film.film.initial_release_date'}]
self.var_time_preds: [set(), {'base.wfilmbase.film.release_date'}]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'film.film_film_distributor_relationship.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
      Current: 100 / 115
self.var_time_preds: [{'film.film_film_distributor_relationship.year'}, {'film.film.initial_release_date'}]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'film.film_film_distributor_relationship.year'}, set()]
self.var_time_preds: [{'film.film_regional_release_date.release_date'}, {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 115 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 115 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 115
[set()]
[set()]
[set()]
[set()]
[{'projects.project.planned_completion_date', 'projects.project.start_date', 'projects.project.actual_completion_date'}]
[{'media_common.quotation.date'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'film.film_regional_release_date.release_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[set(), {'film.film.initial_release_date'}]
[{'film.film_film_distributor_relationship.year'}, {'film.film.initial_release_date'}]
[set(), {'base.wfilmbase.film.release_date'}]
[{'film.film_regional_release_date.release_date'}, set()]
[{'film.film_regional_release_date.release_date'}, set()]
[set(), set()]
[set(), {'film.film.initial_release_date'}]
[set(), set()]
[set(), set()]
[set(), set()]
[{'film.film_film_distributor_relationship.year'}, set()]
[set(), set()]
[{'film.film_regional_release_date.release_date'}, {'film.film.initial_release_date'}]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[{'film.film_regional_release_date.release_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
      Current: 100 / 115
[{'film.film_film_distributor_relationship.year'}, {'film.film.initial_release_date'}]
[{'film.film_regional_release_date.release_date'}, set()]
[{'film.film_regional_release_date.release_date'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_nomination.year'}, set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'film.film_film_distributor_relationship.year'}, set()]
[{'film.film_regional_release_date.release_date'}, {'film.film.initial_release_date'}]
[set(), set()]
[set(), set()]
[set()]
      0 ordinal schemas retrieved from 115 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 115 schemas.
    } [0.002s]
    [2020-12-03 14:18:05] buffer saved.
    115 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2192_schema].
  } [23.376s]
  Entering Q 2193 / 5810 [b'what do barack obama do as a president?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 4) (barack obama) == m.02mjmr (Barack_Obama) {'score': 18944.311865, 'source': 0.0}
      #01 Entity: [7, 8) (president) == m.0157m (Bill_Clinton) {'score': 2.422493, 'source': 1.0}
      #02 Type: [7, 8) (president) == government.us_vice_president (us vice president) {'sim': 0.900755}
      #03 Type: [7, 8) (president) == government.us_president (us president) {'sim': 0.845975}
      #04 Type: [4, 6) (do as) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.766776}
      #05 Type: [4, 7) (do as a) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.765351}
      #06 Type: [5, 8) (as a president) == government.us_vice_presidential_campaign (us vice presidential campaign) {'sim': 0.739506}
      #07 Type: [4, 7) (do as a) == film.person_or_entity_appearing_in_film (person or entity appearing in film) {'sim': 0.733388}
      #08 Type: [5, 8) (as a president) == government.national_anthem_of_a_country (national anthem of a country) {'sim': 0.718773}
      #09 Type: [5, 7) (as a) == film.film_company_role_or_service (film company role or service) {'sim': 0.69111}
      #10 Type: [4, 7) (do as a) == medicine.notable_person_with_medical_condition (public figure with medical condition) {'sim': 0.690657}
      #11 Type: [5, 8) (as a president) == government.government_office_or_title (government office or title) {'sim': 0.689425}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:18:14) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0157m ?p1 ?o1 . }
        [2020-12-03 14:18:14] SPARQL hit!
        Filt_Query_Ret = 35 / 89 ( 0.000s)
        [Len-1||F1/2||2/2-1] (2020-12-03 14:18:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 fb:m.02mjmr . }
          [2020-12-03 14:18:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 fb:m.02mjmr . }
            Query return lines = 3
          } [0.036s]
          Filt_Query_Ret = 3 / 3 ( 0.037s)
        } [0.037s]
      } [0.037s]
      [Len-1||F2/2] (2020-12-03 14:18:14) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02mjmr ?p1 ?o1 . }
        [2020-12-03 14:18:14] SPARQL hit!
        Filt_Query_Ret = 44 / 99 ( 0.000s)
        [Len-1||F2/2||1/2-1] (2020-12-03 14:18:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02mjmr ?p1 ?o1 . ?o1 ?p2 fb:m.0157m . }
          [2020-12-03 14:18:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02mjmr ?p1 ?o1 . ?o1 ?p2 fb:m.0157m . }
            Query return lines = 3
          } [0.030s]
          Filt_Query_Ret = 3 / 3 ( 0.030s)
        } [0.031s]
      } [0.031s]
      [Len-2||F1/2] (2020-12-03 14:18:14) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:14] SPARQL hit!
        Filt_Query_Ret = 145 / 1029 ( 0.005s)
        [Len-2||F1/2||2/2-1] (2020-12-03 14:18:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02mjmr . }
          [2020-12-03 14:18:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02mjmr . }
            Query return lines = 78
          } [0.105s]
          Filt_Query_Ret = 0 / 78 ( 0.106s)
        } [0.106s]
        [Len-2||F1/2||2/2-2] (2020-12-03 14:18:14) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02mjmr . }
          [2020-12-03 14:18:14] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0157m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02mjmr . }
            Query return lines = 11
          } [0.885s]
          Filt_Query_Ret = 0 / 11 ( 0.885s)
        } [0.885s]
      } [0.997s]
      [Len-2||F2/2] (2020-12-03 14:18:15) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02mjmr ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:18:15] SPARQL hit!
        Filt_Query_Ret = 147 / 1194 ( 0.005s)
        [Len-2||F2/2||1/2-1] (2020-12-03 14:18:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02mjmr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0157m . }
          [2020-12-03 14:18:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02mjmr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0157m . }
            Query return lines = 78
          } [0.104s]
          Filt_Query_Ret = 0 / 78 ( 0.105s)
        } [0.105s]
        [Len-2||F2/2||1/2-2] (2020-12-03 14:18:15) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02mjmr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0157m . }
          [2020-12-03 14:18:15] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02mjmr ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0157m . }
            Query return lines = 23
          } [1.891s]
          Filt_Query_Ret = 1 / 23 ( 1.891s)
        } [1.891s]
      } [2.002s]
      378 coarse schemas retrieved from scratch.
      Calculating F1 for 378 coarse schemas: {
        Current: 0 / 378
        Checking schema 0 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.sww_base.interest'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.interest ?o1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.interest ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'80'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 378: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 2 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1946'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 3 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 4 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'White American', 'Scotch-Irish American'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 5 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'William Jefferson Blythe, Jr.', 'Virginia Clinton Kelley'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 6 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'Southern Baptist Convention', 'Christianity', 'Protestantism', 'Baptists'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 7 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1.89'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 8 / 378: {
          [('Main', '==', 'm.0157m', ['base.activism.activist.area_of_activism'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.activism.activist.area_of_activism ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Humanitarian', 'Health advocacy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 9 / 378: {
          [('Main', '==', 'm.0157m', ['government.us_president.vice_president'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Al Gore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 10 / 378: {
          [('Main', '==', 'm.0157m', ['music.group_member.instruments_played'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.group_member.instruments_played ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:17] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.group_member.instruments_played ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Saxophone'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 11 / 378: {
          [('Main', '==', 'm.0157m', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Summertime'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 12 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.sww_base.heat'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.heat ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:base.popstra.sww_base.heat ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'70'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 13 / 378: {
          [('Main', '==', 'm.0157m', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'William J. Clinton Presidential Center and Park', 'Bill Clinton Boulevard'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 14 / 378: {
          [('Main', '==', 'm.0157m', ['book.author.book_editions_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 22
            Final Answer: {'From Red Tape to Results', 'Jean Moulin, 1899-1943', 'My Life (Russian Language Edition)', 'My Life (Limited Edition)', 'Mi Vida', 'Clinton on Clinton', 'The Clinton foreign policy reader', 'The impeachment and trial of President Clinton', 'My life', 'State Of The Union Addresses', 'Giving', 'Photograph and The American Dream, 1840-1940, The', 'State of the Union Addresses of William J. Clinton', 'My Life', 'Between hope and history'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 15 / 378: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.context_name.nickname'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.schemastaging.context_name.nickname ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 16 / 378: {
          [('Main', '==', 'm.0157m', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'The War Room'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 17 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'There is nothing wrong with America that cannot be cured by what is right with America.', 'Edgar Wayburn has worked to preserve the most breath-taking examples of the American landscape. In fact, over the course of more than a half-century, both as President of the Sierra Club and as a private citizen, he has saved more of our wilderness than any person alive.', 'I did not have sexual relations with that woman', 'Our land of new promise will be a nation that meets its obligations, a nation that balances its budget, but never loses the balance of its values.'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 18 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Chelsea Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 19 / 378: {
          [('Main', '==', 'm.0157m', ['base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Bill Clinton (Phil Hartman)', 'Bill Clinton (Darrell Hammond)'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 20 / 378: {
          [('Main', '==', 'm.0157m', ['base.inaugurations.inauguration_speaker.inauguration'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Bill Clinton 1997 presidential inauguration', 'Bill Clinton 1993 presidential inauguration'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 21 / 378: {
          [('Main', '==', 'm.0157m', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 28
            Final Answer: {'Convention No. 182 for Elimination of the Worst Forms of Child Labor', 'Mi Vida', 'The new SBA', 'Putting people first', 'Chemical and Biological Weapons Defense', 'The impeachment and trial of President Clinton', 'Mein Leben/my Life', 'National Security Strategy for a New Century, 1998', "Technology for America's economic growth", 'Between hope and history', 'Economic Report of the President of the United States & the Annual Report of the Council of Economic Advisers 2001', 'Clinton v. New York (1998)', 'Reinventing regulation of drugs and medical devices', 'State Of The Union Addresses', 'Health Security Act of 1993', 'Science in the national interest', 'The Climate change action plan', 'Preface to the presidency', 'Back to Work: Why We Need Smart Government for a Strong Economy', 'Building the U.S. - Africa Partnership', 'Between Hope and History', 'U. S. Government Manual, 1994-95', 'Federal Financial Management Report, 2000', 'Giving: How Each of Us Can Change the World', 'The new OSHA', 'Joint Convention On The Safety Of Spent Fuel And Radioactive Waste Management', 'The Clinton foreign policy reader', 'My Life'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 22 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.election_campaigns'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'Bill Clinton presidential campaign, 1992', 'Bill Clinton presidential campaign, 1996', 'Bill Clinton for Congress, 1974', 'Bill Clinton for Arkansas Attorney General, 1976'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 23 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Teacher', 'Statesman', 'Author', 'Lawyer', 'Politician'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.037s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.037s]
        Checking schema 24 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 25 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Hope'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 26 / 378: {
          [('Main', '==', 'm.0157m', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 35
            Final Answer: {'Sexual McCarthyism', 'Waiting for the other shoe to drop--', 'First in his class', 'Clinton on Clinton', 'The unshredded files of Hillary and Bill Clinton', 'Rush Limbaugh Is a Big Fat Idiot and Other Observations', 'Between hope and history', 'The Clinton enigma', 'Behind the Oval Office: Winning the Presidency in the Nineties', 'Off to the revolution', 'The Pact: Bill Clinton, Newt Gingrich, and the Rivalry that Defined a Generation', 'Lies and the Lying Liars Who Tell Them', 'Target: Caught in the Crosshairs of Bill and Hillary Clinton', 'That Book ...of Perfectly Useless Information', 'Countdown of 10 Amazing Moments from the Year 2011: No. 4 the Martin Luther King Jr. Memorial', 'My Life', 'High Crimes and Misdemeanors: The Case Against Bill Clinton', 'Penguin soup for the soul', 'Washington Babylon', 'No one left to lie to', 'Historia viva', 'Between Hope and History', 'Spin Cycle: Inside the Clinton Propaganda Machine', 'You got to dance with them what brung you', 'The hunting of the President', "Uncovering Clinton: A Reporter's Story", 'The unique voice of Hillary Rodham Clinton', 'State of a union', 'Dead center', 'The wrath of Sparky', 'Boy Clinton: A Political Biography', 'The Clinton foreign policy reader', 'Hustler', 'The Case Against Hillary Clinton', 'Living History'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 27 / 378: {
          [('Main', '==', 'm.0157m', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Clinton Foundation', 'Corporation For National and Community Service', 'American India Foundation', 'United States National Economic Council', 'Democratic Leadership Council'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 28 / 378: {
          [('Main', '==', 'm.0157m', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Governor Jack Stanton', 'Bill Clinton', 'President Bill Clinton'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 29 / 378: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.presidential_nominee.nominated_at'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'1996 Democratic National Convention', '1992 Democratic National Convention'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 30 / 378: {
          [('Main', '==', 'm.0157m', ['government.us_president.presidency_number'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:government.us_president.presidency_number ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.0157m fb:government.us_president.presidency_number ?o1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'42'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 31 / 378: {
          [('Main', '==', 'm.0157m', ['base.americancomedy.impersonated_celebrity.impersonated_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.americancomedy.impersonated_celebrity.impersonated_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Dana Carvey', 'Phil Hartman', 'Rich Little'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 32 / 378: {
          [('Main', '==', 'm.0157m', ['base.qualia.recreational_drug_user.drug_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Cannabis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 378: {
          [('Main', '==', 'm.0157m', ['book.audio_book_reader.audio_books_read'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.audio_book_reader.audio_books_read ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.audio_book_reader.audio_books_read ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'My Life [Abridged] [Audible Audio Edition]'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 34 / 378: {
          [('Main', '==', 'm.0157m', ['base.argumentmaps.moral_agent_m.apologies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.argumentmaps.moral_agent_m.apologies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.argumentmaps.moral_agent_m.apologies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {"Bill Clinton's grand jury admission"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 35 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.profession']), ('Entity', '==', 'm.02mjmr', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.02mjmr . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.02mjmr . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr', 'm.0157m'}
            Query return lines = 3
            Final Answer: {'Author', 'Lawyer', 'Politician'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 36 / 378: {
          [('Main', '==', 'm.0157m', ['book.book_subject.works']), ('Entity', '==', 'm.02mjmr', ['book.written_work.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.subjects fb:m.02mjmr . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.subjects fb:m.02mjmr . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Countdown of 10 Amazing Moments from the Year 2011: No. 4 the Martin Luther King Jr. Memorial'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 37 / 378: {
          [('Main', '==', 'm.0157m', ['base.qualia.recreational_drug_user.drug_s']), ('Entity', '==', 'm.02mjmr', ['base.qualia.recreational_drug.notable_users'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:base.qualia.recreational_drug.notable_users fb:m.02mjmr . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:base.qualia.recreational_drug.notable_users fb:m.02mjmr . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Cannabis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 38 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.sww_base.interest'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:base.popstra.sww_base.interest ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:base.popstra.sww_base.interest ?o1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'70'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 39 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 40 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.context_name.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 41 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'1961'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 42 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 43 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'English American', 'Irish American', 'Kenyan American', 'Multiracial American'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 44 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Barack Obama Sr.', 'Ann Dunham'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 45 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.height_meters'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:people.person.height_meters ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:people.person.height_meters ?o1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'1.85'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 46 / 378: {
          [('Main', '==', 'm.02mjmr', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 8
            Final Answer: {'You know, I’ve always wanted to ask one of these guys a question and really corner them and get them to answer a question for once instead of tap dancing around it. And unfortunately I asked the question, but I still got a tap dance. Almost as good as Sammy Davis Jr.', '""The fact that an African American sits in the White House at the helm of government in the United States of America on this 150th anniversary of Abraham Lincoln’s Emancipation Proclamation represents both phenomenal political symbolism and a victory of faith in democracy that should not be lost on any American. ""', '“You are neither Christ nor King nor Lincoln.  But what you are is willing, capable, and sincere, there upon a bough of hope and audacity  as branded by history as any have ever been.” --from poem There Upon a Bough of Hope & Audacity', '“With intent to neither idolize nor demonize the man [Barack Obama], it seems fair and evident enough to say that the current president of America is not a leader whose way is that of violent public outbursts. It appears to be more that of a warrior-philosopher who practices the art of political persuasion by authoring acclaimed books, delivering well-crafted speeches, assembling unified coalitions, passing historic legislation, signing well-aimed executive orders, and cultivating a poised but accessible demeanor.”', '""When we vote we participate in the construction of a context...""', '""President Obama appears to me to have elevated and implemented the artist-activist concept to the role of empowered servant-leader...""', '“The power of this poet-likely-to-become president first won the world’s attention at the Democratic Convention in 2004. Even that event could have been described as “improbable” but it stands now as a fact of recorded history. Between that history-making speech and Presidential Candidate Obama’s bestselling books, Dreams from My Father and The Audacity of Hope, two things become clear about the power of eloquence. It is not simply melodious syllables or beautiful fury disguised as poetic art. In the hands and heart of a sincere individual seeking to serve the common good, it can represent truth, vision, and clarity empowered by strength, destiny, and intelligence.” --from The Rise of the Poet Most Likely to Become President', '“What we do today does not always secure reasonable hope for tomorrow. Only this time––with the fact of Barack Obama’s presidential nomination––our country had overcome the odds in a profoundly miraculous way. Like millions––literally, millions––of others, I was privileged to bear witness to a gift of history more than 200 years in the making: it was and it is a moment worthy of joy’s sweet and bitter tears. ” from blog Why I Cried When Barack Obama Received the Democratic Nomination for President of the United States'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 47 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.daylifetopics.daylife_id.daylife_topic_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.daylifetopics.daylife_id.daylife_topic_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.daylifetopics.daylife_id.daylife_topic_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 48 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.us_president.vice_president'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Joe Biden'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 49 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.sww_base.heat'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:base.popstra.sww_base.heat ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:base.popstra.sww_base.heat ?o1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'70'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 50 / 378: {
          [('Main', '==', 'm.02mjmr', ['influence.influence_node.influenced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Saul Alinsky', 'Nipsey Russell'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 51 / 378: {
          [('Main', '==', 'm.02mjmr', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama Academy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 52 / 378: {
          [('Main', '==', 'm.02mjmr', ['book.author.book_editions_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 20
            Final Answer: {'Dreams from My Father (Random House Large Print (Hardcover))', 'The Audacity of Hope: Thoughts on Reclaiming the American Dream', 'Change we can believe in', 'Dreams from My Father', 'Barack Obama in His Own Words', 'The Audacity of Hope', 'Dreams from my father', 'The audacity of hope'}
            Answers = 8, P = 0.250000, R = 1.000000, F1 = 0.400000
          } [0.005s]
          Answers = 8, P = 0.250000, R = 1.000000, F1 = 0.400000
        } [0.005s]
        Checking schema 53 / 378: {
          [('Main', '==', 'm.02mjmr', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Obama Anak Menteng'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 54 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.crime.lawyer.law_firm'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.crime.lawyer.law_firm ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.crime.lawyer.law_firm ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Davis, Miner, Barnhill & Galland'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 55 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 23
            Final Answer: {'All of us share this world for but a brief moment in time. The question is whether we spend that time focused on what pushes us apart, or whether we commit ourselves to an effort – a sustained effort – to find common ground, to focus on the future we seek for our children, and to respect the dignity of all human beings.', "Why can't I just eat my waffle?", 'No one is pro-abortion.', 'The fact that my 15 minutes of fame has extended a little longer than 15 minutes is somewhat surprising to me and completely baffling to my wife.', 'Democracy demands that the religiously motivated translate their concerns into universal, rather than religion-specific, values.', 'Today we are engaged in a deadly global struggle for those who would intimidate, torture, and murder people for exercising the most basic freedoms. If we are to win this struggle and spread those freedoms, we must keep our own moral compass pointed in a true direction.', 'Starting today, we must pick ourselves up, dust ourselves off, and begin again the work of remaking America.', 'People of Berlin - people of the world - this is our moment. This is our time.', 'There are patriots who opposed the war in Iraq and there are patriots who supported the war in Iraq. We are one people, all of us pledging allegiance to the stars and stripes, all of us defending the United States of America.', 'As for our common defense, we reject as false the choice between our safety and our ideals.', "If you're walking down the right path and you're willing to keep walking, eventually you'll make progress.", "Issues are never simple. One thing I'm proud of is that very rarely will you hear me simplify the issues.", 'Yes we can!', 'A good GI bill would increase the recruit pool.', 'On this day, we gather because we have chosen hope over fear, unity of purpose over conflict and discord.', 'We need to internalize this idea of excellence. Not many folks spend a lot of time trying to be excellent.', "I don't oppose all wars. What I am opposed to is a dumb war. What I am opposed to is a rash war.", 'Just give it a try', 'My job is not to represent Washington to you, but to represent you to Washington.', "Change will not come if we wait for some other person or some other time. We are the ones we've been waiting for. We are the change that we seek.", 'My parents shared not only an improbable love, they shared an abiding faith in the possibilities of this nation. They would give me an African name, Barack, or blessed, believing that in a tolerant America your name is no barrier to success.', 'Money is not the only answer, but it makes a difference.', "There is not a liberal America and a conservative America - there is the United States of America. There is not a black America and a white America and latino America and asian America - there's the United States of America."}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 56 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Malia Ann Obama', 'Natasha Obama'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 57 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.weight_kg'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:people.person.weight_kg ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:people.person.weight_kg ?o1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'80'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 58 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.saturdaynightlive.person_impersonated_on_snl.snl_impersonations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama (Fred Armisen)'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 59 / 378: {
          [('Main', '==', 'm.02mjmr', ['broadcast.producer.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:broadcast.producer.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:broadcast.producer.location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Washington, D.C.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 60 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.daylifetopics.daylife_id.daylife_topic_id'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.daylifetopics.daylife_id.daylife_topic_id ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.daylifetopics.daylife_id.daylife_topic_id ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 61 / 378: {
          [('Main', '==', 'm.02mjmr', ['book.poem_character.appears_in_poems'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.poem_character.appears_in_poems ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.poem_character.appears_in_poems ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'There Upon a Bough of Hope and Audacity'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 62 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.inaugurations.inauguration_speaker.inauguration'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.inaugurations.inauguration_speaker.inauguration ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'First inauguration of Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 63 / 378: {
          [('Main', '==', 'm.02mjmr', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Craig McKenzie'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 64 / 378: {
          [('Main', '==', 'm.02mjmr', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 7
            Final Answer: {'Change We Can Believe In', 'Barack Obama election victory speech, 2008', 'Of Thee I Sing', 'Dreams from My Father', 'Barack Obama in His Own Words', 'The Audacity of Hope', 'La audacia de la esperanza'}
            Answers = 7, P = 0.142857, R = 1.000000, F1 = 0.250000
          } [0.005s]
          Answers = 7, P = 0.142857, R = 1.000000, F1 = 0.250000
        } [0.005s]
        Checking schema 65 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.election_campaigns'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Barack Obama presidential primary campaign, 2008', 'Barack Obama presidential campaign, 2012', 'Barack Obama 2004 US Senate Campaign', 'Barack Obama 1996 Illinois Senate Campaign'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 66 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.crime.lawyer.lawyer_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.crime.lawyer.lawyer_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.crime.lawyer.lawyer_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Constitutional law'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 67 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Writer', 'Author', 'Lawyer', 'Politician'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 68 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 69 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Honolulu'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 70 / 378: {
          [('Main', '==', 'm.02mjmr', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 31
            Final Answer: {'Countdown of 10 Great Moments in 2010 Part 7 Barack Obama and The NUL', 'Poem for a President: Midnight Flight of the Poetry Angels', 'Barack Obama Extends Historical Legacy ""Astride the Promise of Change""', 'President Barack Obama and the Message Beyond the Photograph', 'Dancing to the Paradigm Rhythms of Change in Action', 'The Obama Nation', 'Report on 2011 International Year Part 6: Day to End Racism', 'Yes We Can: A Biography of President Barack Obama', 'Countdown of 10 Amazing Moments from the Year 2011: No. 2 President Obama', 'Dear James Baldwin (in lieu of Dear Barack Obama)', "The Case Against Barack Obama: The Unlikely Rise and Unexamined Agenda of the Media's Favorite Candidate", 'A Bound Man', 'Obama - The Postmodern Coup', 'Notebook on Black History Month 2012 (Part 1): Carter G. Woodson and Company', 'Obama, the Tea Party, and the Art of Political Persuasions Part 1', 'Countdown of 10 Amazing Moments from the Year 2011: No. 4 the Martin Luther King Jr. Memorial', 'The River of Winged Dreams', 'Game Change', 'Guerrilla Decontextualization and the 2012 Presidential Election Campaign (Part 1)', 'Barack H. Obama: The Unauthorized Biography', 'Tricks and Treats of the 2012 Presidential Debates', "Posted Perspectives on America's 2012 Presidential Election (Part 1)", 'Dreams from My Father', 'Obama, the Tea Party, and the Art of Political Persuasions Part 2', 'Poetics of Paradigm Dancing in the 2012 Presidential Election Campaign', "What Death of Osama Bin Laden Indicates About Barack Obama's Leadership", '47 Percenters and Guerrilla Decontextualization (Part 1): Dreams and Nightmares', "Why Race Mattered in Barack Obama's Re-election", 'Countdown of 10 Amazing Moments from the Year 2011: No. 6 Sonny Rollins', 'Barack Obama and the Jim Crow Media'}
            Answers = 30, P = 0.033333, R = 1.000000, F1 = 0.064516
          } [0.006s]
          Answers = 30, P = 0.033333, R = 1.000000, F1 = 0.064516
        } [0.007s]
        Checking schema 71 / 378: {
          [('Main', '==', 'm.02mjmr', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'National Commission on Fiscal Responsibility and Reform', 'Major Economies Forum on Energy and Climate Change'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 72 / 378: {
          [('Main', '==', 'm.02mjmr', ['film.film_story_contributor.film_story_credits'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:film.film_story_contributor.film_story_credits ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Yes We Can'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 73 / 378: {
          [('Main', '==', 'm.02mjmr', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Barack Obama', 'Matt Santos'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 74 / 378: {
          [('Main', '==', 'm.02mjmr', ['broadcast.producer.produces'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:broadcast.producer.produces ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:broadcast.producer.produces ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'U.S. Senator Barack Obama Podcast'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 75 / 378: {
          [('Main', '==', 'm.02mjmr', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 8
            Final Answer: {'Vote', 'Looking To The Future', 'Legacy', 'Bright Skylark Literary Productions', 'Hope', "White House Situation Room during Operation Neptune's Spear", 'Barack Obama ""Hope"" poster', 'Change'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 76 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.presidential_nominee.nominated_at'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.politicalconventions.presidential_nominee.nominated_at ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2008 Democratic National Convention'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 77 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.daylifetopics.daylife_id.daylife_url_token'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.daylifetopics.daylife_id.daylife_url_token ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.daylifetopics.daylife_id.daylife_url_token ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 78 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.us_president.presidency_number'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:government.us_president.presidency_number ?o1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 WHERE { fb:m.02mjmr fb:government.us_president.presidency_number ?o1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'44'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 79 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.qualia.recreational_drug_user.drug_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Cocaine', 'Cannabis'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 80 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.propositions.proposition_issue.against'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.propositions.proposition_issue.against ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.propositions.proposition_issue.against ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'California Proposition 8'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 81 / 378: {
          [('Main', '==', 'm.02mjmr', ['user.robert.x2008_presidential_election.candidate.presidential_campaigns'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:user.robert.x2008_presidential_election.candidate.presidential_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:user.robert.x2008_presidential_election.candidate.presidential_campaigns ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama presidential primary campaign, 2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 82 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.profession']), ('Entity', '==', 'm.0157m', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.0157m . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.profession ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.0157m . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr', 'm.0157m'}
            Query return lines = 3
            Final Answer: {'Author', 'Lawyer', 'Politician'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 83 / 378: {
          [('Main', '==', 'm.02mjmr', ['book.book_subject.works']), ('Entity', '==', 'm.0157m', ['book.written_work.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.subjects fb:m.0157m . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.subjects fb:m.0157m . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Countdown of 10 Amazing Moments from the Year 2011: No. 4 the Martin Luther King Jr. Memorial'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 84 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.qualia.recreational_drug_user.drug_s']), ('Entity', '==', 'm.0157m', ['base.qualia.recreational_drug.notable_users'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:base.qualia.recreational_drug.notable_users fb:m.0157m . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:base.qualia.recreational_drug_user.drug_s ?o1 . ?o1 fb:base.qualia.recreational_drug.notable_users fb:m.0157m . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Cannabis'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 85 / 378: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'8e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 86 / 378: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.character_note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 87 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'1993', '1973'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 88 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Staff Attorney', 'President'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 89 / 378: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Internship'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 90 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Juris Doctor', 'Bachelor of Science'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 91 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'1964', '1968', '1973'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 92 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 93 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Grammy Award for Best Spoken Word Album for Children', 'Grammy Award for Best Spoken Word Album'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 94 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Roger Clinton, Jr.'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 95 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 96 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.location_of_ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.location_of_ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Fayetteville'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 97 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 98 / 378: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Subject of film', 'Him/Herself', 'Archive Footage'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 99 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'2003', '2006', '2005', '2004'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Current: 100 / 378
        Checking schema 100 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 101 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'My Life [Abridged] [Audible Audio Edition]', 'My Life', 'Wolf Tracks and Peter and the Wolf'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 102 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 103 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 104 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 105 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Arkansas', 'United States of America'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 106 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Governor', 'President'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 107 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Secretary of State', 'Deputy Attorney General'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 108 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 19
            Final Answer: {'United States Department of Labor', 'United States Department of the Treasury', 'United States District Court for the District of New Mexico', 'United States Department of Health and Human Services', 'United States Department of Transportation', 'United States Commodity Futures Trading Commission', 'U.S. Securities and Exchange Commission', 'First Family', 'United States Department of Housing and Urban Development', 'Corporation For National and Community Service', 'Cabinet of the United States', 'United States National Security Council', 'Government Accountability Office', 'United States District Court for the Eastern District of New York', 'United States Department of State', 'U.S. Federal Communications Commission', 'United States Department of Defense', 'Federal Bureau of Investigation', 'Executive Office of the President of the United States'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 109 / 378: {
          [('Main', '==', 'm.0157m', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:18] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 110 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Celebrity guest', 'Interviewee'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 111 / 378: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 112 / 378: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.candidate'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.candidate ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.candidate ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 113 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.crime'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.crime ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.crime ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {"Kathleen Willey's sexual assault"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 114 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.accuser'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.accuser ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.accuser ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Kathleen Willey'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 115 / 378: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speaker_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 116 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.plaintiff'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Paula Jones', 'Juanita Broaddrick', 'Arkansas Supreme Court'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 117 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 7
            Final Answer: {'Kevin Spacey', 'Moises Saba', 'George Clooney', 'Steven Spielberg', 'Ronald Burkle', 'George Bush'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 118 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 119 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 120 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.restaurant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Frisco Freeze', 'Così'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 121 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Monica Lewinsky'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 122 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.fashion_wearer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 123 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Baptists'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 124 / 378: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 125 / 378: {
          [('Main', '==', 'm.0157m', ['law.litigant.party_to_cases', 'law.legal_case_party_relationship.case'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.case ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.case ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Clinton v. Jones'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 126 / 378: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.from ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1993'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 127 / 378: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Hillary Rodham Clinton', 'Chelsea Clinton'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 128 / 378: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.to ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2001', '2002'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 129 / 378: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 130 / 378: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 131 / 378: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 16
            Final Answer: {'The Take', 'A Conversation With Gregory Peck', 'Definitely, Maybe', 'Sprawling From Grace: The Consequences of Suburbanization', 'Shine a Light', 'Paul McCartney: The Space Within Us', 'Bill Clinton: Speeches of the Presidential Years, 1993-2001', 'Bill Clinton: His Life', "Killer at Large: Why Obesity is America's Greatest Threat", 'Road to the Presidency', "Honoring a Father's Dream: Sons of Lwala", 'Wordplay', 'Swing State', "A Child's Wish", 'An Unlikely Weapon: The Eddie Adams Story', 'Journeys in Black: Patti Labelle'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 132 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 133 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Foreign Service'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 134 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Hot Springs', 'Hope'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 135 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'My Life [Abridged] [Audible Audio Edition]', 'Wolf Tracks and Peter and the Wolf'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 136 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2003', '2004'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 137 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1975'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 138 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Documentary Special'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 139 / 378: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 55
            Final Answer: {'Sprawling From Grace: The Consequences of Suburbanization', 'The Queen', 'The Greatest Speeches of All Time: Vol. 2', 'Shine a Light', 'Bill Clinton: Speeches of the Presidential Years, 1993-2001', 'Breaking the Taboo', 'Spin', 'I Am Because We Are', 'Road to the Presidency', 'Rwanda: Beyond the Deadly Pit', "We Are the People We've Been Waiting For", 'Wordplay', 'The Big One', 'America the Beautiful 2: The Thin Commandments', 'Tying the Knot', 'Assassinations That Changed the World', 'New World Order', "This Ain't California", 'The Hunting of the President', 'The Courageous, the Forgotten', 'War Made Easy: How Presidents & Pundits Keep Spinning Us to Death', 'Air Force One', 'Frank Sinatra Memorial', 'An Unlikely Weapon: The Eddie Adams Story', 'Endgame in Ireland', 'Naqoyqatsi', 'The Shock Doctrine', 'Too Big to Fail', 'Sicko', 'Presidential Bloopers', 'The Storm', 'How to Survive a Plague', 'The War Room', 'Pedro', 'Live Free or Die Hard', 'Yitzhak Rabin', 'Journeys in Black: Patti Labelle', 'A Perfect Candidate', 'Why We Fight', 'Enron: The Smartest Guys in the Room', 'Saint of 9/11', 'The Century of the Self - 1: Happiness Machines', 'Bowling for Columbine', 'Capitalism: A Love Story', 'The Take', 'Pete Seeger: The Power of Song', 'Fire in the Blood', '30 for 30: June 17th, 1994', 'Bill Clinton: His Life', "Killer at Large: Why Obesity is America's Greatest Threat", 'Swing State', 'Maxed Out', 'The Love We Make', 'Greatest Presidents of the United States', "Ann Richards' Texas"}
            Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 55, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 140 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 7
            Final Answer: {'Wilhem Hellweg', 'Mikhail Gorbachev', 'Jacob Bronstein', 'Sophia Loren', 'Daniel Zitt', 'Jean-Marie Geijsen'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 141 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2005 Grammy Awards', '2004 Grammy Awards'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 142 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 143 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 72
            Final Answer: {'Seth P. Waxman', 'Warren Christopher', 'Lawrence Summers', 'Joycelyn Elders', 'Rodney E. Slater', 'John M. Deutch', 'Dee Dee Myers', 'David Gergen', 'Henry Cisneros', 'Robert Rubin', 'Mona Sutphen', 'Louis Caldera', 'Rahm Emanuel', 'John Podesta', 'Stuart E. Eizenstat', 'Lloyd Bentsen', 'Chuck Ruff', 'Charlene Barshefsky', 'Joe Lockhart', 'Vince W. Foster', 'Mack McLarty', 'Jack Quinn', 'Pamela Harriman', 'David Satcher', 'Mike McCurry', 'Jake Siewert', 'Samuel R. Berger', 'Mary Schapiro', 'Acting Chairman', 'Edward Montgomery', 'Norman Mineta', 'Drew S. Days, III', 'Les Aspin', 'Madeleine Albright', 'Franklin Raines', 'Marlee Matlin', 'Jack Lew', 'William Perry', 'Beth Nolan', 'Peter R. Orszag', 'Dan Glickman', 'Charles Ruff', 'Janet Napolitano', 'Lloyd Cutler', 'Leon Panetta', 'Michael Powell', 'Nicholas Garaufis', 'William M. Daley', 'Greg Craig', 'Lisa Caputo', 'Chairman', 'Erskine Bowles', 'Bill Richardson', 'David M. Walker', 'Bernard W. Nussbaum', 'William J. Lynn III', 'Jared Bernstein', 'Jim Sasser', 'Abner J. Mikva', 'William Cohen', 'Alexis Herman', 'Federico Peña', 'George Stephanopoulos', 'Robert Reich', 'Ray Mabus', 'Andrew Cuomo', 'Carol Browner', 'Mike Espy', 'Louis J. Freeh', 'Alice Rivlin', 'Shaun Donovan', 'Martha Vázquez'}
            Answers = 72, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 72, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 144 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 145 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 58
            Final Answer: {'White House Communications Director', 'United States Under Secretary of Defense', 'Director, United States Office of Management and Budget', 'United States Attorney for the District of Columbia', 'Acting FHA commissioner', 'Assistant Secretary for Policy and Evaluation, US Department of Health and Human Services', 'Commissioner of the Securities and Exchange Commission', 'United States Solicitor General', 'United States Secretary of State', 'United States Secretary of Transportation', 'United States Secretary of Labor', 'United States Secretary of Commerce', 'Cheif Economist', 'Deputy Secretary and Chief Operating Officer', 'Deputy U. S. Trade Representative', 'United States Ambassador to China', 'United States Deputy Attorney General', 'United States Trade Representative', 'US Attorney for the District of Arizona', 'Member of national Security Council', 'United States District Judge', 'Deputy Assistant Secretary for Multifamily Housing', 'Deputy Chief Economist', 'Director of Policy Planning', 'Senior Economist and Senior Adviser,  Council of Economic Advisers', 'White House Chief of Staff', 'United States Secretary of the Army', 'National Security Advisor', 'White House Press Secretary', 'Acting Chairman of Securities and Exchange Commission', 'United States Deputy Secretary of the Treasury', 'Assistant Secretary of State for African Affairs', 'Under Secretary of Defense for Acquisitions and Technology', 'White House Counsel', 'Special Assistant to the President for Economic Policy', 'United States Secretary of Defense', 'United States Ambassador to Saudi Arabia', 'Administrator of the Environmental Protection Agency', 'United States Deputy Secretary of Defense', 'White House Media Advisor', 'Under Secretary of Commerce for International Trade', 'United States Secretary of Housing and Urban Development', 'Deputy Assistant to the Press Secretary', 'Chairman of Commodity Futures Trading Commission', 'Senior Advisor to the President for Policy and Strategy', 'United States Ambassador to France', 'White House Deputy Chief of Staff', 'Assistant to the President for Economic Policy', 'Comptroller General of the United States', 'United States Secretary of Agriculture', 'United States Surgeon General', 'Under Secretary of the State for Economic, Business and Agricultural Affairs', 'United States Secretary of the Treasury', 'United States Secretary of Energy', 'Deputy Treasury Secretary', 'Assistant to the President and Special Counsel', 'Undersecretary for International Affairs', 'United States Ambassador to the United Nations'}
            Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 146 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'President of the United States', 'Governor of Arkansas'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 147 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 148 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 149 / 378: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'887'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 150 / 378: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.tally'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.tally ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.tally ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'3372'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 151 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.convicted_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.convicted_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 152 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.crime_commited'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.crime_commited ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.crime_commited ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Lewinsky scandal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 153 / 378: {
          [('Main', '==', 'm.0157m', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.recipient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.recipient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 154 / 378: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.presented_work'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1997 State of the Union Address'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 155 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.operation', 'base.popstra.operation.procedure'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.procedure ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.procedure ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Coronary artery bypass surgery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 156 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.supporter', 'base.popstra.support.supported_organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'The Global Fund to Fight AIDS, Tuberculosis & Malaria', 'Harlem Youth Soccer Association', 'CAMPFED'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 157 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 158 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 159 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.designer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'DEF Simmons Jewlery', 'Panerai Luminor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 160 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 161 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Ashville', "Martha's Vineyard", 'Punta Cana'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 162 / 378: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.appointed_role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 4
            Final Answer: {'Inspector General of the U.S. Department of Justice', 'Chairman of the United States Postal Regulatory Commission', 'Associate Justice of the Supreme Court of the United States', 'Inspector General'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 163 / 378: {
          [('Main', '==', 'm.0157m', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 164 / 378: {
          [('Main', '==', 'm.0157m', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 165 / 378: {
          [('Main', '==', 'm.0157m', ['law.litigant.party_to_cases', 'law.legal_case_party_relationship.parties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.parties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.parties ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 166 / 378: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.building'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.building ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.building ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'White House'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 167 / 378: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'1997', '1993'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 168 / 378: {
          [('Main', '==', 'm.0157m', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 169 / 378: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 170 / 378: {
          [('Main', '==', 'm.0157m', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Uncredited'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 171 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 172 / 378: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Adam Frankel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 173 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'University of Arkansas', 'United States of America', 'United States House Judiciary Subcommittee on the Constitution and Civil Justice'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 174 / 378: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 175 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 6
            Final Answer: {'Edmund A. Walsh School of Foreign Service', 'Hot Springs High School', 'University College, Oxford', 'Ramble Elementary', "St. John's Catholic Elementary School", 'Yale Law School'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 176 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 177 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1970'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 178 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Sophia Loren', 'Mikhail Gorbachev'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 179 / 378: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 180 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Him/Herself'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 181 / 378: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 182 / 378: {
          [('Main', '==', 'm.0157m', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:19] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'Grammy Award for Best Spoken Word Album for Children', 'J. William Fulbright Prize for International Understanding', 'Grammy Award for Best Spoken Word Album'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 183 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.party', 'government.political_party_tenure.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Democratic Party'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 184 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 23
            Final Answer: {'Bill Clinton, Jay-Z', 'Newt Gingrich, Bill Clinton', 'Bill Clinton', 'Treehouse of Horror VII', 'Randy Jackson/Paul Simon/Bill Clinton', 'September 24, 2006', 'War on America', 'Stephen broadcasts from Iraq, Sgt. Robin Balcom, Spec. Tareq Salha', 'Bill Clinton, Dr. Jo Gayle', 'Thu, Sep 17, 2009', 'Show #2808', 'A Royal Family', 'Show #2217', 'Bill Clinton, George H.W. Bush, Pat Roberts, Jay Rockefeller', 'Show 8', 'President Bill Clinton'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 185 / 378: {
          [('Main', '==', 'm.0157m', ['influence.influence_node.peers', 'influence.peer_relationship.peers'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:influence.influence_node.peers ?o1 . ?o1 fb:influence.peer_relationship.peers ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Linda Bloodworth-Thomason'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 186 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 44
            Final Answer: {'1994', '1989', '1993', '1996', '1977', '1997', '1999', '1998', '2000', '1995'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 187 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'1983', '1993', '1979'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 188 / 378: {
          [('Main', '==', 'm.0157m', ['government.political_appointer.appointees', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 35
            Final Answer: {'1994', '1996', '1993', '2001', '2008', '1997', '1999', '1998', '1978', '2002', '2000', '1995'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 189 / 378: {
          [('Main', '==', 'm.0157m', ['government.politician.government_positions_held', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 3
            Final Answer: {'1992', '1981', '2001'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 190 / 378: {
          [('Main', '==', 'm.0157m', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Alpha Phi Omega', 'DeMolay International'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 191 / 378: {
          [('Main', '==', 'm.0157m', ['tv.tv_personality.tv_regular_appearances', 'tv.tv_regular_personal_appearance.program'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:tv.tv_personality.tv_regular_appearances ?o1 . ?o1 fb:tv.tv_regular_personal_appearance.program ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'To Save Our Schools, To Save Our Children', 'The Arsenio Hall Show'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 192 / 378: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 193 / 378: {
          [('Main', '==', 'm.0157m', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'885'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 194 / 378: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.convention'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.convention ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.convention ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1992 Democratic National Convention'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 195 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.guilty_of'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.guilty_of ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Contempt of court', 'Perjury'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 196 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.convicted_criminal.convictions', 'base.crime.criminal_conviction.sentence_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.sentence_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.convicted_criminal.convictions ?o1 . ?o1 fb:base.crime.criminal_conviction.sentence_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Suspension of legal license', 'Fine'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 197 / 378: {
          [('Main', '==', 'm.0157m', ['royalty.chivalric_order_member.belongs_to_order', 'royalty.chivalric_order_membership.order'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:royalty.chivalric_order_member.belongs_to_order ?o1 . ?o1 fb:royalty.chivalric_order_membership.order ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Order of the Cross of Terra Mariana'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 198 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.suspect'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.suspect ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.suspect ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 199 / 378: {
          [('Main', '==', 'm.0157m', ['base.crime.crime_suspect.accused_of', 'base.crime.crime_accusation.date_of_accusation'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.date_of_accusation ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.crime.crime_suspect.accused_of ?o1 . ?o1 fb:base.crime.crime_accusation.date_of_accusation ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1993'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Current: 200 / 378
        Checking schema 200 / 378: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.type_or_format_of_presentation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'State of the Union address'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 201 / 378: {
          [('Main', '==', 'm.0157m', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1997'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 202 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.dated', 'base.popstra.dated.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.dated ?o1 . ?o1 fb:base.popstra.dated.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Dolly Kyle Browning'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 203 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.perpetrator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.perpetrator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 204 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.insult_perpetrator', 'base.popstra.public_insult.victim'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.insult_perpetrator ?o1 . ?o1 fb:base.popstra.public_insult.victim ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Todd Purdum'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 205 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.defendant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 206 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.operation', 'base.popstra.operation.patient'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.patient ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.operation ?o1 . ?o1 fb:base.popstra.operation.patient ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 207 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.supporter', 'base.popstra.support.supporter'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 208 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_perpetrator', 'base.popstra.infidelity.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_perpetrator ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Belinda Stronach', 'Sharon Stone', 'Gina Gershon', 'Julie Tauber McMahon', 'Demi Moore'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 209 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.infidelity_victim', 'base.popstra.infidelity.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.infidelity_victim ?o1 . ?o1 fb:base.popstra.infidelity.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Huma Abedin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 210 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.diner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 211 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.canoodled', 'base.popstra.canoodled.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.popstra.celebrity.canoodled ?o1 . ?o1 fb:base.popstra.canoodled.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1995'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 212 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.parties', 'base.popstra.party_attendance_person.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.parties ?o1 . ?o1 fb:base.popstra.party_attendance_person.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Tribecca Ball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 213 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 214 / 378: {
          [('Main', '==', 'm.0157m', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 215 / 378: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.declared_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'1994', '1998', '1993', '2000'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 216 / 378: {
          [('Main', '==', 'm.0157m', ['people.appointer.appointment_made', 'people.appointment.appointee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 5
            Final Answer: {'Ruth Bader Ginsburg', 'Glenn A. Fine', 'Gregory H. Friedman', 'Stephen Breyer', 'Ruth Y. Goldway'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 217 / 378: {
          [('Main', '==', 'm.0157m', ['law.litigant.party_to_cases', 'law.legal_case_party_relationship.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:law.litigant.party_to_cases ?o1 . ?o1 fb:law.legal_case_party_relationship.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Defendant'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.043s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.043s]
        Checking schema 218 / 378: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.occupant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.occupant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.occupant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 219 / 378: {
          [('Main', '==', 'm.0157m', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.to ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2001'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.052s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.052s]
        Checking schema 220 / 378: {
          [('Main', '==', 'm.0157m', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Buddy', 'Socks'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 221 / 378: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.date ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'1994'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 222 / 378: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.method'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.method ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.method ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Gun'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 223 / 378: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.conventions_spoken_at'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'2000 Democratic National Convention', '2008 Democratic National Convention'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 224 / 378: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.assassinated_person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassinated_person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassinated_person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 225 / 378: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'White House'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 226 / 378: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 227 / 378: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.outcome'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.outcome ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.outcome ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Failure'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 228 / 378: {
          [('Main', '==', 'm.0157m', ['user.dfhuynh.default_domain.assassinated_person.assassination', 'user.dfhuynh.default_domain.assassination.assassin'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassin ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:user.dfhuynh.default_domain.assassinated_person.assassination ?o1 . ?o1 fb:user.dfhuynh.default_domain.assassination.assassin ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Francisco Martin Duran'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 229 / 378: {
          [('Main', '==', 'm.0157m', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.speaker'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 230 / 378: {
          [('Main', '==', 'm.02mjmr', ['celebrities.celebrity.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'1.18e+07', '1.01e+07'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 231 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'1.18e+07'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 232 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'1983', '1993', '1988'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.038s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.038s]
        Checking schema 233 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Associate Attorney'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 234 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Bachelor of Arts', 'Juris Doctor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 235 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 7
            Final Answer: {'1981', '1970', '1991', '1979', '1983', '1971', '1967'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 236 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.specialization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'International relations'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 237 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 238 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_nominee.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Grammy Award for Best Spoken Word Album', 'Blimp Award for Cutest Couple'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.037s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.037s]
        Checking schema 239 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 9
            Final Answer: {'Malik Abongo Obama', 'Mark Okoth Obama Ndesandjo', 'Auma Obama', 'George Obama', 'Abo Obama', 'David Ndesandjo', 'Bernard Obama', 'Maya Soetoro-Ng'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 240 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.spouse_s', 'people.marriage.spouse'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 241 / 378: {
          [('Main', '==', 'm.02mjmr', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 242 / 378: {
          [('Main', '==', 'm.02mjmr', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.type_of_appearance'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.type_of_appearance ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'Him/Herself', 'Archive Footage', 'Voice'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 243 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_winner.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'2009', '2007', '2012', '2005'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 244 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_winner.awards_won', 'award.award_honor.notes_description'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.notes_description ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 245 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_winner.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Dreams from My Father', 'The Audacity of Hope: Thoughts on Reclaiming the American Dream'}
            Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
          } [0.017s]
          Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
        } [0.017s]
        Checking schema 246 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'20'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 247 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.party', 'government.political_party_tenure.politician'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 248 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:20] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'United States of America'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.037s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.038s]
        Checking schema 249 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Illinois', 'United States of America'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 250 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Under Secretary of Defense for Personnel and Readiness', 'Secretary of State', 'Deputy Secretary of Energy', 'Councillor'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.043s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.043s]
        Checking schema 251 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Senator', 'President'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 252 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 10
            Final Answer: {'United States Department of Homeland Security', 'United States Department of Transportation', 'U.S. Securities and Exchange Commission', 'Cabinet of the United States', 'United States National Security Council', 'United States Department of State', 'Consumer Financial Protection Bureau', 'United States Department of Defense', 'U.S. Immigration and Customs Enforcement', 'Executive Office of the President of the United States'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 253 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Illinois Senate', 'United States Senate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 254 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.legislative_sessions'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.legislative_sessions ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.legislative_sessions ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'110th United States Congress', '109th United States Congress'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 255 / 378: {
          [('Main', '==', 'm.02mjmr', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 256 / 378: {
          [('Main', '==', 'm.02mjmr', ['organization.organization_member.member_of', 'organization.organization_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 257 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.context_name.pronunciation', 'base.schemastaging.pronunciation.text'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.pronunciation ?o1 . ?o1 fb:base.schemastaging.pronunciation.text ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.pronunciation ?o1 . ?o1 fb:base.schemastaging.pronunciation.text ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 258 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.context_name.pronunciation', 'base.schemastaging.pronunciation.value_of_property'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.pronunciation ?o1 . ?o1 fb:base.schemastaging.pronunciation.value_of_property ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.context_name.pronunciation ?o1 . ?o1 fb:base.schemastaging.pronunciation.value_of_property ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Name'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 259 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.candidate'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.candidate ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.candidate ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 260 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.firsts.first.achievements', 'base.firsts.first_achievement.achievement'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.achievement ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.achievement ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'President of the United States', 'President of the Harvard Law Review'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 261 / 378: {
          [('Main', '==', 'm.02mjmr', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speaker_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speaker_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 262 / 378: {
          [('Main', '==', 'm.02mjmr', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.speech_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.speech_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Education reform', 'Energy development'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 263 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.sued', 'base.popstra.legal_dispute.plaintiff'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 264 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.plaintiff'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.plaintiff ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Phillip Berg'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 265 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 9
            Final Answer: {'Al Gore', 'Rashid Khalidi', 'George Clooney', 'Hill Harper', 'Gordon Brown', 'Cory Booker', 'Michael Bloomberg', 'Charlize Theron'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 266 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.company.product_endorser', 'base.popstra.paid_support.endorser'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.company.product_endorser ?o1 . ?o1 fb:base.popstra.paid_support.endorser ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.company.product_endorser ?o1 . ?o1 fb:base.popstra.paid_support.endorser ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Demi Moore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 267 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.restaurant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.restaurant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {"Ray's Hell Burger", 'Five Guys'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 268 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.fashion_wearer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.fashion_wearer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 269 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.religion'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.religion ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Christianity'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 270 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.appointer.appointment_made', 'people.appointment.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 271 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.litcentral.named_person.individual_names', 'base.litcentral.person_full_name.given_name_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.given_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.given_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Hussein', 'Barack'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 272 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.litcentral.named_person.individual_names', 'base.litcentral.person_full_name.family_name_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.family_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.family_name_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 273 / 378: {
          [('Main', '==', 'm.02mjmr', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.from ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 274 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.polled_entity.poll_scores', 'government.election_poll_score.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 275 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.polled_entity.poll_scores', 'government.election_poll_score.score'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.score ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.score ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 78
            Final Answer: {'48.5', '44', '48.75', '45.9', '50.93', '48.86', '52', '46.5', '44.85', '46.4', '48.4', '45.3', '48.26', '48.93', '50.03', '45.4', '49.19', '48.84', '47.7', '46.7', '49.18', '48.07', '48.21', '46.2', '46.6', '50.24', '53', '48', '49.5', '50.9', '50.36', '45.28', '50.27', '48.54', '43.7', '47.9', '49.88', '50', '45.27', '48.17', '44.5', '51', '44.47', '45', '48.95', '47', '48.82', '50.56', '44.79', '44.8', '46.8', '46', '43', '54', '46.9', '49.81', '49.7', '47.4', '49.71', '45.7', '50.5', '49.07', '47.3', '45.2', '49', '44.19', '49.87', '42', '49.66', '48.9', '50.09', '49.26', '49.56', '50.3', '48.06', '43.2', '51.2', '49.1'}
            Answers = 78, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 78, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 276 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Malia Ann Obama', 'Natasha Obama', 'Michelle Obama'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 277 / 378: {
          [('Main', '==', 'm.02mjmr', ['celebrities.celebrity.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 278 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 279 / 378: {
          [('Main', '==', 'm.02mjmr', ['celebrities.celebrity.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Wikipedia', 'therichest.org'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 280 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'celebritynetworth.com'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 281 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'1996', '1984', '1988', '2004'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 282 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Political Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 283 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 6
            Final Answer: {'Honolulu', 'Jakarta', 'Washington, D.C.', 'Chicago', 'White House', 'New York City'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 284 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_nominee.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Dreams from My Father', 'The Audacity of Hope: Thoughts on Reclaiming the American Dream'}
            Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
          } [0.004s]
          Answers = 2, P = 0.500000, R = 1.000000, F1 = 0.666667
        } [0.005s]
        Checking schema 285 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_nominee.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'2007', '2005', '2010'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 286 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.spouse_s', 'people.marriage.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'1992'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 287 / 378: {
          [('Main', '==', 'm.02mjmr', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.episode'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.episode ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 27
            Final Answer: {'Stephen broadcasts from Iraq, Gen. Ray Odierno', 'Prime Minister', 'Barack Obama, Wilco', 'Barack Obama, Sabrina Bryan, Mark Ballas', 'Sen. Barack Obama', 'Brian Williams/Feist', 'Vince Gill, Barack Obama', 'Show #2279', 'The Divided Koreas, Irreverent ... Irrelevant ... Ig Nobel', 'Show #2766', 'Sen. Barack Obama, Maggie Gyllenhaal, Taylor Hicks', 'Senator Barack Obama', 'March 14, 2008', 'Sen. Barack Obama, Orny Adams, Keith Urban', 'Presidential Politics', 'Barack Obama', 'Hillary Clinton, Patrick Murphy, John Edwards, Barack Obama', 'March 19, 2008', 'January 28, 2008', 'Janurary 22, 2006', 'July 23, 2007', 'Idol Gives Back'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 288 / 378: {
          [('Main', '==', 'm.02mjmr', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 67
            Final Answer: {'By the People: The Election of Barack Obama', 'America Betrayed', 'Marching Band', 'US Election Night 2012', "Barack Obama: People's President", 'The Official Inaugural Celebration', 'President', 'Right America: Feeling Wronged – Some Voices from the Campaign Trail', 'Get Schooled: You Have the Right', 'Stand Up to Cancer', "The President's Photographer: Fifty Years Inside the Oval Office", 'The Afghan Solution', "The Road We've Traveled", 'The Library of Congress Gershwin Prize for Popular Song: In Performance at the White House - Paul McCartney', 'Battleship', 'The National Christmas Tree Lighting', 'Disconnect: Cell Phones & Cancer', 'HouseQuake', 'This Is Our Moment: Election Night 2008', "Atomic Jihad: Ahmadinejad's Coming War and Obama's Politics of Defeat", 'You Decide!', 'Ali 70 from Las Vegas', 'Biography: Barack Obama: Inaugural Edition', 'The After Party: The Last Party 3', "Obscurantist and His Lineage or The Pyramids' Tearful Valleys", 'The Neighborhood Ball: An Inauguration Celebration', 'The Furious Force of Rhymes', 'Senator Obama Goes to Africa', 'Stevie Wonder: In Performance at the White House - The Library of Congress Gershwin Prize', 'Zero Dark Thirty', 'Pax Americana and the Weaponization of Space', 'Tony & Janinas American Wedding', 'President Barack Obama: The Man and His Journey', 'Bahrain: Shouting in the Dark', 'Anima Mundi', 'Becoming Barack: Evolution of a Leader', 'Motherland', 'The Shock Doctrine', 'Nobel Highlights', '9/11 Memorial from Ground Zero, Tenth Anniversary', 'Climate Refugees', 'Presidentti Ahtisaaren Nobel-vuosi', "2016: Obama's America", 'A Conversation with President Obama', "Tumor, It's in the System", 'Labor Day', 'Closer to the Dream', 'All Together Now: A Celebration of Service', 'The Dictator', 'This Must Be the Place', 'A Moment in History: The Inauguration of Barack Obama', 'Capitalism: A Love Story', 'Get Schooled: Race to the Top', 'President Obama’s 2011 Race To The Top Commencement Challenge', 'How Obama Won the West', 'Bin Laden: Shoot to Kill', 'Electile Dysfunction', 'Street Fighting Man', 'Barack Obama: The Power of Change', 'Christmas at the White House: An Oprah Primetime Special', 'Swing State', 'Media Malpractice', 'Inside the Obama White House', 'Rooted in Peace', 'A Call to Arms', '8: The Mormon Proposition', 'Hype: The Obama Effect'}
            Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 67, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 289 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_winner.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Jacob Bronstein', 'Scott Cresswell', 'Nick Bogart'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 290 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_winner.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Grammy Awards of 2008', '2006 Grammy Awards'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 291 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 292 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 293 / 378: {
          [('Main', '==', 'm.02mjmr', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 294 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 60
            Final Answer: {'Neal S. Wolin', 'Lawrence Summers', 'Tina Tchen', 'Sally Jewell', 'Erin C. Conaton', 'Seth Harris', 'Mona Sutphen', 'Chuck Hagel', 'Hilda Solis', 'Louis Susman', 'Elizabeth Warren', 'Louis Caldera', 'Rahm Emanuel', 'John Kerry', 'Robert Gibbs', 'Eric Shinseki', 'Elena Kagan', 'Hillary Rodham Clinton', 'Samantha Power', 'Raj Date', 'Kal Penn', 'Mary Schapiro', 'Edward Montgomery', 'Rob Nabors', 'Timothy Geithner', 'Jack Lew', 'Susan Rice', 'David Petraeus', 'David Axelrod', 'Peter R. Orszag', 'Maria Otero', 'Ray LaHood', 'Janet Napolitano', 'Richard Cordray', 'Regina Benjamin', 'Desirée Rogers', 'Ken Salazar', 'Ivan K. Fong', 'Jackie Norris', 'Leon Panetta', 'Daniel Poneman', 'William M. Daley', 'Cecilia Muñoz', 'Greg Craig', 'Phil Schiliro', 'Mark Lippert', 'Jim Messina', 'Dan Rooney', 'Daniel Pfeiffer', 'John T. Morton', 'Ray Mabus', 'Arne Duncan', 'Ron Kirk', 'Pete Rouse', 'Carol Browner', 'Steven Chu', 'James L. Jones', 'Ernest Moniz', 'Shaun Donovan', 'Tom Vilsack'}
            Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 295 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 296 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 50
            Final Answer: {'Director, United States Office of Management and Budget', 'United States Secretary of the Interior', 'Deputy Director, United States Office of Management and Budget', 'United States Secretary of the Navy', 'White House Director of Public Liaison', 'United States Secretary of Education', 'United States Secretary of Veterans Affairs', 'United States Solicitor General', 'United States Secretary of State', 'United States Secretary of Transportation', 'United States Secretary of Labor', 'Senior Advisor to the President of the United States', 'Director of Recovery for Auto Communities and Workers', 'United States Trade Representative', 'United States Deputy Secretary of Labor', 'White House Social Secretary', 'United States Ambassador to Ireland', 'Under Secretary of Defense for Personnel and Readiness', 'Special Advisor for the Consumer Financial Protection Bureau', 'White House Chief of Staff', 'National Security Advisor', 'White House Press Secretary', 'United States Deputy Secretary of the Treasury', 'Deputy White House Communications Director', 'White House Counsel', 'United States Secretary of Defense', 'Director of the Central Intelligence Agency', 'United States Ambassador to the United Kingdom', 'Chairperson, Securities and Exchange Commission', 'United States Secretary of Housing and Urban Development', 'Assistant Secretary of Defense for Asian and Pacific Security Affairs', 'Director for Multilateral Affairs', 'White House Military Office', 'White House Deputy Chief of Staff', 'Chief of Staff to the First Lady of the United States', 'Director of Intergovernmental Affairs', 'Associate Director, White House Office of Public Liaison', 'United States Secretary of Agriculture', 'United States Surgeon General', 'Director of the Consumer Financial Protection Bureau', 'General Counsel for the U.S. Department of Homeland Security', 'United States Secretary of Homeland Security', 'Counselor to the President', 'Under Secretary of State for Democracy and Global Affairs', 'Head of National Economic Council', 'Assistant to the President for Energy and Climate Change', 'United States Secretary of the Treasury', 'United States Secretary of Energy', 'Director of the U.S. Immigration and Customs Enforcement', 'United States Ambassador to the United Nations'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 297 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'United States Senator', 'President of the United States', 'Illinois State Senator'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 298 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Illinois'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 299 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Current: 300 / 378
        Checking schema 300 / 378: {
          [('Main', '==', 'm.02mjmr', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2005'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 301 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.tally'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.tally ?o2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.tally ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'1549'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 302 / 378: {
          [('Main', '==', 'm.02mjmr', ['music.artist.track_contributions', 'music.track_contribution.contributor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.contributor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 303 / 378: {
          [('Main', '==', 'm.02mjmr', ['music.artist.track_contributions', 'music.track_contribution.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Vocals'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 304 / 378: {
          [('Main', '==', 'm.02mjmr', ['celebrities.celebrity.sexual_orientation', 'celebrities.sexual_orientation_phase.celebrity'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.sexual_orientation ?o1 . ?o1 fb:celebrities.sexual_orientation_phase.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.sexual_orientation ?o1 . ?o1 fb:celebrities.sexual_orientation_phase.celebrity ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 305 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.firsts.first.achievements', 'base.firsts.first_achievement.category'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.category ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'African American'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 306 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.firsts.first.achievements', 'base.firsts.first_achievement.first'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.first ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.firsts.first.achievements ?o1 . ?o1 fb:base.firsts.first_achievement.first ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 307 / 378: {
          [('Main', '==', 'm.02mjmr', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.presented_work'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.presented_work ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Barack Obama election victory speech, 2008', 'Barack Obama Speech to the Muslim World: A New Beginning'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 308 / 378: {
          [('Main', '==', 'm.02mjmr', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2012 State of the Union Address'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 309 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.organization.supporter', 'base.popstra.support.supported_organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.organization.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.organization.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 310 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.supporter', 'base.popstra.support.supported_organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supported_organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'Neurofibromatosis, Inc.', 'CARE', 'Kids with a Cause'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 311 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.wears', 'base.popstra.fashion_choice.designer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:21] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.wears ?o1 . ?o1 fb:base.popstra.fashion_choice.designer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Hart Schaffner Marx', 'TAG Heuer', 'Burberry', 'J.Crew'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.041s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.041s]
        Checking schema 312 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Hawaii', 'France'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 313 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.appointer.appointment_made', 'people.appointment.appointed_role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 240
            Final Answer: {'Assistant Secretary for Economic Policy for the U.S. Department of Treasury', 'Administrator, Energy Information', 'General Counsel, Office of the General Counsel', 'Assistant Secretary of State for Political-Military Affairs', 'Under Secretary of Agriculture for Rural Development', 'United States Ambassador to France and Monaco', 'United States Ambassador to Papua New Guinea, Solomon Islands, and Vanuatu', 'United States Ambassador to Croatia', 'Assistant Secretary for International Security Affairs', 'United States Ambassador to Lithuania', 'Assistant Secretary for Health Affairs and Chief Medical Officer', 'Chair of the White House Council on Environmental Quality', 'Assistant Secretary of Defense for Homeland Defense and Americas’ Security Affairs', 'United States Ambassador to Argentina', 'Assistant Secretary, Land and Minerals Management', 'United States Deputy Attorney General', 'Assistant Administrator, Office of Administration and Resource Management', 'United States Ambassador to Latvia', 'Assistant Secretary for Legislative and Intergovernmental Affairs', 'United States Ambassador to Estonia', 'United States Ambassador to Morocco', 'Principal Deputy Under Secretary of Defense for Policy', 'United States Ambassador to Iraq', 'United States Associate Attorney General', 'Assistant Secretary of State for African Affairs', 'Under Secretary of Defense for Acquisition, Technology and Logistics', 'Associate Director and Chief Technology Officer, Technology Division', 'United States Ambassador to Haiti', 'Administrator of the Environmental Protection Agency', 'Assistant Secretary for Operations, Security and Preparedness', 'Chairperson, Securities and Exchange Commission', 'Under Secretary of Defense (Comptroller)', 'Senior Advisor to the Secretary of the Treasury', 'Under Secretary of Defense for Policy', 'Commissioner, Bureau of Reclamation', 'Assistant Secretary of Commerce for Economic Development', 'Deputy Secretary of State for Management and Resources', 'Director of Office to Monitor and Combat Trafficking in Persons', 'Director, Indian Health Service', 'United States Ambassador to Denmark', 'United States Ambassador to Brazil', 'Assistant Secretary for Public and Indian Housing', 'Assistant Administrator, Office of Enforcement and Compliance Assurance', 'Senior Policy Advisor for Health Affairs', 'USAID Administrator', 'General Counsel for the U.S. Department of Homeland Security', 'United States Secretary of Homeland Security', 'Assistant Secretary, Office of Elementary and Secondary Education', 'Under Secretary of Commerce for Intellectual Property and Director of the USPTO', 'Coordinator for Counterterrorism', 'Undersecretary for Food, Nutrition and Consumer Services', 'United States Ambassador to Australia', 'United States Secretary of the Navy', 'Director, National Institutes of Health', 'Administrator, Federal Highway Administration', 'Assistant Attorney General, Antitrust Division', 'Assistant Administrator, Office of Prevention, Pesticides, and Toxic Substances', 'United States Secretary of Veterans Affairs', 'Assistant Secretary for Communications and Information', 'United States Deputy Secretary of Transportation', 'United States Solicitor General', 'Assistant Secretary of Community Planning and Development', 'Director of the Office of Personnel Management', 'United States Secretary of Transportation', 'United States Ambassador to Sweden', 'Under Secretary of Energy for Science', 'Assistant Secretary for Human Resources and Administration', 'United States Secretary of Health and Human Services', 'United States Secretary of Commerce', 'United States Ambassador to Mexico', 'Assistant Secretary, Office of Disability Employment Policy', 'United States Deputy Secretary of Labor', 'Assistant Secretary for Planning, Evaluation and Policy Development', 'United States Ambassador to the Marshall Islands', 'Assistant Secretary of State for Legislative Affairs', 'Assistant Secretary for Aging', 'United States Assistant Secretary of the Treasury for Financial Institutions', 'United States Ambassador to Malta', 'Administrator, Rural Utilities Service', 'Treasurer of the United States', 'Director, Defense Research and Engineering', 'United States Ambassador to Norway', 'United States Ambassador to Italy and San Marino', 'Assistant Secretary for Congressional and Legislative Affairs', 'United States Ambassador to Sri Lanka', 'Chairman of the National Transportation Safety Board', 'Chairman, Federal Communications Commission', 'Director of the Office of National Drug Control Policy', 'Assistant Administrator, Office of International Affairs', 'United States Ambassador to Usun Rome', 'Chief Performance Officer of the United States', 'United States Deputy Secretary of Defense', 'Deputy Secretary of Energy', 'United States Secretary of Housing and Urban Development', 'Assistant Attorney General for Civil Division', 'United States Assistant Secretary for Health', 'United States Ambassador to Luxembourg', 'United States Ambassador to the Holy See', 'Administrator', 'Inspector General for the U.S. Department of Defense', 'Assistant Secretary for Administration', 'Assitant Secretary of Employee Benefits Security Administration', 'United States Assistant Secretary of the Treasury for Legislative Affairs', 'United States Ambassador to Germany', 'Assistant Secretary, Office of Environmental Management', 'Under Secretary of State for Public Diplomacy and Public Affairs', 'United States Deputy Secretary of Homeland Security', 'Administrator of the Small Business Administration', 'Under Secretary of State for Economic, Energy and Agricultural Affairs', 'Under Secretary of Commerce for Economic Affairs', 'Administrator, Federal Aviation Administration', 'Assistant Secretary of State for Near Eastern Affairs', 'Assistant Secretary of Defense, Asian and Pacific Security Affairs', 'Under Secretary of the Treasury for Terrorism and Financial Intelligence', 'Under Secretary of Energy', 'Associate Justice of the Supreme Court of the United States', 'Under Secretary of State for Democracy and Global Affairs', 'Assistant Secretary, Water and Science', 'Assistant Secretary for Administration and Management', 'Assistant Secretary, United States Immigration and Customs Enforcement', 'United States Ambassador to Bulgaria', 'Special Representative for Nuclear Nonproliferation', 'Chairman of the United States Commodity Futures Trading Commission', 'United States Ambassador to Japan', 'Assistant Secretary for Public and Intergovernmental Affairs', 'Assistant Secretary for Policy Development and Research', 'Under Secretary of Education', 'White House Communications Director', 'United States Assistant Secretary of the Treasury for Financial Stability and Counselor to the Secretary', 'Director, United States Office of Management and Budget', 'United States Ambassador to Benin', 'United States Ambassador to Switzerland and Liechtenstein', 'United States Assistant Secretary of the Treasury for Management, Chief Financial Officer, and Chief Performance Officer', 'Assistant Secretary, Office of Energy Efficiency & Renewable Energy', 'United States Secretary of State', 'Assistant Secretary for Civil Rights', 'United States Secretary of Labor', 'Assistant Administrator, Office of Water', 'Director of the Peace Corps', 'Assistant Attorney general, Office of Legal Counsel', 'Ambassador-at-Large for Global Women’s Issues', 'NASA Administrator', 'Assistant Secretary of State for East Asian and Pacific Affairs', 'Deputy U. S. Trade Representative', 'Assistant Secretary for Congressional Relations', 'Director, Office of Science', 'Assistant Secretary, Office of Policy', 'United States Assistant Secretary of the Treasury for Terrorist Financing', 'Acting Assistant Administrator, Office of Solid Waste and Emergency Response', 'United States Permanent Representative to NATO', 'United States Ambassador to Belgium', 'Assistant Secretary for Information and Technology', 'Deputy Secretary of the U.S. Department of the Treasury', 'Assistant Secretary of Defense for Legislative Affairs', 'United States Ambassador to the Netherlands', 'Assistant Attorney General for Criminal Division', 'Assistant Secretary for Legislation and Congressional Affairs', 'Under Secretary for Economic Affairs', 'Deputy Under Secretary for Food, Nutrition and Consumer Services', 'United States Ambassador to Kosovo', 'Assistant Secretary of State for European and Eurasian Affairs', 'Assistant Secretary for Preparedness and Response', 'General Counsel of the Department of Defense', 'Assistant Secretary of State for South and Central Asian Affairs', 'United States Deputy Secretary of Education', 'Director, Institute of Education Sciences', 'Director of the U.S. Census Bureau', 'Solicitor of the Department of the Interior', 'United States Deputy Secretary of Veterans Affairs', 'United States Deputy Secretary of Commerce', 'Under Secretary of Homeland Security for National Protection and Programs', 'Director, U.S. Citizenship and Immigration Services', 'Under Secretary of State for Arms Control and International Security Affairs', 'Deputy Secretary of the Department of Health and Human Services', 'Under Secretary, Farm and Foreign Agriculture Service', 'Assistant Secretary, Policy & International Affairs', 'Assistant Secretary of Defense for Global Strategic Affairs', 'United States Secretary of the Treasury', 'United States Ambassador to Belize', 'NASA Deputy Administrator', 'Assistant Secretary, Policy Management and Budget', 'United States Ambassador to the United Nations', 'Assistant Secretary for Indian Affairs', 'United States Attorney General', 'Chair of the Council of Economic Advisers', 'United States Ambassador to Nepal', 'Chief Financial Officer of the Department of Energy', 'Assistant Secretary of State for Verification, Compliance, and Implementation', 'Director General of the Foreign Service', 'United States Deputy Secretary of Agriculture', 'Administrator, Federal Railroad Administration', 'Assistant Secretary of Congressional and Intergovernmental Relations', 'Director, US Fish and Wildlife Service', 'Under Secretary for Policy', 'United States Ambassador to New Zealand', 'Assistant Secretary for Fish and Wildlife and Parks', 'United States Ambassador to Burkina Faso', 'Chief Financial Officer', 'United States Ambassador to China', 'Assistant Secretary of State for International Organizations', 'United States Trade Representative', 'Assistant Secretary of Defense for Reserve Affairs', 'U.S. Global AIDS Coordinator', 'United States Ambassador to Ireland', 'Deputy Director, Office of National Drug Control Policy', 'United States Ambassador to Romania', 'Assistant Secretary of Housing and Federal Housing Commissioner', 'United States Secretary of the Army', 'United States Department of State', 'United States Ambassador to India', 'Assistant Secretary of the Interior for Insular Areas', 'General counsel', 'Deputy Secretary of the Department of the Interior', 'Commissioner of Food and Drugs', 'Director of the Central Intelligence Agency', 'Office for Civil Rights', 'Assistant Secretary of Fair Housing and Equal Opportunity', 'Assistant Secretary for Public Affairs', 'United States Ambassador to Afghanistan', 'Under Secretary of Agriculture for Research, Education, and Economics', 'General Counsel, U.S. Department of Energy', 'Assistant Secretary for Governmental Affairs', 'Deputy Secretary', 'Administrator, Federal Transit Administration', 'Acting Assistant Secretary for Aviation and International Affairs', 'Administrator, Research and Innovative Technology Administration', 'Commissioner, United States Parole Commission', 'Director, Office of Science and Technology Policy', 'United States Secretary of Agriculture', 'Assistant Secretary for Children and Families, Department of Health and Human Services', 'Associate Director, Energy & Environment Division', 'United States Ambassador to Mauritius and Seychelles', 'Director, National Park Service', 'Undersecretary, Marketing and Regulatory Programs', 'United States Secretary of Energy', 'Assistant Secretary for Employment and Training Administration', 'United States Ambassador to Spain', 'Assistant Secretary, Office of Nuclear Energy', 'Deputy Director, United States Office of Management and Budget', 'Assistant Administrator, Office of Air and Radiation'}
            Answers = 240, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.049s]
          Answers = 240, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.049s]
        Checking schema 314 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.litcentral.named_person.individual_names', 'base.litcentral.person_full_name.person_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.person_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.litcentral.named_person.individual_names ?o1 . ?o1 fb:base.litcentral.person_full_name.person_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 315 / 378: {
          [('Main', '==', 'm.02mjmr', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.building'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.building ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.building ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'White House'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 316 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.polled_entity.poll_scores', 'government.election_poll_score.poll'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.poll ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.poll ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 854
            Final Answer: {'RAND, 2012 presidential election, 2012-10-01', 'Reuters/Ipsos, 2012 presidential election, 2012-10-28', 'Gallup, 2012 presidential election, 2012-09-30', 'Gallup, 2012 presidential election, 2012-07-27', 'Gallup, 2012 presidential election, 2012-10-08', 'ABC/WaPo, 2012 presidential election, 2012-11-05', 'Gallup, 2012 presidential election, 2012-10-13', 'Gallup, 2012 presidential election, 2012-05-31', 'Reuters/Ipsos, 2012 presidential election, 2012-10-27', 'Reuters/Ipsos, 2012 presidential election, 2012-09-27', 'ABC/WaPo, 2012 presidential election, 2012-10-26', 'RAND, 2012 presidential election, 2012-10-29', 'YouGov, 2012 presidential election, 2012-10-09', 'Rasmussen, 2012 presidential election, 2012-07-25', 'ABC/WaPo, 2012 presidential election, 2012-10-15', 'Rasmussen, 2012 presidential election, 2012-09-19', 'Rasmussen, 2012 presidential election, 2012-11-06', 'CNN, 2012 presidential election, 2012-07-03', 'Mason-Dixon, 2012 presidential election, 2012-05-18', 'Gallup, 2012 presidential election, 2012-09-27', 'Gallup, 2012 presidential election, 2012-06-07', 'RAND, 2012 presidential election, 2012-10-12', 'Rasmussen, 2012 presidential election, 2012-04-04', 'Bloomberg, 2012 presidential election, 2012-06-20', 'Harris Interactive, 2012 presidential election, 2012-03-03', 'IBD/TIPP, 2012 presidential election, 2012-10-12', 'Politico/GWU, 2012 presidential election, 2012-11-04', 'Rasmussen, 2012 presidential election, 2012-10-17', 'Zogby, 2012 presidential election, 2012-11-05', 'CBS/NYT, 2012 presidential election, 2012-07-19', 'Rasmussen, 2012 presidential election, 2012-04-09', 'Princeton Survey Research Assoc., 2012 presidential election, 2012-10-31', 'PPP (D), 2012 presidential election, 2012-04-19', 'Fox News, 2012 presidential election, 2012-10-31', 'Rasmussen, 2012 presidential election, 2012-07-02', 'Rasmussen, 2012 presidential election, 2012-07-23', 'Gallup, 2012 presidential election, 2012-06-16', 'RAND, 2012 presidential election, 2012-11-04', 'Gallup, 2012 presidential election, 2012-08-21', 'CVOTER International, 2012 presidential election, 2012-09-29', 'Reuters/Ipsos, 2012 presidential election, 2012-06-13', 'IBD/TIPP, 2012 presidential election, 2012-03-14', 'Winston Group (R), 2012 presidential election, 2012-09-25', 'Gallup, 2012 presidential election, 2012-05-05', 'AP/GfK, 2012 presidential election, 2012-05-10', 'American Research Group, 2012 presidential election, 2012-10-15', 'RAND, 2012 presidential election, 2012-10-05', 'Rasmussen, 2012 presidential election, 2012-03-30', 'Pew, 2012 presidential election, 2012-04-21', 'Rasmussen, 2012 presidential election, 2012-10-08', 'Rasmussen, 2012 presidential election, 2012-10-27', 'Quinnipiac, 2012 presidential election, 2012-04-19', 'Gallup, 2012 presidential election, 2012-05-17', 'Rasmussen, 2012 presidential election, 2012-03-15', 'Reuters/Ipsos, 2012 presidential election, 2012-09-08', 'CNN, 2012 presidential election, 2012-03-29', 'Rasmussen, 2012 presidential election, 2012-07-01', 'Gallup, 2012 presidential election, 2012-09-11', 'Reuters/Ipsos, 2012 presidential election, 2012-10-11', 'RAND, 2012 presidential election, 2012-10-08', 'Reuters/Ipsos, 2012 presidential election, 2012-09-20', 'Pew, 2012 presidential election, 2012-10-08', 'Gallup, 2012 presidential election, 2012-08-03', 'YouGov, 2012 presidential election, 2012-07-21', 'Esquire/Yahoo, 2012 presidential election, 2012-09-13', 'Rasmussen, 2012 presidential election, 2012-05-08', 'Zogby, 2012 presidential election, 2012-10-09', 'Zogby, 2012 presidential election, 2012-10-01', 'Gallup, 2012 presidential election, 2012-06-10', 'PPP (D), 2012 presidential election, 2012-08-14', 'Rasmussen, 2012 presidential election, 2012-08-02', 'Rasmussen, 2012 presidential election, 2012-03-03', 'Clarus, 2012 presidential election, 2012-10-06', 'IBD/TIPP, 2012 presidential election, 2012-06-12', 'Rasmussen, 2012 presidential election, 2012-05-30', 'Gallup, 2012 presidential election, 2012-04-21', 'Reason, 2012 presidential election, 2012-09-21', 'Reuters/Ipsos, 2012 presidential election, 2012-09-11', 'Reuters/Ipsos, 2012 presidential election, 2012-10-05', 'Gallup, 2012 presidential election, 2012-10-23', 'RAND, 2012 presidential election, 2012-10-25', 'NBC/WSJ, 2012 presidential election, 2012-11-04', 'Rasmussen, 2012 presidential election, 2012-04-22', 'Reuters/Ipsos, 2012 presidential election, 2012-09-14', 'Greenberg Quinlan Rosner (D), 2012 presidential election, 2012-11-05', 'PPP (D), 2012 presidential election, 2012-05-22', 'Gallup, 2012 presidential election, 2012-09-13', 'Rasmussen, 2012 presidential election, 2012-07-10', 'Gallup, 2012 presidential election, 2012-04-30', 'Gallup, 2012 presidential election, 2012-09-09', 'Gallup, 2012 presidential election, 2012-07-01', 'Gallup, 2012 presidential election, 2012-05-25', 'Rasmussen, 2012 presidential election, 2012-06-23', 'Rasmussen, 2012 presidential election, 2012-08-15', 'Pew, 2012 presidential election, 2012-03-14', 'Rasmussen, 2012 presidential election, 2012-05-17', 'Gallup, 2012 presidential election, 2012-07-25', 'Rasmussen, 2012 presidential election, 2012-09-28', 'Politico/GWU, 2012 presidential election, 2012-10-29', 'Rasmussen, 2012 presidential election, 2012-10-14', 'IBD/TIPP, 2012 presidential election, 2012-10-28', 'Pew, 2012 presidential election, 2012-11-04', 'Rasmussen, 2012 presidential election, 2012-10-06', 'PPP (D), 2012 presidential election, 2012-10-24', 'Gallup, 2012 presidential election, 2012-08-18', 'Gallup, 2012 presidential election, 2012-08-06', 'Rasmussen, 2012 presidential election, 2012-06-07', 'Rasmussen, 2012 presidential election, 2012-04-08', 'Zogby, 2012 presidential election, 2012-11-02', 'Reuters/Ipsos, 2012 presidential election, 2012-09-12', 'PPP (D), 2012 presidential election, 2012-10-21', 'PPP (D), 2012 presidential election, 2012-03-23', 'Rasmussen, 2012 presidential election, 2012-10-01', 'Rasmussen, 2012 presidential election, 2012-08-13', 'Rasmussen, 2012 presidential election, 2012-11-01', 'Gallup, 2012 presidential election, 2012-09-14', 'Gallup, 2012 presidential election, 2012-07-20', 'Rasmussen, 2012 presidential election, 2012-10-10', 'IBD/TIPP, 2012 presidential election, 2012-10-23', 'Rasmussen, 2012 presidential election, 2012-06-21', 'Rasmussen, 2012 presidential election, 2012-10-23', 'Rasmussen, 2012 presidential election, 2012-09-18', 'Rasmussen, 2012 presidential election, 2012-10-22', 'Gallup, 2012 presidential election, 2012-09-23', 'Gallup, 2012 presidential election, 2012-09-10', 'Rasmussen, 2012 presidential election, 2012-03-25', 'Rasmussen, 2012 presidential election, 2012-03-26', 'Reuters/Ipsos, 2012 presidential election, 2012-10-19', 'UConn, 2012 presidential election, 2012-09-20', 'Rasmussen, 2012 presidential election, 2012-05-29', 'Zogby, 2012 presidential election, 2012-09-24', 'Gallup, 2012 presidential election, 2012-06-19', 'RAND, 2012 presidential election, 2012-10-02', 'YouGov, 2012 presidential election, 2012-06-29', 'CVOTER International, 2012 presidential election, 2012-10-24', 'YouGov, 2012 presidential election, 2012-11-04', 'Rasmussen, 2012 presidential election, 2012-10-04', 'RAND, 2012 presidential election, 2012-10-23', 'Gallup, 2012 presidential election, 2012-05-26', 'Rasmussen, 2012 presidential election, 2012-07-21', 'RAND, 2012 presidential election, 2012-10-15', 'Rasmussen, 2012 presidential election, 2012-03-24', 'PPP (D), 2012 presidential election, 2012-03-03', 'Zogby, 2012 presidential election, 2012-08-16', 'Gallup, 2012 presidential election, 2012-08-13', 'Reuters/Ipsos, 2012 presidential election, 2012-10-15', 'IBD/TIPP, 2012 presidential election, 2012-10-10', 'Rasmussen, 2012 presidential election, 2012-09-10', 'RAND, 2012 presidential election, 2012-10-06', 'Rasmussen, 2012 presidential election, 2012-05-04', 'Politico/GWU, 2012 presidential election, 2012-10-01', 'Rasmussen, 2012 presidential election, 2012-10-13', 'Rasmussen, 2012 presidential election, 2012-11-05', 'PPP (D), 2012 presidential election, 2012-09-11', 'Pew, 2012 presidential election, 2012-09-20', 'YouGov, 2012 presidential election, 2012-10-01', 'RAND, 2012 presidential election, 2012-10-11', 'Reuters/Ipsos, 2012 presidential election, 2012-10-22', 'ABC/WaPo, 2012 presidential election, 2012-03-03', 'Greenberg Quinlan Rosner (D), 2012 presidential election, 2012-03-03', 'Zogby, 2012 presidential election, 2012-09-17', 'Gallup, 2012 presidential election, 2012-10-10', 'Rasmussen, 2012 presidential election, 2012-10-29', 'PPP (D), 2012 presidential election, 2012-06-20', 'Rasmussen, 2012 presidential election, 2012-03-05', 'Gallup, 2012 presidential election, 2012-09-16', 'Rasmussen, 2012 presidential election, 2012-05-03', 'Rasmussen, 2012 presidential election, 2012-09-23', 'RAND, 2012 presidential election, 2012-10-09', 'Quinnipiac, 2012 presidential election, 2012-03-03', 'PPP (D), 2012 presidential election, 2012-10-19', 'PPP (D), 2012 presidential election, 2012-11-04', 'PPP (D), 2012 presidential election, 2012-06-27', 'PPP (D), 2012 presidential election, 2012-09-18', 'NBC/WSJ, 2012 presidential election, 2012-09-19', 'Rasmussen, 2012 presidential election, 2012-07-27', 'Pew, 2012 presidential election, 2012-07-13', 'Gallup, 2012 presidential election, 2012-09-07', 'Gallup, 2012 presidential election, 2012-09-18', 'ABC/WaPo, 2012 presidential election, 2012-11-04', 'Rasmussen, 2012 presidential election, 2012-06-09', 'Gallup, 2012 presidential election, 2012-07-30', 'ABC/WaPo, 2012 presidential election, 2012-09-11', 'Gallup, 2012 presidential election, 2012-09-12', 'RAND, 2012 presidential election, 2012-10-30', 'Rasmussen, 2012 presidential election, 2012-09-13', 'AP/GfK, 2012 presidential election, 2012-10-25', 'Rasmussen, 2012 presidential election, 2012-04-07', 'Rasmussen, 2012 presidential election, 2012-10-26', 'Rasmussen, 2012 presidential election, 2012-07-14', 'Rasmussen, 2012 presidential election, 2012-06-17', 'ABC/WaPo, 2012 presidential election, 2012-10-25', 'Reuters/Ipsos, 2012 presidential election, 2012-09-09', 'Fox News, 2012 presidential election, 2012-08-10', 'Rasmussen, 2012 presidential election, 2012-07-08', 'Politico/GWU, 2012 presidential election, 2012-08-14', 'Rasmussen, 2012 presidential election, 2012-06-11', 'Gallup, 2012 presidential election, 2012-04-26', 'Merriman River Group, 2012 presidential election, 2012-10-01', 'Gallup, 2012 presidential election, 2012-10-12', 'Pew, 2012 presidential election, 2012-03-03', 'Rasmussen, 2012 presidential election, 2012-03-13', 'Douglas Schoen, 2012 presidential election, 2012-06-30', 'Monmouth, 2012 presidential election, 2012-11-05', 'Politico/GWU, 2012 presidential election, 2012-10-15', 'Reuters/Ipsos, 2012 presidential election, 2012-09-21', 'RAND, 2012 presidential election, 2012-10-31', 'Gallup, 2012 presidential election, 2012-10-19', 'ABC/WaPo, 2012 presidential election, 2012-05-22', 'RAND, 2012 presidential election, 2012-10-28', 'NBC/WSJ, 2012 presidential election, 2012-10-02', 'Gallup, 2012 presidential election, 2012-06-18', 'PPP (D), 2012 presidential election, 2012-10-29', 'Rasmussen, 2012 presidential election, 2012-03-23', 'Gallup, 2012 presidential election, 2012-07-31', 'Gallup, 2012 presidential election, 2012-09-20', 'Fox News, 2012 presidential election, 2012-07-19', 'Rasmussen, 2012 presidential election, 2012-07-09', 'Reuters/Ipsos, 2012 presidential election, 2012-11-03', 'Rasmussen, 2012 presidential election, 2012-03-14', 'Rasmussen, 2012 presidential election, 2012-09-12', 'Gallup, 2012 presidential election, 2012-07-24', 'Rasmussen, 2012 presidential election, 2012-08-09', 'Rasmussen, 2012 presidential election, 2012-09-26', 'ABC/WaPo, 2012 presidential election, 2012-10-28', 'Rasmussen, 2012 presidential election, 2012-09-09', 'Public Religion Research Institute, 2012 presidential election, 2012-05-11', 'Gallup, 2012 presidential election, 2012-10-07', 'Bloomberg, 2012 presidential election, 2012-09-26', 'CBS, 2012 presidential election, 2012-10-22', 'CVOTER International, 2012 presidential election, 2012-11-01', 'ABC/WaPo, 2012 presidential election, 2012-03-13', 'Gallup, 2012 presidential election, 2012-05-04', 'Gallup, 2012 presidential election, 2012-09-28', 'RAND, 2012 presidential election, 2012-10-17', 'CVOTER International, 2012 presidential election, 2012-09-19', 'Gallup, 2012 presidential election, 2012-09-24', 'YouGov, 2012 presidential election, 2012-05-31', 'ABC/WaPo, 2012 presidential election, 2012-11-01', 'Gallup, 2012 presidential election, 2012-10-09', 'Gallup, 2012 presidential election, 2012-10-27', 'Rasmussen, 2012 presidential election, 2012-06-01', 'Greenberg Quinlan Rosner (D), 2012 presidential election, 2012-07-31', 'Zogby, 2012 presidential election, 2012-05-17', 'Quinnipiac, 2012 presidential election, 2012-10-02', 'Rasmussen, 2012 presidential election, 2012-03-06', 'AP/GfK, 2012 presidential election, 2012-09-19', 'YouGov, 2012 presidential election, 2012-10-04', 'RAND, 2012 presidential election, 2012-10-20', 'Reuters/Ipsos, 2012 presidential election, 2012-09-18', 'CNN, 2012 presidential election, 2012-11-04', 'Gallup, 2012 presidential election, 2012-10-15', 'Reuters/Ipsos, 2012 presidential election, 2012-10-06', 'RAND, 2012 presidential election, 2012-11-03', 'Democracy Corps (D), 2012 presidential election, 2012-09-14', 'Rasmussen, 2012 presidential election, 2012-07-03', 'Gallup, 2012 presidential election, 2012-07-06', 'Rasmussen, 2012 presidential election, 2012-06-18', 'RAND, 2012 presidential election, 2012-10-21', 'PPP (D), 2012 presidential election, 2012-10-23', 'USA Today/Gallup, 2012 presidential election, 2012-03-03', 'CNN, 2012 presidential election, 2012-03-03', 'Gallup, 2012 presidential election, 2012-09-21', 'NBC/WSJ, 2012 presidential election, 2012-10-21', 'Gallup, 2012 presidential election, 2012-07-26', 'Rasmussen, 2012 presidential election, 2012-10-18', 'Rasmussen, 2012 presidential election, 2012-10-19', 'Rasmussen, 2012 presidential election, 2012-03-17', 'Monmouth, 2012 presidential election, 2012-09-18', 'CNN, 2012 presidential election, 2012-10-01', 'American Research Group, 2012 presidential election, 2012-11-05', 'American Research Group, 2012 presidential election, 2012-10-09', 'Gallup, 2012 presidential election, 2012-08-10', 'Reuters/Ipsos, 2012 presidential election, 2012-09-28', 'YouGov, 2012 presidential election, 2012-07-07', 'North Star Opinion Research (R), 2012 presidential election, 2012-05-22', 'Princeton Survey Research Assoc., 2012 presidential election, 2012-04-25', 'NPR, 2012 presidential election, 2012-07-19', 'IBD/TIPP, 2012 presidential election, 2012-10-16', 'PPP (D), 2012 presidential election, 2012-10-16', 'Rasmussen, 2012 presidential election, 2012-05-09', 'Reuters/Ipsos, 2012 presidential election, 2012-10-09', 'Gallup, 2012 presidential election, 2012-10-17', 'ABC/WaPo, 2012 presidential election, 2012-10-23', 'Gallup, 2012 presidential election, 2012-09-17', 'Rasmussen, 2012 presidential election, 2012-06-22', 'IBD/TIPP, 2012 presidential election, 2012-10-15', 'CVOTER International, 2012 presidential election, 2012-10-15', 'PPP (D), 2012 presidential election, 2012-10-20', 'Rasmussen, 2012 presidential election, 2012-10-11', 'CBS/NYT, 2012 presidential election, 2012-10-30', 'Rasmussen, 2012 presidential election, 2012-07-16', 'Rasmussen, 2012 presidential election, 2012-09-08', 'Rasmussen, 2012 presidential election, 2012-08-11', 'NBC/WSJ, 2012 presidential election, 2012-05-23', 'Fox News, 2012 presidential election, 2012-04-19', 'Gallup, 2012 presidential election, 2012-10-11', 'YouGov, 2012 presidential election, 2012-07-04', 'IBD/TIPP, 2012 presidential election, 2012-10-17', 'Gallup, 2012 presidential election, 2012-10-01', 'PPP (D), 2012 presidential election, 2012-06-13', 'Rasmussen, 2012 presidential election, 2012-06-26', 'Gallup, 2012 presidential election, 2012-10-28', 'American Research Group, 2012 presidential election, 2012-10-29', 'Rasmussen, 2012 presidential election, 2012-09-11', 'Zogby, 2012 presidential election, 2012-07-10', 'Gallup, 2012 presidential election, 2012-04-20', 'Reuters/Ipsos, 2012 presidential election, 2012-10-04', 'Gallup, 2012 presidential election, 2012-04-23', 'IBD/TIPP, 2012 presidential election, 2012-08-14', 'Monmouth, 2012 presidential election, 2012-10-22', 'Gallup, 2012 presidential election, 2012-09-29', 'Reuters/Ipsos, 2012 presidential election, 2012-07-11', 'Pew, 2012 presidential election, 2012-08-03', 'Politico/GWU, 2012 presidential election, 2012-11-06', 'PPP (D), 2012 presidential election, 2012-11-02', 'Rasmussen, 2012 presidential election, 2012-04-21', 'Rasmussen, 2012 presidential election, 2012-05-31', 'PPP (D), 2012 presidential election, 2012-10-09', 'Rasmussen, 2012 presidential election, 2012-06-15', 'IBD/TIPP, 2012 presidential election, 2012-10-22', 'Rasmussen, 2012 presidential election, 2012-06-28', 'Politico/GWU, 2012 presidential election, 2012-09-24', 'CBS/NYT, 2012 presidential election, 2012-03-13', 'Rasmussen, 2012 presidential election, 2012-10-31', 'Rasmussen, 2012 presidential election, 2012-10-16', 'Zogby, 2012 presidential election, 2012-10-30', 'RAND, 2012 presidential election, 2012-10-16', 'RAND, 2012 presidential election, 2012-10-24', 'FTI Consulting, 2012 presidential election, 2012-09-21', 'IBD/TIPP, 2012 presidential election, 2012-10-27', 'Rasmussen, 2012 presidential election, 2012-06-02', 'NBC/WSJ, 2012 presidential election, 2012-06-27', 'Gallup, 2012 presidential election, 2012-09-22', 'Reuters/Ipsos, 2012 presidential election, 2012-09-22', 'Gallup, 2012 presidential election, 2012-06-24', 'PPP (D), 2012 presidential election, 2012-07-31', 'PPP (D), 2012 presidential election, 2012-04-24', 'PPP (D), 2012 presidential election, 2012-04-20', 'ABC/WaPo, 2012 presidential election, 2012-04-10', 'Rasmussen, 2012 presidential election, 2012-10-25', 'Gallup, 2012 presidential election, 2012-10-06', 'IBD/TIPP, 2012 presidential election, 2012-10-11', 'Rasmussen, 2012 presidential election, 2012-09-24', 'Reuters/Ipsos, 2012 presidential election, 2012-09-07', 'Rasmussen, 2012 presidential election, 2012-06-08', 'Rasmussen, 2012 presidential election, 2012-05-11', 'Rasmussen, 2012 presidential election, 2012-07-13', 'Rasmussen, 2012 presidential election, 2012-03-18', 'ABC/WaPo, 2012 presidential election, 2012-07-10', 'Rasmussen, 2012 presidential election, 2012-05-28', 'Gallup, 2012 presidential election, 2012-10-25', 'PPP (D), 2012 presidential election, 2012-10-18', 'Reuters/Ipsos, 2012 presidential election, 2012-10-03', 'Reuters/Ipsos, 2012 presidential election, 2012-10-25', 'Fox News, 2012 presidential election, 2012-09-13', 'Rasmussen, 2012 presidential election, 2012-09-16', 'IBD/TIPP, 2012 presidential election, 2012-10-20', 'Rasmussen, 2012 presidential election, 2012-03-21', 'Gravis Marketing , 2012 presidential election, 2012-11-04', 'Rasmussen, 2012 presidential election, 2012-10-30', 'Reuters/Ipsos, 2012 presidential election, 2012-08-08', 'Rasmussen, 2012 presidential election, 2012-06-25', 'YouGov, 2012 presidential election, 2012-07-03', 'Rasmussen, 2012 presidential election, 2012-04-06', 'Rasmussen, 2012 presidential election, 2012-09-27', 'Rasmussen, 2012 presidential election, 2012-04-24', 'Gallup, 2012 presidential election, 2012-10-05', 'ABC/WaPo, 2012 presidential election, 2012-10-29', 'Rasmussen, 2012 presidential election, 2012-09-15', 'PPP (D), 2012 presidential election, 2012-10-28', 'RAND, 2012 presidential election, 2012-11-06', 'Gallup, 2012 presidential election, 2012-06-23', 'PPP (D), 2012 presidential election, 2012-10-02', 'Rasmussen, 2012 presidential election, 2012-07-31', 'IBD/TIPP, 2012 presidential election, 2012-10-24', 'Reuters/Ipsos, 2012 presidential election, 2012-09-25', 'Democracy Corps (D), 2012 presidential election, 2012-10-22', 'Rasmussen, 2012 presidential election, 2012-10-07', 'ABC/WaPo, 2012 presidential election, 2012-10-01', 'Gallup, 2012 presidential election, 2012-08-07', 'Rasmussen, 2012 presidential election, 2012-09-06', 'Rasmussen, 2012 presidential election, 2012-09-30', 'IBD/TIPP, 2012 presidential election, 2012-10-21', 'YouGov, 2012 presidential election, 2012-06-30', 'RAND, 2012 presidential election, 2012-10-18', 'Rasmussen, 2012 presidential election, 2012-06-04', 'Politico/GWU, 2012 presidential election, 2012-10-08', 'Rasmussen, 2012 presidential election, 2012-08-16', 'Gallup, 2012 presidential election, 2012-10-26', 'YouGov, 2012 presidential election, 2012-07-10', 'Rasmussen, 2012 presidential election, 2012-03-07', 'IBD/TIPP, 2012 presidential election, 2012-05-08', 'PPP (D), 2012 presidential election, 2012-10-30', 'Rasmussen, 2012 presidential election, 2012-05-25', 'Rasmussen, 2012 presidential election, 2012-05-01', 'Rasmussen, 2012 presidential election, 2012-08-14', 'Rasmussen, 2012 presidential election, 2012-05-13', 'ABC/WaPo, 2012 presidential election, 2012-10-22', 'Gallup, 2012 presidential election, 2012-09-25', 'PPP (D), 2012 presidential election, 2012-07-04', 'Gallup, 2012 presidential election, 2012-10-29', 'Rasmussen, 2012 presidential election, 2012-07-24', 'American Research Group, 2012 presidential election, 2012-09-10', 'Gallup, 2012 presidential election, 2012-07-23', 'YouGov, 2012 presidential election, Election Poll June 9-11 2012', 'Reuters/Ipsos, 2012 presidential election, 2012-10-10', 'Rasmussen, 2012 presidential election, 2012-05-14', 'Rasmussen, 2012 presidential election, 2012-09-29', 'Rasmussen, 2012 presidential election, 2012-07-11', 'Reuters/Ipsos, 2012 presidential election, 2012-05-09', 'IBD/TIPP, 2012 presidential election, 2012-05-18', 'Rasmussen, 2012 presidential election, 2012-07-06', 'Monmouth, 2012 presidential election, 2012-10-11', 'YouGov, 2012 presidential election, 2012-07-06', 'Politico/GWU, 2012 presidential election, 2012-05-08', 'Rasmussen, 2012 presidential election, 2012-03-19', 'Suffolk, 2012 presidential election, 2012-03-27', 'Gallup, 2012 presidential election, 2012-07-18', 'Rasmussen, 2012 presidential election, 2012-09-21', 'IBD/TIPP, 2012 presidential election, 2012-10-25', 'Reuters/Ipsos, 2012 presidential election, 2012-09-19', 'YouGov, 2012 presidential election, 2012-10-23', 'Rasmussen, 2012 presidential election, 2012-10-02', 'Gravis Marketing , 2012 presidential election, 2012-10-19', 'NBC/WSJ, 2012 presidential election, 2012-04-21', 'YouGov, 2012 presidential election, Election Poll March 24-27 2012', 'NBC/WSJ, 2012 presidential election, 2012-07-25', 'Marist, 2012 presidential election, 2012-03-27', 'Rasmussen, 2012 presidential election, 2012-05-22', 'RAND, 2012 presidential election, 2012-11-02', 'CVOTER International, 2012 presidential election, 2012-10-11', 'Rasmussen, 2012 presidential election, 2012-08-04', 'Pharos Research Group, 2012 presidential election, 2012-10-28', 'IBD/TIPP, 2012 presidential election, 2012-10-13', 'PPP (D), 2012 presidential election, 2012-06-06', 'CNN, 2012 presidential election, 2012-08-10', 'Rasmussen, 2012 presidential election, 2012-09-25', 'Tarrance Group (R) , 2012 presidential election, 2012-06-12', 'YouGov, 2012 presidential election, 2012-10-10', 'Pew, 2012 presidential election, 2012-04-19', 'YouGov, 2012 presidential election, 2012-08-15', 'Reuters/Ipsos, 2012 presidential election, 2012-10-14', 'Gallup, 2012 presidential election, 2012-05-21', 'Rasmussen, 2012 presidential election, 2012-03-08', 'Gallup, 2012 presidential election, 2012-10-18', 'Rasmussen, 2012 presidential election, 2012-07-28', 'Politico/GWU, 2012 presidential election, 2012-10-22', 'CVOTER International, 2012 presidential election, 2012-10-09', 'Gallup, 2012 presidential election, 2012-08-01', 'McLaughlin (R), 2012 presidential election, 2012-10-04', 'Democracy Corps (D), 2012 presidential election, 2012-05-04', 'NPR, 2012 presidential election, 2012-10-30', 'Rasmussen, 2012 presidential election, 2012-07-18', 'CVOTER International, 2012 presidential election, 2012-10-21', 'RAND, 2012 presidential election, 2012-10-26', 'Rasmussen, 2012 presidential election, 2012-04-02', 'Zogby, 2012 presidential election, 2012-10-21', 'Rasmussen, 2012 presidential election, 2012-06-13', 'ABC/WaPo, 2012 presidential election, 2012-10-30', 'Rasmussen, 2012 presidential election, 2012-04-03', 'Gallup, 2012 presidential election, 2012-09-26', 'Rasmussen, 2012 presidential election, 2012-05-10', 'Rasmussen, 2012 presidential election, 2012-04-27', 'Rasmussen, 2012 presidential election, 2012-08-10', 'Gallup, 2012 presidential election, 2012-06-06', 'Rasmussen, 2012 presidential election, 2012-05-15', 'PPP (D), 2012 presidential election, 2012-09-25', 'YouGov, 2012 presidential election, 2012-10-17', 'Rasmussen, 2012 presidential election, 2012-06-12', 'Gallup, 2012 presidential election, 2012-08-20', 'Reuters/Ipsos, 2012 presidential election, 2012-10-18', 'Fox News, 2012 presidential election, 2012-03-03', 'Reason, 2012 presidential election, 2012-03-27', 'YouGov, 2012 presidential election, 2012-10-31', 'Gallup, 2012 presidential election, 2012-10-24', 'Rasmussen, 2012 presidential election, 2012-07-20', 'RAND, 2012 presidential election, 2012-09-25', 'Gallup, 2012 presidential election, 2012-08-05', 'IBD/TIPP, 2012 presidential election, 2012-10-26', 'Gallup, 2012 presidential election, 2012-10-02', 'ABC/WaPo, 2012 presidential election, 2012-10-31', 'Gallup, 2012 presidential election, 2012-05-18', 'NBC/WSJ, 2012 presidential election, 2012-04-30', 'Gallup, 2012 presidential election, 2012-05-06', 'RAND, 2012 presidential election, 2012-10-07', 'Gallup, 2012 presidential election, 2012-05-28', 'High Point University, 2012 presidential election, 2012-11-01', 'Gallup, 2012 presidential election, 2012-07-10', 'Gallup, 2012 presidential election, 2012-10-16', 'CBS/NYT, 2012 presidential election, 2012-05-16', 'Rasmussen, 2012 presidential election, 2012-07-15', 'IBD/TIPP, 2012 presidential election, 2012-09-11', 'IBD/TIPP, 2012 presidential election, 2012-10-14', 'Pew, 2012 presidential election, 2012-06-06', 'Bloomberg, 2012 presidential election, 2012-03-14', 'Rasmussen, 2012 presidential election, 2012-07-12', 'Zogby, 2012 presidential election, 2012-11-06', 'Greenberg Quinlan Rosner (D), 2012 presidential election, 2012-07-17', 'YouGov, 2012 presidential election, 2012-06-28', 'Rasmussen, 2012 presidential election, 2012-04-29', 'Rasmussen, 2012 presidential election, 2012-06-03', 'Quinnipiac, 2012 presidential election, 2012-07-11', 'Reuters/Ipsos, 2012 presidential election, 2012-10-30', 'Gallup, 2012 presidential election, 2012-10-22', 'AP/GfK, 2012 presidential election, 2012-03-03', 'Rasmussen, 2012 presidential election, 2012-10-24', 'Reuters/Ipsos, 2012 presidential election, 2012-10-29', 'Ipsos, 2012 presidential election, 2012-03-03', 'Gallup, 2012 presidential election, 2012-05-23', 'YouGov, 2012 presidential election, 2012-09-19', 'Fox News, 2012 presidential election, 2012-10-10', 'Reuters/Ipsos, 2012 presidential election, 2012-10-23', 'Rasmussen, 2012 presidential election, 2012-09-17', 'Rasmussen, 2012 presidential election, 2012-05-24', 'Rasmussen, 2012 presidential election, 2012-10-20', 'Rasmussen, 2012 presidential election, 2012-09-20', 'RAND, 2012 presidential election, 2012-10-14', 'Reuters/Ipsos, 2012 presidential election, 2012-10-24', 'Rasmussen, 2012 presidential election, 2012-06-20', 'Pew, 2012 presidential election, 2012-06-25', 'YouGov, 2012 presidential election, 2012-08-02', 'Politico/GWU, 2012 presidential election, 2012-03-03', 'Gallup, 2012 presidential election, 2012-05-19', 'Rasmussen, 2012 presidential election, 2012-05-16', 'Gallup, 2012 presidential election, 2012-05-03', 'PPP (D), 2012 presidential election, 2012-07-17', 'Rasmussen, 2012 presidential election, 2012-05-18', 'Fox News, 2012 presidential election, 2012-04-30', 'Rasmussen, 2012 presidential election, 2012-09-22', 'Gallup, 2012 presidential election, 2012-10-21', 'Gallup, 2012 presidential election, 2012-09-15', 'CNN, 2012 presidential election, 2012-04-17', 'Marist, 2012 presidential election, 2012-07-15', 'ABC/WaPo, 2012 presidential election, 2012-10-24', 'Gallup, 2012 presidential election, 2012-06-25', 'IBD/TIPP, 2012 presidential election, 2012-10-19', 'CBS/NYT, 2012 presidential election, 2012-09-14', 'RAND, 2012 presidential election, 2012-10-19', 'Rasmussen, 2012 presidential election, 2012-04-26', 'Gallup, 2012 presidential election, 2012-06-09', 'Reuters/Ipsos, 2012 presidential election, 2012-10-21', 'YouGov, 2012 presidential election, 2012-07-27', 'Rasmussen, 2012 presidential election, 2012-07-30', 'PPP (D), 2012 presidential election, 2012-10-26', 'Gallup, 2012 presidential election, 2012-10-14', 'PPP (D), 2012 presidential election, 2012-05-10', 'RAND, 2012 presidential election, 2012-10-27', 'Rasmussen, 2012 presidential election, 2012-03-22', 'CNN, 2012 presidential election, 2012-06-02', 'Rasmussen, 2012 presidential election, 2012-05-07', 'Reuters/Ipsos, 2012 presidential election, 2012-11-01', 'Rasmussen, 2012 presidential election, 2012-08-06', 'IBD/TIPP, 2012 presidential election, 2012-10-18', 'Zogby, 2012 presidential election, 2012-11-04', 'CNN, 2012 presidential election, 2012-09-11', 'Reuters/Ipsos, 2012 presidential election, 2012-10-12', 'IBD/TIPP, 2012 presidential election, 2012-04-21', 'RAND, 2012 presidential election, 2012-10-22', 'PPP (D), 2012 presidential election, 2012-11-03', 'Gallup, 2012 presidential election, 2012-10-04', 'Reuters/Ipsos, 2012 presidential election, 2012-10-16', 'Reuters/Ipsos, 2012 presidential election, 2012-04-17', 'Zogby, 2012 presidential election, 2012-10-15', 'Reuters/Ipsos, 2012 presidential election, 2012-04-20', 'PPP (D), 2012 presidential election, 2012-08-07', 'Rasmussen, 2012 presidential election, 2012-07-19', 'Gallup, 2012 presidential election, 2012-10-03', 'Rasmussen, 2012 presidential election, 2012-03-12', 'Fox News, 2012 presidential election, 2012-09-27', 'Rasmussen, 2012 presidential election, 2012-04-30', 'Fox News, 2012 presidential election, 2012-06-08', 'Rasmussen, 2012 presidential election, 2012-11-02', 'Reuters/Ipsos, 2012 presidential election, 2012-11-04', 'NPR, 2012 presidential election, 2012-10-03', 'Rasmussen, 2012 presidential election, 2012-10-21', 'Rasmussen, 2012 presidential election, 2012-06-29', 'Rasmussen, 2012 presidential election, 2012-10-05', 'Rasmussen, 2012 presidential election, 2012-08-20', 'PPP (D), 2012 presidential election, 2012-07-24', 'IBD/TIPP, 2012 presidential election, 2012-11-06', 'Reuters/Ipsos, 2012 presidential election, 2012-10-07', 'Rasmussen, 2012 presidential election, 2012-11-03', 'Princeton Survey Research Assoc., 2012 presidential election, 2012-04-19', 'Rasmussen, 2012 presidential election, 2012-06-19', 'Rasmussen, 2012 presidential election, 2012-08-17', 'Pew, 2012 presidential election, 2012-10-29', 'Fox News, 2012 presidential election, 2012-06-28', 'Rasmussen, 2012 presidential election, 2012-10-28', 'CBS/NYT, 2012 presidential election, 2012-04-18', 'Gallup, 2012 presidential election, 2012-06-02', 'Rasmussen, 2012 presidential election, 2012-10-03', 'Rasmussen, 2012 presidential election, 2012-06-06', 'American Research Group, 2012 presidential election, 2012-10-01', 'Rasmussen, 2012 presidential election, 2012-05-21', 'CVOTER International, 2012 presidential election, 2012-09-22', 'Gallup, 2012 presidential election, 2012-07-21', 'YouGov, 2012 presidential election, 2012-05-17', 'Gallup, 2012 presidential election, 2012-08-11', 'Gallup, 2012 presidential election, 2012-04-24', 'PPP (D), 2012 presidential election, 2012-10-27', 'Rasmussen, 2012 presidential election, 2012-10-09', 'UConn, 2012 presidential election, 2012-10-19', 'Reuters/Ipsos, 2012 presidential election, 2012-09-10', 'Purple Strategies, 2012 presidential election, 2012-11-02', 'Rasmussen, 2012 presidential election, 2012-06-24', 'Rasmussen, 2012 presidential election, 2012-05-06', 'Gallup, 2012 presidential election, 2012-08-17', 'Rasmussen, 2012 presidential election, 2012-03-29', 'Reuters/Ipsos, 2012 presidential election, 2012-11-05', 'AP/GfK, 2012 presidential election, 2012-06-21', 'Rasmussen, 2012 presidential election, 2012-10-12', 'PPP (D), 2012 presidential election, 2012-05-02', 'Rasmussen, 2012 presidential election, 2012-10-15', 'IBD/TIPP, 2012 presidential election, 2012-10-09', 'Gallup, 2012 presidential election, 2012-08-16', 'PPP (D), 2012 presidential election, 2012-10-25', 'PPP (D), 2012 presidential election, 2012-05-16', 'Rasmussen, 2012 presidential election, 2012-06-05', 'RAND, 2012 presidential election, 2012-11-05', 'CBS/NYT, 2012 presidential election, 2012-03-03', 'Rasmussen, 2012 presidential election, 2012-07-26', 'Gallup, 2012 presidential election, 2012-11-05', 'Gallup, 2012 presidential election, 2012-06-14', 'Fox News, 2012 presidential election, 2012-05-17', 'YouGov, 2012 presidential election, 2012-08-09', 'Gallup, 2012 presidential election, 2012-10-20', 'ABC/WaPo, 2012 presidential election, 2012-11-02', 'Reuters/Ipsos, 2012 presidential election, 2012-10-02', 'Gallup, 2012 presidential election, 2012-09-19', 'Reuters/Ipsos, 2012 presidential election, 2012-10-26', 'Fox News, 2012 presidential election, 2012-03-15', 'Rasmussen, 2012 presidential election, 2012-06-14', 'Monmouth, 2012 presidential election, 2012-06-08', 'Rasmussen, 2012 presidential election, 2012-11-04', 'Rasmussen, 2012 presidential election, 2012-03-10', 'RAND, 2012 presidential election, 2012-10-10', 'Fairleigh Dickinson, 2012 presidential election, 2012-03-03', 'Gallup, 2012 presidential election, 2012-08-15'}
            Answers = 639, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.037s]
          Answers = 639, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.037s]
        Checking schema 317 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.legislative_committees_served_on', 'government.legislative_committee_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 318 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.endorsements.endorsee.newspaper_endorsements', 'base.endorsements.newspaper_endorsement.newspaper'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.newspaper_endorsements ?o1 . ?o1 fb:base.endorsements.newspaper_endorsement.newspaper ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.newspaper_endorsements ?o1 . ?o1 fb:base.endorsements.newspaper_endorsement.newspaper ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 124
            Final Answer: {'New York Daily News', 'Toledo Blade', 'Arkansas Times', 'The Modesto Bee', 'Las Vegas Sun', 'San Gabriel Valley Tribune', 'The Washington Post', 'The Boston Globe', 'The Miami Herald', 'The Seattle Times', 'Muskegon Chronicle', 'Bangor Daily News', 'Pasadena Star-News', 'St. Louis Post-Dispatch', 'Tri Valley Herald (Pleasanton)', 'Michigan Chronicle', 'Los Angeles Daily News', 'Palladium-Item', 'Sarasota Herald-Tribune', 'Daily Herald', 'Boulder Daily Camera', 'Star-News', 'The Herald-Sun', 'The Oregonian', 'Mail Tribune', 'Rockford Register Star', 'New Philadelphia Times Reporter', 'Inland Valley Daily Bulletin', 'Ouray County Plaindealer', 'Detroit Free Press', 'Oakland Tribune', 'The Charleston Gazette', 'The Salt Lake Tribune', 'Houston Chronicle', 'The Burlington Free Press', 'Daily Breeze', 'San Francisco Chronicle', 'The Hamilton JournalNews', 'The Plain Dealer', 'The News & Observer', 'The Tuscaloosa News', 'Columbia Daily Tribune', 'The Lufkin Daily News', 'The Register-Guard', 'The Cortez Journal', 'Las Cruces Sun-News', 'The Olympian', 'The New York Times', 'The Atlanta Journal-Constitution', 'The Daily Astorian', 'Daily Review', 'The Sacramento Bee', 'Globe Gazette', 'Salem Statesman-Journal', 'The Record', 'The Buffalo News', 'The San Bernardino County Sun', 'The Daily Reflector', 'Yakima Herald-Republic', 'Chicago Sun-Times', 'The (Fremont) Argus', 'The Daily Item', 'Financial Times', 'The Kansas City Star', 'The Journal Gazette', 'La Opinión', 'The Middletown Journal', 'Contra Costa Times', 'Seattle Post-Intelligencer', 'Chicago Tribune', 'Akron Beacon Journal', 'Falls Church News-Press', 'Tri-City Herald', 'The Telegraph', 'Austin American-Statesman', 'The Fresno Bee', 'The Denver Post', 'Springfield News-Sun', 'The Standard-Times', 'Asheville Citizen-Times', 'The Hawk Eye', 'The Times Record', 'Idaho Statesman', 'Pittsburgh Post-Gazette', 'The Commercial Appeal', 'The Express-Times', 'The Philadelphia Inquirer', 'The Columbian', 'Lexington Herald-Leader', 'Orlando Sentinel', 'San Jose Mercury News', 'The Durango Herald', 'New Haven Register', 'Gunnison Country Times', 'San Mateo County Times', 'Los Angeles Times', 'Marin Independent Journal', 'Concord Monitor', 'The West Palm Beach Post', 'Honolulu Star-Bulletin', 'Yamhill Valley News-Register', 'The Tennessean', 'Naples Daily News', 'The Herald-Dispatch', 'Wisconsin State Journal', 'The Capital Times', 'Dayton Daily News', 'Southwest News-Herald (Chicago)', 'The Repository', 'Walla Walla Union-Bulletin', 'The Santa Fe New Mexican', 'Aspen Daily News', 'The Storm Lake Times', 'Santa Cruz Sentinel', 'Aurora Sentinel', 'Chattanooga Times Free Press', 'Anchorage Daily News', 'The St. Cloud Times', 'The Daytona Beach News-Journal', 'El Diario La Prensa', 'The Eagle', 'The Monterey County Herald', 'Asbury Park Press', 'Press-Telegram'}
            Answers = 124, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 124, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 319 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.endorsements.endorsee.newspaper_endorsements', 'base.endorsements.newspaper_endorsement.endorsee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.newspaper_endorsements ?o1 . ?o1 fb:base.endorsements.newspaper_endorsement.endorsee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.newspaper_endorsements ?o1 . ?o1 fb:base.endorsements.newspaper_endorsement.endorsee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 320 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.endorsements.endorsee.newspaper_endorsements', 'base.endorsements.newspaper_endorsement.election'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.newspaper_endorsements ?o1 . ?o1 fb:base.endorsements.newspaper_endorsement.election ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.newspaper_endorsements ?o1 . ?o1 fb:base.endorsements.newspaper_endorsement.election ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'United States presidential election, 2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 321 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 322 / 378: {
          [('Main', '==', 'm.02mjmr', ['celebrities.celebrity.celebrity_friends', 'celebrities.friendship.friend'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.celebrity_friends ?o1 . ?o1 fb:celebrities.friendship.friend ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.celebrity_friends ?o1 . ?o1 fb:celebrities.friendship.friend ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 11
            Final Answer: {'Barbra Streisand', 'Scarlett Johansson', 'Oprah Winfrey', 'Warren Buffett', 'Steven Spielberg', 'David McIlwraith', 'Chris Rock', 'Ben Affleck', 'Sheryl Crow', 'Charlize Theron'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 323 / 378: {
          [('Main', '==', 'm.02mjmr', ['celebrities.celebrity.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'2012', '2010'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 324 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.schemastaging.person_extra.net_worth', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.schemastaging.person_extra.net_worth ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2012'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 325 / 378: {
          [('Main', '==', 'm.02mjmr', ['film.actor.film', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.actor.film ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 326 / 378: {
          [('Main', '==', 'm.02mjmr', ['film.actor.film', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.actor.film ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Him/Herself', 'Uncredited'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 327 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 328 / 378: {
          [('Main', '==', 'm.02mjmr', ['business.employer.employees', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Ben Rhodes', 'Adam Frankel'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 329 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Sidley Austin', 'Miner, Barnhill & Galland', 'University of Chicago', 'Business International Corporation'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 330 / 378: {
          [('Main', '==', 'm.02mjmr', ['business.employer.employees', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 331 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 7
            Final Answer: {'Columbia University', 'Noelani Elementary School', 'Punahou School', 'Occidental College', 'Harvard Law School', 'St. Francis of Assisi Catholic School', 'State Elementary School Menteng 01'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 332 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 333 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 7
            Final Answer: {'1981', '1970', '1968', '1988', '1979', '1971', '1966'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 334 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_nominee.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_nominee.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 5
            Final Answer: {'Jacob Bronstein', 'Nick Bogart', 'Scott Cresswell', 'Michelle Obama'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 335 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.person.spouse_s', 'people.marriage.type_of_union'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.type_of_union ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Marriage'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 336 / 378: {
          [('Main', '==', 'm.02mjmr', ['tv.tv_program_guest.appeared_on', 'tv.tv_guest_personal_appearance.appearance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_program_guest.appeared_on ?o1 . ?o1 fb:tv.tv_guest_personal_appearance.appearance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Celebrity guest'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 337 / 378: {
          [('Main', '==', 'm.02mjmr', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 338 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.award_winner.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.award_winner.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {"Time's Person of the Year", 'Grammy Award for Best Spoken Word Album', 'Nobel Peace Prize'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 339 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Time 100'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 340 / 378: {
          [('Main', '==', 'm.02mjmr', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 341 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.party', 'government.political_party_tenure.party'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.party ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Democratic Party'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 342 / 378: {
          [('Main', '==', 'm.02mjmr', ['tv.tv_actor.guest_roles', 'tv.tv_guest_role.episodes_appeared_in'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:tv.tv_actor.guest_roles ?o1 . ?o1 fb:tv.tv_guest_role.episodes_appeared_in ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 343 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 37
            Final Answer: {'2009', '2011', '2012', '2013', '2010'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 344 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'2009', '1997', '2005'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 345 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 21
            Final Answer: {'2009', '2011', '2012', '2013', '2010'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 346 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'2008', '2004'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 347 / 378: {
          [('Main', '==', 'm.02mjmr', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Congressional Black Caucus'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 348 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.primary_candidate.pres_delegate_vote_tally', 'base.politicalconventions.pres_delegate_vote_tally.convention'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.convention ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.primary_candidate.pres_delegate_vote_tally ?o1 . ?o1 fb:base.politicalconventions.pres_delegate_vote_tally.convention ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2008 Democratic National Convention'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 349 / 378: {
          [('Main', '==', 'm.02mjmr', ['music.artist.track_contributions', 'music.track_contribution.track'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:music.artist.track_contributions ?o1 . ?o1 fb:music.track_contribution.track ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {"Now Is the Time (Vote '08 remix)"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 350 / 378: {
          [('Main', '==', 'm.02mjmr', ['celebrities.celebrity.sexual_orientation', 'celebrities.sexual_orientation_phase.sexual_orientation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.sexual_orientation ?o1 . ?o1 fb:celebrities.sexual_orientation_phase.sexual_orientation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:celebrities.celebrity.sexual_orientation ?o1 . ?o1 fb:celebrities.sexual_orientation_phase.sexual_orientation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Heterosexuality'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 351 / 378: {
          [('Main', '==', 'm.02mjmr', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.type_or_format_of_presentation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.type_or_format_of_presentation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Speech', 'State of the Union address'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 352 / 378: {
          [('Main', '==', 'm.02mjmr', ['event.public_speaker.speeches_or_presentations', 'event.speech_or_presentation.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:event.public_speaker.speeches_or_presentations ?o1 . ?o1 fb:event.speech_or_presentation.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'2009', '2008', '2012'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 353 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.sued', 'base.popstra.legal_dispute.defendant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Citibank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 354 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.sued_by', 'base.popstra.legal_dispute.defendant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.sued_by ?o1 . ?o1 fb:base.popstra.legal_dispute.defendant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 355 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.company.product_endorser', 'base.popstra.paid_support.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.company.product_endorser ?o1 . ?o1 fb:base.popstra.paid_support.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.company.product_endorser ?o1 . ?o1 fb:base.popstra.paid_support.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 356 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.organization.supporter', 'base.popstra.support.supporter'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.organization.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.organization.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 7
            Final Answer: {'Dennis Hopper', 'Brody Jenner', 'Angelina Jolie', 'Anne Hathaway', 'Kirsten Dunst', 'Matt Damon', 'Gwyneth Paltrow'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 357 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.supporter', 'base.popstra.support.supporter'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.supporter ?o1 . ?o1 fb:base.popstra.support.supporter ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 358 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.eats_at', 'base.popstra.restaurant_choice.diner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.eats_at ?o1 . ?o1 fb:base.popstra.restaurant_choice.diner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 359 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.vacations_in', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.vacations_in ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 360 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.religion', 'base.popstra.religion_choice.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.religion ?o1 . ?o1 fb:base.popstra.religion_choice.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 361 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.appointer.appointment_made', 'people.appointment.declared_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.declared_on ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 85
            Final Answer: {'2009', '2008', '2010'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 362 / 378: {
          [('Main', '==', 'm.02mjmr', ['people.appointer.appointment_made', 'people.appointment.appointee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 245
            Final Answer: {'Neal S. Wolin', 'Dennis M. McCarthy', 'Martha Kanter', 'Laurie O. Robinson', 'Alexander Vershbow', 'Philip D. Murphy', 'William J. Burns', 'Francis Collins', 'Carmen Nazario', 'Catherine Zoi', 'Mark Gitenstein', 'Elena Kagan', 'Johnnie Carson', 'Larry Echo Hawk', 'Warren F. Miller, Jr.', 'Deborah A. P. Hersman', 'Joseph C. Szabo', 'Demetrios Marantis', 'Jonathan B. Jarvis', 'Dennis F. Hightower', 'John D. Porcari', 'Christina  Romer', 'Ron Sims', 'Jeffrey D. Feltman', 'Elizabeth L. King', 'Robert F. Hale', 'Gabriella Gomez', 'Yvette Roubideaux', 'J. Randolph Babbitt', 'Shere Abbott', 'Jane Holl Lute', 'John M. McHugh', 'Ertharin Cousin', 'Ray LaHood', 'Janet Napolitano', 'Thomas J. Perrelli', 'April Boyd', 'Ivan K. Fong', 'Rosa Gumataotao Rios', 'Ron Bloom', 'Leon Panetta', 'Mathy Stanislaus', 'John U. Sepulveda', 'Gina McCarthy', 'Jon Huntsman, Jr.', 'Victor Mendez', 'Aneesh Chopra', 'David W. Ogden', 'Scott Blake Harris', 'Charles Rivkin', 'Thelma Melendez', 'John T. Morton', 'Cranston J. Mitchell', 'Philip J. Crowley', 'Cynthia Giles', 'William Eacho', 'Nancy Jo Powell', 'Anthony M. Babauta', 'Pearlie Reed', 'Matthew Barzun', 'James Steinberg', 'Ellen Tauscher', 'Richard Verma', 'Jeffrey Zients', 'John Trasviña', 'Seth Harris', 'Hilda Solis', 'Judith A. McHale', 'Peter A. Kovar', 'Tammy Duckworth', 'Ivo Daalder', 'Eric Shinseki', 'Kathleen Martinez', 'Hilary Tompkins', 'Sonia Sotomayor', 'Mary Jo Wills', 'James B. Foley', 'Mary Schapiro', 'James Warren Miller', 'W. Scott Gould', 'Timothy Geithner', 'Roy Kienitz', 'Gayleatha B. Brown', 'Christopher R. Hill', 'Christopher Dell', 'Maria Otero', 'Ashton Carter', 'Jose D. Riojas', 'Cynthia Stroum', 'Karl Eikenberry', 'David Kappos', 'Charles P. Rose', 'Luis CdeBaca', 'James N. Miller', 'Stephen Alan Owens', 'Daniel Poneman', 'David B. Sandalow', 'Wilma Lewis', 'Vilma Socorro Martínez', 'David Hoadley Thorne', 'Howard W. Gutman', 'Gordon S. Heddell', 'Cameron Kerry', 'Peter H. Appel', 'Kathleen Merrigan', 'Paul N. Stockton', 'Jeh Johnson', 'Steve Isakowitz', 'David Stevens', 'Jane Oates', 'Nancy Sutley', 'Ray Mabus', 'Esther Brimmer', 'Martha Campbell', 'Carlos Pascual', 'John Q. Easton', 'A. Thomas McLellan', 'Miguel H. Díaz', 'Samuel L. Kaplan', 'Lanny A. Breuer', 'Lori Garver', 'Patricia A. Butenis', 'Scott H. DeLisi', 'Tom Strickland', 'Lawrence E. Strickling', 'Alan Solomont', 'Douglas Kmiec', 'Daniel Tangherlini', 'Krysta Harden', 'Janey Thornton', 'Thomas A. Shannon, Jr.', 'Kenneth H. Merten', 'Robert O. Blake, Jr.', 'Robert Groves', 'David J. Hayes', 'Anthony W. Miller', 'Sandra B. Henriquez', 'Michael Nacht', 'Karen Mills', 'Peter Silva', 'Don Beyer', 'Vinai K. Thummalapally', 'Susan Kurland', 'Julius Genachowski', 'Aaron S. Williams', 'Judith G. Garber', 'Jack Lew', 'Susan Rice', 'Peter R. Orszag', 'Rajiv Shah', 'Robert S. Rivkin', 'Michael S. Barr', 'Raphael Bostic', 'Kim N. Wallace', 'Ken Salazar', 'James B. Warlick Jr.', 'Rebecca M. Blank', 'Joan M. Evans', 'Christine A. Varney', 'Craig Fugate', 'Barry B. White', 'Robert Hormats', 'Wallace Carll Gregson', 'Kristina M. Johnson', 'Dana Grant Gresham', 'Stephen L. Ondra', 'Kevin Concannon', 'Gary Locke', 'Ron Kirk', 'William F. Brinkman', 'Edward Avalos', 'Michael L. Connor', 'Carmel Martin', 'Laurie S. Fulton', 'Phyllis Borzi', 'Alan B. Krueger', 'Margaret A. Hamburg', 'Tony West', 'Kurt M. Campbell', 'Dawn Johnsen', 'Michael C. Polt', 'John Roos', 'Ellen Moran', 'Louis Susman', 'Alexander Garza', 'Jeff Bleich', 'Kathy Greenlee', 'Shaun Donovan', 'John Fernandez', 'Eric Goosby', 'Susan F. Burk', 'Hillary Rodham Clinton', 'Peter M. Rogoff', 'Evan Jay Segal', 'David S. Cohen', 'Roger W. Baker', 'Gil Kerlikowske', 'Teddy B. Taylor', 'Steven E. Koonin', 'Richard G. Newell', 'Rob Nabors', 'Joe Edd Leonard', 'Jonathan Jarvis', 'John Holdren', 'Stuart A. Levey', 'Jonathan Adelstein', 'Michèle Flournoy', 'Andrew J. Shapiro', 'Rand Beers', 'T. Michael Kerr', 'Alejandro Mayorkas', 'Kathleen Sebelius', 'Eric Holder', 'Dallas Paul Tonsager', 'Melanne Verveer', 'Michelle J. DePass', 'Fay Hartog-Levin', 'David Huebner', 'William J. Lynn III', 'Dan Rooney', 'Mercedes M. Márquez', 'Timothy J. Roemer', 'Sam D. Hamilton', 'Gary Gensler', 'Charles Bolden', 'Rose Gottemoeller', 'Nicole Lurie', 'David Heyman', 'Philip Gordon', 'Rhea S. Suh', 'Craig E. Hooks', 'Herbert M. Allison', 'Anne E. Derse', 'John Berry', 'Lisa P. Jackson', 'Steven Chu', 'Inés R. Triay', 'Zachary Lemnios', 'Howard Koh', 'Will A. Gunn', 'Daniel Benjamin', 'Russlynn H. Ali', 'Anne Castle', 'Bill Corr', 'Tom Vilsack'}
            Answers = 245, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 245, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 363 / 378: {
          [('Main', '==', 'm.02mjmr', ['architecture.building_occupant.buildings_occupied', 'architecture.occupancy.occupant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.occupant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:architecture.building_occupant.buildings_occupied ?o1 . ?o1 fb:architecture.occupancy.occupant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 364 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.legislative_committees_served_on', 'government.legislative_committee_membership.committee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.committee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.committee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'United States Senate Committee on Foreign Relations', 'United States Senate Committee on Health, Education, Labor, and Pensions'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 365 / 378: {
          [('Main', '==', 'm.02mjmr', ['government.politician.legislative_committees_served_on', 'government.legislative_committee_membership.session'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.session ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.session ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'110th United States Congress'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 366 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Bo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 367 / 378: {
          [('Main', '==', 'm.02mjmr', ['biology.animal_owner.animals_owned', 'biology.animal_ownership.animal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.animal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.animal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Bo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 368 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.endorsements.endorsee.personal_endorsements', 'base.endorsements.personal_endorsement.endorsee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.endorsee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.endorsee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 369 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.endorsements.endorsee.personal_endorsements', 'base.endorsements.personal_endorsement.endorser'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.endorser ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.endorser ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 4
            Final Answer: {'Lincoln Chafee', 'Hillary Rodham Clinton', 'Colin Powell', 'Scott McClellan'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 370 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.conventions_spoken_at'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:22] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.conventions_spoken_at ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'2004 Democratic National Convention', '2008 Democratic National Convention'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 371 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.endorsements.endorsee.personal_endorsements', 'base.endorsements.personal_endorsement.election'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.election ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.election ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Democratic Party presidential primaries, 2008', 'United States presidential election, 2008'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 372 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 373 / 378: {
          [('Main', '==', 'm.02mjmr', ['biology.animal_owner.animals_owned', 'biology.animal_ownership.owners'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.owners ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:biology.animal_owner.animals_owned ?o1 . ?o1 fb:biology.animal_ownership.owners ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 374 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.endorsements.endorsee.personal_endorsements', 'base.endorsements.personal_endorsement.date_announced'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.date_announced ?o2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 WHERE { fb:m.02mjmr fb:base.endorsements.endorsee.personal_endorsements ?o1 . ?o1 fb:base.endorsements.personal_endorsement.date_announced ?o2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.036s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.036s]
        Checking schema 375 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.venue'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.venue ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.venue ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Sports Authority Field at Mile High'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 376 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.politicalconventions.convention_speaker.conventions_spoken_at', 'base.politicalconventions.convention_speech.speaker'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.politicalconventions.convention_speaker.conventions_spoken_at ?o1 . ?o1 fb:base.politicalconventions.convention_speech.speaker ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 377 / 378: {
          [('Main', '==', 'm.02mjmr', ['base.popstra.celebrity.friendship', 'base.popstra.friendship.participant']), ('Entity', '==', 'm.0157m', ['government.us_vice_president.to_president'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:government.us_vice_president.to_president fb:m.0157m . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:base.popstra.celebrity.friendship ?o1 . ?o1 fb:base.popstra.friendship.participant ?o2 . ?o2 fb:government.us_vice_president.to_president fb:m.0157m . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr', 'm.0157m'}
            Query return lines = 1
            Final Answer: {'Al Gore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        365 / 378 coarse schemas kept with ans_size > 0.
      } [5.329s]
      Coarse level ended, resulting in 365 schemas.
    } [8.397s]
    Type level searching (total types = 10): {
      Current: 0 / 365
[{'type.int'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'religion.religion'}]
[{'type.float'}]
[{'base.activism.activism_issue'}]
[{'government.us_vice_president'}]
[{'music.instrument'}]
[{'music.recording'}]
[{'type.int'}]
[{'symbols.namesake'}]
[{'book.book_edition'}]
[{'film.film'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'base.saturdaynightlive.snl_character'}]
[{'base.inaugurations.inauguration'}]
[{'book.written_work'}]
[{'government.election_campaign'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.fictional_character'}]
[{'base.politicalconventions.political_convention'}]
[{'type.int'}]
[{'base.americancomedy.celebrity_impressionist'}]
[{'base.qualia.recreational_drug'}]
[{'book.book_edition'}]
[{'base.argumentmaps.apology'}]
[{'people.profession'}]
[{'book.written_work'}]
[{'base.qualia.recreational_drug'}]
[{'type.int'}]
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.person'}]
[{'type.float'}]
[{'media_common.quotation'}]
[{'government.us_vice_president'}]
[{'type.int'}]
[{'influence.influence_node'}]
[{'symbols.namesake'}]
[{'book.book_edition'}]
[{'film.film'}]
[{'base.crime.law_firm'}]
[{'media_common.quotation'}]
[{'people.person'}]
[{'type.float'}]
[{'base.saturdaynightlive.snl_character'}]
[{'location.location'}]
[{'book.poem'}]
[{'base.inaugurations.inauguration'}]
[{'influence.influence_node'}]
[{'book.written_work'}]
[{'government.election_campaign'}]
[{'base.crime.lawyer_type'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'film.film'}]
[{'fictional_universe.fictional_character'}]
[{'broadcast.content'}]
[{'visual_art.artwork'}]
[{'base.politicalconventions.political_convention'}]
[{'type.int'}]
[{'base.qualia.recreational_drug'}]
[{'base.propositions.proposition'}]
[{'user.robert.x2008_presidential_election.campaign'}]
[{'people.profession'}]
[{'book.written_work'}]
[{'base.qualia.recreational_drug'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'people.marriage'}, {'location.location'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'tv.tv_guest_role'}, {'tv.special_tv_performance_type'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
      Current: 100 / 365
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.non_character_role'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'base.politicalconventions.primary_candidate'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime_accuser'}]
[{'event.speech_or_presentation'}, {'event.public_speaker'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.restaurant'}]
[{'base.popstra.canoodled'}, {'base.popstra.celebrity'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
[{'people.appointment'}, {'people.appointer'}]
[{'law.legal_case_party_relationship'}, {'law.legal_case'}]
[{'architecture.occupancy'}, {'type.datetime'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'film.performance'}, {'film.film'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_personality'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'type.float'}]
[{'base.crime.criminal_conviction'}, {'base.crime.convicted_criminal'}]
[{'base.crime.criminal_conviction'}, {'base.crime.crime'}]
[{'royalty.chivalric_order_membership'}, {'royalty.chivalric_order_member'}]
[{'event.speech_or_presentation'}, {'event.presented_work'}]
[{'base.popstra.operation'}, {'base.popstra.procedure'}]
[{'base.popstra.support'}, {'base.popstra.organization'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.company'}]
[{'base.popstra.party_attendance_person'}, {'base.popstra.celebrity'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'people.appointment'}, {'people.appointed_role'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'law.legal_case_party_relationship'}, {'law.litigant'}]
[{'architecture.occupancy'}, {'architecture.building'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.non_character_role'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'government.political_party_tenure'}, {'government.political_party'}]
[{'tv.tv_guest_role'}, {'tv.tv_series_episode'}]
[{'influence.peer_relationship'}, {'influence.influence_node'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'tv.tv_regular_personal_appearance'}, {'tv.tv_program'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'base.politicalconventions.political_convention'}]
[{'base.crime.criminal_conviction'}, {'base.fight.crime_type'}]
[{'base.crime.criminal_conviction'}, {'base.fight.sentence'}]
[{'royalty.chivalric_order_membership'}, {'royalty.order_of_chivalry'}]
[{'base.crime.crime_accusation'}, {'base.crime.crime_suspect'}]
[{'base.crime.crime_accusation'}, {'type.datetime'}]
[{'event.speech_or_presentation'}, {'event.type_of_public_presentation'}]
[{'event.speech_or_presentation'}, {'type.datetime'}]
[{'base.popstra.dated'}, {'base.popstra.celebrity'}]
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
[{'base.popstra.public_insult'}, {'base.popstra.celebrity'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.operation'}, {'base.popstra.celebrity'}]
[{'base.popstra.support'}, {'base.popstra.celebrity'}]
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
      Current: 200 / 365
[{'base.popstra.infidelity'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.canoodled'}, {'type.datetime'}]
[{'base.popstra.party_attendance_person'}, {'base.popstra.party'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.celebrity'}]
[{'people.appointment'}, {'type.datetime'}]
[{'people.appointment'}, {'people.appointee'}]
[{'law.legal_case_party_relationship'}, {'law.legal_party_role'}]
[{'architecture.occupancy'}, {'architecture.building_occupant'}]
[{'architecture.occupancy'}, {'type.datetime'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'user.dfhuynh.default_domain.assassination'}, {'type.datetime'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.method_of_assassination'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.political_convention'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassinated_person'}]
[{'user.dfhuynh.default_domain.assassination'}, {'location.location'}]
[{'base.politicalconventions.convention_speech'}, {'type.datetime'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassination_outcome'}]
[{'user.dfhuynh.default_domain.assassination'}, {'user.dfhuynh.default_domain.assassin'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.convention_speaker'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'people.person'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'people.marriage'}, {'people.person'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_program_guest'}]
[{'film.personal_film_appearance'}, {'film.personal_film_appearance_type'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'award.ranking'}, {'type.int'}]
[{'government.political_party_tenure'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'government.government_position_held'}, {'government.legislative_session'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'base.schemastaging.pronunciation'}, {'type.property'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'base.politicalconventions.primary_candidate'}]
[{'base.firsts.first_achievement'}, {'base.firsts.achievement'}]
[{'event.speech_or_presentation'}, {'event.public_speaker'}]
[{'event.speech_or_presentation'}, {'event.speech_topic'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
[{'base.popstra.paid_support'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.restaurant'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.religion'}]
[{'people.appointment'}, {'people.appointer'}]
[{'base.litcentral.person_full_name'}, {'base.givennames.given_name'}]
[{'base.litcentral.person_full_name'}, {'people.family_name'}]
[{'architecture.occupancy'}, {'type.datetime'}]
[{'government.election_poll_score'}, {'government.polled_entity'}]
[{'government.election_poll_score'}, {'type.float'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'people.place_lived'}, {'location.location'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'people.marriage'}, {'type.datetime'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.tv_series_episode'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'tv.tv_guest_role'}, {'tv.tv_actor'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'type.float'}]
[{'music.track_contribution'}, {'music.artist'}]
[{'music.track_contribution'}, {'music.performance_role'}]
[{'celebrities.sexual_orientation_phase'}, {'celebrities.celebrity'}]
[{'base.firsts.first_achievement'}, {'base.firsts.first_achievement_category'}]
[{'base.firsts.first_achievement'}, {'base.firsts.first'}]
[{'event.speech_or_presentation'}, {'event.presented_work'}]
[{'event.speech_or_presentation'}, {'event.public_speaking_event'}]
[{'base.popstra.support'}, {'base.popstra.organization'}]
[{'base.popstra.support'}, {'base.popstra.organization'}]
[{'base.popstra.fashion_choice'}, {'base.popstra.company'}]
      Current: 300 / 365
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'people.appointment'}, {'people.appointed_role'}]
[{'base.litcentral.person_full_name'}, {'base.litcentral.named_person'}]
[{'architecture.occupancy'}, {'architecture.building'}]
[{'government.election_poll_score'}, {'government.election_poll'}]
[{'government.legislative_committee_membership'}, {'government.politician'}]
[{'base.endorsements.newspaper_endorsement'}, {'base.endorsements.endorsing_newspaper'}]
[{'base.endorsements.newspaper_endorsement'}, {'base.endorsements.endorsee'}]
[{'base.endorsements.newspaper_endorsement'}, {'government.election'}]
[{'base.famouspets.pet_ownership'}, {'type.datetime'}]
[{'celebrities.friendship'}, {'celebrities.celebrity'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'people.marriage'}, {'people.marriage_union_type'}]
[{'tv.tv_guest_personal_appearance'}, {'tv.non_character_role'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'award.award_honor'}, {'award.award_category'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'government.political_party_tenure'}, {'government.political_party'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'base.politicalconventions.pres_delegate_vote_tally'}, {'base.politicalconventions.political_convention'}]
[{'music.track_contribution'}, {'music.recording'}]
[{'celebrities.sexual_orientation_phase'}, {'celebrities.sexual_orientation'}]
[{'event.speech_or_presentation'}, {'event.type_of_public_presentation'}]
[{'event.speech_or_presentation'}, {'type.datetime'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.legal_dispute'}, {'base.popstra.celebrity'}]
[{'base.popstra.paid_support'}, {'base.popstra.company'}]
[{'base.popstra.support'}, {'base.popstra.celebrity'}]
[{'base.popstra.support'}, {'base.popstra.celebrity'}]
[{'base.popstra.restaurant_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'base.popstra.religion_choice'}, {'base.popstra.celebrity'}]
[{'people.appointment'}, {'type.datetime'}]
[{'people.appointment'}, {'people.appointee'}]
[{'architecture.occupancy'}, {'architecture.building_occupant'}]
[{'government.legislative_committee_membership'}, {'government.legislative_committee'}]
[{'government.legislative_committee_membership'}, {'government.legislative_session'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'biology.animal_ownership'}, {'biology.owned_animal'}]
[{'base.endorsements.personal_endorsement'}, {'base.endorsements.endorsee'}]
[{'base.endorsements.personal_endorsement'}, {'base.endorsements.endorsing_person'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.political_convention'}]
[{'base.endorsements.personal_endorsement'}, {'government.election'}]
[{'base.politicalconventions.convention_speech'}, {'type.datetime'}]
[{'biology.animal_ownership'}, {'biology.animal_owner'}]
[{'base.endorsements.personal_endorsement'}, {'type.datetime'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.convention_venue'}]
[{'base.politicalconventions.convention_speech'}, {'base.politicalconventions.convention_speaker'}]
[{'base.popstra.friendship'}, {'base.popstra.celebrity'}]
      65 typed schemas retrieved from 365 coarse schemas.
      Calculating F1 for 65 typed schemas: {
        Current: 0 / 65
        Checking schema 0 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 1 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Chelsea Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 3 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.children']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0157m fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.parents']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 5 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.parents']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 6 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.parents']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 7 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.parents']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.parents ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 8 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.us_president.vice_president']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.us_vice_president'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.us_president.vice_president ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Joe Biden'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 9 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.children']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_vice_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 10 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.children']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:government.us_president . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 11 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.children']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Malia Ann Obama', 'Natasha Obama'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 12 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.children']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:people.person.children ?o1 . ?o1 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 13 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.election_campaigns']), ('Type', '==', 'government.us_vice_presidential_campaign', ['type.object.type'])]
          var_types: [{'government.election_campaign', 'government.us_vice_presidential_campaign'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.type fb:government.us_vice_presidential_campaign . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02mjmr fb:government.politician.election_campaigns ?o1 . ?o1 fb:type.object.type fb:government.us_vice_presidential_campaign . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 14 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 15 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.037s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.037s]
        Checking schema 17 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 18 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 2
            Final Answer: {'Hillary Rodham Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 19 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 20 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 21 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 22 / 65: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 23 / 65: {
          [('Main', '==', 'm.0157m', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 24 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 25 / 65: {
          [('Main', '==', 'm.0157m', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 26 / 65: {
          [('Main', '==', 'm.0157m', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0157m fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0157m'}
            Query return lines = 1
            Final Answer: {'Bill Clinton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 27 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 28 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 29 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 30 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.places_lived', 'people.place_lived.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 31 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 32 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 33 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Auma Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 34 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.sibling_s', 'people.sibling_relationship.sibling']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.sibling_relationship'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 35 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 36 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 37 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 2
            Final Answer: {'Michelle Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 38 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.spouse_s', 'people.marriage.spouse']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'people.marriage'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.spouse_s ?o1 . ?o1 fb:people.marriage.spouse ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 39 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.party', 'government.political_party_tenure.politician']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.political_party_tenure'}, {'government.politician', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 40 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.party', 'government.political_party_tenure.politician']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.political_party_tenure'}, {'government.us_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.party ?o1 . ?o1 fb:government.political_party_tenure.politician ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 41 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.appointer.appointment_made', 'people.appointment.appointed_by']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'people.appointment'}, {'government.us_president', 'people.appointer'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.appointer.appointment_made ?o1 . ?o1 fb:people.appointment.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 42 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.polled_entity.poll_scores', 'government.election_poll_score.subject']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'government.election_poll_score'}, {'film.person_or_entity_appearing_in_film', 'government.polled_entity'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.subject ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.polled_entity.poll_scores ?o1 . ?o1 fb:government.election_poll_score.subject ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.195s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.195s]
        Checking schema 43 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.politician', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:23] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 44 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 45 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.politician', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 46 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.office_holder']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 47 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.office_position_or_title']), ('Type', '==', 'government.government_office_or_title', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_or_title'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.type fb:government.government_office_or_title . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.type fb:government.government_office_or_title . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 50
            Final Answer: {'Director, United States Office of Management and Budget', 'United States Secretary of the Interior', 'Deputy Director, United States Office of Management and Budget', 'United States Secretary of the Navy', 'White House Director of Public Liaison', 'United States Secretary of Education', 'United States Secretary of Veterans Affairs', 'United States Solicitor General', 'United States Secretary of State', 'United States Secretary of Transportation', 'United States Secretary of Labor', 'Senior Advisor to the President of the United States', 'Director of Recovery for Auto Communities and Workers', 'United States Trade Representative', 'United States Deputy Secretary of Labor', 'White House Social Secretary', 'United States Ambassador to Ireland', 'Under Secretary of Defense for Personnel and Readiness', 'Special Advisor for the Consumer Financial Protection Bureau', 'White House Chief of Staff', 'National Security Advisor', 'White House Press Secretary', 'United States Deputy Secretary of the Treasury', 'Deputy White House Communications Director', 'White House Counsel', 'United States Secretary of Defense', 'Director of the Central Intelligence Agency', 'United States Ambassador to the United Kingdom', 'Chairperson, Securities and Exchange Commission', 'United States Secretary of Housing and Urban Development', 'Assistant Secretary of Defense for Asian and Pacific Security Affairs', 'Director for Multilateral Affairs', 'White House Military Office', 'White House Deputy Chief of Staff', 'Chief of Staff to the First Lady of the United States', 'Director of Intergovernmental Affairs', 'Associate Director, White House Office of Public Liaison', 'United States Secretary of Agriculture', 'United States Surgeon General', 'Director of the Consumer Financial Protection Bureau', 'General Counsel for the U.S. Department of Homeland Security', 'United States Secretary of Homeland Security', 'Counselor to the President', 'Under Secretary of State for Democracy and Global Affairs', 'Head of National Economic Council', 'Assistant to the President for Energy and Climate Change', 'United States Secretary of the Treasury', 'United States Secretary of Energy', 'Director of the U.S. Immigration and Customs Enforcement', 'United States Ambassador to the United Nations'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.043s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.044s]
        Checking schema 48 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.government_positions_held', 'government.government_position_held.office_position_or_title']), ('Type', '==', 'government.government_office_or_title', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.government_office_or_title'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.type fb:government.government_office_or_title . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.government_positions_held ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.type fb:government.government_office_or_title . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 3
            Final Answer: {'United States Senator', 'President of the United States', 'Illinois State Senator'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 49 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.political_appointer.appointees', 'government.government_position_held.appointed_by']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.government_position_held'}, {'government.us_president', 'government.political_appointer'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.political_appointer.appointees ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 50 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.legislative_committees_served_on', 'government.legislative_committee_membership.member']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'government.legislative_committee_membership'}, {'government.politician', 'government.us_vice_president'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.member ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.member ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 51 / 65: {
          [('Main', '==', 'm.02mjmr', ['government.politician.legislative_committees_served_on', 'government.legislative_committee_membership.member']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'government.legislative_committee_membership'}, {'government.us_president', 'government.politician'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.member ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:government.politician.legislative_committees_served_on ?o1 . ?o1 fb:government.legislative_committee_membership.member ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 52 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 53 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 54 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 55 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 56 / 65: {
          [('Main', '==', 'm.02mjmr', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 57 / 65: {
          [('Main', '==', 'm.02mjmr', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 58 / 65: {
          [('Main', '==', 'm.02mjmr', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 59 / 65: {
          [('Main', '==', 'm.02mjmr', ['business.employer.employees', 'business.employment_tenure.person']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:business.employer.employees ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 60 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.student']), ('Type', '==', 'government.us_vice_president', ['type.object.type'])]
          var_types: [{'education.education'}, {'government.us_vice_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_vice_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 61 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.student']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'education.education'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 62 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.student']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'education.education'}, {'film.person_or_entity_appearing_in_film', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 63 / 65: {
          [('Main', '==', 'm.02mjmr', ['people.person.education', 'education.education.student']), ('Type', '==', 'medicine.notable_person_with_medical_condition', ['type.object.type'])]
          var_types: [{'education.education'}, {'people.person', 'medicine.notable_person_with_medical_condition'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:medicine.notable_person_with_medical_condition . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 64 / 65: {
          [('Main', '==', 'm.02mjmr', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person']), ('Type', '==', 'film.person_or_entity_appearing_in_film', ['type.object.type'])]
          var_types: [{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:18:24] Q_Schema Request: {
            WebQ_2193|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02mjmr fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.type fb:film.person_or_entity_appearing_in_film . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02mjmr'}
            Query return lines = 1
            Final Answer: {'Barack Obama'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        28 / 65 typed schemas kept with ans_size > 0.
      } [1.144s]
      Typed level ended, resulting in 393 schemas.
    } [1.169s]
    Time level searching (total times = 0): {
      Current: 0 / 393
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'broadcast.content.production_end', 'broadcast.content.production_start'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'user.robert.x2008_presidential_election.campaign.began_campaign', 'user.robert.x2008_presidential_election.campaign.ended_campaign'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
      Current: 100 / 393
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.operation.date'}, set()]
self.var_time_preds: [{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.party_attendance_person.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'base.crime.criminal_conviction.date_arrested'}, set()]
self.var_time_preds: [{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, {'royalty.order_of_chivalry.date_last_awarded', 'royalty.order_of_chivalry.date_founded'}]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.dated.start_date', 'base.popstra.dated.end_date'}, set()]
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
self.var_time_preds: [{'base.popstra.public_insult.date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.operation.date'}, set()]
self.var_time_preds: [{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
      Current: 200 / 393
self.var_time_preds: [{'base.popstra.infidelity.date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.canoodled.date'}, set()]
self.var_time_preds: [{'base.popstra.party_attendance_person.date'}, {'base.popstra.party.date'}]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'user.dfhuynh.default_domain.assassination.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.legislative_session.date_ended', 'government.legislative_session.date_began'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), {'tv.tv_series_episode.air_date'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'music.artist.active_end', 'music.artist.active_start'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'celebrities.sexual_orientation_phase.end', 'celebrities.sexual_orientation_phase.start'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.fashion_choice.date'}, set()]
      Current: 300 / 393
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [set(), {'government.election_poll.poll_start_date', 'government.election_poll.release_date', 'government.election_poll.poll_end_date'}]
self.var_time_preds: [{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, set()]
self.var_time_preds: [{'base.endorsements.newspaper_endorsement.date_published'}, set()]
self.var_time_preds: [{'base.endorsements.newspaper_endorsement.date_published'}, set()]
self.var_time_preds: [{'base.endorsements.newspaper_endorsement.date_published'}, {'government.election.election_year'}]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'music.recording.date'}]
self.var_time_preds: [{'celebrities.sexual_orientation_phase.end', 'celebrities.sexual_orientation_phase.start'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'event.speech_or_presentation.date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
self.var_time_preds: [{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
self.var_time_preds: [{'base.popstra.restaurant_choice.date'}, set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
self.var_time_preds: [{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, {'government.legislative_committee.date_dissolved', 'government.legislative_committee.date_formed'}]
self.var_time_preds: [{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, {'government.legislative_session.date_ended', 'government.legislative_session.date_began'}]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
self.var_time_preds: [{'base.endorsements.personal_endorsement.date_announced'}, set()]
self.var_time_preds: [{'base.endorsements.personal_endorsement.date_announced'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'base.endorsements.personal_endorsement.date_announced'}, {'government.election.election_year'}]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
self.var_time_preds: [{'base.endorsements.personal_endorsement.date_announced'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'base.politicalconventions.convention_speech.date'}, set()]
self.var_time_preds: [{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
self.var_time_preds: [{'people.appointment.declared_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 393 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 393 schemas.
    } [0.009s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 393
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'music.recording.date'}]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[{'film.film.initial_release_date'}]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'media_common.quotation.date'}]
[set()]
[set()]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[{'film.film.initial_release_date'}]
[set()]
[{'media_common.quotation.date'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[{'film.film.initial_release_date'}]
[set()]
[{'broadcast.content.production_end', 'broadcast.content.production_start'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[set()]
[{'user.robert.x2008_presidential_election.campaign.began_campaign', 'user.robert.x2008_presidential_election.campaign.ended_campaign'}]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
      Current: 100 / 393
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[set(), set()]
[set(), set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.canoodled.date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), {'film.film.initial_release_date'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, set()]
[set(), set()]
[set(), set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.operation.date'}, set()]
[{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
[{'base.popstra.party_attendance_person.date'}, set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'tv.tv_regular_personal_appearance.to', 'tv.tv_regular_personal_appearance.from'}, {'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'base.crime.criminal_conviction.date_arrested'}, set()]
[{'royalty.chivalric_order_membership.from', 'royalty.chivalric_order_membership.to'}, {'royalty.order_of_chivalry.date_last_awarded', 'royalty.order_of_chivalry.date_founded'}]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'base.crime.crime_accusation.date_accusation_revoked', 'base.crime.crime_accusation.date_of_accusation'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.dated.start_date', 'base.popstra.dated.end_date'}, set()]
[{'base.popstra.public_insult.date'}, set()]
[{'base.popstra.public_insult.date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.operation.date'}, set()]
[{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
[{'base.popstra.infidelity.date'}, set()]
      Current: 200 / 393
[{'base.popstra.infidelity.date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.canoodled.date'}, set()]
[{'base.popstra.party_attendance_person.date'}, {'base.popstra.party.date'}]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'user.dfhuynh.default_domain.assassination.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.legislative_session.date_ended', 'government.legislative_session.date_began'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[set(), set()]
[set(), set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), {'tv.tv_series_episode.air_date'}]
[set(), {'film.film.initial_release_date'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.ranking.year'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), {'music.artist.active_end', 'music.artist.active_start'}]
[set(), set()]
[{'celebrities.sexual_orientation_phase.end', 'celebrities.sexual_orientation_phase.start'}, set()]
[set(), set()]
[set(), set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
[{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
[{'base.popstra.fashion_choice.date'}, set()]
      Current: 300 / 393
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[set(), {'government.election_poll.poll_start_date', 'government.election_poll.release_date', 'government.election_poll.poll_end_date'}]
[{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, set()]
[{'base.endorsements.newspaper_endorsement.date_published'}, set()]
[{'base.endorsements.newspaper_endorsement.date_published'}, set()]
[{'base.endorsements.newspaper_endorsement.date_published'}, {'government.election.election_year'}]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[set(), set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'award.award_nomination.year'}, set()]
[{'people.marriage.to', 'people.marriage.from'}, set()]
[set(), set()]
[set(), set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[set(), {'music.recording.date'}]
[{'celebrities.sexual_orientation_phase.end', 'celebrities.sexual_orientation_phase.start'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'event.speech_or_presentation.date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.legal_dispute.end_date', 'base.popstra.legal_dispute.start_date'}, set()]
[{'base.popstra.paid_support.end_date', 'base.popstra.paid_support.start_date'}, set()]
[{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
[{'base.popstra.support.end_date', 'base.popstra.support.start_date'}, set()]
[{'base.popstra.restaurant_choice.date'}, set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'base.popstra.religion_choice.end_date', 'base.popstra.religion_choice.start_date'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'people.appointment.declared_on'}, set()]
[{'architecture.occupancy.to', 'architecture.occupancy.from'}, set()]
[{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, {'government.legislative_committee.date_dissolved', 'government.legislative_committee.date_formed'}]
[{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, {'government.legislative_session.date_ended', 'government.legislative_session.date_began'}]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
[{'base.endorsements.personal_endorsement.date_announced'}, set()]
[{'base.endorsements.personal_endorsement.date_announced'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'base.endorsements.personal_endorsement.date_announced'}, {'government.election.election_year'}]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'biology.animal_ownership.from', 'biology.animal_ownership.to'}, set()]
[{'base.endorsements.personal_endorsement.date_announced'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'base.politicalconventions.convention_speech.date'}, set()]
[{'base.popstra.friendship.start_date', 'base.popstra.friendship.end_date'}, set()]
[{'people.person.date_of_birth'}]
[set()]
[{'people.person.date_of_birth'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[set(), set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[set(), {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'people.marriage.to', 'people.marriage.from'}, {'people.person.date_of_birth'}]
[{'government.political_party_tenure.to', 'government.political_party_tenure.from'}, set()]
[{'people.appointment.declared_on'}, set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.legislative_committee_membership.end_date', 'government.legislative_committee_membership.start_date'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[set(), set()]
      0 ordinal schemas retrieved from 393 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 393 schemas.
    } [0.010s]
    [2020-12-03 14:18:24] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 "Barack Obama ""Hope"" poster"@en ?type1 WHERE { fb:m.02mjmr fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name "Barack Obama ""Hope"" poster"@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
    393 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2193_schema].
  } [1m11.713s]
  Entering Q 2194 / 5810 [b'what are the names of harry potter books in order?']: {
    Show 6 E + 10 T + 0 Tm + 0 Ord = 16 linkings: {
      #00 Entity: [2, 4) (the names) == m.01q7tr4 (the names (band)) {'score': 224.313135, 'source': 2.0}
      #01 Entity: [3, 4) (names) == m.015vq3 (name) {'score': 2854.882599, 'source': 2.0}
      #02 Entity: [5, 6) (harry) == m.025xc3 (Harry_Osborn) {'score': 1.1061, 'source': 1.0}
      #03 Entity: [5, 6) (harry) == m.03647x (Harry_Potter_(character)) {'score': 2630.353018, 'source': 1.0}
      #04 Entity: [5, 8) (harry potter books) == m.078ffw (harry potter) {'score': 7492.156857, 'source': 2.0}
      #05 Entity: [6, 7) (potter) == m.064rk (Pottery) {'score': 1.005127, 'source': 1.0}
      #06 Type: [7, 8) (books) == book.book (book) {'sim': 0.846765}
      #07 Type: [4, 5) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #08 Type: [4, 5) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #09 Type: [4, 5) (of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.814276}
      #10 Type: [7, 9) (books in) == fictional_universe.school_in_fiction (school in fiction) {'sim': 0.796447}
      #11 Type: [7, 9) (books in) == fictional_universe.fictional_substance (material in fiction) {'sim': 0.780166}
      #12 Type: [7, 9) (books in) == fictional_universe.fictional_organization (organization in fiction) {'sim': 0.761623}
      #13 Type: [9, 10) (order) == religion.religious_order (religious order) {'sim': 0.761128}
      #14 Type: [2, 5) (the names of) == symbols.heraldic_variation_of_the_field (heraldic variation of the field) {'sim': 0.760525}
      #15 Type: [7, 8) (books) == book.book_edition (book edition) {'sim': 0.760291}
    } [0.000s]
    16 link data save to file.
    Coarse level searching (total entities = 6): {
      [Len-1||F1/6] (2020-12-03 14:19:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.015vq3 ?p1 ?o1 . }
        [2020-12-03 14:19:26] SPARQL hit!
        Filt_Query_Ret = 0 / 6 ( 0.000s)
      } [0.000s]
      [Len-1||F2/6] (2020-12-03 14:19:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01q7tr4 ?p1 ?o1 . }
        [2020-12-03 14:19:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01q7tr4 ?p1 ?o1 . }
          Query return lines = 11
        } [0.008s]
        Filt_Query_Ret = 4 / 11 ( 0.008s)
        [Len-1||F2/6||3/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.025xc3 . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.025xc3 . }
            Query return lines = 0
          } [0.038s]
          Filt_Query_Ret = 0 / 0 ( 0.039s)
        } [0.039s]
        [Len-1||F2/6||4/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.03647x . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.03647x . }
            Query return lines = 0
          } [0.053s]
          Filt_Query_Ret = 0 / 0 ( 0.053s)
        } [0.053s]
        [Len-1||F2/6||5/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.064rk . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.064rk . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-1||F2/6||6/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.078ffw . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 fb:m.078ffw . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
      } [0.138s]
      [Len-1||F3/6] (2020-12-03 14:19:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.025xc3 ?p1 ?o1 . }
        [2020-12-03 14:19:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.025xc3 ?p1 ?o1 . }
          Query return lines = 18
        } [0.017s]
        Filt_Query_Ret = 9 / 18 ( 0.017s)
        [Len-1||F3/6||1/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F3/6||2/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.020s)
        } [0.020s]
        [Len-1||F3/6||5/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 fb:m.064rk . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 fb:m.064rk . }
            Query return lines = 0
          } [0.012s]
          Filt_Query_Ret = 0 / 0 ( 0.012s)
        } [0.012s]
      } [0.069s]
      [Len-1||F4/6] (2020-12-03 14:19:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03647x ?p1 ?o1 . }
        [2020-12-03 14:19:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03647x ?p1 ?o1 . }
          Query return lines = 31
        } [0.019s]
        Filt_Query_Ret = 16 / 31 ( 0.019s)
        [Len-1||F4/6||1/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.014s)
        } [0.014s]
        [Len-1||F4/6||2/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F4/6||5/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 fb:m.064rk . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 fb:m.064rk . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
      } [0.070s]
      [Len-1||F5/6] (2020-12-03 14:19:26) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.064rk ?p1 ?o1 . }
        [2020-12-03 14:19:26] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.064rk ?p1 ?o1 . }
          Query return lines = 16
        } [0.018s]
        Filt_Query_Ret = 7 / 16 ( 0.018s)
        [Len-1||F5/6||1/6-1] (2020-12-03 14:19:26) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:19:26] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F5/6||2/6-1] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-1||F5/6||3/6-1] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.025xc3 . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.025xc3 . }
            Query return lines = 0
          } [0.049s]
          Filt_Query_Ret = 0 / 0 ( 0.049s)
        } [0.049s]
        [Len-1||F5/6||4/6-1] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.03647x . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 fb:m.03647x . }
            Query return lines = 0
          } [0.065s]
          Filt_Query_Ret = 0 / 0 ( 0.065s)
        } [0.065s]
      } [0.167s]
      [Len-1||F6/6] (2020-12-03 14:19:27) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.078ffw ?p1 ?o1 . }
        [2020-12-03 14:19:27] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.078ffw ?p1 ?o1 . }
          Query return lines = 17
        } [0.027s]
        Filt_Query_Ret = 7 / 17 ( 0.027s)
        [Len-1||F6/6||1/6-1] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 fb:m.015vq3 . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.020s)
        } [0.020s]
        [Len-1||F6/6||2/6-1] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.014s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
      } [0.062s]
      [Len-2||F1/6] (2020-12-03 14:19:27) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.015vq3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:27] SPARQL hit!
        Filt_Query_Ret = 0 / 29 ( 0.000s)
      } [0.000s]
      [Len-2||F2/6] (2020-12-03 14:19:27) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:27] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 108
        } [0.018s]
        Filt_Query_Ret = 2 / 108 ( 0.018s)
        [Len-2||F2/6||3/6-1] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025xc3 . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025xc3 . }
            Query return lines = 0
          } [0.050s]
          Filt_Query_Ret = 0 / 0 ( 0.050s)
        } [0.050s]
        [Len-2||F2/6||3/6-2] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025xc3 . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025xc3 . }
            Query return lines = 0
          } [0.565s]
          Filt_Query_Ret = 0 / 0 ( 0.565s)
        } [0.565s]
        [Len-2||F2/6||4/6-1] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03647x . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03647x . }
            Query return lines = 0
          } [0.067s]
          Filt_Query_Ret = 0 / 0 ( 0.067s)
        } [0.067s]
        [Len-2||F2/6||4/6-2] (2020-12-03 14:19:27) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03647x . }
          [2020-12-03 14:19:27] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03647x . }
            Query return lines = 0
          } [1.936s]
          Filt_Query_Ret = 0 / 0 ( 1.936s)
        } [1.936s]
        [Len-2||F2/6||5/6-1] (2020-12-03 14:19:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.064rk . }
          [2020-12-03 14:19:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.064rk . }
            Query return lines = 0
          } [0.018s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
        [Len-2||F2/6||5/6-2] (2020-12-03 14:19:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.064rk . }
          [2020-12-03 14:19:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.064rk . }
            Query return lines = 0
          } [0.061s]
          Filt_Query_Ret = 0 / 0 ( 0.061s)
        } [0.061s]
        [Len-2||F2/6||6/6-1] (2020-12-03 14:19:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.078ffw . }
          [2020-12-03 14:19:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.078ffw . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-2||F2/6||6/6-2] (2020-12-03 14:19:29) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.078ffw . }
          [2020-12-03 14:19:29] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7tr4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.078ffw . }
            Query return lines = 0
          } [0.125s]
          Filt_Query_Ret = 0 / 0 ( 0.125s)
        } [0.125s]
      } [2.854s]
      [Len-2||F3/6] (2020-12-03 14:19:30) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:30] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 211
        } [0.026s]
        Filt_Query_Ret = 4 / 211 ( 0.027s)
        [Len-2||F3/6||1/6-1] (2020-12-03 14:19:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-2||F3/6||1/6-2] (2020-12-03 14:19:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.067s]
          Filt_Query_Ret = 0 / 0 ( 0.067s)
        } [0.067s]
        [Len-2||F3/6||2/6-1] (2020-12-03 14:19:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F3/6||2/6-2] (2020-12-03 14:19:30) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:30] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [1.117s]
          Filt_Query_Ret = 0 / 0 ( 1.117s)
        } [1.117s]
        [Len-2||F3/6||5/6-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.064rk . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.064rk . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F3/6||5/6-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.064rk . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.025xc3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.064rk . }
            Query return lines = 0
          } [0.070s]
          Filt_Query_Ret = 0 / 0 ( 0.070s)
        } [0.070s]
      } [1.319s]
      [Len-2||F4/6] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 389
        } [0.081s]
        Filt_Query_Ret = 17 / 389 ( 0.082s)
        [Len-2||F4/6||1/6-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.010s)
        } [0.010s]
        [Len-2||F4/6||1/6-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.060s]
          Filt_Query_Ret = 0 / 0 ( 0.060s)
        } [0.060s]
        [Len-2||F4/6||2/6-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F4/6||2/6-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.153s]
          Filt_Query_Ret = 0 / 0 ( 0.153s)
        } [0.153s]
        [Len-2||F4/6||5/6-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.064rk . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.064rk . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-2||F4/6||5/6-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.064rk . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03647x ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.064rk . }
            Query return lines = 0
          } [0.059s]
          Filt_Query_Ret = 0 / 0 ( 0.059s)
        } [0.059s]
      } [0.394s]
      [Len-2||F5/6] (2020-12-03 14:19:31) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:31] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 139
        } [0.020s]
        Filt_Query_Ret = 2 / 139 ( 0.020s)
        [Len-2||F5/6||1/6-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F5/6||1/6-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.066s]
          Filt_Query_Ret = 0 / 0 ( 0.066s)
        } [0.067s]
        [Len-2||F5/6||2/6-1] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.006s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F5/6||2/6-2] (2020-12-03 14:19:31) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:31] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.133s]
          Filt_Query_Ret = 0 / 0 ( 0.133s)
        } [0.133s]
        [Len-2||F5/6||3/6-1] (2020-12-03 14:19:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025xc3 . }
          [2020-12-03 14:19:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.025xc3 . }
            Query return lines = 0
          } [0.039s]
          Filt_Query_Ret = 0 / 0 ( 0.040s)
        } [0.040s]
        [Len-2||F5/6||3/6-2] (2020-12-03 14:19:32) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025xc3 . }
          [2020-12-03 14:19:32] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.025xc3 . }
            Query return lines = 0
          } [1.793s]
          Filt_Query_Ret = 0 / 0 ( 1.793s)
        } [1.793s]
        [Len-2||F5/6||4/6-1] (2020-12-03 14:19:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03647x . }
          [2020-12-03 14:19:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03647x . }
            Query return lines = 0
          } [0.048s]
          Filt_Query_Ret = 0 / 0 ( 0.048s)
        } [0.048s]
        [Len-2||F5/6||4/6-2] (2020-12-03 14:19:33) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03647x . }
          [2020-12-03 14:19:33] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.064rk ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03647x . }
            Query return lines = 0
          } [1.956s]
          Filt_Query_Ret = 0 / 0 ( 1.956s)
        } [1.956s]
      } [4.072s]
      [Len-2||F6/6] (2020-12-03 14:19:35) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:35] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 240
        } [0.015s]
        Filt_Query_Ret = 9 / 240 ( 0.016s)
        [Len-2||F6/6||1/6-1] (2020-12-03 14:19:35) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:35] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.008s]
        [Len-2||F6/6||1/6-2] (2020-12-03 14:19:35) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
          [2020-12-03 14:19:35] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.015vq3 . }
            Query return lines = 0
          } [0.070s]
          Filt_Query_Ret = 0 / 0 ( 0.070s)
        } [0.070s]
        [Len-2||F6/6||2/6-1] (2020-12-03 14:19:35) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:35] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F6/6||2/6-2] (2020-12-03 14:19:35) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
          [2020-12-03 14:19:35] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.078ffw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7tr4 . }
            Query return lines = 0
          } [0.150s]
          Filt_Query_Ret = 0 / 0 ( 0.150s)
        } [0.150s]
      } [0.253s]
      77 coarse schemas retrieved from scratch.
      Calculating F1 for 77 coarse schemas: {
        Current: 0 / 77
        Checking schema 0 / 77: {
          [('Main', '==', 'm.01q7tr4', ['music.artist.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01q7tr4'}
            Query return lines = 1
            Final Answer: {'Post-punk'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 1 / 77: {
          [('Main', '==', 'm.01q7tr4', ['music.artist.label'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.label ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01q7tr4'}
            Query return lines = 2
            Final Answer: {'Warner Music Group', 'Factory Records'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 2 / 77: {
          [('Main', '==', 'm.01q7tr4', ['music.artist.album'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.album ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01q7tr4'}
            Query return lines = 7
            Final Answer: {'Swimming', 'Spectators of Life', 'Monsters Next Door', 'Calcutta', 'The Astronaut', 'Night Shift'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 3 / 77: {
          [('Main', '==', 'm.01q7tr4', ['music.artist.track'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7tr4 fb:music.artist.track ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01q7tr4'}
            Query return lines = 78
            Final Answer: {'The Fire', 'Spectators of Life', 'Life by the Sea', 'I Am a Stranger Here Myself', 'Actually', "I'm in Love With a German Film Star", 'I Wish I Could Speak Your Language', 'NIght Shift', 'Tokyo Twilight', 'I Wish I Could Speak Your Language (Premix)', 'Anything (With Passion)', 'Shining Hours', 'Never Change', 'A Few Hundreds', '(This Is) Harmony', 'Shanghaï Gesture', 'Traces', 'Dreamless', 'The Astronaut', 'Cat', 'Questions and Answers', 'Flesh Wounds', 'Zeroes', 'Shanghai Gesture', 'Discovery', 'Calcutta', 'Floating World', "Why Can't It Be", 'In Time', 'In Other Rooms', 'Virtual', 'Nothing to Fear', 'Nightshift', 'Foreign Rendezvous', 'Night Shift', 'Arcadia', 'Close to Me', 'Ballade a Tervuren', 'Revenge', 'Other Enquiries', 'The Drive', 'Burn', 'Leave Her to Heaven', 'Light', 'White Shadow', 'I Liked You Better When You Were Dead', 'Mirrors', 'Memories', 'Friendly Fire', 'Music for Someone', 'Welcome to Your Real Life', 'White Life', 'Halloween in June', 'Postcards'}
            Answers = 54, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 54, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 4 / 77: {
          [('Main', '==', 'm.025xc3', ['fictional_universe.fictional_character.appears_in_these_fictional_universes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.appears_in_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.appears_in_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'Marvel Universe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 5 / 77: {
          [('Main', '==', 'm.025xc3', ['comic_books.comic_book_character.primary_universe'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.primary_universe ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.primary_universe ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'Marvel Universe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 6 / 77: {
          [('Main', '==', 'm.025xc3', ['comic_books.comic_book_character.first_appearance'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.first_appearance ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.first_appearance ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'The Amazing Spider-Man #31'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 7 / 77: {
          [('Main', '==', 'm.025xc3', ['fictional_universe.fictional_character.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'Green Goblin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 8 / 77: {
          [('Main', '==', 'm.025xc3', ['fictional_universe.fictional_character.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 77: {
          [('Main', '==', 'm.025xc3', ['fictional_universe.fictional_character.character_created_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 2
            Final Answer: {'Stan Lee', 'Steve Ditko'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 10 / 77: {
          [('Main', '==', 'm.025xc3', ['comic_books.comic_book_character.regular_featured_appearances'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.regular_featured_appearances ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.regular_featured_appearances ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'The Amazing Spider-Man'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 11 / 77: {
          [('Main', '==', 'm.025xc3', ['comic_books.comic_book_character.story_specific_appearances'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.story_specific_appearances ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:comic_books.comic_book_character.story_specific_appearances ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'The Punisher Strikes Twice'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 12 / 77: {
          [('Main', '==', 'm.025xc3', ['user.duck1123.default_domain.primary_identity.alternate_identities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:user.duck1123.default_domain.primary_identity.alternate_identities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.025xc3 fb:user.duck1123.default_domain.primary_identity.alternate_identities ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'Green Goblin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 13 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.appears_in_these_fictional_universes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.appears_in_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.appears_in_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 14 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 3
            Final Answer: {'Lily Luna Potter', 'Albus Severus Potter', 'James Sirius Potter'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 15 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.powers_or_abilities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.powers_or_abilities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.powers_or_abilities ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Magic in Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_object_destroyer.fictional_objects_destroyed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_object_destroyer.fictional_objects_destroyed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_object_destroyer.fictional_objects_destroyed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {"Tom Riddle's diary"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 17 / 77: {
          [('Main', '==', 'm.03647x', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Harry and the Potters'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 18 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.occupation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.occupation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.occupation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Student'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 19 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.organizations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.organizations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.organizations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 5
            Final Answer: {'Gryffindor Quidditch Team', 'Order of the Phoenix', 'Gryffindor House', "Dumbledore's Army", 'The Slug Club'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 20 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 2
            Final Answer: {'James Potter', 'Lily Evans Potter'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 21 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.has_possessed'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.has_possessed ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.has_possessed ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 4
            Final Answer: {'Deathly Hallows', 'Cloak of invisibility', 'Elder Wand', "Marauders' Map"}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 22 / 77: {
          [('Main', '==', 'm.03647x', ['book.book_character.appears_in_book'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:book.book_character.appears_in_book ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:book.book_character.appears_in_book ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 7
            Final Answer: {'Harry Potter and the Prisoner of Azkaban', 'Harry Potter and the Half-Blood Prince', 'Harry Potter and the Deathly Hallows', "Harry Potter and the Philosopher's Stone", 'Harry Potter and the Chamber of Secrets', 'Harry Potter and the Order of the Phoenix', 'Harry Potter and the Goblet of Fire'}
            Answers = 7, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.012s]
          Answers = 7, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.012s]
        Checking schema 23 / 77: {
          [('Main', '==', 'm.03647x', ['media_common.quotation_addressee.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:media_common.quotation_addressee.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:media_common.quotation_addressee.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 11
            Final Answer: {"You can exist without your soul, you know, as long as your brain and heart are still working. But you'll have no sense of self anymore, no memory, no....anything. There's no chance at all of recovery. You'll just exist. As an empty shell.", 'Harry, suffering like this proves you are still a man! This pain is part of being human … the fact that you can feel pain like this is your greatest strength.', 'It does not do to dwell on dreams and forget to live.', 'It is true, however, that those who have mastered Legilimency are able, under certain conditions, to delve into the minds of their victims and to interpret their findings correctly....', "I sometimes find, and I am sure you know the feeling, that I simply have too many thoughts and memories crammed into my mind.... At these times... I use the Pensieve. One simply siphons the excess thoughts from one's mind, pours them into the basin, and examines them at one's leisure.", 'Numbing the pain for a while will make it worse when you finally feel it.', "Kreacher is what he has been made by wizards, Harry. Yes, he is to be pitied. His existence has been as miserable as your friend Dobby's. He was forced to do Sirius's bidding, because Sirius was the last of the family to which he was enslaved, but he felt no true loyalty to him. And whatever Kreacher's faults, it must be admitted that Sirius did nothing to make Kreacher's lot easier.", 'The mind is not a book, to be opened at will and examined at leisure. Thoughts are not etched on the inside of skulls, to be perused by an invader. The mind is a complex and many-layered thing.', "You think the dead we loved ever truly leave us? You think that we don't recall them more clearly than ever in times of great trouble? Your father is alive in you, Harry, and shows himself plainly when you have need of him.", 'Fear of a name increases fear of the thing itself.', 'There is no good or evil: only power and those too weak to seek it.'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 24 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.species'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.species ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.species ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Human'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 25 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 26 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.character_created_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.character_created_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'J. K. Rowling'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 27 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.education'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.education ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.education ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Hogwarts School of Witchcraft and Wizardry'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 28 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_organization_founder.fictional_organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_organization_founder.fictional_organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_organization_founder.fictional_organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {"Dumbledore's Army"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 29 / 77: {
          [('Main', '==', 'm.064rk', ['base.skosbase.vocabulary_equivalent_topic.equivalent_concept'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'Pottery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 30 / 77: {
          [('Main', '==', 'm.064rk', ['base.skills.skill.performed_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skills.skill.performed_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skills.skill.performed_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 31 / 77: {
          [('Main', '==', 'm.064rk', ['base.skills.skill.equipment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skills.skill.equipment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skills.skill.equipment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 2
            Final Answer: {"Potter's wheel", 'Kiln'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 32 / 77: {
          [('Main', '==', 'm.064rk', ['interests.collection_category.sub_categories'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:interests.collection_category.sub_categories ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:interests.collection_category.sub_categories ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'Metlox Pottery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 33 / 77: {
          [('Main', '==', 'm.064rk', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'The Legacy of Maria Poveka Martinez'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 34 / 77: {
          [('Main', '==', 'm.064rk', ['base.onephylogeny.type_of_thing.includes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.onephylogeny.type_of_thing.includes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.onephylogeny.type_of_thing.includes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'Tin-glazed pottery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 35 / 77: {
          [('Main', '==', 'm.064rk', ['base.skills.skill.output'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skills.skill.output ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:base.skills.skill.output ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 4
            Final Answer: {'Porcelain', 'Earthenware', 'Stoneware'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 36 / 77: {
          [('Main', '==', 'm.078ffw', ['fictional_universe.work_of_fiction.part_of_these_fictional_universes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 37 / 77: {
          [('Main', '==', 'm.078ffw', ['book.literary_series.works_in_this_series'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.literary_series.works_in_this_series ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.literary_series.works_in_this_series ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 7
            Final Answer: {'Harry Potter and the Prisoner of Azkaban', 'Harry Potter and the Half-Blood Prince', 'Harry Potter and the Deathly Hallows', "Harry Potter and the Philosopher's Stone", 'Harry Potter and the Chamber of Secrets', 'Harry Potter and the Order of the Phoenix', 'Harry Potter and the Goblet of Fire'}
            Answers = 7, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.004s]
          Answers = 7, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.004s]
        Checking schema 38 / 77: {
          [('Main', '==', 'm.078ffw', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'Harry Potter: The Exhibition'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 39 / 77: {
          [('Main', '==', 'm.078ffw', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 22
            Final Answer: {'Harry Potter, Narnia, and The lord of the rings', "The Complete Idiot's Guide to the World of Harry Potter (Complete Idiot's Guide to)", "What's a Christian to Do with Harry Potter?", 'From Homer to Harry Potter: A Handbook on Myth And Fantasy', 'Harry Potter and International Relations', 'Predictions in Stone for Harry Potter Fans', 'From Shakespeare to Harry Potter', 'The Unofficial Harry Potter Encyclopedia', "Kids' Letters to Harry Potter", 'Wizards, Hobbits, Harry Potter', 'Muggles and Magic: J. K. Rowling and the Harry Potter Phenomenon', 'The Magical Worlds of Harry Potter', 'Highlights from Harry Potter', 'Females And Harry Potter: Not All that Empowering', 'Harry Potter and the Bible', 'The End of Harry Potter?', 'Themes from Harry Potter', 'Re-reading Harry Potter', 'Fantasy and your family', 'Harry Potter', 'Harry Potter y la Biblia', 'The gospel according to Harry Potter'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 40 / 77: {
          [('Main', '==', 'm.078ffw', ['book.literary_series.author_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.literary_series.author_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.literary_series.author_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'J. K. Rowling'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 41 / 77: {
          [('Main', '==', 'm.078ffw', ['book.literary_series.fictional_universe'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.literary_series.fictional_universe ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:book.literary_series.fictional_universe ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 42 / 77: {
          [('Main', '==', 'm.078ffw', ['dataworld.gardening_hint.split_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.078ffw fb:dataworld.gardening_hint.split_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 43 / 77: {
          [('Main', '==', 'm.01q7tr4', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7tr4 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7tr4 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01q7tr4'}
            Query return lines = 1
            Final Answer: {'A Factory Night: Once Again'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 44 / 77: {
          [('Main', '==', 'm.01q7tr4', ['film.person_or_entity_appearing_in_film.films', 'film.personal_film_appearance.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7tr4 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7tr4 fb:film.person_or_entity_appearing_in_film.films ?o1 . ?o1 fb:film.personal_film_appearance.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01q7tr4'}
            Query return lines = 1
            Final Answer: {'The Names'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 45 / 77: {
          [('Main', '==', 'm.025xc3', ['film.film_character.portrayed_in_films', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 4
            Final Answer: {'The Amazing Spider-Man 2', 'Spider-Man 2', 'Spider-Man 3', 'Spider-Man'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 46 / 77: {
          [('Main', '==', 'm.025xc3', ['film.film_character.portrayed_in_films', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 1
            Final Answer: {'Harry Osborn'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 47 / 77: {
          [('Main', '==', 'm.025xc3', ['film.film_character.portrayed_in_films', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 2
            Final Answer: {'James Franco', 'Dane DeHaan'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 48 / 77: {
          [('Main', '==', 'm.025xc3', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.025xc3 fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.025xc3'}
            Query return lines = 2
            Final Answer: {'Mary Jane Watson'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 49 / 77: {
          [('Main', '==', 'm.03647x', ['film.film_character.portrayed_in_films', 'film.performance.character_note'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character_note ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 50 / 77: {
          [('Main', '==', 'm.03647x', ['cvg.game_character.games', 'cvg.game_performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 51 / 77: {
          [('Main', '==', 'm.03647x', ['cvg.game_character.games', 'cvg.game_performance.performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Voice'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 52 / 77: {
          [('Main', '==', 'm.03647x', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'35'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 53 / 77: {
          [('Main', '==', 'm.03647x', ['film.film_character.portrayed_in_films', 'film.performance.film'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.film ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 10
            Final Answer: {'Harry Potter and the Prisoner of Azkaban', 'Harry Potter and the Deathly Hallows – Part 2', 'Harry Potter and the Half-Blood Prince', 'J.K. Rowling: A Year in the Life', "Harry Potter and the Philosopher's Stone", 'Harry Potter and the Chamber of Secrets', 'Harry Potter and the Deathly Hallows - Part I', 'Harry Potter and the Order of the Phoenix', 'Harry Potter and the Forbidden Journey', 'Harry Potter and the Goblet of Fire'}
            Answers = 10, P = 0.600000, R = 0.857143, F1 = 0.705882
          } [0.008s]
          Answers = 10, P = 0.600000, R = 0.857143, F1 = 0.705882
        } [0.008s]
        Checking schema 54 / 77: {
          [('Main', '==', 'm.03647x', ['cvg.game_character.games', 'cvg.game_performance.game'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.game ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.game ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Harry Potter and the Goblet of Fire'}
            Answers = 1, P = 1.000000, R = 0.142857, F1 = 0.250000
          } [0.007s]
          Answers = 1, P = 1.000000, R = 0.142857, F1 = 0.250000
        } [0.007s]
        Checking schema 55 / 77: {
          [('Main', '==', 'm.03647x', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.item'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.item ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 56 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_employer.employees', 'fictional_universe.fictional_employment_tenure.employee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Kreacher'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 57 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_employer.employees', 'fictional_universe.fictional_employment_tenure.employer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_employer.employees ?o1 . ?o1 fb:fictional_universe.fictional_employment_tenure.employer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 58 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.married_to', 'fictional_universe.marriage_of_fictional_characters.spouses'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.married_to ?o1 . ?o1 fb:fictional_universe.marriage_of_fictional_characters.spouses ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 2
            Final Answer: {'Ginny Weasley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 59 / 77: {
          [('Main', '==', 'm.03647x', ['film.film_character.portrayed_in_films', 'film.performance.character'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.character ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Harry Potter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 60 / 77: {
          [('Main', '==', 'm.03647x', ['film.film_character.portrayed_in_films', 'film.performance.actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 6
            Final Answer: {'Charles Saunders', 'Toby Papworth', 'Daniel Radcliffe', 'Michael Saunders', 'Jacob Saunders', 'Saunders Triplets'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 61 / 77: {
          [('Main', '==', 'm.03647x', ['film.film_character.portrayed_in_films', 'film.performance.special_performance_type'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:film.film_character.portrayed_in_films ?o1 . ?o1 fb:film.performance.special_performance_type ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 2
            Final Answer: {'Archive Footage', 'Uncredited'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 62 / 77: {
          [('Main', '==', 'm.03647x', ['cvg.game_character.games', 'cvg.game_performance.voice_actor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.voice_actor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:cvg.game_character.games ?o1 . ?o1 fb:cvg.game_performance.voice_actor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Daniel Larner'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 63 / 77: {
          [('Main', '==', 'm.03647x', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.list'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.list ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'100 Worst Britons'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 64 / 77: {
          [('Main', '==', 'm.03647x', ['award.ranked_item.appears_in_ranked_lists', 'award.ranking.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 WHERE { fb:m.03647x fb:award.ranked_item.appears_in_ranked_lists ?o1 . ?o1 fb:award.ranking.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'2003'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 65 / 77: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.romantically_involved_with', 'fictional_universe.romantic_involvement.partner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:36] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.romantically_involved_with ?o1 . ?o1 fb:fictional_universe.romantic_involvement.partner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 3
            Final Answer: {'Cho Chang', 'Ginny Weasley'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 66 / 77: {
          [('Main', '==', 'm.064rk', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.064rk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.064rk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 67 / 77: {
          [('Main', '==', 'm.064rk', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.064rk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.064rk fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'Pottery'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 68 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 2
            Final Answer: {'Kids’ Choice Award for Favorite Book', "Mythopoeic Fantasy Award for Children's Literature"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 69 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_winning_work.awards_won', 'award.award_honor.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 7
            Final Answer: {'2001', '2008', '2007', '2002', '2000', '2004', '2006'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 70 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_winning_work.awards_won', 'award.award_honor.honored_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.honored_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'Harry Potter literary series'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 71 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_nominated_work.award_nominations', 'award.award_nomination.nominated_for'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.nominated_for ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'Harry Potter literary series'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 72 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_nominated_work.award_nominations', 'award.award_nomination.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 12
            Final Answer: {'2009', '2001', '2008', '2007', '2003', '2012', '2004', '2000', '2002', '2013', '2006', '2005'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 73 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_winning_work.awards_won', 'award.award_honor.award_winner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award_winner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'J. K. Rowling'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 74 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_winning_work.awards_won', 'award.award_honor.ceremony'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.ceremony ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 7
            Final Answer: {"2001 Kids' Choice Awards", "2002 Kids' Choice Awards", "2004 Kids' Choice Awards", "2007 Kids' Choice Awards", "2000 Kids' Choice Awards", "2008 Kids' Choice Awards", "2006 Kids' Choice Awards"}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 75 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_nominated_work.award_nominations', 'award.award_nomination.award_nominee'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_nominated_work.award_nominations ?o1 . ?o1 fb:award.award_nomination.award_nominee ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 1
            Final Answer: {'J. K. Rowling'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 76 / 77: {
          [('Main', '==', 'm.078ffw', ['award.award_winning_work.awards_won', 'award.award_honor.award'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.078ffw fb:award.award_winning_work.awards_won ?o1 . ?o1 fb:award.award_honor.award ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.078ffw'}
            Query return lines = 2
            Final Answer: {'Kids’ Choice Award for Favorite Book', "Mythopoeic Fantasy Award for Children's Literature"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        76 / 77 coarse schemas kept with ans_size > 0.
      } [1.068s]
      Coarse level ended, resulting in 76 schemas.
    } [10.467s]
    Type level searching (total types = 10): {
      Current: 0 / 76
[{'music.genre'}]
[{'music.record_label'}]
[{'music.album'}]
[{'music.recording'}]
[{'fictional_universe.fictional_universe'}]
[{'comic_books.comic_book_fictional_universe'}]
[{'comic_books.comic_book_issue'}]
[{'fictional_universe.fictional_character'}]
[{'fictional_universe.character_gender'}]
[{'fictional_universe.fictional_character_creator'}]
[{'comic_books.comic_book_series'}]
[{'comic_books.comic_book_story'}]
[{'user.duck1123.default_domain.alternate_persona'}]
[{'fictional_universe.fictional_universe'}]
[{'fictional_universe.fictional_character'}]
[{'fictional_universe.character_powers'}]
[{'fictional_universe.fictional_object'}]
[{'symbols.namesake'}]
[{'fictional_universe.character_occupation'}]
[{'fictional_universe.fictional_organization'}]
[{'fictional_universe.fictional_character'}]
[{'fictional_universe.fictional_object'}]
[{'book.book'}]
[{'media_common.quotation'}]
[{'fictional_universe.character_species'}]
[{'fictional_universe.character_gender'}]
[{'fictional_universe.fictional_character_creator'}]
[{'fictional_universe.school_in_fiction'}]
[{'fictional_universe.fictional_organization'}]
[{'base.skosbase.skos_concept'}]
[{'base.skills.skilled_role'}]
[{'base.skills.skill_equipment'}]
[{'interests.collection_category'}]
[{'book.written_work'}]
[{'base.onephylogeny.type_of_thing'}]
[{'base.skills.skill_output'}]
[{'fictional_universe.fictional_universe'}]
[{'book.written_work'}]
[{'exhibitions.exhibition'}]
[{'book.written_work'}]
[{'book.author'}]
[{'fictional_universe.fictional_universe'}]
[{'type.object'}]
[{'film.personal_film_appearance'}, {'film.film'}]
[{'film.personal_film_appearance'}, {'film.person_or_entity_appearing_in_film'}]
[{'film.performance'}, {'film.film'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
[{'cvg.game_performance'}, {'cvg.game_character'}]
[{'cvg.game_performance'}, {'cvg.computer_game_performance_type'}]
[{'award.ranking'}, {'type.int'}]
[{'film.performance'}, {'film.film'}]
[{'cvg.game_performance'}, {'cvg.computer_videogame'}]
[{'award.ranking'}, {'award.ranked_item'}]
[{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_character'}]
[{'fictional_universe.fictional_employment_tenure'}, {'fictional_universe.fictional_employer'}]
[{'fictional_universe.marriage_of_fictional_characters'}, {'fictional_universe.fictional_character'}]
[{'film.performance'}, {'film.film_character'}]
[{'film.performance'}, {'film.actor'}]
[{'film.performance'}, {'film.special_film_performance_type'}]
[{'cvg.game_performance'}, {'cvg.game_voice_actor'}]
[{'award.ranking'}, {'award.ranked_list'}]
[{'award.ranking'}, {'type.datetime'}]
[{'fictional_universe.romantic_involvement'}, {'fictional_universe.fictional_character'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'award.award_nomination'}, {'award.award_category'}]
[{'award.award_honor'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winning_work'}]
[{'award.award_nomination'}, {'award.award_nominated_work'}]
[{'award.award_nomination'}, {'type.datetime'}]
[{'award.award_honor'}, {'award.award_winner'}]
[{'award.award_honor'}, {'award.award_ceremony'}]
[{'award.award_nomination'}, {'award.award_nominee'}]
[{'award.award_honor'}, {'award.award_category'}]
      5 typed schemas retrieved from 76 coarse schemas.
      Calculating F1 for 5 typed schemas: {
        Current: 0 / 5
        Checking schema 0 / 5: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.organizations']), ('Type', '==', 'fictional_universe.fictional_organization', ['type.object.type'])]
          var_types: [{'fictional_universe.fictional_organization'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.organizations ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_organization . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.organizations ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_organization . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 5
            Final Answer: {'Gryffindor Quidditch Team', 'Order of the Phoenix', 'Gryffindor House', "Dumbledore's Army", 'The Slug Club'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 1 / 5: {
          [('Main', '==', 'm.03647x', ['book.book_character.appears_in_book']), ('Type', '==', 'book.book', ['type.object.type'])]
          var_types: [{'book.book'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:book.book_character.appears_in_book ?o1 . ?o1 fb:type.object.type fb:book.book . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:book.book_character.appears_in_book ?o1 . ?o1 fb:type.object.type fb:book.book . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 7
            Final Answer: {'Harry Potter and the Prisoner of Azkaban', 'Harry Potter and the Half-Blood Prince', 'Harry Potter and the Deathly Hallows', "Harry Potter and the Philosopher's Stone", 'Harry Potter and the Chamber of Secrets', 'Harry Potter and the Order of the Phoenix', 'Harry Potter and the Goblet of Fire'}
            Answers = 7, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.520s]
          Answers = 7, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.520s]
        Checking schema 2 / 5: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_character.education']), ('Type', '==', 'fictional_universe.school_in_fiction', ['type.object.type'])]
          var_types: [{'fictional_universe.school_in_fiction'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.education ?o1 . ?o1 fb:type.object.type fb:fictional_universe.school_in_fiction . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_character.education ?o1 . ?o1 fb:type.object.type fb:fictional_universe.school_in_fiction . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {'Hogwarts School of Witchcraft and Wizardry'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 3 / 5: {
          [('Main', '==', 'm.03647x', ['fictional_universe.fictional_organization_founder.fictional_organizations_founded']), ('Type', '==', 'fictional_universe.fictional_organization', ['type.object.type'])]
          var_types: [{'fictional_universe.fictional_organization'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_organization_founder.fictional_organizations_founded ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_organization . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03647x fb:fictional_universe.fictional_organization_founder.fictional_organizations_founded ?o1 . ?o1 fb:type.object.type fb:fictional_universe.fictional_organization . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03647x'}
            Query return lines = 1
            Final Answer: {"Dumbledore's Army"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 4 / 5: {
          [('Main', '==', 'm.064rk', ['book.book_subject.works']), ('Type', '==', 'book.book', ['type.object.type'])]
          var_types: [{'book.book', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:book.book . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:37] Q_Schema Request: {
            WebQ_2194|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.064rk fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:book.book . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.064rk'}
            Query return lines = 1
            Final Answer: {'The Legacy of Maria Poveka Martinez'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.084s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.084s]
        5 / 5 typed schemas kept with ans_size > 0.
      } [0.643s]
      Typed level ended, resulting in 81 schemas.
    } [0.647s]
    Time level searching (total times = 0): {
      Current: 0 / 81
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.album.release_date'}]
self.var_time_preds: [{'music.recording.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'comic_books.comic_book_issue.date_of_publication'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'fictional_universe.fictional_object.date_destroyed', 'fictional_universe.fictional_object.date_created'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'fictional_universe.fictional_object.date_destroyed', 'fictional_universe.fictional_object.date_created'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'type.object.timestamp'}]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), {'film.film.initial_release_date'}]
self.var_time_preds: [set(), {'cvg.computer_videogame.release_date'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
self.var_time_preds: [{'award.ranking.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, set()]
self.var_time_preds: [{'award.award_nomination.year'}, set()]
self.var_time_preds: [{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
      0 timed schemas retrieved from 81 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 81 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 81
[set()]
[set()]
[{'music.album.release_date'}]
[{'music.recording.date'}]
[set()]
[set()]
[{'comic_books.comic_book_issue.date_of_publication'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'fictional_universe.fictional_object.date_destroyed', 'fictional_universe.fictional_object.date_created'}]
[set()]
[set()]
[set()]
[set()]
[{'fictional_universe.fictional_object.date_destroyed', 'fictional_universe.fictional_object.date_created'}]
[set()]
[{'media_common.quotation.date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[{'type.object.timestamp'}]
[set(), {'film.film.initial_release_date'}]
[set(), set()]
[set(), {'film.film.initial_release_date'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'award.ranking.year'}, set()]
[set(), {'film.film.initial_release_date'}]
[set(), {'cvg.computer_videogame.release_date'}]
[{'award.ranking.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'award.ranking.year'}, {'award.ranked_list.year_inaugurated'}]
[{'award.ranking.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'award.award_nomination.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.award_honor.year'}, set()]
[{'award.award_nomination.year'}, set()]
[{'award.award_honor.year'}, {'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
      0 ordinal schemas retrieved from 81 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 81 schemas.
    } [0.002s]
    [2020-12-03 14:19:37] buffer saved.
    81 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2194_schema].
  } [18.578s]
  Entering Q 2195 / 5810 [b'what currency should i bring to italy?']: {
    Show 5 E + 10 T + 0 Tm + 0 Ord = 15 linkings: {
      #00 Entity: [1, 2) (currency) == m.01q7l (currency) {'score': 14.049924, 'source': 2.0}
      #01 Entity: [1, 2) (currency) == m.04_x4 (money) {'score': 3.642584, 'source': 2.0}
      #02 Entity: [5, 7) (to italy) == m.02h2_g (italian campaign (world war ii)) {'score': 369.547025, 'source': 2.0}
      #03 Entity: [6, 7) (italy) == m.01_lhg (Italy_national_football_team) {'score': 2.401837, 'source': 1.0}
      #04 Entity: [6, 7) (italy) == m.03rjj (Italy) {'score': 42004.461028, 'source': 1.0}
      #05 Type: [1, 2) (currency) == finance.currency (currency) {'sim': 1.0}
      #06 Type: [0, 3) (what currency should) == measurement_unit.money_value (money value) {'sim': 0.722149}
      #07 Type: [1, 2) (currency) == business.currency_sub_unit (currency sub-unit) {'sim': 0.708664}
      #08 Type: [0, 3) (what currency should) == measurement_unit.adjusted_money_value (adjusted money value) {'sim': 0.705624}
      #09 Type: [2, 3) (should) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.703698}
      #10 Type: [2, 5) (should i bring) == media_common.lost_work (lost work) {'sim': 0.697639}
      #11 Type: [1, 3) (currency should) == finance.exchange_rate (exchange rate) {'sim': 0.68476}
      #12 Type: [2, 5) (should i bring) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.679587}
      #13 Type: [0, 3) (what currency should) == measurement_unit.dated_money_value (dated money value) {'sim': 0.678217}
      #14 Type: [0, 3) (what currency should) == measurement_unit.recurring_money_value (recurring money value) {'sim': 0.678056}
    } [0.000s]
    15 link data save to file.
    Coarse level searching (total entities = 5): {
      [Len-1||F1/5] (2020-12-03 14:19:44) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01_lhg ?p1 ?o1 . }
        [2020-12-03 14:19:44] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.01_lhg ?p1 ?o1 . }
          Query return lines = 22
        } [0.006s]
        Filt_Query_Ret = 7 / 22 ( 0.006s)
        [Len-1||F1/5||2/5-1] (2020-12-03 14:19:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 fb:m.01q7l . }
          [2020-12-03 14:19:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 fb:m.01q7l . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-1||F1/5||5/5-1] (2020-12-03 14:19:44) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 fb:m.04_x4 . }
          [2020-12-03 14:19:44] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 fb:m.04_x4 . }
            Query return lines = 0
          } [0.025s]
          Filt_Query_Ret = 0 / 0 ( 0.025s)
        } [0.025s]
      } [0.040s]
      [Len-1||F2/5] (2020-12-03 14:19:45) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01q7l ?p1 ?o1 . }
        [2020-12-03 14:19:45] SPARQL hit!
        Filt_Query_Ret = 2 / 11 ( 0.000s)
        [Len-1||F2/5||1/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 fb:m.01_lhg . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 fb:m.01_lhg . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.020s)
        } [0.020s]
        [Len-1||F2/5||3/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 fb:m.02h2_g . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 fb:m.02h2_g . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.016s]
        [Len-1||F2/5||4/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 fb:m.03rjj . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 fb:m.03rjj . }
            Query return lines = 0
          } [0.794s]
          Filt_Query_Ret = 0 / 0 ( 0.794s)
        } [0.794s]
      } [0.830s]
      [Len-1||F3/5] (2020-12-03 14:19:45) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02h2_g ?p1 ?o1 . }
        [2020-12-03 14:19:45] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02h2_g ?p1 ?o1 . }
          Query return lines = 16
        } [0.008s]
        Filt_Query_Ret = 8 / 16 ( 0.008s)
        [Len-1||F3/5||2/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 fb:m.01q7l . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 fb:m.01q7l . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-1||F3/5||5/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 fb:m.04_x4 . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 fb:m.04_x4 . }
            Query return lines = 0
          } [0.026s]
          Filt_Query_Ret = 0 / 0 ( 0.026s)
        } [0.026s]
      } [0.047s]
      [Len-1||F4/5] (2020-12-03 14:19:45) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03rjj ?p1 ?o1 . }
        [2020-12-03 14:19:45] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03rjj ?p1 ?o1 . }
          Query return lines = 131
        } [0.023s]
        Filt_Query_Ret = 57 / 131 ( 0.024s)
        [Len-1||F4/5||2/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 fb:m.01q7l . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 fb:m.01q7l . }
            Query return lines = 0
          } [0.018s]
          Filt_Query_Ret = 0 / 0 ( 0.018s)
        } [0.018s]
        [Len-1||F4/5||5/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 fb:m.04_x4 . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 fb:m.04_x4 . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
      } [0.058s]
      [Len-1||F5/5] (2020-12-03 14:19:45) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.04_x4 ?p1 ?o1 . }
        [2020-12-03 14:19:45] SPARQL hit!
        Filt_Query_Ret = 4 / 14 ( 0.000s)
        [Len-1||F5/5||1/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 fb:m.01_lhg . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 fb:m.01_lhg . }
            Query return lines = 0
          } [0.042s]
          Filt_Query_Ret = 0 / 0 ( 0.042s)
        } [0.042s]
        [Len-1||F5/5||3/5-1] (2020-12-03 14:19:45) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 fb:m.02h2_g . }
          [2020-12-03 14:19:45] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 fb:m.02h2_g . }
            Query return lines = 0
          } [0.015s]
          Filt_Query_Ret = 0 / 0 ( 0.015s)
        } [0.015s]
        [Len-1||F5/5||4/5-1] (2020-12-03 14:19:46) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 fb:m.03rjj . }
          [2020-12-03 14:19:46] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 fb:m.03rjj . }
            Query return lines = 0
          } [1.109s]
          Filt_Query_Ret = 0 / 0 ( 1.109s)
        } [1.109s]
      } [1.167s]
      [Len-2||F1/5] (2020-12-03 14:19:47) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:47] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 348
        } [0.030s]
        Filt_Query_Ret = 34 / 348 ( 0.032s)
        [Len-2||F1/5||2/5-1] (2020-12-03 14:19:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7l . }
          [2020-12-03 14:19:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7l . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F1/5||2/5-2] (2020-12-03 14:19:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7l . }
          [2020-12-03 14:19:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7l . }
            Query return lines = 0
          } [0.259s]
          Filt_Query_Ret = 0 / 0 ( 0.259s)
        } [0.259s]
        [Len-2||F1/5||5/5-1] (2020-12-03 14:19:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04_x4 . }
          [2020-12-03 14:19:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04_x4 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F1/5||5/5-2] (2020-12-03 14:19:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04_x4 . }
          [2020-12-03 14:19:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01_lhg ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04_x4 . }
            Query return lines = 0
          } [0.399s]
          Filt_Query_Ret = 0 / 0 ( 0.399s)
        } [0.399s]
      } [0.727s]
      [Len-2||F2/5] (2020-12-03 14:19:47) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:47] SPARQL hit!
        Filt_Query_Ret = 2 / 124 ( 0.001s)
        [Len-2||F2/5||1/5-1] (2020-12-03 14:19:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01_lhg . }
          [2020-12-03 14:19:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01_lhg . }
            Query return lines = 0
          } [0.023s]
          Filt_Query_Ret = 0 / 0 ( 0.023s)
        } [0.023s]
        [Len-2||F2/5||1/5-2] (2020-12-03 14:19:47) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01_lhg . }
          [2020-12-03 14:19:47] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01_lhg . }
            Query return lines = 0
          } [1.551s]
          Filt_Query_Ret = 0 / 0 ( 1.551s)
        } [1.551s]
        [Len-2||F2/5||3/5-1] (2020-12-03 14:19:49) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02h2_g . }
          [2020-12-03 14:19:49] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02h2_g . }
            Query return lines = 0
          } [0.016s]
          Filt_Query_Ret = 0 / 0 ( 0.016s)
        } [0.017s]
        [Len-2||F2/5||3/5-2] (2020-12-03 14:19:49) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02h2_g . }
          [2020-12-03 14:19:49] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02h2_g . }
            Query return lines = 0
          } [0.411s]
          Filt_Query_Ret = 0 / 0 ( 0.411s)
        } [0.411s]
        [Len-2||F2/5||4/5-1] (2020-12-03 14:19:49) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03rjj . }
          [2020-12-03 14:19:49] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03rjj . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.006s)
        } [0.006s]
        [Len-2||F2/5||4/5-2] (2020-12-03 14:19:49) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03rjj . }
          [2020-12-03 14:19:49] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01q7l ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03rjj . }
            Query return lines = 0
          } [1.997s]
          Filt_Query_Ret = 0 / 0 ( 1.997s)
        } [1.997s]
      } [4.005s]
      [Len-2||F3/5] (2020-12-03 14:19:51) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:51] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 451
        } [0.046s]
        Filt_Query_Ret = 4 / 451 ( 0.047s)
        [Len-2||F3/5||2/5-1] (2020-12-03 14:19:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7l . }
          [2020-12-03 14:19:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7l . }
            Query return lines = 0
          } [0.013s]
          Filt_Query_Ret = 0 / 0 ( 0.013s)
        } [0.013s]
        [Len-2||F3/5||2/5-2] (2020-12-03 14:19:51) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7l . }
          [2020-12-03 14:19:51] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7l . }
            Query return lines = 0
          } [0.127s]
          Filt_Query_Ret = 0 / 0 ( 0.127s)
        } [0.127s]
        [Len-2||F3/5||5/5-1] (2020-12-03 14:19:52) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04_x4 . }
          [2020-12-03 14:19:52] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04_x4 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F3/5||5/5-2] (2020-12-03 14:19:52) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04_x4 . }
          [2020-12-03 14:19:52] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02h2_g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04_x4 . }
            Query return lines = 0
          } [0.640s]
          Filt_Query_Ret = 0 / 0 ( 0.640s)
        } [0.640s]
      } [0.847s]
      [Len-2||F4/5] (2020-12-03 14:19:52) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:52] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 2136
        } [0.549s]
        Filt_Query_Ret = 207 / 2136 ( 0.558s)
        [Len-2||F4/5||2/5-1] (2020-12-03 14:19:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7l . }
          [2020-12-03 14:19:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01q7l . }
            Query return lines = 0
          } [0.009s]
          Filt_Query_Ret = 0 / 0 ( 0.009s)
        } [0.009s]
        [Len-2||F4/5||2/5-2] (2020-12-03 14:19:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7l . }
          [2020-12-03 14:19:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01q7l . }
            Query return lines = 4
          } [0.122s]
          Filt_Query_Ret = 0 / 4 ( 0.122s)
        } [0.122s]
        [Len-2||F4/5||5/5-1] (2020-12-03 14:19:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04_x4 . }
          [2020-12-03 14:19:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.04_x4 . }
            Query return lines = 0
          } [0.019s]
          Filt_Query_Ret = 0 / 0 ( 0.019s)
        } [0.019s]
        [Len-2||F4/5||5/5-2] (2020-12-03 14:19:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04_x4 . }
          [2020-12-03 14:19:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03rjj ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.04_x4 . }
            Query return lines = 0
          } [0.443s]
          Filt_Query_Ret = 0 / 0 ( 0.443s)
        } [0.444s]
      } [1.153s]
      [Len-2||F5/5] (2020-12-03 14:19:53) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:19:53] SPARQL hit!
        Filt_Query_Ret = 8 / 125 ( 0.001s)
        [Len-2||F5/5||1/5-1] (2020-12-03 14:19:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01_lhg . }
          [2020-12-03 14:19:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01_lhg . }
            Query return lines = 0
          } [0.011s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
        [Len-2||F5/5||1/5-2] (2020-12-03 14:19:53) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01_lhg . }
          [2020-12-03 14:19:53] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01_lhg . }
            Query return lines = 0
          } [1.500s]
          Filt_Query_Ret = 0 / 0 ( 1.500s)
        } [1.500s]
        [Len-2||F5/5||3/5-1] (2020-12-03 14:19:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02h2_g . }
          [2020-12-03 14:19:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02h2_g . }
            Query return lines = 0
          } [0.020s]
          Filt_Query_Ret = 0 / 0 ( 0.020s)
        } [0.021s]
        [Len-2||F5/5||3/5-2] (2020-12-03 14:19:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02h2_g . }
          [2020-12-03 14:19:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02h2_g . }
            Query return lines = 0
          } [0.468s]
          Filt_Query_Ret = 0 / 0 ( 0.468s)
        } [0.468s]
        [Len-2||F5/5||4/5-1] (2020-12-03 14:19:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03rjj . }
          [2020-12-03 14:19:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03rjj . }
            Query return lines = 0
          } [0.008s]
          Filt_Query_Ret = 0 / 0 ( 0.008s)
        } [0.009s]
        [Len-2||F5/5||4/5-2] (2020-12-03 14:19:55) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03rjj . }
          [2020-12-03 14:19:55] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.04_x4 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03rjj . }
            Query return lines = 0
          } [1.992s]
          Filt_Query_Ret = 0 / 0 ( 1.992s)
        } [1.992s]
      } [4.001s]
      333 coarse schemas retrieved from scratch.
      Calculating F1 for 333 coarse schemas: {
        Current: 0 / 333
        Checking schema 0 / 333: {
          [('Main', '==', 'm.01_lhg', ['soccer.football_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:soccer.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:soccer.football_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 1 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01_lhg fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 WHERE { fb:m.01_lhg fb:sports.sports_team.founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'1898'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 2 / 333: {
          [('Main', '==', 'm.01_lhg', ['user.hangy.default_domain.sports_team_gender.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:user.hangy.default_domain.sports_team_gender.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:user.hangy.default_domain.sports_team_gender.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 4 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.championships'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:sports.sports_team.championships ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:sports.sports_team.championships ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'1982 FIFA World Cup'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 5 / 333: {
          [('Main', '==', 'm.01_lhg', ['soccer.football_team.matches'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:soccer.football_team.matches ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:soccer.football_team.matches ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 10
            Final Answer: {'2006 FIFA World Cup Final', '2010 FIFA World Cup Group F - ITA ./. NZL', 'UEFA Euro 2012 Final', 'UEFA Euro 2012 Semi-final II', '1982 FIFA World Cup Final', '2010 FIFA World Cup Group F - ITA ./. PAR', '1994 FIFA World Cup Final', '1970 FIFA World Cup Final', 'UEFA Euro 2012 Quarter-final IV', '2010 FIFA World Cup Group F - SVK ./. ITA'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 6 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01_lhg fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Football'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 7 / 333: {
          [('Main', '==', 'm.01q7l', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7l fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7l fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01q7l'}
            Query return lines = 2
            Final Answer: {'Intellectual capital revisited (and why we should care)', 'A Nation of Counterfeiters: Capitalists, Con Men, and the Making of the United States'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 8 / 333: {
          [('Main', '==', 'm.01q7l', ['base.ikariam.ikariam_resource_category.resources'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7l fb:base.ikariam.ikariam_resource_category.resources ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01q7l fb:base.ikariam.ikariam_resource_category.resources ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01q7l'}
            Query return lines = 1
            Final Answer: {'Gold'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 9 / 333: {
          [('Main', '==', 'm.02h2_g', ['time.event.locations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:57] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:time.event.locations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 2
            Final Answer: {'Italy', 'Sicily'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 10 / 333: {
          [('Main', '==', 'm.02h2_g', ['time.event.start_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02h2_g fb:time.event.start_date ?o1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 WHERE { fb:m.02h2_g fb:time.event.start_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 1
            Final Answer: {'1943'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 11 / 333: {
          [('Main', '==', 'm.02h2_g', ['time.event.included_in_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:time.event.included_in_event ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 2
            Final Answer: {'World War II', 'Mediterranean and Middle East theatre of World War II'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 12 / 333: {
          [('Main', '==', 'm.02h2_g', ['base.culturalevent.event.event_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:base.culturalevent.event.event_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 13 / 333: {
          [('Main', '==', 'm.02h2_g', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 1
            Final Answer: {'Borderland'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 14 / 333: {
          [('Main', '==', 'm.02h2_g', ['time.event.end_date'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02h2_g fb:time.event.end_date ?o1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 WHERE { fb:m.02h2_g fb:time.event.end_date ?o1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 1
            Final Answer: {'1945'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 15 / 333: {
          [('Main', '==', 'm.02h2_g', ['time.event.includes_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:time.event.includes_event ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:time.event.includes_event ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 20
            Final Answer: {'Battle of Ortona', 'Battle of Monte Cassino', 'Monte la Difensa', 'Allied invasion of Sicily', 'Allied invasion of Italy', 'Air raid on Bari', 'Battle of San Marino', 'Battle of Rimini', 'Battle of San Pietro Infine', 'Operation Hasty', 'Bernhardt Line', 'Battle of Cisterna', 'Spring 1945 offensive in Italy', 'Bombing of the Vatican', 'Battle of Garfagnana', 'Gothic Line', 'Four days of Naples', 'Moro River Campaign', 'Invasion of Elba', 'Battle of Ancona'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 16 / 333: {
          [('Main', '==', 'm.02h2_g', ['base.culturalevent.event.entity_involved'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02h2_g fb:base.culturalevent.event.entity_involved ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 18
            Final Answer: {'San Marino', 'Vatican City', 'Brazilian Expeditionary Force', 'Heinrich von Vietinghoff', 'Harold Alexander, 1st Earl Alexander of Tunis', 'Army Group C', 'British Raj', 'Benito Mussolini', 'Dwight D. Eisenhower', 'Henry Maitland Wilson, 1st Baron Wilson', 'Italian Social Republic', 'Union of South Africa', 'Albert Kesselring', 'Polish Armed Forces in the West', 'Rodolfo Graziani', 'Italian resistance movement', 'Allied Force Headquarters', 'Nazi Germany'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 17 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Constitutional republic', 'Parliamentary republic', 'Unitary republic'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 18 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italian Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 19 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 111
            Final Answer: {'Province of Florence', 'Province of Crotone', 'Province of Macerata', 'Province of Campobasso', 'Province of Rieti', 'Province of Taranto', 'Province of Carbonia-Iglesias', 'Province of Modena', 'Province of Benevento', 'Province of Naples', 'Province of Ragusa', 'Province of Teramo', 'Aosta Valley', 'Province of Rimini', 'Province of Oristano', 'Province of Lucca', 'Province of Pordenone', 'Province of Venice', 'Province of Bari', 'Province of Pavia', 'Province of Cosenza', 'Province of Ravenna', 'Province of Vicenza', 'Province of La Spezia', 'Province of Agrigento', 'Province of Sondrio', 'Province of Cremona', 'Province of Pescara', 'Province of Chieti', 'Province of Biella', 'Province of Cuneo', 'Province of Belluno', 'Province of Asti', 'Province of Medio Campidano', 'Province of Reggio Calabria', 'Province of Cagliari', 'Province of Bologna', 'Province of Trieste', 'Trentino', 'Province of Rovigo', 'Province of Verbano-Cusio-Ossola', 'Province of Como', 'Province of Genoa', 'Province of Pesaro and Urbino', 'Province of Ascoli Piceno', 'Province of Frosinone', 'Province of Isernia', 'Province of Barletta-Andria-Trani', 'Province of Padua', 'Province of Alessandria', 'Province of Savona', 'Province of Caserta', 'Province of Ancona', 'Province of Ogliastra', 'Province of Pisa', 'Province of Verona', 'Province of Forlì-Cesena', 'Province of Lecco', 'Province of Nuoro', 'Province of Rome', 'Province of Siena', 'Province of Prato', 'Province of Grosseto', 'Province of Pistoia', 'Province of Foggia', 'Province of Catania', 'Province of Lodi', 'Province of Olbia-Tempio', 'Province of Palermo', 'Province of Varese', 'Province of Matera', 'Province of Potenza', 'Province of Fermo', 'Province of Arezzo', 'Province of Messina', 'Province of Bergamo', 'Province of Brindisi', 'Province of Reggio Emilia', 'Province of Brescia', 'South Tyrol', 'Province of Salerno', 'Province of Gorizia', 'Province of Piacenza', 'Province of Catanzaro', 'Province of Vercelli', 'Province of Massa and Carrara', 'Province of Novara', 'Province of Latina', 'Province of Ferrara', 'Province of Livorno', 'Province of Treviso', 'Province of Caltanissetta', 'Province of Lecce', 'Province of Imperia', 'Province of Perugia', 'Province of Monza and Brianza', 'Province of Terni', 'Province of Trapani', 'Province of Milan', 'Province of Avellino', 'Province of Sassari', 'Province of Turin', 'Province of Syracuse', 'Province of Mantua', 'Province of Vibo Valentia', 'Province of Enna', 'Province of Viterbo', "Province of L'Aquila", 'Province of Udine', 'Province of Bolzano-Bozen', 'Province of Parma'}
            Answers = 111, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 111, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 20 / 333: {
          [('Main', '==', 'm.03rjj', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 21 / 333: {
          [('Main', '==', 'm.03rjj', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 22 / 333: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.administrative_parent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_parent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Earth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 23 / 333: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.administrative_area_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_area_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Sovereign state'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 24 / 333: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.short_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.short_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 25 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Italian Parliament', 'Senate of the Republic', 'Chamber of Deputies'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 26 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.agencies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.agencies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 4
            Final Answer: {'Italian Ministry of Education, Universities and Research', 'Ministry of Cultural Heritage and Activities', 'Italian Ministry of Public Education', 'National Institute of Statistics'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 27 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1328
            Final Answer: {'Giuseppe Canale', 'Andy Varipapa', 'Sara Copia Sullam', 'Virgil Cantini', 'Santo Pezzutti', 'Altobello Melone', 'Sesto Rocchi', 'Antonio Demo', 'Tony Rizzo', 'Matteo Cozzari', 'Lotario Rangoni', 'Valentina Uccheddu', 'Rocco Girlanda', 'Simone Corazza', 'Luca Colombo', 'Pierfrancesco Cittadini', 'Daniele Rosania', 'Pietro Paolo Floriani', 'Aldebrandus', 'Julia Mayr', 'Vincenzo Zitello', 'Gaetano Matteo Monti', 'Terenzio, Count Mamiani della Rovere', 'Giovanni Marchese di Provera', 'Mario Filippeschi', 'Sam Corso', 'Yeshi Silvano Namkhai', 'Venere Bianca', 'Gian Luigi Bonelli', 'Davide Bianchetti', 'Giuseppe Lillo', "Salvatore D'Elia", 'Enrico Bondi', 'Sergio Cofferati', 'Giacomo Chinellato', 'Giulio Petroni', 'Felice Giordano', 'Tito Boeri', 'Eugenio Barsanti', 'Cesare Braico', 'Mirko Ranieri', 'Gledis Cinque', 'Lorenzo Degeri', 'Pasquale Simonelli', 'Tommaso Reato', 'Giorgio Galimberti', 'Carlo Giovanardi', 'Peter Greco', 'Cristina Castagna', 'Enrico Piaggio', 'Oreste Sindici', 'Giuseppe Persiani', 'Attilio Pratella', 'Antonella Capriotti', 'Goran Nava', 'Sébastien Meoli', 'Giovanni Antonio Pandolfi', 'Antonio Maria Costa', 'Anne Gonzaga', 'Antonino Calderone', 'Fabio Cassanelli', 'Dhany', 'Giuseppe Porzio', 'Constantino López', 'Cesare Laurenti', 'Arturo Mario', 'Ferdinando Tacconi', 'Judah Monis', 'Luigi Longo', 'Dario Mollo', 'Mario Stoppino', 'Joseph Farina', 'Carlo Mornati', 'Amarro Fiamberti', 'Giovanni Bonati', 'Franc Trkman', 'Amedeo De Filippi', 'Giovanni Roccotelli', 'Paolo Caronni', 'Marta Rezoagli', 'Nicholas of Tolentino', 'Enrico Leide', 'Corrado Zambelli', 'Ned Roberto', 'Louis Rebisso', 'Massimo Carraro', 'Aldo Carpi', 'Gianfranco Dettori', 'Lelio Orsi', 'Daniele Luppi', 'Tonina Torrielli', 'Marcello Possenti', 'Felice Carena', 'Giampietro Campana', 'Marco Sabiu', 'Massimo Carmassi', 'Denis', 'Pietrangelo Pettenò', 'Pietro Fragiacomo', 'José de Ribas', 'Ronnie Hepworth', 'Ylenia Scapin', 'Luigi Mazzella', 'Alessio Chiodi', 'Claudio Polsinelli', 'Eugenia Falleni', 'Concetta Prestifilippo', 'Giulio Pace', 'Teresina Saracino', 'Felipe Pascucci', 'Paola Severino', 'Pompeo Colonna', 'Fausto Puglia', 'Guido Trento', 'Ugo La Malfa', 'Mario Longo', 'Alexandra Delli Colli', 'Massimo Teodori', 'Rossella Giordano', 'Pierluigi Vigna', 'Pier Antonio Panzeri', 'Giacomo and Giovanni Battista Tocci', 'Angelo Copeta', 'Giovanni Assenza', 'Carla Gavazzi', 'Nello Carotenuto', 'Bella Carroll', 'Luigi Stipa', 'Chiara Nappi', 'Andrea Guardini', 'Francesco Rossetti', 'Girolamo Zanchi', 'Alberto Braglia', 'Giovanni Marinelli', 'Francesco da Ponte', 'Maria Augimeri', 'Pietro Gnocchi', 'Lucia Morico', 'Francesco Fonte', 'Francesco Negri', 'Mario Taurasi', 'S. Samuel DiFalco', 'Roberto Ardigò', 'Girolamo Mocetto', 'Azzone Visconti', 'John J. Maresca', 'Camilla de Rossi', 'Tanzio da Varallo', 'Pietro Fancelli', 'Manuela Dal Lago', 'Valentina Giovagnini', 'Vittore Baroni', 'Mike', 'Orso Mario Corbino', 'Paolo Longo', 'Alberto Mazzucato', 'Carlo Maria Maggi', 'Stefano Rosselli del Turco', 'Ronnie Quintarelli', 'Felice Benasedo', 'Filippo Grandi', 'Paolo Giaretta', 'Girolamo Tiraboschi', 'Celestino Migliore', 'Teresa Belloc-Giorgi', 'Nicolò Pollari', 'Giuseppe Jappelli', 'Bramante Buffoni', 'Davide Zappacosta', 'Andrea Previtali', 'Thayaht', 'Felix of Cantalice', 'Ferdinando Beccalli-Falco', 'Alberto Gandossi', 'Jennifer Missoni', 'Saint Paternian', 'Gianni Riotta', 'Pietro Bellotti', 'Carlo Catani', 'Giorgio Salmoiraghi', 'Gianni Togni', 'Marco Andreini', 'Francesca Fanti', 'Arrigo Petacco', "Francesco Melzi d'Eril", 'Ugo Spirito', 'Gian Matteo Giberti', 'Giuseppe Canella', 'Andrea Colombo', 'Francesco Vitelli', 'Antonio Baldi', 'Giovanni Di Stefano', 'Anthony Julian', 'Carlo Piana', 'Henry of Treviso', 'Andrea Volpe', 'Ramba', 'Tatiana Bonetti', 'Ortolano Ferrarese', 'Alessandro Araldi', 'Lorenzo Onofrio Colonna', 'Dave Rodgers', 'Rosie Grasso', 'Andrea Costa', 'Chris Giunchigliani', 'Gabriele Ferretti', 'Pietro Calendino', 'Salvatore Russo', 'Italo Allodi', 'Fausto Ricci', 'Giorgio Francia', 'Alberto Angelini', 'Maria Roda', 'Luca Rangoni', 'Linda Sini', 'Santo Varni', 'Guido Guidi', 'Albano Pera', 'Italo Martinenghi', 'Giuseppe Meda', 'Enrico Alvino', 'Giuseppe Perrino', 'Giuseppe Cipriani', 'Angelo Piccaluga', 'Angelo Garzio', 'Paolo Gorini', 'Michele Quaranta', 'Margherita Boniver', 'Claudio Nunes', 'Andrea Raimondi', 'Marco Tonazzi', 'Giovanni Andrea Lazzarini', 'Hyacintha Mariscotti', 'Francesco Monti', 'Andrea Longo', 'Eugenio Calabi', 'Alberto Sevieri', 'Lucio Malan', 'Giuseppe Errante', 'Panzacchi', 'Augusto Gregorini', 'Aldon Lewis Lenard', 'Antonio Rocco', 'Bruno Magli', 'Thomas Eboli', 'Piero Scaruffi', 'Roberto Dipiazza', 'Pia Locatelli', 'Giovanni Marradi', 'Giovanni Donato da Montorfano', 'Ugo Gobbato', 'Pio Laghi', 'Teresa de Lauretis', 'Pierfrancesco Cravel', 'Antonio DeVity', 'Ibycus', 'Gianluca Comin', 'Daniele Vicari', 'Carlo Barone', 'Giacomo Debenedetti', 'Gioacchino Prati', 'Inés Murray', 'James Alberione', 'Aniello Califano', 'Emilio Floris', 'Antonio Rozzi', 'Ferdinando Minoia', 'Emanuele Suagher', "Maria Fortunata d'Este", 'Carlo Zinelli', 'Alexander Robotnick', 'Matteo Cocco', 'Silvio Mondinelli', 'Francesco Uliano', 'Bernardino Realino', "Guittone d'Arezzo", 'Giampiero de Carli', 'Daniele Pagani', 'Julian Fantino', 'Vittorio Gallinari', 'Sergio Zardini', 'Robin Monotti Graziadei', 'Andrea Corsali', 'Pier Carpi', 'Carlo Porta', 'Luciano Biondini', 'Francesco di Paola Cassetta', 'Giuseppe Gabellone', 'Luigi Lanzi', 'Cesare Benedetti', 'Donatella Damiani', 'Alessandro Vitali', 'Lucio Russo', 'Alessia Pertoldi', 'Dionigi Bussola', 'Roberto Pinotti', 'Alessandro Marangoni', 'Luca Percassi', 'Monmouth Coffee Company', 'Luigi Sacco', 'Elena Paparazzo', 'Fabio Caressa', 'Alessandro Salvio', 'Urbano Cairo', 'Guido Deiro', 'Medardo Fantuzzi', 'Carlo Vizzini', 'Benedetto Montagna', 'Ezio Galon', 'Santo Zago', 'Marco Marchetti', 'Bruno Kessler', 'Pietro Caucchioli', 'Galeotto I Malatesta', 'Giuseppe Pericu', 'Andrea Claudio Galluzzo', 'Nemo Agodi', 'Andrea Santoro', 'Carlo Vidano', 'Max Sabbatani', 'Luca Cumani', 'Salvatore Contorno', 'Carlo Facetti', 'Alessandro Lupo', 'Paolo Cozzi', 'Marcello Capra', 'Gasparo Gozzi', 'Riccardo Maspero', 'Samuele Lorenzi', 'Arabella Lennox-Boyd', 'Nicola De Angelis', 'Danijay', 'Massimo Cellino', 'Andrea Ronchi', 'Adriano Baffi', 'Sergio Vento', 'Giovanni Migliara', 'Nicol Gastaldi', 'Samanta Bardini', 'Assunta Magaldi', 'Marco Albarello', 'Enrico Bernardi', 'Girolamo Maria Gotti', 'Luca Fancelli', 'Carlo Cercignani', 'Pietro Antonio Magatti', 'Pier Francesco Mazzucchelli', 'Antonello Rubino', 'Filippo Palizzi', 'Mauro Liburdi', 'Salvatore Sandomenico', 'Michelle Beadle', 'Simona Fusco', 'Massimo Consoli', 'Antonio Scarpa', 'Antonella Serra Zanetti', 'Vincenzo Di Mauro', 'Paolo Antonio Barbieri', 'Tommy Vee', 'Giovanni Sostero', 'Alfred Breitman', 'Líbero Badaró', 'Riccardo Nencini', 'Giovanni Angelo Borroni', 'Gianfranco Pasquino', 'Matteo Liviero', 'Luca Barbieri', 'Mario Mauro', 'Achille Grandi', 'Ernesto Morelli', 'Jo Squillo', 'Vittorio Capparelli', 'Simone Berti', 'Sergio Caputo', 'Alessandro Geraldini', 'Lorenzo Apicella', 'Francesco Morandini', 'Michele Abbruzzo', 'Tarquinio Provini', 'Matej Cernic', 'Riccardo Piacentini', 'Gaius Asinius Pollio', 'Gino Greco', 'Vincenzo Di Meglio', 'Anthony Neyrot', 'Simona Galassi', 'Giovanni Martino', 'Giambattista Altieri', 'Anthony J. DePace', 'Vincenzo Pesce', 'Bruno Bertacchini', 'Daniele Audetto', 'Alberto Gianni', 'Alice Teghil', 'Francesca Benedetti', 'Giovanni Ruffini', 'Giuseppe Bastianelli', 'Giulio Genoino', 'Gino Armano', 'Gabriella Martinelli', 'Vittorio Garatti', 'Leonard Falcone', 'Andrea Lalli', 'Guido Leoni', 'Lorenzo Perrone', 'Alberto Zoppe', 'Ladislao Guinigi', 'Nino Piccoli', 'Giuseppe Mani', 'Arrigo Breschi', 'Claudio', 'Nino Borsari', 'Nastassja Burnett', 'Luca Moscatiello', 'Matteo Becucci', 'Victor Romito', 'Gino Colaussi', 'Vincenzo Visco', 'Riccardo Moscatelli', 'Riccardo Tesi', 'Stefano Tamburini', 'Alessandro Riccitelli', 'Pier Gonella', 'Roberto Caruso', 'Alessandro Campagna', 'Goffredo Cappa', 'Regolo Ricci', 'Ivo Cristante', 'Angiolo Mazzoni', 'Lattanzio Querena', 'Romano Felmang', 'Giuseppe Francica-Nava de Bontifè', 'Emanuele Berrettoni', 'Candido Jacuzzi', 'Carlo Ratti', 'Marco Visconti', 'Domenico Induno', 'Luigi Broglio', 'Marco Mordente', 'Franco Imoda', 'Pietro Boscaini', 'Elena Runggaldier', 'Bruno Spaggiari', 'Autonomus', 'Andrea Sassetti', 'Davide Zannoni', 'Mario Lamberto', 'Camillo Pacetti', 'Diotisalvi Neroni', 'Dario Maestripieri', 'Massimo Maugeri', 'Carlo Biscaretti di Ruffia', 'Laura Chiesa', 'Jerry Riggio', 'Grazia Schiavo', 'Carlo Aymonino', 'Marco Di Lauro', 'Giorgio Belloni', 'Manuela Falorni', 'Giovanni Maria Benzoni', 'Matteo De Cosmo', 'Raffaella Leone', 'Andrea Belvedere', 'Franco Battaini', 'Paolo Scaroni', 'Giovanni Battista Gisleni', 'Domenico Cavagnari', 'Marc Wilder', 'Vittoria Aganoor', 'Giuseppe Alberti', 'Enrico Caterino Davila', 'Pat Occhiuto', "Nino D'Angelo", 'Margherita Caffi', 'Fabrizio Gatti', 'Giovanni Boccati', 'Sal Sparace', 'Cesare Pallavicino', 'Rocky Kansas', 'Franco Ziliani', 'Giovanni Tommasi Ferroni', 'Pietro Bertolini', 'Marcello Menegatto', 'Aldo Biscardi', 'Rene Caovilla', 'Filippo Carcano', 'Enrico Barone', 'Antonio Mancinelli', 'Jacobello del Fiore', 'Arturo Labriola', 'Martino Gamper', 'Alberto Alberani', 'Linda Landi', 'Riccardo Morandi', 'Carlo Fatuzzo', 'Marina Pierro', 'Roberto Inglese', 'DJ Gruff', 'Antonio Armellini', 'Alfredo Biondi', 'Lambert II of Spoleto, Holy Roman Emperor', 'Esther Minciotti', 'Giannino Marzotto', 'Denny Gigliotti', 'Silvana Arbia', 'Alessandro Butti', 'Dido Fontana', 'Gianni Leoni', 'Orazio Samacchini', 'Alessandro Poerio', 'Arthur Martinelli', 'Mario Rigamonti', 'Enzo Mirigliani', 'Galileo Chini', 'Arrigo Pola', 'Raffaelle Monti', 'Cecilia Vianini', 'Cristina Vergano', 'Diego Cogolato', 'Giovanni Maccelli', 'Gianluca Susta', 'Stefano Arienti', 'Marco Liberi', 'Laura Golarsa', 'Louise Grieco', 'Giuseppe Orsi', 'Ennio Doris', 'Princess Marcella Borghese', 'Mattia Sprocati', 'Paul G. Comba', 'Adriana Serra Zanetti', 'John Potestio', 'Callisto Piazza', 'Master of Estopiñán', 'Sergio Zaniboni', 'Italo Galbiati', 'Silver Pozzoli', 'Alessandra Giliani', 'Friedrich Sustris', 'Anna Remondina', 'Luigi Baccio del Bianco', 'Saverio Muratori', 'Enzo Cavazzoni', 'Dolly Grey', 'Robert St. Angelo', 'Paolo Domenico Finoglia', 'Mario Scialoja', 'Vincenzo Onorato', 'Martin Tielli', 'Guido Donegani', 'Alberto Fortis', 'Daniela Gattelli', 'Giovanni Speranza', 'Massimo Berdini', 'Pino Luongo', 'Vincenzo Esposito', 'Nuto Revelli', 'Count Alessandro Polizzi', 'Francesco Bruni', 'James Vincent Monaco', 'Tony Zappia', 'Mario Castoldi', 'Onorio Ruotolo', 'Alberto Sangiovanni-Vincentelli', 'Tommaso Caputo', 'Mirabello Cavalori', 'Gianni Rufini', 'Leandro Jayarajah', 'Lorenzo Delleani', 'Bindo Maserati', 'Antonio Poma', 'Giovanni Bernardo De Rossi', 'Gaia Bassani Antivari', 'Luigi Guanella', 'Robert Trimbole', 'Claudio Camaso', 'Giacomo Pacchiarotti', 'Baconin Borzacchini', 'Fabio Aru', 'Arturo Vittori', "Gigi D'Amico", 'Antonio Napolitano', 'Luca Vitali', 'Giuseppe A. Salussolia', 'Gianluigi Scalvini', 'Tommaso Costa', 'Mauro Del Giudice', 'Mary Solari', "Marco d'Agrate", 'Moreno Moser', 'Giuseppe Incorpora', 'Massimo Ceccherini', 'Guglielmo Caccia', 'Francesco Novati', 'Paula Alvarez Vaccaro', 'Otello Buscherini', 'Luciano Gaucci', 'Master of Apollo and Daphne', 'Michele Rizzo', 'Anastasia of Sirmium', 'Mirko Tremaglia', 'Roberto Gottardi', 'Evelyn Vicchiarello', 'Giorgio Locatelli', 'Pietro Lunardi', 'Maddalena Musumeci', 'Angelo Dubini', 'Benedetto Caliari', 'Carlo Cossutta', 'Emanuele Fiano', 'Isabella Morra', 'Antonio Dal Masetto', 'Alessandro De Marchi', "Biagio d'Antonio", 'Martino Bassi', 'Giovanni Ricciardi', 'Moira Placchi', 'Piero Corti', 'Andrea Bartolini', 'Angelo Litrico', 'Pasqualino Abeti', 'Italo Gismondi', 'Simone Calvano', 'Emilio Betti', 'Marco Carcangiu', 'Sylvano Balboni', 'Giovanni Benedetti', 'Giorgio Pini', 'Corrado Carnevale', 'Eraldo Bernocchi', 'Pablo Alvarado', 'Massimo Barbolini', 'Carlo Ademollo', 'Diego Stocco', 'Giuseppina Grassini', 'Cesare Facchinetti', 'Guariento di Arpo', 'V. I. Beretti', 'Guido Monte', 'Giulio Cantoni', 'Albertino Mussato', 'Guglielmo Letteri', 'Mario Pretto', 'Giovanni Antonio Fasolo', 'Lorenzo Cesa', 'Alexander Egger', 'Paolo Montarsolo', 'Sebastiano Cristillo', 'Bartolomeo Biscaino', 'Agostino Carollo', 'Filippo Maria Scardina', 'Eugenio Bava', 'Ercole Baldini', 'Carlo Mazzoni', 'Astrid Besser', 'Vincenzo Zinna', 'Giuseppe Borgatti', 'Bruno Contrada', 'Raffaele Viviani', 'Mario Chiarini', 'Erik Fabbri', 'Alessandro Minelli', 'Placido Costanzi', 'Raffaella Di Marzio', 'Alessandro Marchesini', 'Antonio Pollina', 'Pino Cerami', 'Guido Barbujani', 'Gaetano Filangieri', 'Maurizio Gherardini', 'Michele Piccirillo', 'Guillermo Gianninazzi', 'Andrea Moretti', 'Vincent Barbi', 'Domenico Silvio Passionei', 'Emiliano Brembilla', 'Gaetano Puglia', 'Mario Racco', 'Ray Tarantino', 'Giovanni Francesco Toscani', 'Salvatore Luigi Puglia', 'Bruno Banducci', 'Luigi Miceli', 'Peter Vannes', 'Paolo Petrocelli', 'Giselda Zani', 'Alessandro Bardelli', 'Francesco Morini', 'Paola Renata Carboni', 'Matteo Barbini', 'Auguste Galli', 'Antonio Franco', 'Mario Torelli', 'Melania Grego', 'Gianni Paladini', 'Stefania Craxi', 'Paola Morra', 'Bobo Craxi', 'Michele Morganella', 'Sergio Rossi', 'Franco Rossi', 'Pietro Aldi', 'Gianni Averaimo', 'Michele di Rocco', 'Aristide Rinaldini', 'Frankie Pace', 'Raffaellino del Colle', 'Giovanni Simeoni', 'Michelangelo Falvetti', 'Giacobbe Cervetto', 'Davide Milesi', 'Franco Assetto', 'Serafino De Tivoli', 'Corrado Balducci', 'Bernice Pontrelli', 'Giulio Alfieri', 'Antonino Profeta', 'Francesco Francavilla', 'Gerhard Kerschbaumer', 'Bartolus de Saxoferrato', 'Angelo Vanzin', 'Amedeo Maiuri', 'Carlo Becchi', 'Marcello Ruta', 'Valerio Fioravanti', 'Matteo Zennaro', 'Roberto de Mattei', 'Maria Luisa Coppola', 'Ivo Milazzo', 'Alessandro Paci', 'Andrea Meneghin', 'Luca Ferricchio', 'Mariella di Sarzana', 'Rocco Martino', 'Giunta Pisano', 'Stefania Blancuzzi', 'Michele Ferrero', 'Laura Inserra', 'Ivan Goi', 'Giuseppe Bottani', 'Giorgio La Malfa', 'Alberto Cova', 'Giacomo Doria', 'Fausto Pocar', 'Giovanni Camillo Sagrestani', 'Virginio Merola', 'Sciltian Gastaldi', 'Angelo Dolci', 'Nick Bigtower', 'Costantino Nigra', 'Tadini', 'Argeo Quadri', 'Federico Baldissera Bartolomeo Cornaro', 'Giada Wiltshire', 'Giuseppe Ripamonti', 'Carlo Chiostri', 'Giuseppe Di Vittorio', 'Renato Curcio', "Raimondo Tommaso D'Aronco", 'Marco Calliari', 'Gilberto Parlotti', 'Pietro Maffi', 'Amleto Vespa', 'Gennaro Portanova', 'Carmen Casteiner', 'Angel Di Stefani', 'Roberto Manzin', 'Massimo Montanari', 'Francesco Domenico Chiarello', 'Roberto Leydi', 'Giacomo Gubitosi', 'Paolo Maffei', 'Paul Palmentola', 'Vittorino Veronese', 'Francesco Sassetti', 'Maso Finiguerra', 'Luca Campigotto', 'Saint Mercurius', 'Manuel Nardi', 'Mattia Gri', 'Daniele Berretta', 'Giorgio Belladonna', 'Vincenzo Guerini', 'Nino Bacci', 'Cristina Wistari Formaggia', 'Leonardo Fioravanti', 'César Fronzi', 'Raffaele Fiorini', 'Remo Venturi', 'Piero Liatti', 'Fabrizio Pirovano', 'Anthony Terlazzo', 'Laurette Séjourné', 'Piero Marini', 'Chiara Clemente', 'Mirco Garrone', 'Alfredo Donnarumma', 'Virgilio Mortari', 'Franco Paonessa', 'Giovanni Minzoni', 'Paolo Borghi', 'Davide Carcuro', 'Luigi Antonini', 'Federica Panicucci', 'Lucio Esposito', 'Luigi Amaducci', 'Stefano Tofanelli', 'Paolo Canevari', 'Luca Belcastro', 'Giovanni Sante Gaspero Santini', 'Manuel Personè', 'Georgia Anderson', 'Fabrizio Lai', 'Guido Grandi', 'Sergio Tacchini', 'Pietro Loro Piana', 'Ezio Gianola', 'Tullio De Mauro', 'Sudi Van Dien', 'Luigina Giavotti', 'Mario Spezi', 'John Perri', 'Gaetano Merola', 'Tony Garofano', 'Vincenzo Gambi', 'Federico Callori di Vignale', 'Tancrède Dumas', 'Renato Fucini', 'Paolo Valeri', 'Francesco de Sanctis', 'Joseph Toronto', 'Carlo Briani', 'Vittorio Tamagnini', 'Lino Pertile', 'Eupremio Carruezzo', 'Nicola Murru', "Bartolomeo d'Alviano", 'Walter Magnifico', 'Elena Sangro', 'Paola Mori', 'Baldassarre Lanci', 'Nicolò Grassi', 'Romeo Antoniazzi', 'Alberto Fermi', 'Giacinto Andrea Cicognini', 'Gualtiero De Angelis', 'Carlo Somigliana', 'Stefano Lorenzini', 'Giuseppina Bozzacchi', 'Rosalba Grottesi', 'George Hadfield', 'Franco Bassanini', 'Ennio Maffiolini', 'Giovanni Amighetti', 'Carlo Alberto Nucci', 'Gianmarco Bellini', 'Carlo Cassola', 'Pasquale Sbarra', 'Stefano Vagnini', 'Lorenzo Remedi', 'Hank Biasatti', 'Paolo Pucci', "Tommaso D'Apice", 'Tiziano Crudeli', 'Eduardo Missoni', 'Mirko Giansanti', 'Giuseppe Dossetti', 'Guglielmo Franchetti', 'Giacomo Grosso', 'Fulvio Scola', 'Lucilla Perrotta', 'Fortunato Arena', 'Domenico Freschi', 'Giorgio Schiavini', 'Stefano Bardini', 'Marco Mazza', "Giuseppe Dell'Aquila", 'Sabrina A. Parisi', 'Cesare Monti', 'Sergio Cragnotti', 'Giuseppe Mango', 'Maria Canins', 'Angelo Bergamonti', 'Mario Peressin', 'Luigi Arcangeli', 'Francesco Conconi', 'Gaetano Antoniazzi', 'Pellegrino Tibaldi', 'Erwin Bozzolini', 'Carlo Giuseppe Testore', 'Gianvito Martino', 'Nick Catania', 'Consiglio Di Nino', 'Leopoldo Cicognara', 'Manuela Levorato', 'Anton Muscatelli', 'Daniele Bernazzani', 'Vittorio Merloni', 'Valentino Castellani', 'Pasquale Camerlengo', 'Rino Rappuoli', 'Guido Cappellini', 'Italo Zucchelli', 'Luigi Pasetti', 'Cino Del Duca', 'Cristina Trivulzio Belgiojoso', 'Matteo Barzini', 'Piero De Benedictis', 'Marta Mondelli', 'Stefy Bau', 'Giovanni Pellegrino', 'Giuseppe Pira', 'Alessandro Milesi', 'Salvatore Cardillo', 'Gianluigi Quinzi', 'Roberta Pedranzini', 'Fabrizia Dal Farra', 'Sandro Gamba', 'Michele Dancelli', 'Ruggero Cappuccio', 'Anita Cerquetti', 'Lorenzo Salvi', 'Roberto Giacobbo', 'Marco Traniello', 'Francesco Casetti', 'Diego Manzoni', 'Giannetto De Rossi', 'Vittorio Verga', 'Mario Canali', 'Giandomenico Basso', 'Bartolomeo della Gatta', 'Carola Lotti', 'Pantaleo Corvino', 'Maurizio Sacconi', 'Franco Bonera', 'Salvatore Liberace', 'Angelo Carosi', 'Paolo Frascatore', 'Delfy de Ortega', 'Bartolomeo Bezzi', 'Sandro Giglio', 'Paolo Andrea Colombo', 'Sarafina Saracino', 'Alessandro Cattelan', 'Marco Ponti', 'Sigismondo Benini', 'Elvira Curci', 'Annina Ardito', 'Trevor Trevisan', 'Francesco Bentivegna', 'Alessandro dal Borro', 'Claudio Stecchi', 'Elio', 'Wilma De Angelis', 'Luca Martin', 'Marcello Guido', 'Attilio Piccioni', 'Davide Prete', 'Antonio Forcione', 'Mario Majeroni', 'Vincenzo Franco', 'Gustavo Maria Bruni', 'Mario Andretti', 'Benedetto Della Vedova', 'James Lacaita', 'Simona Rinieri', 'Madame Fiorenza', 'Liana Orfei', 'Giovanni Lindo Ferretti', 'Moony', 'Chicco Testa', 'Stefano Manfredi', 'Roberto Meloni', 'Luis Mottura', 'Guido Morselli', 'Francesco Giavazzi', 'Apollo Granforte', 'Erica Alfridi', 'Ida de Gattis', 'Virginio Ferrari', 'Silvio Clementelli', 'Agostino Brunias', 'Alessandro Sala', 'Massimiliano Ferretti', 'Carol Davila', 'Franco Saudelli', 'Aldo Santorum', 'Dario Simoni', 'Francesco Pacelli', 'Filippo de Filippi', 'Daniele Giordano', 'Flavio Sala', 'Alighiero Noschese', 'Judas Cyriacus', 'Giambattista Nolli', 'Bartolomeo D’Avanzo', 'Andrea Libardi', "Francesco D'Andrea", 'Claudio Licciardello', 'Regina Strinasacchi', 'Consolata Betrone', 'Giuseppe Morabito', 'Frank Tieri', 'Alfredo Capelli', 'Rosetta Calavetta', 'Achille Bocchi', 'Pietro Caruso', 'Joseph Pinetti', 'Girolamo da Cremona', 'Nicola Salerno', 'Giustino Fortunato', 'Giovanni Prati', 'Mario Einaudi', 'Frank Vittor', 'Vincenzo Arciresi', 'Arrigo Colombo', 'Fabio Pizzolato', 'Duilio Agostini', 'Remo Bertoni', 'Princess Bee', 'Carlo Bonomi', 'Carlo Calani', 'Antipope John XXIII', 'Cesare Tallone', 'Giorgio Melchiori', 'Giovanni di ser Giovanni Guidi', 'Giulia Marletta', 'Stefano Pasquini', 'Luigi Pigorini', 'Antonio Ricardo', 'Giulio Bonasone', 'Giuseppe Capotondi', 'John Fairfax', 'Claudio Martelli', 'Santo Bartolomeo Quadri', 'Grazia Narciso', 'Antonio Beato', 'Sergio Ciani', 'Michael S. Greco', 'Giuseppe Lumia', 'Thomas Gangemi', 'Pierluigi Billone', 'Sergio Messina', 'Matteo Anesi', 'Nicola Campogrande', 'Don Orlando', 'Silvia Armeni', 'Edoardo Blondett', 'Antoniazzo Romano', 'Alberto Cisolla', 'Luigi Tarisio', 'Romolo Murri', 'Francesco Piranesi', 'Leonardo Graziano', 'Giovanni Pittella', 'Pietro della Vecchia', 'Ubaldo Gandolfi', 'Ricky Gianco', 'Giuseppe Cindolo', 'Eugene Gaudio', 'Pierluigi Orlandini', 'Giacinto Menotti Serrati', 'Giovanni Berchet', 'Maurizio Vitali', 'Alessandro Vollero', 'Bob DiLuca', 'Ruggeru Sèttimu', 'Andrea di Robilant', 'Silvio Passerini', 'Giacomo Lercaro', 'Vittoriano Guareschi', 'Antony Carbone', 'Ignazio Porro', 'Franco Venturi', 'Pietro Ghedin', 'Francesco Minerva', 'Gianni Coscia', 'Giancarlo Primo', 'Luigi Esposito', 'Elia Dalla Costa', 'Al Palladini', 'Pier Ugo Calzolari', 'Alessandro Noselli', 'Francesco Bartolomeo Rastrelli', 'Roberto Esposito', 'Giancarlo Scottà', 'Giuseppe Diamantini', 'Paolo Coloni', 'VenetianPrincess', 'Luigi Benfatto', 'Franco Cucinotta', 'Stefano Arduino', 'Carlo Marchionni', 'Lorenzo Nina', 'Amico Bignami', 'Clara Boselli', 'Ulrich Mahlknecht', 'Domenico Maria Viani', 'Leonardo Nigro', 'Piero Rebaudengo', 'Roberto Cravero', 'Stefano Porcari', 'Maurizio Melina', 'Emilio, marquis Visconti-Venosta', 'Gretha Cavazzoni', 'Giancarlo Gentilini', 'Luca Alinari', 'Riccardo Improta', 'Giacomo Devoto', 'Crispin and Crispinian', 'Mino Carta', 'Valerio Aspromonte', 'Cristiana Muscardini', 'Rosario Livatino', 'Roberto Di Donna', 'Paolo Pino', 'Franco Margola', 'Adolfo Orsi', 'Andrea Ballerini', 'Philip Costa', 'Paolo Cavara', 'Benjamin Artom', 'Roberto Car', 'Franco Mimmi', 'Nicola Fiorenza', 'Laura Longo', 'William Jopling', 'Dino Bravo', 'Sante Geminiani', 'Giuseppe Cilento', 'Giuseppe Ceccato', 'Rodolfo Ceccotti', 'Luigi Aloysius Colla', 'Giuseppe Coluccio', 'Maurizio Remmert', 'Carlo Agostini', 'Shi Xing Mi', 'Michelangelo Fardella', 'Alberto Martini', 'Francesco Domenico Guerrazzi', 'Vittorio Leonardo', 'Corrado Farina', 'Giuseppe Vegas', 'Domenico Cacciola', 'Caspar Goodrich', 'Alberto Michelin', 'Viridis Visconti', 'Alfredo Colombo', 'Sandro Pallavicini', 'Charles Marega', 'Perseo Miranda', 'Flaviano Labò', 'Vittoria Accoramboni', 'Paolo Rotondo', 'Jean-Jacques Nkouloukidi', 'Carlo Ferrari', 'Marco Papa', 'Michael Fiaschetti', 'Mario Bezzi', 'Ed Agresti', 'Nino Randazzo', 'Romolo Ferri', 'Antiveduto Grammatica', 'Pietro Mengoli', 'Clelia Barbieri', 'Anthony Minichiello', 'Gaetano Monachello', 'Enrico Gamba', 'Giammario Piscitella', 'Laura Kuenssberg', 'Stefano Mammarella', 'Gianfranco Clerici', 'Gianfranco Frattini', 'Daniele Caimmi', 'Ubertino of Casale', 'Vincenzo Monaldi', 'Giorgio Anselmi', 'Giovanni Quagliata', 'Costanzo Preve', 'Filippo Sanjust', 'Giuliano da Maiano', 'Mario Migliardi', 'Stefano Jacini', 'Juan De Marchi', 'Henry Salvatori', 'Antonia Terzi', 'Giorgio Diritti', 'Luigi Premazzi', 'Guido delle Colonne', 'Guiniforte Solari', 'Daniel Kozelinski Netto', 'Paolo Baldieri', 'Manuela Manetta', 'Pietro Guarneri', 'Mario Somma', 'Loris Stecca', 'Altichiero', 'Sergio Zanatta', 'Josephine Cammarata', 'Giovanni Canestrini', 'Giovanbattista Venditti', 'Alessandro Figà Talamanca', 'Vincenzo Torrente', 'Beatrice I, Abbess of Quedlinburg', 'Giovanni Bazoli', 'Francesca Ciardi', 'Carlo Vittorio Varetti', 'Arthur DeLorenzo', 'Gino Pollini', 'Francesco Menzio', 'Agostino Veneziano', 'Vicky Piria', 'Angelo Patri', 'Benè Gola', 'Fabiola Gianotti', 'Carlo Pedretti', 'Rose Bassino', 'Carlo Antonio Testore', 'Roberto De Angelis', 'Ernesto Bazzaro', 'Filippo Galli', 'Delfino Borroni', 'Arthur Varney', 'Ezio Gamba', 'Mario Oriani-Ambrosini', 'Domenico Oppedisano', 'Fabio Meduri', 'Cristiano Muzzachi', 'Marco Micone', 'Lokanatha', 'Giovanni Rana', 'Tony', 'Fra Carnevale', 'Roberto Alessandria', 'Stephan Rosti', 'Stéphane Sarni', 'Giuseppe Pettine', 'Andrea Doninelli', 'Roberto Tamburini', 'Edmondo Rossoni', 'Jacques Inaudi', 'Samuele Bersani', 'Alessio Guarino', 'Riccardo Pazzaglia', 'Valerio Verre', 'Carlo Dusi', 'Pasquale Berardi', 'Pasquale Pozzessere', 'Stefano Razzetti', 'Riccardo Burchielli', 'Joe DiBella', 'Mario Catania', 'Caesar Cardini', 'Riccardo Truccolo', 'Giovanni Gioseffo dal Sole', 'Pierluigi Conforti', 'Cindy Valentine', 'Giuseppe Pinot-Gallizio', 'Angelo Celli', 'Enrico Patrizio', 'Cesare Orsenigo', 'Norberto Oberburger', 'Giulia Boverio', 'Giovanni Strangio', 'Bruno Osimo', 'Giuliano Briganti', 'Francesco Carbone Tomacelli', 'Andrea di Alessandro', 'Vespasiano I Gonzaga', 'Bruno Pagliai', 'Riccardo Brengola', 'Giuseppina Leone', 'Michele Rinaldi', 'Pasquale Schiattarella', 'Ugo A. Perego', 'Carmine Benincasa', 'Paolo Beatrizzotti', 'Aldo Brizzi', 'Andrea Tabanelli', 'Marco Martinelli', 'Girolamo Mazzola Bedoli', 'Giovanni Battista Amendola', 'Alberto Colombo', 'Bernard Castro', 'Giovanni Battista Caproni', 'Leandro Bisiach', 'Luigi Fabbri', 'Pietro Ostini', 'Andrea Leone', 'Claudio Sala', 'Alessandro Cruto', 'Davide Sorrenti', 'Maurizio Nassi', 'Francesco Franceschi', 'Piercarlo Ghinzani', 'Felice Bonetto', 'Adriano Bernardini', 'Giacomo Galanda', 'Marco Reguzzoni', 'Mario Sampirisi', 'Andrea Mantegna', 'Clemente Ruta', 'Vito Colonna', 'Benedetto da Maiano', 'John Cabot', 'Salvatore Burruni', 'Francesco I da Carrara', 'Maurizio Rossi', 'Ania Pieroni', 'Maria Giovanna Bhattacharya', 'Timothy Nocchi', 'Mario Corso', 'Hugh, Margrave of Tuscany', 'Filippo Corridoni', 'Andrea Giacomo Podesta', 'Antonio Cardarelli', 'Riccardo Cazzola', 'Agostino Ramelli', 'Vincenza Sicari', 'Nerio Alessandri', 'Elio Ragni', 'Ida Mari', 'Giovanni Rovetta', 'Alessandro Balzan', 'Giorgio Ferrara', 'Jean-Louis Jemma', 'Riccardo Garrone', 'Giampaolo Pozzo'}
            Answers = 1328, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.085s]
          Answers = 1328, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.085s]
        Checking schema 28 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Alps', 'Italian Peninsula', 'Europaregion Tirol-Südtirol-Trentino', 'Alps–Mediterranean Euroregion', 'Adriatic Euroregion'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 29 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.belongs_to_combatant_group'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.belongs_to_combatant_group ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Triple Entente'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 30 / 333: {
          [('Main', '==', 'm.03rjj', ['book.book_subject.musical_compositions_about_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.musical_compositions_about_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Aus Italien'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 31 / 333: {
          [('Main', '==', 'm.03rjj', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 10
            Final Answer: {'Mammon', 'Basil', 'Mukuro Rokudo', 'Lambo', 'Xanxus', 'Ludovico Orsi', 'Hayato Gokudera', 'Daemon Spade', 'Checco Orsi', 'Giotto'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.041s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.041s]
        Checking schema 32 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 23
            Final Answer: {'Italy national baseball team', "Italy women's national football team", "Italy women's national volleyball team", "Italy men's national water polo team", 'Italy national cricket team', 'Italy national futsal team', 'Italy national speedway team', "Italy women's national water polo team", "Italy men's national volleyball team", 'Italy Davis Cup team', 'Italy national football team', "Italy men's national ice hockey team", "Italy women's national beach handball team", 'Italy national basketball team', 'Italy national rugby union team', "Italy women's national rugby union team", "Italy women's national ice hockey team", 'Team Liquigas-Cannondale', 'A1 Team Italy', 'Italy national handball team', 'Italy Fed Cup team', "Italy men's national pitch and putt team", 'Italy national rugby league team'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 33 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_athlete_affiliation.athlete ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Elio Ragni'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 34 / 333: {
          [('Main', '==', 'm.03rjj', ['base.locations.countries.continent'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.locations.countries.continent ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Europe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 35 / 333: {
          [('Main', '==', 'm.03rjj', ['food.beer_country_region.beers_from_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:food.beer_country_region.beers_from_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 15
            Final Answer: {'La Tabachera Amarcord', 'Le Baladin Wayan', 'Le Baladin Super Baladin', "Le Baladin Nora 'Birra Biologica'", 'Nuovo Birrificio Italiano Amber Shock', 'Birra Moretti (Heineken) Moretti La Rossa', 'Le Baladin Isaac', 'Nuovo Birrificio Italiano Bibock', 'Castello Di Udine Birra Moretti', 'Menabrea Birra S.P.A.', 'Peroni Gran Riserva', 'Heineken Italia Ichnusa', 'Forst Premium', 'Peroni Nastro Azzurro', 'Ghisa'}
            Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 15, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 36 / 333: {
          [('Main', '==', 'm.03rjj', ['base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.thoroughbredracing.thoroughbred_racehorse_origin.horses_from_this_location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Tenerani', 'Ribot', 'Nearco'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 37 / 333: {
          [('Main', '==', 'm.03rjj', ['biology.breed_origin.breeds_originating_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:biology.breed_origin.breeds_originating_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 19
            Final Answer: {'Maremma Sheepdog', 'Ancona', 'Volpino Italiano', 'Italian Greyhound', "Cirneco dell'Etna", 'Lagotto Romagnolo', 'Sicilian Buttercup', 'Bracco Italiano', 'Bolognese', 'Bergamasco Shepherd', 'Spinone Italiano', 'St. Bernard', 'European Shorthair', 'Lottatore Brindisino', 'Dogo Sardesco', 'Neapolitan Mastiff', 'Cane Corso', 'Leghorn', 'Segugio Italiano'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 38 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.currency_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Euro'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.014s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.014s]
        Checking schema 39 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Esperanto Language', 'Occitan language', 'Italian Language', 'Austrian German', 'Albanian language'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 40 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.internet_tld'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.internet_tld ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'it'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 41 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.first_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.first_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 20
            Final Answer: {'Emilia-Romagna', 'Aosta Valley', 'Basilicata', 'Molise', 'Lombardy', 'Marche', 'Calabria', 'Abruzzo', 'Apulia', 'Friuli-Venezia Giulia', 'Trentino-Alto Adige/South Tyrol', 'Sicily', 'Lazio', 'Piedmont', 'Sardinia', 'Veneto', 'Campania', 'Liguria', 'Tuscany', 'Umbria'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 42 / 333: {
          [('Main', '==', 'm.03rjj', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'63 Ausonia'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 43 / 333: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.subdividing_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.subdividing_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italian region'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 44 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.government_positions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government_positions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Prime Minister of Italy', 'Italian Minister of Justice'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 45 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Government of Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 46 / 333: {
          [('Main', '==', 'm.03rjj', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'1861'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 47 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:58] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 9928
            Final Answer: {'Commezzadura', 'Jubilee Church', 'Moiola', 'Penna in Teverina', 'Cantalupa', 'Luserna', 'Dolianova Cathedral', 'San Paolo Albanese', 'Montescudaio', 'Villafranca Padovana', 'Bassano in Teverina', 'Gerosa', 'Pozzol Groppo', 'Caldarola', 'San Giovanni Valdarno railway station', "Sant'Angelo all'Esca", 'Rasen-Antholz', 'Bossolasco', 'Strongoli', 'Roman Catholic Diocese of Noto', 'Catenanuova', 'Gizzeria', 'Lana', 'Pradamano', 'San Giorgio del Sannio', 'Borgiallo', 'Mondolfo Airfield', 'Ferruzano', 'Santa Sofia', 'Castelletto sopra Ticino', 'Tignale', 'Esporlatu', "Fiesso d'Artico", 'Roascio', 'Traversella', 'Ortucchio', 'Province of Venice', 'Borgonovo Val Tidone', 'Samo, Calabria', 'Morbello', 'Casasco', 'Campobasso', 'Codognè', 'Ghedi', 'Stadio Mirabello', 'Parthenope University of Naples', 'Claino con Osteno', 'Luzzana', 'Province of Cuneo', 'Nebbiuno', 'Castelletto Uzzone', 'Trinitapoli', 'Soave', 'Entratico', 'Arsago Seprio', 'Verrua Savoia', 'Sparone', 'Falzarego Pass', 'Tricesimo', 'Pieve Fissiraga', 'Lazise', 'Vaglio Basilicata', 'Senigallia', 'Grumolo delle Abbadesse', 'Loceri', 'Molini di Triora', 'Valsesia', 'Castagneto Carducci', 'Bovino', 'Mineo', 'Vezzano sul Crostolo', "Tofo Sant'Eleuterio", "Villafranca d'Asti", 'Felitto', 'Exilles', 'Terzo, Piedmont', 'Propata', 'Letojanni', 'Cilento', 'Clastidium', 'Placanica', 'Colliano', 'Gradara', 'Villanova Solaro', 'Tavagnacco', 'Santa Lucia in Selci', 'San Leonardo', 'Morozzo', 'Comun Nuovo', 'Capaccio Airfield', 'Fiume di Girgenti', 'Lanuvium', 'San Gavino Monreale', 'Baiae', 'Rho, Lombardy', 'Petritoli', 'Monte Compatri', 'Arzignano', 'Caorso', 'Gandellino', 'Santa Giustina in Colle', 'University of Insubria, Como Campus', 'Loro Piceno', 'Mazzano', 'Suzzara', 'Santi Claudio e Andrea dei Borgognoni', 'Merana', 'Isole Tremiti', 'Villongo', 'Smerillo', 'Gragnano Trebbiense', 'Old English Cemetery, Livorno', 'Castignano', 'Vallanzengo', 'Serina', 'Meugliano', 'San Benigno Canavese', 'Castronovo di Sicilia', 'Borgoratto Mormorolo', 'San Giorgio La Molara', 'Cherasco Synagogue', 'Riposto', 'Montebelluna', 'Monte Cistella', 'Cisternino', 'Pozzolo Formigaro', 'Acciano', 'Grotta del Cavallone', 'Canzo', 'Galeata', 'Grottammare', 'Viggiano', 'Erba, Lombardy', 'Vallecrosia', 'Monterchi', 'San Giorgio di Mantova', 'Nasino', 'Fidenae', 'Casalgrande', 'Brenner Pass', 'Province of Trapani', 'Montefalco', 'Borgorose', 'Gorle', 'Cerretto Langhe', 'Cappella Palatina', 'Masi', 'Casola in Lunigiana', 'Bedonia', 'Oltre il Colle', 'Guardia Piemontese', 'Pollein', 'Palasport Del Mauro', 'Pessina Cremonese', 'Scandriglia', 'Francica', 'Boves', "Calusco d'Adda", 'Fontainemore', 'Fondi', 'Posada, Sardinia', 'Terranova da Sibari', 'Savignone', 'Pray, Piedmont', 'Nogaredo', "Serra Sant'Abbondio", 'Premilcuore', 'Sgurgola', 'Concerviano', 'Paternò', 'University of Modena and Reggio Emilia', 'Darè', 'Bagnara di Romagna', 'Arguello', 'Serra Riccò', 'Refrontolo', 'Mignano Monte Lungo', 'PalaPanini', 'Messina Airfield', 'Romentino', 'Erbè', 'Quarrata', 'Cigliè', 'Ponte Nizza', 'San Giovanni in Croce', 'Aci Catena', "Canonica d'Adda", 'Castiraga Vidardo', 'Sessame', 'Trapani', 'Sulmona', 'Ponte Nomentano', 'Luttach', 'Civitacampomarano', 'Orte', 'Rosolini', 'Campolongo sul Brenta', 'Observatory of Turin', "Sant'Ilario dello Ionio", 'Ficarra', 'Olmedo, Sardinia', 'Piz Glüschaint', 'Turri', 'Badalucco', 'Hochjoch', 'Monte Porzio Catone', 'Acquaviva delle Fonti', 'Paruzzaro', 'Arborio, Piedmont', 'Pognano', 'Antholzer Bach', 'Gaiola', 'Torralba', 'Ambrosian chant', 'Baveno', 'Torre Bormida', 'Valgoglio', 'Roccella Ionica', 'Villareggia', 'Baceno', 'Torno, Lombardy', 'San Giorgio Canavese', 'Province of Como', 'Tramatza', 'Mapello', 'Monteforte Irpino', 'Barbarano Vicentino', 'Gildone', 'Rodigo', 'Vivaro', 'Agrigento', 'Norchia', 'Samolaco', 'Castel San Giorgio', 'Calanna', 'Carvico', 'Piz Tremoggia', 'Montefalcione', 'Orbassano', 'Campertogno', 'Miramare Castle', 'Cremia', 'Rende', 'Marcetelli', 'Rezzago', 'Castel di Casio', 'Cosseria', 'Dervio', 'Settignano', 'Ormea', 'Limigiano', 'Ciminna', 'Antrodoco', 'Roccasicura', 'Idro, Lombardy', 'Anoia', 'Lonate Ceppino', 'Nettuno Airfield', 'Mompeo', 'Isorella', 'Santa Maria la Longa', 'Picerno', 'San Nicola la Strada', 'Vicovaro', 'University of Treviso', 'Rumo', 'Forno di Zoldo', 'Sanctuary of the Vergine dei Martiri, Fonni', 'Palo del Colle', 'Solferino', 'Proceno', 'Crema', 'Campomorone', 'Conza della Campania', 'Marsicovetere', 'Senis', 'Naviglio di Paderno', 'Punta di Pellaro', 'Bosa', 'Santa Giusta', 'Ovodda', 'Fresagrandinaria', 'Mezzenile', 'Ceriale', 'San Pietro a Maida', 'Celleno', 'Arienzo', 'Mombaruzzo', 'Padre Pio Pilgrimage Church', 'Molino dei Torti', 'Ausonia, Lazio', 'Stra', 'Montemesola', 'Punt dal Gall Dam', 'Baselga di Pinè', 'Alessandria della Rocca', "Orto Botanico Didattico Sperimentale dell'Università di Milano", 'Sequals', 'Castiglione Tinella', 'Dignano', 'Tusa, Sicily', 'Vo', 'Stadio Olimpico del Nuoto', 'Montegridolfo', 'Polytechnic University of Bari', 'Latiano', 'Scarmagno', 'Setzu', 'Vignanello', 'Ceno', 'Paganella', "Buttigliera d'Asti", 'Turate', 'Avegno, Liguria', 'Zibello', 'Artegna', 'Diano Arentino', 'Balestrino', 'Gavorrano', 'Austis', 'Valbondione', 'Candelo', 'Cossano Canavese', 'Favignana', 'Porto Cesareo', 'Mazzano Romano', 'Vallepietra', 'Gottasecca', 'Quiliano', 'Bletterbach', 'Sortino', 'Petrosino', 'Lapio', 'Scisciano', 'Ginestra', 'Comeglians', 'Timmelsjoch', 'Marcheno', 'Carnic Alps', 'Colbordolo', 'Tessennano', 'Sand in Taufers', 'S. Pio V University of Rome, main campus', 'Emilia', 'Brignano-Frascata', 'Brunello, Lombardy', 'Calvello', 'Piubega', 'Castiglion Fiorentino', 'Filighera', 'Fornace', 'Barzanò', "Sant'Agnese fuori le mura", 'Surano', 'Canosa Sannita', 'Baone', 'Campoli Appennino', 'Putifigari', 'Mores, Sardinia', 'Giulianova', 'Brescia', 'Monte Generoso', "Sant'Eufemia d'Aspromonte", 'Veleia', 'Montelibretti', 'Sondrio', 'Castelfranci', 'Camporotondo di Fiastrone', 'Baths of Licinius Sura', 'Palazzo di Propaganda Fide', 'Martiniana Po', 'Carasco', "Montechiaro d'Asti", 'Silea', 'Gavazzana', 'Gordona', 'San Donà di Piave', 'Casape', 'Rossana', 'Lake Agnano', 'Giugliano in Campania', 'Sterzing', 'Camino al Tagliamento', 'Ussassai', 'Tredozio', 'Curiglia con Monteviasco', 'Gazzada Schianno', 'Piazza Brembana', 'Seneghe', 'Pontedera Airfield', 'Scordia Airfield', 'Terralba', 'Galatone', 'Ponzano Veneto', 'Massa', 'Sesto ed Uniti', 'Specchia', 'Paderno Franciacorta', 'Celenza sul Trigno', 'Musei', 'Pomarico', 'San Gregorio VII', 'Asiago', 'Comacchio', 'Castel Nuovo', 'Rosora', 'Revello', 'Viadana, Lombardy', 'Gasperina', 'Pontifical North American College', 'Faggiano', 'Marzi', 'Paderno del Grappa', 'Regalbuto', 'Aviano', 'Paladina', 'Pizzoli', 'Capannelle Pass', 'Ruffano', 'Gessopalena', 'Copiano', 'Daone', 'Rovigo railway station', 'Montresta', 'Nemoli', 'Sonico', 'Valfenera', 'Cavagnolo', 'Nule', 'Luvinate', 'Quadri', 'Centallo', 'Piz de Cressim', 'Croceverde', 'Port of Naples', 'Lamporecchio', 'Palestrina', 'Cervatto', 'Onzo', 'Ballao', 'Montoro Inferiore', 'Arnara', 'Serravalle di Chienti', 'Mezzojuso', 'Velodromo Vigorelli', 'Arcinazzo Romano', 'Cinto Euganeo', 'Ligurian Alps', 'Gruaro', 'Ruffia', 'Grotte, Sicily', 'Umbria', 'Solarolo Rainerio', 'Costermano', 'Cedegolo', 'Catacombs of San Gennaro', 'Martignana di Po', 'Soiano del Lago', 'San Benedetto Ullano', 'Inveruno', 'Celle di San Vito', 'Cristo Redentore', 'Venarotta', 'Fossò', 'Castelnuovo Rangone', 'Torre di Moravola', 'Castello-Molina di Fiemme', 'Gaiole in Chianti', 'Villaromagnano', 'Morino', 'Madone', 'Pozzuolo del Friuli', 'Lenno', 'Sulden', 'Nova Milanese', 'Rome Viterbo Airport', 'Grinzane Cavour', 'Ponte San Nicolò', 'Vitorchiano', 'Matelica', 'Pavone Canavese', 'San Bernardino Verbano', 'Visco', 'Domus de Maria', 'Kiens', 'Castrovillari', 'Norbello', 'Samatzai', 'Pastena Caves', 'Viarigi', 'Madonie', 'Vergemoli', 'Castel del Piano', 'Blufi', 'Massimino', 'Val di Nizza', "Sant'Anastasia", 'Alagna', 'Grantola', 'Lenta', 'Casacalenda', 'San Giovanni a Porta Latina', 'Bortigali', 'Albidona', 'Colazza', 'Arquata del Tronto', 'Marina di Pisa', 'Salsamenteria Tomba', 'Novate Milanese', 'Sorico', 'Ro', 'Gibellina', 'Civico Orto Botanico ""Ulisse Aldrovandi""', 'Montichiari', 'Torino Esposizioni', 'Montelepre', 'Goni', 'Viguzzolo', 'Curino', 'Montagne, Trentino', 'Cardinale, Calabria', 'San Valentino in Abruzzo Citeriore', 'San Vito Chietino', 'Segonzano', 'Sannicola', 'Santo Stefano Ticino', 'Desenzano del Garda', "San Martino d'Agri", 'Piacenza Airport', 'Milliarium Aureum', 'Province of Palermo', 'Annone di Brianza', 'Prato', "Incisa in Val d'Arno", 'Viale', 'Matino', 'Averara', 'Fai della Paganella', 'Santo Stefano Roero', 'Noasca', 'Pontelatone', 'Arre, Veneto', 'Grizzana Morandi', 'Priero', 'Parete', 'Ferrandina', 'Trecase', 'Gurro', 'Rocca di Cambio', 'Zenevredo', 'Costa Valle Imagna', 'Monastero di Vasco', 'Cusino', 'Ofena', 'Rome', 'Santa Maria a Monte', 'Buonabitacolo', 'Parghelia', 'Azzano San Paolo', 'Sarezzano', 'Cianciana', 'Muravera', 'Tassullo', 'Costa di Rovigo', 'Spinadesco', 'Corfinio', 'Lipari', 'Seren del Grappa', 'Casaleggio Novara', 'Vanzone con San Carlo', 'Orco Feglino', 'Malito', 'Amendolara', 'Isso, Lombardy', 'Fara Filiorum Petri', 'San Biagio di Callalta', 'Mussolente', 'Colle Caruno', 'Corte Franca', 'Ussaramanna', "Chiusano d'Asti", 'Conselve', 'Limena', 'Monte Nuovo', 'Pezzaze', 'Acquedolci', 'Spigno Saturnia', 'Virgilio, Lombardy', 'Freienfeld', 'Castel Giorgio', 'San Bartolomeo in Galdo', 'Boca, Novara', 'Romagna', 'Roccavione', 'Cinigiano', 'Laino', 'Villafranca Tirrena', 'Castelfiorentino', 'Lacus Juturnae', 'Castione Andevenno', 'Argelato', 'Esanatoglia', 'Trivero', 'Casalbore', 'Antignano', 'Mura', 'Pieve San Giacomo', 'Civitavecchia railway station', 'Salerano Canavese', 'Morolo', 'Marudo', 'Solza', 'Castelsantangelo sul Nera', 'Mongrassano', 'Dogna', 'Sermide', 'Hafling', 'Serravalle Scrivia', 'Cerignola', 'Spineda', 'Assisi railway station', 'Altavilla Vicentina', 'Granze', 'Villanova del Ghebbo', 'Torre Canavese', 'Tribiano', 'Vestreno', 'Bieno', 'Canazei', 'Viù', 'Torricella in Sabina', 'Corno Campascio', 'San Vitaliano', 'Campodipietra', "Sant'Antioco", 'Motta di Livenza', 'Third University of Rome', 'Endine Gaiano', 'Caraffa di Catanzaro', 'Briga Novarese', 'Melicucco', 'Rovellasca', 'Barrea', 'Soriano Calabro', 'San Giuliano del Sannio', 'Valle Soprana', 'Flussio', 'Cerro Maggiore', 'Calcio, Lombardy', 'Pennabilli', 'Assolo', 'Bruneck', 'Colle Fauniera', 'Badia Petroia', 'Bonorva', 'Geraci Siculo', 'Algund', 'Ospedaletto, Trentino', 'Posta, Lazio', 'Civitella San Paolo', 'Vignola', 'Bordighera', 'Affi', 'Volla, Campania', 'Montoggio', 'Robbiate', 'University of Fermo', 'Zoldo Alto', 'Sezze', 'Manta, Piedmont', 'Teulada', 'Maddaloni', 'Anfo', 'Sforza Castle', 'Borgo Vercelli', 'Ponte di Piave', 'Uggiate-Trevano', "Sant'Oreste", 'Pisticci', 'Acireale', 'Siligo', 'St. Martin in Passeier', 'Isola del Cantone', 'Emilia-Romagna', 'Monte Romano', 'Sirente crater', 'Valbrona', 'Santeramo in Colle', 'Noicattaro', 'Truccazzano', 'Montefortino', 'Morano sul Po', 'Trequanda', 'Grumo Nevano', 'Reschen Pass', 'Tradate', 'Poggio Picenze', 'Terzigno', 'Gallarate', 'Coseano', 'Murialdo', 'San Martino al Tagliamento', 'Gargazon', 'Lascari', 'Guardavalle', 'Formigara', 'Rombiolo', 'Casaleggio Boiro', 'San Mauro Torinese', 'Introdacqua', 'Tenuta di San Liberato, Bracciano', 'Tiarno di Sotto', 'Porto San Giorgio', 'Gualdo, Marche', "Salerno Costa d'Amalfi Airport", 'Bova', 'Rofrano', 'Fort Bard', "Monticello d'Alba", 'Commessaggio', 'Piane Crati', 'Samone, Piedmont', 'Villadose', 'Condove', 'Benestare', 'Jesolo', "Villa d'Almè", 'Monte Colombo', 'Picciano', 'Spilinga', 'Figino Serenza', 'Desulo', 'Montefredane', 'Contarelli Chapel', 'Viterbo', 'Salice Salentino', "Bec d'Epicoune", 'Prevalle', 'Poggiorsini', "Ronco all'Adige", 'Giudicarie', 'Cossogno', 'Milena, Sicily', 'Augusta, Sicily', 'Castro dei Volsci', 'San Nicola Manfredi', 'Castel Volturno', 'Monguzzo', 'Bondo, Trentino', 'Vescovana', 'Ripalta Guerina', 'Lavinium', "Basilica of Sant'Andrea, Mantua", 'Lattarico', 'Alano di Piave', 'Cursi', 'San Michele di Serino', 'San Lupo', "Albano Sant'Alessandro", 'Alghero', 'Monforte Casalaticco', 'Motta Baluffi', 'Province of Oristano', 'Floridia', 'Santa Giuletta', 'Arconate', 'Massa di Somma', 'Casandrino', 'Greccio', 'Calatabiano', 'Casaprota', 'Danta di Cadore', 'Solopaca', 'Faedo Valtellino', 'Mombarcaro', 'Montegranaro', 'Castagnaro', 'Ponte della Maddalena', 'Cernusco sul Naviglio', 'Abbey of San Mercuriale, Forlì', 'Central Italy', 'Pozzuolo Martesana', 'Province of Cagliari', 'Province of Trieste', 'Camporosso', 'Palmi', 'San Benedetto Val di Sambro', 'Casperia', 'Völs am Schlern', 'Offlaga', 'Carassai', 'Rapagnano', 'Via Margutta', 'Noci', 'Calderone glacier', 'Castel del Rio', 'Moriago della Battaglia', 'Province of Isernia', "Sant'Abbondio", 'Vietri sul Mare', 'Canosio', 'Fabbriche di Vallico', 'Insular Italy', 'Girolamini', 'Ceresara', 'Tramonti, Campania', 'Torlino Vimercati', 'Rutigliano', 'Smarano', 'Norcia', 'Saracena', 'Giardini Naxos', 'Santa Lucia di Piave', "San Polo d'Enza", 'Lunano', 'Soverzene', 'San Lorenzo Nuovo', 'Erice', 'Frabosa Soprana', 'Nuovo Stadio Comunale', 'Nizza Monferrato', 'Edolo', 'Veruno', 'San Zenone degli Ezzelini', 'Civitella del Tronto', 'Malcesine', 'Sacco', 'Mölten', 'Manoppello', 'Rogliano', 'Castello Maniace', 'Tortoreto', 'Vallio Terme', 'Piz Palü', 'Santa Teresa Gallura', 'Genova Sampierdarena railway station', 'Stadio Selvapiana', 'Ari', 'Leno', "Anzola d'Ossola", 'Monte Roberto', 'Battoni', 'Bibliotheca Hertziana – Max Planck Institute of Art History', 'Megliadino San Vitale', 'Bema, Lombardy', "Belforte all'Isauro", 'Vignate', 'Sarsina', 'Soriano nel Cimino', 'Malo', 'Rivoli Veronese', 'Bovisio-Masciago', 'Auronzo di Cadore', 'Plesio', 'Magliano', 'San Felice del Molise', 'Canale Monterano', 'Pomponesco', 'Pontine Marshes', 'Porto Torres', 'Saint-Vincent', 'Stadio Olympica', 'Scarlino', 'Pietrabruna', 'Gera Lario', 'Stadio dei Marmi', 'Piz Minschuns', 'Missanello', 'Petriano', 'San Pietro Vernotico', 'Bagnasco', 'Ruinas', 'Pozzuolo', 'Albanella', 'Venerable English College, Rome', 'San Pietro Avellana', 'Zubiena', 'Tiarno di Sopra', 'Trescore Balneario', 'Dro', 'Molfetta', 'Noventa Padovana', 'Mezzomerico', 'Lago di Malciaussia', 'Mangone', 'San Marco Argentano', 'Dolceacqua', 'Camposanto', 'Vernio', 'Santa Maria Capua Vetere', 'Denice', 'Pedaso', 'Monte Testaccio', 'Belforte Monferrato', 'Canelli', 'Gazzola', 'La Thuile, Aosta Valley', 'Benevento', 'Crosa', 'Somaglia', 'Pino Torinese', 'Callabiana', 'Sante Marie', 'Cupra Marittima', 'Basciano', 'Brumano', 'Casalborgone', 'Monterado', 'Ricadi', 'Velo Veronese', 'San Nicola Baronia', 'Prasco', 'Ripacandida', 'Casale Marittimo', "Villa Sant'Angelo", "Sant'Angelo in Pontano", 'Castel Focognano', 'Mendatica', 'Primaluna', 'Civitella Alfedena', 'Quingentole', 'Salmour', 'Torgnon', "Villa d'Adda", "San Canzian d'Isonzo", 'Bertonico', 'Roncobello', 'Colle Brianza', 'Acerra', 'Credera Rubbiano', 'Belvedere Marittimo', 'Ronche', 'Gesturi', 'Staffarda', 'Burago di Molgora', 'Lessolo', 'Mandello Vitta', 'Gamalero', 'Possagno', "Motta d'Affermo", 'Casalnuovo di Napoli', 'Barge', 'Bianco', 'Tramonti di Sopra', 'Castelspina', 'Scurcola Marsicana', 'San Pancrazio', 'Roman Catholic Archdiocese of Milan', 'Morgex', 'Vinadio', 'University of Trieste', 'Formicola', 'Rota Greca', 'San Carlo al Corso', 'Loreto, Marche', 'Longi', 'Campo Carlo Magno', 'Pont-Saint-Martin, Aosta Valley', 'Saepinum', 'Dorgali', 'Pozza di Fassa', 'Monvalle', 'Busto Garolfo', 'Onifai', 'Solto Collina', 'Catania Centrale railway station', 'Cicala', 'Luzzara', 'Montagna in Valtellina', 'Corte Palasio', 'Montecatini Terme', 'Farini, Emilia-Romagna', 'Valperga', 'Trausella', 'Statonia', 'Cicagna', 'Piazza De Ferrari', 'Magherno', 'Castello di Serravalle', 'Villafrati', 'Corsione', 'Ferriere', 'San Paolo Converso', 'Florence Airport, Peretola', 'Villafranca Sicula', 'Lodi', 'Pieve di Soligo', 'Cologna Veneta', 'Binetto', 'San Marco Evangelista', 'Pesche', 'Pietracamela', "Sant'Olcese", 'Cariati', 'Labici', 'Portofino', 'Vitulazio', 'Ponso', 'Prata di Pordenone', 'Conca Casale', 'Klammljoch', 'Aquileia', 'Stadio Comunale di Monigo', 'Pressana', 'Aicurzio', 'Regions of Italy', 'Agnosine', 'Torre Annunziata', 'Calestano', 'Gardone Val Trompia', 'Roggiano Gravina', 'Soveria Mannelli', 'Giungano', 'Savignano Irpino', 'Predil Pass', 'Zungoli', 'Pescara Circuit', 'Retorbido', 'Roccantica', 'Cinisi', 'Longarone', 'San Marco dei Cavoti', 'Palazzo Datini', 'Alviano', 'Nepi', 'Pfalzen', 'Acqualagna', 'Medici Chapel', 'Rosegaferro', "Sant'Agata dei Goti", 'Bergantino', "San Cipriano d'Aversa", 'Selva di Cadore', "Sant'Arsenio", 'Caere', 'Province of Taranto', 'Arrone', 'Cividate Camuno', 'Guagnano', 'Frasso Sabino', 'Francolise', "Sant'Angelo a Scala", 'Morra De Sanctis', 'Cigliano', 'Comunanza', 'Fosciandora', 'Carini', 'Porto Recanati', 'Trestina', 'Ostana', 'Visano', 'Trarego Viggiona', 'Margreid an der Weinstraße', 'Mirabella Eclano', 'Ascea', 'Gorreto', 'Cividate al Piano', 'Riesi', 'Monfalcone', 'Giba, Sardinia', 'Morcone', 'Cannara', 'Lusevera', 'Roddino', 'Pratovecchio', 'Sinnai', 'Muzzano, Piedmont', 'Rossano', "Cavaglio d'Agogna", 'Collegio Superiore di Bologna', 'Racalmuto', 'San Nazzaro Val Cavargna', "Civita d'Antino", 'Pons Cestius', 'Sestriere', 'San Domenico Maggiore', 'Stadio Vanni Sanna', 'Faule', 'Zerfaliu', 'Cannobio', "Piacenza d'Adige", 'Breia', 'Bairo', 'Cavizzana', "Massa d'Albe", 'Martinsicuro', 'Carcare', 'Quindici', 'Fardella, Basilicata', 'Piode', 'Tonengo', 'Lugnano in Teverina', 'Monte San Pietro', 'Ussita', 'Mariano del Friuli', 'Busachi', 'Castel Guelfo di Bologna', 'Vecchiano', 'Riva Ligure', 'Olmo al Brembo', 'Aurano', 'Conco', 'Bagnolo in Piano', 'Fisciano', 'Nazzano', 'Acera', "Fontana di Piazza d'Aracoeli", 'Petralia Soprana', 'Toritto', 'Greci, Campania', 'Villetta Barrea', 'Sessa Aurunca', 'Jovençan', 'Monte Isola', 'Costa Vescovato', 'Pietrarubbia', 'Bobbio', 'Camponogara', 'Contursi Terme', 'Dinami', 'Canicattì', 'Frassinelle Polesine', 'Ceccano', 'Monsano', 'Canicattini Bagni', 'Fontana delle Api', 'Belfiore', 'Bagnoli Airfield', 'Galera Airfield', 'Montesilvano', 'Link Campus University', 'Strevi', 'San Gregorio di Catania', 'Castel San Niccolò', 'Itala', 'Torrente Comunelli Airfield', 'Maserada sul Piave', 'Pescasseroli', 'Tolmezzo', 'Borzonasca', 'Aielli', 'Angri', 'Castino', 'Rassa, Piedmont', 'Sirmione', 'Correzzana', 'Saint-Christophe', 'Serra San Quirico', 'Trebaseleghe', 'Caporciano', 'Genoni', 'Paullo', 'Dosolo', 'Pieve di Teco', 'Roiate', 'Monte Argentario', 'Priolo Gargallo', 'Piana di Monte Verna', 'Marliana', 'Marcignago', 'Soveria Simeri', 'Calvi Risorta', 'Pessinetto', 'Priola', 'Torrevecchia Teatina', 'Vercana', 'Racconigi', 'Bonavigo', 'Nove', 'Promano', 'Laviano', 'Minerbio', 'Cercivento', 'Cima da Lägh', 'Fabbrico', 'Crispiano', 'Pontifical University of St. Thomas Aquinas', 'Arignano', 'Marineo', 'Civitella Paganico', 'Simala', 'Rocca San Casciano', "Terzo d'Aquileia", 'Pretoro', 'Isasca', 'Guarda Veneta', 'Varazze', 'Biassono', 'Villamarzana', 'Barcelona Landing Ground', 'Dent du Géant', 'Sanarica', 'Albenga Airport', 'Alife, Campania', 'Castelbianco', 'Blera', 'Castel del Giudice', 'Latina Nuclear Power Reactor', 'Grigno', 'Broccostella', 'Montalto Dora', 'Procida', 'Dego', 'Vallelonga', 'Laboratori Nazionali del Gran Sasso', 'Ceriana', 'Lercara Friddi', 'Umbertide', 'Ischia, Campania', 'Tratalias', 'Sanremo railway station', 'Cison di Valmarino', 'Baia e Latina', 'Baranzate', 'Pietralunga', 'Bard, Aosta Valley', 'Badia', "Sant'Urbano", 'Gorizia Centrale railway station', "Castel d'Ario", 'Province of Vicenza', 'Montopoli di Sabina', 'Parrano', 'Pelugo', 'Scrofiano', 'Drenchia', 'Campolongo Maggiore', 'Veggiano', 'Lucca', 'Meana di Susa', 'Bosconero', 'Badia, South Tyrol', 'Medicina', 'Loro Ciuffenna', 'Casella', 'Prima Porta', 'Nord-Est', 'San Benedetto Belbo', 'Celle Enomondo', 'Locorotondo', "Capo dell'Armi Lighthouse", 'Butera, Sicily', 'Unsere Liebe Frau im Walde-St. Felix', 'Trognano', 'Liscate', 'Dorzano', 'Vigolzone', 'Riccia, Molise', 'Redondesco', 'Zambrone', 'Montecastello', 'Pieve Fosciana', 'Nureci', 'Modica', 'Caldiero', 'Venezia', 'Palasport Mens Sana', 'Ottati', 'Mantova railway station', 'Mont Gelé', 'Anzano del Parco', 'Montagnana', 'San Paolo di Jesi', 'San Lorenzo', 'Vogogna', 'Salizzole', 'Valle di Maddaloni', 'Flaibano', 'Castelnuovo Bormida', 'Santa Croce del Sannio', 'Bagnoregio', 'San Michele Maggiore, Pavia', 'Odalengo Piccolo', 'Novara', 'Ceppaloni', 'Montebello della Battaglia', 'Cutro', 'Ruvo del Monte', 'Montelupone', 'Schiavon', 'Lusia', 'Ales', 'Torri del Benaco', 'Plöcken Pass', 'Provaglio Val Sabbia', 'Ischitella', 'Canosa di Puglia', 'Colognola ai Colli', "Sant'Andrea Apostolo dello Ionio", 'Popoli', 'Casoli', 'Porto Empedocle', 'Brinzio', 'Santa Caterina', 'Orotelli', 'Cusio, Lombardy', 'Agugliaro', 'Limbadi', 'Pasturo', 'Pietraperzia', 'Palazzo Adriano', 'Pietramelara', 'Brusasco', 'Castelnuovo Magra', 'Sover', 'Pianico', 'Oneta, Lombardy', 'Bagheria', 'Campo Ligure', 'Cherasco', 'Urbe', 'Tremenico', 'Bioglio', 'Collagna', 'Roccamontepiano', 'San Paolo di Civitate', 'San Gregorio Armeno', 'Terrasini', 'Ronco Briantino', 'Palazzo della Civiltà Italiana', 'Vigonza', 'Porta Pinciana', 'Ottiglio', 'Lissone', 'Ulten', 'Vetulonia', 'Padova railway station', 'Pogliano Milanese', 'Velezzo Lomellina', 'Bagno di Romagna', 'Cassola', 'San Pietro in Gessate', "Sant'Agnese in Agone", 'Varisella', "Province of L'Aquila", 'Bari', 'Monte Sissone', 'Casarsa della Delizia', 'Rovegno', 'Badia Pavese', 'Giffone', 'Alcara li Fusi', 'Milan Conservatory', 'Lajen', 'Pontenure', 'Miglianico', 'Corbetta, Lombardy', 'Besana in Brianza', "Prata d'Ansidonia", 'Osini', 'Occhieppo Inferiore', 'Luco dei Marsi', 'Licola, Italy', 'Contessa Entellina', 'Montemurlo', 'Pertosa', 'Anacapri', 'Montemonaco', 'Pederobba', 'Grignano Polesine', 'Castelvecchio Subequo', 'Soleto', 'Floresta', 'Bariano', 'Oggebbio', 'Castelliri', 'Roncello', 'Albiate', 'Chiusi', 'Castiglione di Garfagnana', 'Cinquefrondi', 'Craco', 'Gualtieri Sicaminò', 'Palmiano', 'Boroneddu', 'University of Brescia', 'Vizzolo Predabissi', 'Valeggio, Lombardy', 'Province of Agrigento', 'Alice Bel Colle', 'Pove del Grappa', 'Monte Bolca', 'Santhià', 'Zelo Surrigone', 'Mele', 'Ercolano', 'Santu Lussurgiu', 'Massa Martana', 'Ghislarengo', 'Paduli', 'Jaufenpass', 'Cautano', 'Follonica', 'Decimomannu Airport', 'Paganica', 'Peglio, Marche', 'Villadeati', 'Belluno Airport', 'Pizzale', 'Lüsen', 'Urbana', 'Vigo di Cadore', 'Castelnuovo di Porto', 'Savignano sul Rubicone', 'Schenna', 'Riace', 'San Gillio', 'Teor', 'Dozza', 'Fiumara', 'Navelli', 'Cassano Valcuvia', 'Bazzano', 'Gargnano', 'Francavilla Fontana', 'Acerno', 'Cerzeto', 'Bronzolo', 'Mompantero', 'Ispra', 'Ilbono', 'Longare', 'Colosseo', 'Lambrugo', 'Spineto Scrivia', 'Capriva del Friuli', 'Vesuvius Airfield', 'Novalesa Abbey', 'Montenero Val Cocchiara', 'Tempio Civico della Beata Vergine Incoronata', 'Sorbo Serpico', 'San Godenzo', 'Rodano', 'Tavernerio', 'Montevecchia', 'Teana', 'Zocca', 'Saint-Rhémy-en-Bosses', 'Picinisco', 'Bagno a Ripoli', 'Robecco sul Naviglio', 'Pietracupa', 'Bidonì', 'Quattordio', 'Arce', 'San Nazario, Veneto', 'Bareggio', 'Gallicano nel Lazio', 'Gadesco-Pieve Delmona', 'Senago', 'Borgoricco', 'Urbe Airport', 'San Polo di Piave', 'Caorle', 'Pennapiedimonte', 'Cedrasco', 'Monti Picentini', 'Subiaco', 'Castorano', 'Province of Syracuse', 'Cuneo International Airport', 'Padru', 'Terrazzo', 'Canda', 'Barbian', 'Santa Maria delle Carceri', 'Villa Vomano', 'Mansuè', 'Casale sul Sile', 'Cellio', 'Lacco Ameno', 'Melito Irpino', 'Sarntal', 'Rasura', 'Villalago', 'Piobbico', 'San Michele Salentino', 'Longano', 'Università di Reggio Emilia', 'Cibiana di Cadore', 'Argentera', 'Bernalda', 'Principality of Taranto', 'Foresto Sparso', 'Simbario', 'Campi Salentina', 'San Martino Buon Albergo', 'Montone', 'Altare della Patria', 'Carpignano Salentino', "Basilica of Sant'Eustorgio", 'Labaro', 'San Pietro Apostolo', 'Moena', 'Via della Conciliazione', 'Giffoni Sei Casali', 'Pagnona', 'Pescate', 'University of Naples Federico II', 'Casaletto Ceredano', 'Amalfi', 'Lorsica', 'Candela', "Santa Sofia d'Epiro", 'Turano Lodigiano', 'Orto Botanico del Mediterraneo', 'Valsassina', 'Poggio San Vicino', 'Morsasco', 'Napoli Afragola railway station', "Città Sant'Angelo", 'Redavalle', 'Province of Lucca', 'Marino', 'Pergusa', 'Roccaverano', 'Villa Verde', 'Santa Costanza', 'Piz Badile', 'Borgarello', 'Ordona', 'Ponteranica', 'Castel San Lorenzo', 'Filetto', 'Refrancore', 'Villa Minozzo', 'Fara Vicentino', 'Sappada', 'Orune', 'Ripalimosani', 'Sassetta, Tuscany', 'Gorlago', "Sant'Antonio di Ranverso Abbey", 'Province of Asti', 'Formazza', 'Torgiano', 'Belforte del Chienti', 'Cropani', 'San Giorgio a Liri', 'Sormano', 'Villa Vicentina', 'Orvinio', 'Villa Santo Stefano', 'Villachiara', 'Arcore', 'San Polo dei Cavalieri', 'Cermignano', 'Viola', 'San Pietro Clarenza', 'Gambassi Terme', 'Valtournenche', 'San Giorgio di Lomellina', 'Cornaredo', "Farra d'Isonzo", 'Kanin', 'Tusculum', 'Cuneo railway station', 'Säben Abbey', 'Province of Lecco', 'Barbarano Romano', 'Polcenigo', 'Casciana Terme', 'San Pietro al Tanagro', 'Linguaglossa', 'Ton, Trentino', 'Bresso Airport', 'Altomonte', 'Cugliate-Fabiasco', 'Ostra Vetere', 'Lendinara', 'Bargagli', 'Wing of the Villa Thiene', 'Fossombrone', 'Maltignano', 'La Magdeleine', 'Pesaro', 'Baucina', "Montopoli in Val d'Arno", 'Azzio', 'Aprigliano', 'Tavarnelle Val di Pesa', 'Cervara di Roma', 'Carsulae', 'Rimasco', 'Sarcedo', 'Pessano con Bornago', 'Gennargentu', 'Grognardo', 'Province of Massa and Carrara', 'Gignese', 'Udine railway station', 'Garbagna Novarese', 'Castello Cabiaglio', 'San Colombano al Lambro', 'Masio', 'Barcellona Pozzo di Gotto', 'Sassetti Chapel', 'Strigno', 'Cuccaro Vetere', 'Galati Mamertino', 'Montecchia di Crosara', 'Palaia', 'Cosenza', 'Rovereto', 'San Barnaba', 'PalaScapriano', 'Sarroch', 'Pauli Arbarei', 'Osio Sotto', 'Cassano Spinola', 'Parodi Ligure', 'Brembilla', 'Leonine City', 'Soleminis', 'San Giorgio Scarampi', 'Sacro Convento', 'Santa Donna Regina Nuova', 'Solero', 'Cantalice', 'Vallerotonda', 'Silanus', 'Dragoni', 'Gran Sasso e Monti della Laga National Park', 'Piscina, Piedmont', 'Domaso', 'Santomenna', 'Villabate', 'March of Montferrat', 'Vallo della Lucania', 'Treviglio', 'Scarperia', 'San Giorgio', 'Verduno', 'Cantello', 'Mattinata', 'Lenano', 'Napoli Mergellina railway station', 'Forio', 'Vigodarzere', 'Castellalto', 'Pianello Val Tidone', 'Leaning Tower of Pisa', 'San Menaio', 'Giffoni Valle Piana', 'Altrei', 'Castel Rocchero', 'Cozzo', 'Santa Maria Maggiore, Bergamo', 'Moschiano', 'Tione di Trento', 'Notaresco', "Capo d'Orlando", 'Val Masino', 'San Casciano dei Bagni', 'Melilli', 'Oncino', 'Castelvecchio di Rocca Barbena', 'San Nicola da Crissa', "San Paolo a Ripa d'Arno", 'Bovolone', 'Bollate', 'Piraino', 'Settala', 'Castelmarte', 'Ticineto', 'Forano', 'Montalto Uffugo', 'Civezzano', 'Grosseto railway station', 'Pontifical Gregorian University', 'Chiuro', 'Sali Vercellese', 'Palazzolo Vercellese', 'Castrofilippo', 'Cellino Attanasio', 'Trana', 'Filadelfia, Calabria', 'Ferrara Cathedral', 'Pontevico', 'Fontanelice', 'Orero', 'Oliveri', 'Castello della Magione', 'Civenna', 'Province of Bologna', 'Vercelli', 'Rosolina', 'Castello Tesino', 'Roncaro', 'Gennargentu National Park', 'Arcidosso', 'Castelnuovo Scrivia', 'Gazzaniga', 'Cortile del Belvedere', 'Maria SS. Assunta University of Rome', "Sant'Antonino di Susa", 'Romallo', 'Guardia Sanframondi', 'Valdieri', 'Firmo', 'Vincenzo Florio Airport Trapani-Birgi', 'Forni Avoltri', 'Castel del Monte, Apulia', 'Montegaldella', 'Mairago', 'Balestrate', 'San Martino', 'Polignano a Mare', 'Castro, Lazio', 'Poggioreale', 'Rozzano', 'Rocchetta Belbo', 'San Vito al Torre', 'Dernice', 'Ragoli', 'Portobuffolè', 'Ravenna', 'Civitaquana', 'Mozzo', 'Castro, Lombardy', 'Villa di Chiavenna', 'Gargallo', 'Frosolone', 'Menarola', 'Borghetto di Borbera', 'Carano', 'Ciorlano', 'Conversano', 'Pietraroja', 'Nemi ships', 'Belsito', 'Alba Fucens', 'Carona, Lombardy', 'Castellamonte', 'Sostegno', 'Peschici', 'Lorenzago di Cadore', 'Merlino', 'Taleggio', 'Visso', 'Copparo', 'Comezzano-Cizzago', 'Catania Astrophysical Observatory', 'Foiano di Val Fortore', 'Cantalupo nel Sannio', 'Castelletto Merli', 'Vicoli', 'Courmayeur', 'Altavilla Irpina', 'Viggiù', 'Liternum', 'Cambiasca', 'Brugherio', 'Domegge di Cadore', 'Lerchi', 'Sasso Marconi', 'Ovindoli', 'Limido Comasco', 'Burgio', 'Quattro Fontane', 'Riparbella', 'Vigevano', 'Telgate', 'Borghi', 'Marmirolo', 'Casalnuovo Monterotaro', 'Vaiano Cremasco', 'Lacedonia', 'Lettere', 'Moiano', 'Martignacco', "Sant'Anna School of Advanced Studies", 'Loreo', 'Capriolo', 'Perrero', 'Sadali', 'Castellero', "Villa Sant'Antonio", 'Monforte San Giorgio', 'Grosotto', 'Albettone', 'Vieste', 'Allerona', 'Castelsaraceno', 'Castelli, Abruzzo', 'Cerreto Grue', 'Pettinengo', 'Magliano Sabina', 'Serdiana', 'Castelpagano', 'Villalvernia', 'Montelupo Fiorentino', 'Protestant Cemetery, Rome', 'Ceto, Lombardy', 'Graffignano', 'Vittorito', 'Conflenti', 'Pozzonovo', 'Livigno', 'Quartucciu', 'Palma Campania', 'Caronia', 'Caltabellotta', 'Brixen', 'Mortirolo Pass', 'Collecorvino', 'Strangolagalli', 'Ardore', 'Talamello', 'Ponza', 'Casamicciola Terme', 'Karerpass', 'Casorzo', 'Moschea di Roma', 'San Lorenzo, Calabria', 'Genga, Marche', 'Milazzo', 'Montella', 'Comelico', 'Sarezzo', 'Moimacco', "Montegrosso d'Asti", 'Bonate Sotto', 'Curtatone', 'Piaggine', 'Falerii Novi', 'Cavallasca', 'Attigliano', 'San Luigi dei Francesi', 'Preci', 'Montignoso', 'Naviglio Pavese', 'Artimino', 'University of Cassino', 'San Piero a Grado', 'Cazzago San Martino', 'Castelsilano', 'Ottone, Emilia-Romagna', 'Gaglioli', 'Vailate', 'Lucera Castle', 'Bergamo', 'Riva presso Chieri', 'Fusignano', 'Cairate', 'Careggine', 'Micigliano', 'Carema', 'Biancavilla', 'Cuba, Palermo', 'Abbadia San Salvatore', 'Bonassola', 'Cornedo Vicentino', 'Brittoli', 'Grumes', 'Mercogliano', 'Zuccarello', 'Settefrati', 'Crevacuore', 'Cocquio-Trevisago', 'Cupramontana', 'Aquino', 'Cortale', 'Stradella, Lombardy', 'Cereseto', 'Lugo di Vicenza', 'Santa Maria Maggiore, Gazzo Veronese', 'Briga Alta', 'Giacciano con Baruchella', 'Pila, Piedmont', 'Camerano', 'Samarate', 'Francavilla Angitola', 'Stregna', 'Balvano', "Casasco d'Intelvi", 'Godrano', 'Cuasso al Monte', 'Capistrano, Calabria', 'Monti', 'Suno', 'Cassaro', 'San Pietro in Cariano', 'Vallo di Diano', 'Nizza di Sicilia', 'Castelvetere in Val Fortore', 'Pontifical Lateran University', 'Castrezzato', 'Montorio al Vomano', 'Orto Botanico Comunale di Lucca', 'Verrès', 'Cartoceto', 'Livorno', 'Albino', 'Sedico', 'Piombino Dese', 'Rivoli, Piedmont', 'Piasco', 'Carpegna', 'Pigna', 'Sedrina', 'Donori', 'Palazzo Canavese', 'Mel', 'Suasa', 'Gergei', 'Las Plassas', 'Mount Fumaiolo', 'Bulzi', 'Borghetto Santo Spirito', 'Borgomaro', 'Ghedi Airport', 'Attimis', 'Torre Beretti e Castellaro', 'Pagani', 'Cassine', 'Camerana', "L'Aquila railway station", 'Osoppo', 'Illasi', 'Borgaro Torinese', 'Ginestra degli Schiavoni', 'Cabella Ligure', 'Busso', 'Perletto', 'Torre Velasca', 'Oldenico', 'Piazza Armerina', 'Province of Avellino', 'Sesvenna Alps', 'Filottrano', "San Franceso d'Assisi Airport", 'Caselle in Pittari', 'Splügen Pass', 'Gottolengo', 'Marcianise', 'Malesco', 'San Bevignate', 'Poggio Berni', 'San Ferdinando', 'Caprino Veronese', 'Salerno railway station', 'University of Basilicata', 'Cino', 'Gualtieri', 'Cagliari Elmas Airport', 'Sëlva', 'Strozza', 'San Biagio della Cima', 'Sorradile', 'Saltrio', 'Pievebovigliana', 'Oliveto Citra', 'Monastero Bormida', 'University of Padua', 'Artogne', 'Siamanna', "Sauze d'Oulx", 'Comano, Tuscany', 'Abbasanta', 'Gerano', 'Villa San Giovanni in Tuscia', 'Ferentino', 'Frecce Tricolori', 'Castel Goffredo', 'Acquanegra sul Chiese', 'Castelnuovo del Garda', 'Chiaverano', 'Bruzolo', 'Vescovato', 'Arch of Titus', 'Montacuto', 'Lettopalena', 'Brondello', 'Correggio', 'Pizzo del Torto', 'Ritten', 'Gossensass-Colle Isarco', 'Giussago', 'Terni railway station', 'Castelli Calepio', 'Cassibile Airfield', 'Mariglianella', 'Rocca Imperiale', 'Somano', 'Tavenna', 'Tremosine', 'Roncofreddo', 'Zoppè di Cadore', "Villa d'Ogna", 'Neirone', 'Cervasca', 'Venticano', 'Lainate', 'Nardò Ring', 'Andalo Valtellino', 'Milan amphitheatre', 'Cerreto Sannita', 'Trasquera', 'Cesena', 'Bubbio', 'San Marzano sul Sarno', 'Villa Forni Cerato', 'San Nazzaro, Campania', 'Spoltore', "Sant'Elena, Veneto", 'Abbateggio', 'Altavilla Monferrato', 'Sefro', 'Avolasca', 'Rocca San Giovanni', "Sant'Omero", 'Santa Maria di Licodia', 'Bagnatica', 'Mombello di Torino', 'University of Florence', 'Monastir', 'Castelnuovo Berardenga', 'Oderzo', 'Fountain of Neptune, Rome', 'Olivadi', 'Scilla', 'Piz de Setag', 'Monteprandone', 'Carbonera', 'Pietra Marazzi', 'Cervere', 'Oltressenda Alta', 'Ponte Nossa', 'Favria', 'British School at Rome', 'Santa Maria dei Servi', 'Darfo Boario Terme', 'Ponte, Campania', 'Palestro', 'Alessandria', 'Cassano delle Murge', 'Trivigliano', 'Cepagatti', 'Cesio', "Rota d'Imagna", 'Scagnello', 'Sordevolo', 'Sammichele di Bari', 'Kastelbell-Tschars', 'Reggiolo', 'Valstagna', 'Monteleone di Fermo', "Casirate d'Adda", 'Collegio Clementino', 'Barbata', 'Lentini', 'Agugliano', 'Pfunderer Bach', 'Legnano', 'Candida', 'Filattiera', 'Lucera', 'Sospirolo', 'Bauladu', 'Pompu', 'Miasino', 'Veglio', 'Lovere', 'Marcellina', 'Pontestura', 'Canevino', 'Platania', 'Monesiglio', 'Roccagiovine', 'Cogollo del Cengio', 'Lari, Tuscany', 'Spina', 'Piedicolle', 'Abruzzo', 'Brosso', 'Campotosto', 'Monghidoro', 'Montano Antilia', 'Torrazzo', 'Arizzano', 'Mount Capanne', 'Viepri', 'San Sossio Baronia', "Varano de' Melegari", 'Carife', 'Molazzana', 'San Germano dei Berici', 'Occhiobello', 'Ciampino', 'Champdepraz', 'Monselice', 'Mediglia', 'Diano San Pietro', 'Casalmaiocco', 'Colonnella', 'Moliterno', 'Bonate Sopra', 'Salasco', 'Ceranova', "Revigliasco d'Asti", 'Castello Normanno-Svevo', 'Monteleone Rocca Doria', 'Villa Rendena', 'Oratino', 'Caraglio', 'Uboldo', 'Lozza', 'Comignago', 'Mezzano', 'Fornelli', 'Busto Arsizio', 'Laurein', 'Magliano Alfieri', 'Torre Pallavicina', 'Calderara di Reno', 'Montecorvino Rovella', 'Il Caravaggio International Airport', 'San Marzano Oliveto', 'Borghetto Lodigiano', 'Burolo', 'Cabiate', 'Varallo Sesia', "Farra d'Alpago", 'Valle Mosso', 'Mongrando', 'Bregano', 'Vervio', 'Esino Lario', 'San Marco in Lamis', 'Brusaporto', 'Empoli', 'Montemilone', 'Moneglia', 'Collegio di Spagna', 'Macchiagodena', 'Trivigno', 'Torviscosa', 'Castel Frentano', 'Arezzo', 'Salve', 'Alanno', "Basilica of San Francesco d'Assisi", 'Santa Lucia del Mela', 'Zimone', 'Arch of Constantine', 'Camino, Piedmont', 'Monterenzio', 'Stagno Lombardo', 'Loyola University Chicago Rome Center', 'Longone al Segrino', 'Alagna Valsesia', 'Biblioteca Nazionale Vittorio Emanuele III', 'Cornuda', 'Cilavegna', 'Barchi, Marche', 'Monte Berico', 'Pavone del Mella', 'Ronzone', 'Contigliano', 'Trinità', 'Foggia railway station', 'Monteu da Po', 'Alseno', 'Cravagliana', 'Stanghella', 'Bene Lario', 'Montalto Ligure', 'Bozzolo', 'San Giuliano Terme', 'Ortygia', 'Province of Fermo', 'Orte railway station', 'Coccaglio', 'Saluggia', 'Tribogna', 'Sassocorvaro', 'Venice', 'Centro (I)', 'Donato, Piedmont', 'Mercatello sul Metauro', 'Abbiategrasso', 'Borbona', 'Maddalena Pass', 'Baldissero Canavese', 'Mondavio', 'Cappella Maggiore', 'Province of Latina', 'Fara Olivana con Sola', 'Plaus', 'Palazzo Madama e Casaforte degli Acaja', 'San Michele Mondovì', 'Chiomonte', 'Monte Falterona', 'Foligno Airport', 'Chioggia', 'Moncrivello', 'Porto Ceresio', 'Domusnovas', 'San Giuseppe Jato', 'Parco Dragoni in Forlì', 'San Giuliano di Puglia', 'Le Banca Airfield', 'Lemie', 'Mount Epomeo', 'Norba', "Campo de' Fiori", 'Ponte in Valtellina', 'Vigasio', 'Sinopoli', 'Brezzo di Bedero', 'La Caletta', 'Bodio Lomnago', 'Orio al Serio', 'Lucca Sicula', 'Poncarale', 'Pereto', 'Ripe, Marche', "Gerre de' Caprioli", 'San Frumenzio ai Prati Fiscali', 'University of Ferrara', 'Perano', 'Castiglione dei Pepoli', 'Morro Reatino', 'Roccabianca', 'Petrignano', 'University of Foggia', 'Nerola', 'Vico del Gargano', 'Miranda', 'Roverbella', 'Alliste', 'Trepalle', 'Volturno', 'Montecilfone', 'Certaldo', 'Moransengo', 'Avola', 'Oliva Gessi', 'Mozzagrogna', 'Pachino', 'Fabro', 'Carisolo', 'Lecce nei Marsi', 'Tarquinia', 'Piedimonte Etneo', 'San Paolo', 'Cagli', 'Cunico', 'Reggio Calabria Centrale railway station', 'Urgnano', 'Circus of Nero', 'Grezzana', 'Tuenno', 'Guardia Perticara', 'Basilica di Saccargia', 'Mogorella', 'Lesa', 'Omegna', 'Fumane', 'Cantalupo in Sabina', 'Monticello Brianza', 'Pavia Cathedral', 'Cossato', 'Civita Castellana', 'Triton Fountain', 'Roccagorga', 'Antey-Saint-André', 'Campolongo al Torre', 'Sass Rigais', 'Oliveto Lario', 'Busca', 'Cesi', 'Bibulca Way', 'Brugnera', 'Tapogliano', 'Pannarano', 'Castelplanio', 'Riese Pio X', 'Roletto', 'Casorate Primo', 'Poggio Nativo', 'Rapone', 'Olgiate Comasco', 'Trecastagni', 'Gazzuolo', 'Rodeneck', 'Bessude', 'Belluno railway station', 'Santa Maria del Cedro', 'Ardauli', 'Marienberg Abbey', 'Spina Nuova', 'French Academy in Rome', 'Prad am Stilfser Joch', 'Cesana Torinese', 'Ustica', 'Pescarolo ed Uniti', 'Villarosa', 'Villar Perosa', 'Frassineto Po', "Torre de' Negri", 'Piana degli Albanesi', 'Valgioie', 'Pogno', 'Lavena Ponte Tresa', 'Canepina', 'Pieranica', 'Assoro', 'Serri', 'Teglio Veneto', 'Laganadi', 'San Gervasio Bresciano', 'Pontecagnano Faiano', 'Ladispoli', 'University of Genoa', 'Casarile', 'Bologna', 'Nomaglio', 'Genzano di Roma', 'Rodengo-Saiano', 'Casteldaccia', "Castronuovo di Sant'Andrea", 'Stadio Bruno Recchioni', "Fragneto l'Abate", 'Lurago Marinone', 'Torre di Ruggiero', 'Sovico', 'Castelbottaccio', 'Perinaldo', 'Pucciarelli', 'Gardena Pass', 'Lombardy', 'San Silvestro in Capite', 'San Basilio', 'Portogruaro', 'Centa San Nicolò', 'Lavagno', 'Grisolia', 'Melicuccà', 'Curcuris', 'Palù del Fersina', 'Rovolon', 'Alpignano', 'Cantalupo Ligure', 'Nibionno', 'Arosio', 'Campofelice di Roccella', 'San Rocco al Porto', 'Cimego', 'Bollengo', 'Sicignano degli Alburni', 'Introd', "Granarolo dell'Emilia", 'Sacro Monte di Crea', 'Monte Marenzo', 'Gambasca', 'Quinto di Treviso', 'San Pietro in Casale', 'Lanzo Torinese', 'Pré-Saint-Didier', 'PalaBarbuto', 'Puegnago sul Garda', 'Bagnolo di Po', 'Ferla', "Albiano d'Ivrea", 'Bientina', 'Fonte', 'Castel del Monte, Abruzzo', 'Dovera', 'Pezzolo Valle Uzzone', 'Villafranca di Verona', 'Alba', 'Osiglia', 'Livo, Trentino', 'Colli del Tronto', 'Forum of Augustus', 'Santa Maria del Regno', 'Cesano', 'Marling', 'Corno Giovine', 'Basilica di Santa Maria dei Servi', 'San Giorgio di Nogaro', 'Forni di Sopra', 'Borgo San Lorenzo', 'Orani', 'Fiumedinisi', 'Paderna', 'Cembra', 'Pietravairano', 'Brescia Airport', 'Pavarolo', 'Brancaleone, Calabria', 'Casamassima', 'Beregazzo con Figliaro', 'Cervarese Santa Croce', 'Torricella Peligna', 'Fiesole Cathedral', 'San Pietro Val Lemina', 'Stadio Olimpico Comunale', 'Quistello', 'Thiene', 'Cirò Marina', 'Papasidero', 'San Giovanni di Posada', 'Naro', 'Reggio Calabria', 'Poirino', 'University of Milan', 'Roverè della Luna', 'Acquaformosa', 'Sartirana Lomellina', 'Artena', 'Bocconi University', 'Lomagna', 'Mount Vesuvius', 'Crispano', 'Castiglione in Teverina', 'Grisignano di Zocco', 'Suelli', 'Castelpetroso', 'Rezzo', 'Pollutri', 'Diano Marina', 'Nocera Superiore', 'Gossolengo', 'Ricengo', 'Cantagallo', 'Hospital of Santa Maria Nuova', 'Policlinico', 'Cesana San Sicario', 'Siamaggiore', 'Mendicino', 'Capo Colonna', 'Torano Nuovo', 'Sassari', 'Torre del Colle', 'Cavareno', 'Pizzo Tre Signori', 'Inverigo', 'Cammarata', 'Niardo', 'Valloriate', 'Sedini', 'Palanzano', 'Monteciccardo', 'Adrano', 'Nusco', 'Bari Sardo', 'Lula', 'Jonadi', 'Province of Frosinone', 'Sorgono', "Castello d'Agogna", 'Marta', 'Monte Poggiolo', 'Cornetto', 'Pareto, Piedmont', "Spino d'Adda", 'Volpedo', 'Monserrato', 'Basilicata', 'Biandrate', 'Col de Clapier', 'Pedavena', "Chies d'Alpago", 'Mossano', 'Sandrigo', 'Villa Literno', 'Lauro', 'Castelletto Monferrato', 'Casale Monferrato', 'Lucoli', 'Pontedassio', 'Castellarano', 'San Paolo, Pistoia', 'Tramin an der Weinstraße', 'Carbone, Basilicata', 'Miglionico', 'Martinengo', 'Pontinvrea', 'Vaiano', 'Accettura', 'Civezza', 'Prazzo', 'Serrara Fontana', 'Nord-Ovest', 'Affile', 'Roviano', 'Marmentino', 'Borgoratto Alessandrino', 'Lovero', 'Sommatino', 'Bitetto', 'Varenna', 'Casazza', 'Torrevecchia Pia', 'Lucito', 'Montà', "Castiglione d'Adda", 'Bagolino', 'Decimoputzu', 'Arluno', 'Parolise', 'Lavello', 'Cascina', 'Villa di Briano', 'Tre Cime di Lavaredo', 'Botricello', 'Orgosolo', 'Sutrio', 'Monterosso Grana', 'Zapponeta', 'Cineto Romano', 'Grimacco', 'Jenesien', 'Misinto', 'Casalbordino', 'Lei', 'Erto e Casso', 'Tossicia', 'Mathi', 'Monte Viso', 'Erli', 'Pigge', 'St. Pankraz', 'Miagliano', 'Punta Valgrande', 'Arzana', 'Sommo', 'Castelguidone', 'Assisi', 'Rio Marina', 'Bussoleno', 'Salza Irpina', 'Lizzano, Apulia', 'Castelveccana', 'Santa Maria Maddalena', 'Suldenbach', 'Casalattico', 'Taio', 'Bonarcado', 'Scandolara Ravara', 'Cellara', "Romano d'Ezzelino", 'Fossacesia', 'Robassomero', 'San Gennaro Vesuviano', 'Condofuri', 'Stalettì', 'Sonnino', 'University of Palermo', 'Rivotorto', 'Molinara', 'Ciane', 'Gavia Pass', 'Varmo', 'Rittana', 'Pella, Piedmont', 'Corleone', 'Giuliano di Roma', 'Rionero Sannitico', 'PalaDesio', 'Gazzo, Veneto', 'Mühlen in Taufers', 'Sueglio', 'Soresina', 'Colle San Magno', 'Limone Piemonte', 'Belgioioso, Lombardy', 'Siena-Ampugnano Airport', 'Massey Memorial', 'Gattinara', 'Aritzo', 'San Ferdinando di Puglia', 'San Vito dei Normanni', 'Calasca-Castiglione', 'San Martino Siccomario', 'Villanovaforru', 'Sauze di Cesana', 'Montefelcino', 'Badiali', 'Carpineti', 'Torregrotta', 'Mariano Comense', 'Besate', 'Pistoia Cathedral', 'Zuglio', 'Brogliano', 'Province of Pesaro and Urbino', 'Montemaggiore al Metauro', 'Quarto, Campania', 'Fiume Veneto', 'Garbagnate Monastero', 'Corciano', 'Castenaso', 'Coazze', 'Mühlwald', 'Ahrntal', 'Bionaz', 'Gandino', 'Mornago', 'Bagnolo Cremasco', 'Trieste – Friuli Venezia Giulia Airport', 'Montefiore Conca', 'Saonara', 'Borgofranco sul Po', 'Torrile', 'Campodarsego', 'Province of Forlì-Cesena', 'Trevenzuolo', 'Bore', 'Pomaro Monferrato', 'Poggiofiorito', 'Montevarchi', 'Castello della Manta', 'Andorno Micca', 'Formignana', 'Bellegra', 'Grandes Jorasses', 'San Benedetto dei Marsi', 'Lierna', 'Fontanelle', 'Santa Maria Arabona', 'Ostellato', 'Cittaducale', 'San Vito', 'Bivongi', 'Frattamaggiore', 'Nanno', 'Casale Monferrato railway station', 'Santa Maria della Versa', 'Drapia', 'Vidigulfo', 'Precenicco', 'Roddi', 'San Prospero', 'Milazzo Airfield', 'Tissi', 'Calangianus', 'Rigolato', 'Gioia Tauro', 'Certosa di Padula', 'Tricase', 'House of the Vestals', 'Cetraro', 'Gagliole', 'Sermoneta', 'Alatri', 'Gemmano', 'Beura-Cardezza', 'Roccalbegna', 'Cumignano sul Naviglio', 'San Giovanni di Gerace', 'Martirano Lombardo', 'Valle Salimbene', 'Marigliano', 'Chiavari railway station', 'Casentino', 'PalaCalafiore', 'Monteflavio', 'Bussolengo', 'Vaglia', 'Taino, Lombardy', 'Ribordone', 'Grandola ed Uniti', 'Taurianova', 'Porto Venere', 'Bruno, Piedmont', 'Challand-Saint-Victor', 'Castrignano del Capo', "Sant'Angelo in Pescheria", 'Cassino', 'Tscherms', 'Gairo, Sardinia', 'Cremona railway station', 'Padua', 'Marrubiu', 'Segusino', 'Saccolongo', 'Caprarica di Lecce', 'Fontegreca', 'Canal San Bovo', 'Cimolais', 'Volpara', 'San Giovanni in Venere Abbey', 'Chiaramonti', 'San Michele di Ganzaria', 'Isera', 'Ozieri', 'Noale', 'Pecetto di Valenza', 'Potenza', 'Non Valley', 'Buonalbergo', 'Ossuccio', 'Alto', 'Vinchiaturo', 'Tricerro', 'Stuffione', 'San Pietro in Montorio', 'Angiari', 'Vallermosa', 'Agerola', 'Agira', 'Abetone', "Sant'Agata Fossili", 'Province of Parma', 'Castelfranco Veneto', 'Grivola', 'Morsano al Tagliamento', 'Cona, Veneto', 'Grosseto', 'San Giovanni Valdarno', 'Toirano Caves', 'Gissi', 'Lagosanto', 'Castelvetrano Airfield', 'Temple of the Olympian Zeus, Agrigento', 'Città della Pieve', 'Monte Cavallo', 'Sommacampagna', 'Castelvecchio', 'Orsomarso', 'Calci', 'Melazzo', 'Caprile', 'San Pietro di Cadore', 'Comelico Superiore', 'Mazzo di Valtellina', 'Montenero Sabino', 'Portici', 'Formigliana', 'Runkelstein Castle', 'Genoa', 'Monte Cassino', 'Chiavano', 'Montemale di Cuneo', 'Vasia', 'Corrido, Lombardy', 'Omignano', 'Torricella del Pizzo', 'Benna, Piedmont', 'Vizzola Ticino', 'La Sila', 'Arch of Augustus, Rome', 'Arcole', 'Monteferrante', 'Accona Desert', 'Porpetto', 'Specchia Gallone', 'Granaglione', 'Cassinelle', 'Camerino', 'Chignolo Po', "Borgo d'Ale", 'Castegnato', 'Castelnuovo Cilento', 'Mozzecane', 'Stadio Briamasco', 'Torre dei Lamberti', 'Castelcucco', 'Acquasparta', 'San Giorgio Lucano', 'Bellante', 'Pontecagnano Airport', 'Isola Vicentina', 'Mesagne', 'Carpeneto', 'Arzano', 'Nuxis', 'Porta San Sebastiano', 'Scherbadung', 'Orbetello Airfield', 'Positano', 'Cislago', 'Palombara Sabina', 'Scheggia Pass', 'Santa Maria della Pace', 'Alessandria del Carretto', 'Calcata', 'Castelnuovo Parano', 'San Pietro di Morubio', 'Lozzo Atestino', 'IULM University of Milan', 'Annicco', 'Santa Pudenziana', 'Amandola', 'Bardello', 'San Massimo', 'Santa Brigida, Lombardy', 'Sardara', 'Musile di Piave', 'Ponti, Piedmont', 'Guazzora', 'Roccapalumba', 'Leporano', 'Mesero', 'ELETTRA', 'San Mauro Cilento', 'Santa Maria della Vittoria', 'Sennariolo', 'Carate Urio', 'Zungri', 'Follonica Airfield', 'Cispadane Republic', 'Casignana', 'Tarantasca', 'Eboli', 'Roccavignale', 'Pian di Scò', 'Mozzanica', 'San Giusto Canavese', 'Proserpio', 'Santa Maria La Nova', 'San Paolo Cervo', 'Altilia', 'Rescaldina', 'Fauglia', "Campione d'Italia", 'Bergolo', 'Castelluccio dei Sauri', 'Villamiroglio', 'Acquanegra Cremonese', 'Cotronei', 'Sulzano', 'Colle Del Marchese', 'Settimo Rottaro', 'Chivasso', 'San Salvatore Telesino', 'Santi Fabiano e Venanzio a Villa Fiorelli', 'Roccapiemonte', 'Nostra Signora di Tergu', 'Gioia del Colle', 'Santa Maria in Aracoeli', 'Vicalvi', 'Robecco Pavese', 'Pombia', 'Monterotondo', 'Santarcangelo di Romagna', "Campo nell'Elba", 'Impruneta', 'Piovà Massaia', 'Cabras', 'Fivizzano', 'Asolo', 'Cappella Cantone', 'Montecarotto', 'Rometta', 'Cengio', 'Turin International Airport', 'Monteparano', 'Montecassiano', 'Valdobbiadene', 'Melito di Napoli', 'Monte Cavo', 'Piazza Colonna', 'Montelparo', 'Villa San Pietro', 'Sambuci', 'Rivergaro', 'Höhlensteintal', 'Longiano', 'Canistro', 'Fragagnano', 'Grottaminarda', 'Laureana Cilento', 'Fratte Rosa', 'Pentone', 'Trezzano sul Naviglio', 'Civita di Bagnoregio', 'Terlizzi', 'Fregellae', 'Valderice', 'Bettona', 'Mezzolombardo', 'Acireale Cathedral', 'San Paolo alle Tre Fontane', 'Stazzano', 'Tremezzo', 'Migliaro', 'Asti railway station', 'Valle Vigezzo', 'Masullas', 'Cittadella', 'Cassolnovo', 'Roncoferraro', 'San Presto', 'Stradella', 'Rosignano Airfield', 'Cis', 'San Buono', 'Phlegraean Fields', 'Teggiano', 'Catholic University of the Sacred Heart', 'Granozzo con Monticello', 'Baricella', 'Bornasco', 'Bisceglie', 'Sutera', "Capriata d'Orba", 'Gazzo Veronese', 'Autodromo di Pergusa', 'Buttigliera Alta', 'Pavona', 'Vicenza', 'Portigliola', 'Piz Roseg', 'Ucria', 'San Marcello al Corso', 'Domanico', 'Petacciato', 'Acquaviva Collecroce', 'Serrastretta', 'Via Anelli Wall', 'Riva del Garda', 'Carpignano Sesia', 'Torre San Giorgio', 'Gonzaga, Lombardy', 'San Pietro in Lama', 'San Cesario di Lecce', 'Mese', 'Cantalupo di Bevagna', 'Pellizzano', 'Pancalieri', 'Matris Domini Monastery', 'Schiavi di Abruzzo', 'Praso', 'Casina Pio IV', 'Col Ferret', "Rocca d'Arce", 'Lavagna', 'Torchiagina', 'Stellanello', 'Curinga', 'Mamoiada', 'Flavian Amphitheater', 'Leonforte', 'Covo', 'Valverde, Lombardy', 'Fordongianus', 'Lisio', 'Mogliano Veneto', 'Paitone', 'Santa Maria del Carmine, Pavia', 'Guardialfiera', 'Fossalta', 'Pagazzano', 'Pontebba', 'Pace del Mela', 'Valle Agricola', 'Ortovero', 'Niscemi', 'Pallare', 'Collalto Sabino', 'Monteu Roero', 'Verona', 'Selegas', 'Coniolo', 'Santo Spirito in Sassia', 'Cecina, Tuscany', 'Malonno', 'Guardia Lombardi', 'Manerbio', 'Sele Airfield', 'Borgo Santa Maria', 'Deruta', 'Pinzolo', 'Grenzgipfel', 'Grancona', 'Prepotto', 'Taurasi DOCG', 'Caronno Pertusella', 'Brindisi Montagna', 'Castellino del Biferno', 'University Kore of Enna', 'Borgo San Siro', 'San Giuliano Milanese', 'Piz Cancian', 'Mattie, Piedmont', 'Borgosesia', 'Montefalcone nel Sannio', 'Carmiano', 'Villaperuccio', 'Santo Stefano di Rogliano', 'Rapolla', 'Casale Corte Cerro', 'San Giovanni Gemini', 'Borgomasino', 'Cremolino', 'Isola del Liri', 'Schilpario', 'Casale Litta', 'Peglio, Lombardy', 'Mombaroccio', 'Province of Monza and Brianza', 'Malborghetto Valbruna', 'Frisa', 'Altavilla Silentina', 'Solbiate Arno', 'Meta, Campania', 'San Ponso', 'Calascibetta', 'Cirimido', 'Menconico', 'Pandino', 'Vallo Torinese', 'Caramagna Piemonte', 'Capiago Intimiano', 'Sennori', 'Jenne', 'Signa', 'Bagnolo del Salento', 'Spinea', 'Fenegrò', 'Port of Livorno', 'Megliadino San Fidenzio', 'Demonte', 'Montespertoli', 'University of Macerata', 'Sacra di San Michele', 'Burgos, Sardinia', 'Abbadia Lariana', 'Bracciano', 'Chianche', 'Tiglieto Abbey', 'Castelsardo', 'Siris, Sardinia', 'Monticelli Brusati', 'Lecce railway station', 'Buscemi', 'Cesate', 'Silvi', 'Pralormo', 'Orosei', 'Curno', 'Mairano', 'Albareto', 'Serramazzoni', 'Campodolcino', 'San Vincenzo Valle Roveto', 'Toro', 'Salussola', 'Pozzomaggiore', 'Rosignano Solvay', 'Florinas', 'Merone', 'Nulvi', 'Calvignano', 'Hône', 'Collegio Carlo Alberto', 'Travacò Siccomario', 'Bisenti', 'Medesano', 'Tre Cancello Landing Strip', 'Bussi sul Tirino', 'Mossa', 'Londa, Tuscany', 'Cupello', 'Arnad', 'Fossalto', 'Carbonara al Ticino', 'Durazzano', 'Claviere', 'Filago', 'Ponte Galeria', 'Capranica, Lazio', 'Caluso', 'Frignano', 'Mazzarino', 'San Pio delle Camere', 'Albaretto della Torre', 'Arcetri', 'Montalto di Castro', 'Montecatini', 'Golasecca', 'Cigognola', 'Rotella', "Castelletto d'Erro", 'Postiglione', 'Similaun', 'Eppan an der Weinstraße', 'Alice Castello', 'Marconia', 'Poggio Renatico', 'Nibbiola', 'Fobello', 'Caprezzo', 'Moresco', 'Canino', 'Paluzza', 'Centrache', 'Borgetto', 'Colloredo di Monte Albano', 'Diso', 'Loreto Aprutino', 'Nughedu San Nicolò', 'San Cosmo Albanese', 'Bocenago', 'Castelnuovo Bozzente', 'Fubine', 'Province of Grosseto', 'Cercino', 'Little St Bernard Pass', 'Balme', 'Genova Brignole railway station', 'Pietranico', 'Villa di Tirano', 'Montebello Ionico', 'Franzensfeste', 'Bianzano', 'Aqua Claudia', 'Castelvetere sul Calore', 'Tammaro', 'Ome', 'Montecchio Emilia', 'Sabbioneta', 'Leinì', 'Piossasco', 'Carrega Ligure', 'Montesano Salentino', 'Lomaso', 'Suni, Sardinia', 'Tuili', 'Minucciano', 'Legnaro', 'Mamertine Prison', 'Massino Visconti', 'Aggius', 'Rignano Garganico', 'Ospedale Maggiore', 'Portalbera', 'Laerru', 'Parco della Resistenza in Forlì', 'Licenza', 'Rignano Flaminio', 'Secret Museum, Naples', 'Force', 'Nocera Terinese', 'Gravere', 'Penser Joch', 'Basilica of San Frediano', 'Klausen, South Tyrol', 'Trino Vercellese', 'Fermignano', 'Dongo, Lombardy', 'Mont Maudit', 'Orsogna', 'Ferrara Synagogue', 'Mezzane di Sotto', 'Siena', "Sant'Andrea del Garigliano", 'Kurtinig an der Weinstraße', 'Zoagli', "Cassano all'Ionio", 'Turin', 'Zandobbio', 'Arnesano', 'Pianello del Lario', 'Bonea', 'Volturara Appula', 'Magnago', 'Maser', 'Ayas', 'Eisacktal', 'San Giorgio di Piano', 'Calavino', 'Pollena Trocchia', "Diano d'Alba", 'Deutschnofen', 'Pradleves', 'Buscate', "Colle d'Anchise", 'Peveragno', 'Pointe de Barasson', 'Passignano sul Trasimeno', 'Santi Apostoli, Rome', 'San Miniato', 'Stornarella', 'Monte Vulture', 'Sarule', "Acquaviva d'Isernia", 'Castelfranco di Sotto', 'Santa Caterina dei Funari', 'Castelforte', 'Gioia Del Colle Airport', 'San Daniele del Friuli', 'Romagnano al Monte', 'Francavilla di Sicilia', 'Castelvetrano', "Savogna d'Isonzo", 'Lezzeno', 'Arch of Septimius Severus', 'Accademia di Belle Arti Firenze', 'Rocca Canterano', 'Termini Imerese', 'Terelle', 'Druento', 'Rutino', 'Maclodio', 'Cravanzana', 'Settingiano', 'Torre Santa Susanna', 'Duchy of Mantua', 'Mandas', 'Garessio', 'Stelvio Pass', 'Portomaggiore', 'Polistena', 'Montemarciano', 'Sanzeno', 'Castelnovo Bariano', 'Predore', 'Sigillo', 'Valle San Giovanni', 'Pozzoleone', 'Zumpano', 'Formello', 'Roccaforzata', 'Cassago Brianza', 'Vetralla', 'Temple of Vespasian and Titus', 'San Sigismondo', 'Cavaglià', 'Salorno', 'Cavriglia', 'Villa Santina', 'Sampeyre', 'Capergnanica', 'San Pietro Mosezzo', 'Centola', 'Pieve Ligure', 'Predosa', 'San Martino Alfieri', 'Trivignano Udinese', 'Mount Yemlikli', 'Villanova Tulo', 'Maierato', 'Saracinesco', 'Carmignano', 'Villanova di Camposampiero', 'Carpino', 'Masciago Primo', "Sant'Eligio Maggiore", 'Quarna Sopra', 'Schnals', 'Roccastrada', 'Montebello di Bertona', 'Nuvolera', 'Zermeghedo', 'Lenna', 'Montescano', 'Misterbianco', 'Sestri Levante', 'Ogliastro Cilento', 'Ridnauner Bach', 'Gropparello', 'San Gimignano', 'Credaro', 'Robbio', 'Gemonian stairs', 'Morra', 'San Pietro al Natisone', 'Province of Nuoro', 'Issogne', 'Campello sul Clitunno', 'Carbonate, Lombardy', 'Tigliole', 'Lenola', 'Madonna del Sasso, Piedmont', 'Teglio', 'San Germano Chisone', 'Santa Balbina', 'Dugenta', 'Santa Maria Coghinas', 'Cori', 'Solarussa', 'Narni', 'Cascate del Serio', 'Miane', 'Serrungarina', 'Sernio', 'Castione della Presolana', 'Suardi', 'Torre Grosso', 'Monasterolo del Castello', 'Cellamare', 'Montecorice', 'Carpasio', 'Cogne', 'Barrali', 'Tartano', 'Paola', 'Castenedolo', 'Villaricca', 'Serralunga di Crea', 'Piz Lad', 'Pievepelago', "Torre de' Picenardi", 'Otricoli', 'San Pier Niceto', 'Aiello del Friuli', 'Francavilla Bisio', 'Castel Madama', 'Avio, Trentino', 'San Colombano Certénoli', 'Arona', 'Valle Castellana', 'San Giovanni al Natisone', 'Soragna', 'Capri, Campania', "Ospedaletto d'Alpinolo", 'Fontanetto Po', 'Stignano', "Santa Vittoria d'Alba", 'Bibbona', 'Francavilla in Sinni', 'Badolato', 'Barzana', 'Casnigo', 'Belcastro', 'Fraconalto', 'Stornara', 'Verdellino', 'Agrate Brianza', 'Province of Sassari', 'Somma Lombardo', 'Orsara di Puglia', 'Talmassons', 'Borrello', 'Casarza Ligure', 'San Felice Circeo', 'Colli a Volturno', 'Manghen Pass', 'Capannoli', 'Camposanto Monumentale', 'Alluvioni Cambiò', 'Pomaretto', 'Barcis', 'South Tyrolean Unterland', 'Uscio', "Quartu Sant'Elena", 'Roccaporena', 'Riofreddo', 'Erula', 'Silvano Pietra', 'Cicognolo', 'Comitium', 'Sangiano', 'Barile', 'Aci Bonaccorsi', 'Borgo San Giovanni', "Fara Gera d'Adda", 'Remanzacco', 'Rovetta', 'Museo della Deportazione', 'Nembro', 'Bernina Range', 'Gaby', 'Illorai', 'Moggio Udinese', 'Sarego', 'Livorno Ferraris', 'Isola delle Femmine', 'Lillianes', 'Salvirola', 'Falciano del Massico', 'Parona', 'San Francesco', 'Feldthurns', 'Casina', 'Rocchetta Ligure', 'Gaggio Montano', 'Rocca Santo Stefano', 'Cordonata', 'San Cassiano', 'Albavilla', 'Ripi', 'Gozzano, Italy', 'Montasola', 'Samassi', 'Quittengo', 'Fogliano', 'Molare', 'Triuggio', 'Varapodio', 'Pollino', 'Villacidro', 'Montallegro', 'Albano Laziale', 'Casoria', 'Calvi, Campania', 'San Giovanni dei Fiorentini', 'Cividale del Friuli', 'Brusciano', 'Valenzano, Italy', 'Vibo Valentia', 'Mola di Bari', 'Autodromo Nazionale Monza', 'Casola di Napoli', 'Brandizzo', 'Magnano', 'Travo', 'Portocannone', 'Viganella', 'Polizzi Generosa', 'Abriola', 'Usseglio', 'Camerata Nuova', 'Aqua Traiana', 'Caresanablot', 'Palazzo dei Cartelloni', 'Ortonovo', 'San Giovanni del Dosso', 'Poggio Sannita', 'Vancimuglio', 'Buccheri', 'Piano di Sorrento', 'Nosate', 'Binasco', 'Collarmele', 'Origgio', 'Valgreghentino', 'Monterosso Calabro', 'Sterpeto', 'Castelbaldo', 'Torrenova', 'Prestine', 'Leivi', 'Rancio Valcuvia', 'Cento', 'Bettolle', 'Teano', 'Laives', 'Trenta, Calabria', 'Pisa International Airport', 'San Pelino', 'Ricaldone', 'Vocca', 'San Vito Lo Capo', 'Vimodrone', 'Saint-Marcel, Aosta Valley', 'Gioiella', 'Castellana Sicula', 'Candia Canavese', 'Castelfranco Veneto railway station', 'Valtorta, Lombardy', 'Caprauna', 'Mariana Mantovana', 'Ponte Olivo Airfield', 'Borgo Pace', "Isola del Gran Sasso d'Italia", 'Cairo Montenotte', 'Silius', 'Florence', 'Ribera, Agrigento', 'Lonate Pozzolo', 'San Maurizio Canavese', 'Monte Cerignone', 'Cinque Terre, Italy', 'Farra di Soligo', 'Triora', 'Pedivigliano', 'Morgano', 'Province of Salerno', 'Buonconvento', 'Villafranca in Lunigiana', 'Galliera', 'Palau, Sardinia', "Sant'Egidio del Monte Albino", 'Laino Borgo', 'Cermenate', 'Aiguille Blanche de Peuterey', 'Aquara', "Sant'Angelo a Nilo", 'Montescaglioso', 'San Frediano, Pisa', 'Metaponto', 'Rosasco', 'Marzano Appio', 'Collepietro', 'Sciacca', 'Gualdo Cattaneo', 'Sarnonico', 'Ingria', 'Dosso del Liro', 'Colle Sannita', 'Olmo Gentile', 'San Donato Milanese', 'Schisò Castle', 'Pratola Serra', "San Martino dall'Argine", 'Tarano', 'Truden im Naturpark', 'Arborea', 'Durnholzer Tal', 'Barete', 'Pescosansonesco', 'Dasà', 'Falconara Marittima', 'Valfurva', 'Bergeggi', 'Felizzano', 'Ruda', 'Carmignano di Brenta', 'Chiaromonte', "Castello dell'Imperatore", 'Bolzano', 'Mesola', 'Fondachelli-Fantina', 'Laino Castello', 'Parzanica', 'Partschins', 'Vallerano', 'University of Sannio', 'Monclassico', 'Forte dei Marmi', 'Palmariggi', 'Melzo', 'Albisola Superiore', 'Mareno di Piave', 'Vicolungo', 'Scicli', 'Percha', 'Roccafranca', 'Tresnuraghes', 'Palma di Montechiaro', 'Vitulano', 'Gualdo Tadino', 'Province of Florence', 'Cesena Cathedral', 'Massalengo', 'Colli sul Velino', 'Castagnole Monferrato', "San Maurizio d'Opaglio", 'Pignataro Maggiore', 'San Fermo della Battaglia', 'Challand-Saint-Anselme', 'Fiora River', 'Castellavazzo', 'Barzago', 'Poggiridenti', 'Olzai', 'Campiglia dei Berici', 'Petina, Campania', 'Galluccio', 'Recoaro Terme', 'Marene', 'Cosio di Arroscia', 'Sarno', 'Esterzili', 'Monasterolo di Savigliano', 'Fiesole', 'Pò Bandino', 'Pointe Walker', 'Petrizzi', 'Tocco Caudio', 'Griante', 'Massello', 'Piadena', 'Malegno', 'Coazzolo', 'Cazzano di Tramigna', 'Corio, Piedmont', 'Montaldo di Mondovì', 'Montalto delle Marche', 'Mileto', 'Rimella', 'Polverara', 'Zimella', 'Rosta', 'Cornalba', 'Branzi', 'Colfelice', 'Trevico', 'Istrana Airport', 'Verona Boscomantico Airport', 'Pieve Porto Morone', 'Orsenigo, Lombardy', 'Loggia dei Militi', 'Cuggiono', 'Cocullo', 'Busseto', 'San Giorgio Morgeto', "Basilica dell'Osservanza", 'Ronco Scrivia', "Giardino dell'Iris", 'San Siro di Struppa', 'Zafferana Etnea', 'Monteverdi Marittimo', 'Turi, Apulia', "Francavilla d'Ete", 'Sepino', 'Colleretto Castelnuovo', 'Val Di Stava Dam', 'Massa e Cozzile', 'Mittagstal', 'San Lorenzo Maggiore', 'Bobbio Pellice', 'Prato Centrale railway station', "San Paolo all'Orto", 'Travesio', 'Curia Julia', 'Villaputzu', 'Torri in Sabina', 'Fonte Nuova', 'Pieve Vergonte', 'Province of Rome', 'Apecchio', "Vezza d'Oglio", 'Brez', 'Vedelago', 'San Giovenale', 'Parella', 'Grado', 'San Pietro Viminario', 'Garlenda', 'Gaiarine', 'Diamante', 'Dipignano', 'Colorina', 'Borgo Ticino', 'Santa Maria di Costantinopoli', 'Tauferer Ahrntal', 'Siziano', 'Moniga del Garda', "Sant'Elena Sannita", "San Pier d'Isonzo", 'Tombolo', 'Boretto', 'Cameri', 'Stadio Luigi Zaffanella', 'Porto Valtravaglia', 'Issime', 'University of Camerino', 'Riccione', 'Urzulei', 'Minervino di Lecce', 'Aiello del Sabato', 'Ovaro', 'Colvere', 'Siniscola', "Sant'Ambrogio di Torino", 'Parè', 'Costacciaro', 'Pagno', "San Nicola dell'Alto", 'Province of Caltanissetta', 'Civo', 'Villimpenta', 'Postage stamps and postal history of Vatican City', 'Cavarzere', 'Roseto Capo Spulico', 'Sospiro', 'Mirabella Imbaccari', 'Grugliasco', 'Caldes', 'Iseo, Lombardy', 'Verderio Superiore', 'Annifo', 'Troia, Apulia', 'Aosta Airport', 'Staller Saddle', "Sant'Alessio con Vialone", 'Costa di Mezzate', 'Fanes-Sennes-Prags Nature Park', 'San Paolo Maggiore', 'San Benedetto in Perillis', 'Cuglieri', 'Piedimonte Matese', 'Chianocco', 'Poggiomarino', 'Capaci', 'Noviglio', 'Tres, Trentino', 'Faedo', 'Paspardo', 'Segariu', 'Langhirano', 'Maglie', 'Trezzone', 'Tito, Basilicata', 'Teora', 'Savona railway station', 'Cordovado', 'Cagnò', 'Vezzano, Trentino', 'Colturano', 'Caltavuturo', 'Guidonia Montecelio', 'Prezza, Abruzzo', 'Pozzilli', 'Fleming', 'Santi Marcellino e Pietro al Laterano', 'Assemini', 'Ulassai', 'Grône', 'Province of Ragusa', 'Albaredo Arnaboldi', 'Torrechiara', 'San Pietro in Guarano', 'Intragna, Piedmont', 'Mongardino', 'Torre Le Nocelle', 'Percile', 'Lallio', 'Policoro', 'Lusernetta', 'Conzano', 'Castiglione Messer Marino', 'Vergiate', 'Fontanellato', 'Torre Orsaia', 'Peia', 'Oglianico', 'Marradi', 'Capo Vaticano', "L'Osservatore Romano", 'Cagliari railway station', 'Poggio Bustone', 'San Fatucchio', 'Giovinazzo', 'Brusimpiano', 'Albertis Castle', "Pozzo d'Adda", 'Ortobene', 'Torre del Greco', 'Peccioli', 'Balmuccia', 'Daiano', 'Roccasecca dei Volsci', 'Grotteria', 'Fabriano', 'Brozolo', 'Chambave', "Azzano d'Asti", "Trajan's Market", 'Baselice', 'Modugno', 'Vibo Marina', "Canale d'Agordo", 'Naturns', 'Boccioleto', 'Castello di Annone', 'Innichen', 'Ripalta Cremasca', 'Parabiago', 'Nardò', 'Almese', 'Enemonzo', 'Perosa Argentina', 'Capalbio', 'Caltrano', 'Ospedale della Pietà', 'Pontassieve', 'Cerete', 'Viganò', 'Codevilla', 'Ponte di Cerreto', 'Brallo di Pregola', 'Massazza', 'Breno', 'Pedrengo', 'Bivio Lugnano', 'Mattarello', 'Vendone', 'San Fiorano', 'Villar San Costanzo', 'Valli del Pasubio', 'Saluzzo', "Corte de' Cortesi con Cignone", 'Chianni', 'Ostiglia', 'Bolzano Airport', 'Santa Maria Navarrese', 'Secugnago', 'Storo', 'Genoa Cristoforo Colombo Airport', 'Martone', 'Monte Vidon Combatte', 'Germasino', 'Pettorazza Grimani', 'Serra Pedace', 'Campofilone', 'Cardedu', 'Sovramonte', 'Carrara', 'Aci Castello', 'Ono San Pietro', 'Argusto', 'Quarata', 'Revine Lago', 'Vignola-Falesina', 'Ortler', 'Cerrione', 'Lequio Tanaro', 'Bedizzole', "Castell'Arquato", 'Passetto di Borgo', 'Salbertrand', 'Roma Termini railway station', 'Simaxis', 'Chieti railway station', 'Campobasso railway station', 'Montedoro', 'Mongiuffi Melia', 'Pisa', 'Selvazzano Dentro', 'Bassignana', 'Varena, Trentino', 'Halaesa', 'Motta Santa Lucia', 'Poggio Imperiale', 'Autodromo Enzo e Dino Ferrari', 'Castelfidardo', 'Avezzano', 'Roccavaldina', 'Concamarise', 'Morrone del Sannio', 'San Marcello, Marche', 'Recetto', 'Grezzago', 'Moncalvo', 'Cipressa', 'Vignone', 'Rivarolo Canavese', 'Lavarone', 'Ombrene Airfield', 'Agliana', 'Brovello-Carpugnino', 'Rocca Pietore', 'Ruviano', 'Castiglione Olona', 'Villasalto', 'Vetto', 'Castel Capuano', 'Paularo', 'Narzole', 'Licata Airfield', 'Campofranco', 'Maiolati Spontini', "Sant'Elia Fiumerapido", 'Cohasset', 'Moncucco Torinese', 'Casalmorano', 'Castel Viscardo', 'San Giovanni in Persiceto', 'Licciana Nardi', 'Chiusano di San Domenico', 'Barberino di Mugello', 'Oyace', 'Cittareale', 'Palizzi', 'Melendugno', 'Pompei', 'Malalbergo', 'Merlara', 'Morgantina', 'Campora', 'Cellole', 'Paciano', 'Gravedona ed Uniti', 'Molina Aterno', 'Sestola', 'Bienno', 'Schlern-Rosengarten Nature Park', 'Brusnengo', 'Caserta', 'Santa Maria del Suffragio', 'Bono', 'Roccascalegna', 'Villa San Secondo', "Sant'Anna dei Palafrenieri", 'Spirano', 'Novi di Modena', 'Bugnara', 'Torre Boldone', 'Monteleone di Spoleto', 'Fiamignano', 'Morlupo', 'Monte Cornaccione', 'Palladian villas of Veneto', 'Montjovet', 'Binago', 'Montereale Valcellina', 'Valvestino', 'San Fili', 'Nigerpass', 'Monasterolo Casotto', 'Bovezzo', 'Dolegna del Collio', 'Montemaggiore Belsito', 'Bruzzano Zeffirio', 'San Lorenzo del Vallo', 'Camerata Picena', 'Groscavallo', 'San Sebastiano Curone', 'Montenerodomo', 'Montemurro', 'Chiesina Uzzanese', 'San Bassano', "Sant'Andrea della Valle", 'Juventus Center', 'Romana, Sardinia', 'Olivetta San Michele', 'Fossa, Abruzzo', 'Ello', 'Paganico Sabino', 'Amaseno', 'Oschiri', 'Vacri', 'Riva Valdobbia', 'Mandanici', 'Toceno', "Serralunga d'Alba", 'Gonnoscodina', 'Postua', 'Santa Cristina', 'Olbia Costa Smeralda Airport', 'Scapoli', 'Corana', 'Furore', 'Antillo', 'Povegliano, Veneto', 'Dossena', 'San Sebastiano al Vesuvio', 'Pernumia', 'Vezzano Ligure', 'Comano Terme', 'Giustino, Trentino', 'Maratea', 'Sala Biellese', 'Vaccarizzo Albanese', 'San Leo Bastia', 'Brossasco', 'Nostra Signora del Sacro Cuore', 'Escolca', 'Punta Rosa', "Anzola dell'Emilia", 'Guilmi', "Sant'Angelo Le Fratte", 'Margarita', 'Riva di Solto', 'San Pietro di Caridà', 'Garaguso', 'Tursi', 'Montecalvo in Foglia', 'Rotzo', 'Tollegno', 'Orciano Pisano', 'Santa Lucia Stroncone Astronomical Observatory', 'Castellina in Chianti', 'San Giovanni Ilarione', 'Croce Domini Pass', 'Casal Velino', 'Maslianico', 'Monte San Martino', 'Borso del Grappa', 'Bitritto', 'Isola di Capo Rizzuto', 'Leni', 'Izano', 'Spagna', 'Statte', 'Magreglio', 'Cardeto', 'Bisaccia', 'Carpenedolo', 'Gesualdo, Campania', 'Pincara', 'San Biagio Saracinisco', 'Lucus Feroniae', 'Pozzallo', 'Santa Caterina a Chiaia', 'Santo Stefano Belbo', 'Palio di Siena', 'Bottanuco', 'Rapallo', 'Celico', 'Castelluccio Superiore', 'Telese Terme', "Sant'Andrea Frius", 'Casalbeltrame', 'Croce di Castiglione', 'Villanova Monteleone', 'Milano', 'Corvara, Abruzzo', 'Gambettola', 'Stefanaconi', 'Selve Marcone', 'Predazzo', 'Province of La Spezia', 'La Maddalena', 'Sogliano al Rubicone', 'Macerata Feltria', 'Paterno, Basilicata', 'Stadio della Vittoria', 'Province of Pescara', 'Belmonte Piceno', 'Apulia', 'Vezzana', 'Appiano Gentile', 'San Giacomo degli Schiavoni', 'Piz Serra', 'Vische', 'Montecchio Precalcino', 'Pancarana', 'Pratola Peligna', 'Roghudi', 'Piazza del Duomo, Milan', 'Montiano', 'Cervia Airport', 'Castelfranco Emilia', 'Borgo Val di Taro', 'San Lorenzello', 'Molteno', 'Falconara Airport', 'Reggio Emilia', 'Apollosa', 'Carè Alto', 'Montelabbate', 'University of Turin, Faculty of Law', 'Tortorella', 'Cesara', 'Pizzo Campanile', 'Manduria', 'Caravonica', 'Ponte Coperto', 'Portopalo di Capo Passero', 'Pragelato', 'Sala Regia', 'Torrita Tiberina', 'Tortolì Airport', 'Vignale Monferrato', "Rocca d'Evandro", 'Aprilia, Lazio', 'Livinallongo del Col di Lana', 'Proveis', 'Crotone Airport', 'Mount Paesaggio', 'Corropoli', 'Mason Vicentino', 'Ivano-Fracena', 'Castel Gabbiano', 'Val Badia', 'Satriano', 'Dambel', 'Castelvecchio Calvisio', 'Corvara, South Tyrol', 'Mont Dolent', 'San Giovanni in Marignano', 'Valdisotto', 'Quagliuzzo', 'Terzorio', 'Sutri', 'Gesù Nuovo', 'Trissino', 'Acquaviva Platani', 'Massafra', 'Cerda', 'Barga', 'Gorgoglione', 'Caravate', 'Villalfonsina', 'Capena', 'Chiaravalle, Marche', 'Gela', 'Sampierdarena', 'Oriolo', 'Zanè', 'Sanfrè', 'Theological University of Northern Italy - Turin Campus', 'Nocara', 'Castellammare del Golfo', 'Roccamena', 'Province of Terni', 'Vendrogno', 'Ranco, Lombardy', 'Isola Madre', 'Battifollo', 'Stadio San Vito', "Trajan's Forum", 'Donnas', 'Vöran', 'Tula, Sardinia', 'Terra del Sole', 'Castelseprio', 'Castiglione Chiavarese', 'Casalbuttano ed Uniti', 'Mornese', 'Carobbio degli Angeli', 'Cava Manara', 'Oltrona di San Mamette', 'Gaglietole', "Canneto sull'Oglio", 'Raveo', 'Province of Udine', 'Pedara', 'Pietramontecorvino', 'Balzola', 'Usmate Velate', 'Torrecuso', 'Puglianello', 'Petrella Salto', 'Staffolo', 'Pettenasco', 'Bonefro', 'Bagnara Calabra', 'Roccamonfina', 'Tonale Pass', 'Terranova dei Passerini', 'Castelvisconti', 'Novara di Sicilia', 'Prelà', 'Ligosullo', 'Villanova Monferrato', 'Panicale', 'Lozzolo', 'Nervi', 'Miazzina', 'Controguerra', 'Grotta di Cocceio', 'Partanna', 'San Cristoforo sul Naviglio', 'Tornaco, Piedmont', 'Bregaglia Range', 'Castel Campagnano', 'Pertengo', 'Belveglio', 'Gerace', 'Camigliano', 'Salara', 'Petit Grépillon', 'Savona', 'Borgo Valsugana', 'Lucinasco', 'Pianezza', "San Demetrio ne' Vestini", 'Brescello', 'La Verna', 'Regio Friuli Venezia', 'Giaveno', 'Tripi', 'Nissoria', 'Ciconio', 'Brentonico', 'Caprie', 'Cassinetta di Lugagnano', 'Novalesa', 'Brembate di Sopra', 'Chieri', 'Cittanova', 'Roccavivara', 'Vespolate', 'Longobucco', 'Dualchi', 'Sparanise', 'Realmonte', 'Bentivoglio, Emilia-Romagna', 'Rocca Priora', 'Fiumicino', 'Caivano', 'Mezzoldo', 'Carpinone', 'Zeccone', 'Piscinas', 'Hotel Florida Milan', 'Flumeri', 'Province of Pisa', 'Motto della Tappa', 'Azione Cattolica', 'Pettoranello del Molise', 'Church of Santi Michele e Magno', 'Massa Marittima', 'Olmeneta', 'Savelli, Calabria', 'Vicopisano', 'Abbadia Cerreto', 'Paroldo', 'Bardi, Emilia-Romagna', 'Vallata', 'Montefiascone', 'Basiliano', 'Gressan', 'Theodul Pass', 'Noventa Vicentina', 'Lusiana', 'Thiesi', 'Meina', 'Mirabello', 'Urtijëi', "Romans d'Isonzo", 'Resia, Friuli', 'Pontedera', 'Carovigno', 'Lumezzane', 'Bernareggio', 'Castellar Guidobono', 'Paliano', 'Province of Arezzo', 'Gais', 'Stilfs', 'Canale Villoresi', 'Stadio Giorgio Ascarelli', 'San Felice sul Panaro', 'Lioni', 'Senarica', 'Mesoraca', 'Crissolo', 'Greve in Chianti', 'Carugo', 'Acquappesa', 'Corvino San Quirico', 'Tornata', 'Pratomagno', "Calvi dell'Umbria", 'Naples', 'Sperlonga', 'Romano di Lombardia', 'San Gregorio nelle Alpi', 'Schivenoglia', "Cassano d'Adda", 'Cerreto Guidi', 'Monte Sacro', 'Conselice', 'Bosisio Parini', 'Ostia', 'Vastogirardi', 'Farindola', 'La Civiltà Cattolica', 'Casola Valsenio', 'Macra', 'Poppi', "Sant'Anna di Stazzema", 'Broni', 'Campagnatico', 'Nicorvo', 'Pieve a Nievole', 'Militello Rosmarino', 'Bellavista', 'Aliano', 'San Basile', 'Spongano', 'Province of Enna', 'Castilenti', 'Bagnaria', 'Villar Focchiardo', 'Monte Rasu', 'Sillavengo', 'Salvitelle', 'Crocetta del Montello', 'Scurelle', "Castiglione d'Intelvi", 'Rubiana', 'Casalzuigno', 'Caserma Ederle', 'Castri di Lecce', 'Riola Sardo', 'Kuens', 'Tagliolo Monferrato', 'Clivio', 'Cameri Airport', 'San Calogero', "Vighizzolo d'Este", 'Montafia', 'Ameno, Italy', 'Caspoggio', 'Collio', 'Braone', 'San Pietro di Feletto', "Isola d'Asti", 'Valvasone', 'Monte Urano', 'Monteleone di Puglia', 'San Gregorio', 'Bee, Piedmont', 'Persico Dosimo', 'Spinoso', 'Montemarzino', 'Lesegno', 'Monti Dauni', 'Montecopiolo', 'Agnone', 'San Daniele Po', 'Duchy of Milan', 'Gravellona Lomellina', 'Giove, Umbria', 'San Marcello Pistoiese', 'Muzzana del Turgnano', 'Magliolo', 'Aosta Valley', 'Gran Paradiso National Park', 'Castelbuono', 'Camaldoli', 'Latronico', 'Province of Bari', 'Column of Phocas', 'Albugnano', 'Dorsino', 'Castelletto Cervo', 'Dresano', 'Fucine Lake', 'Bogliasco', 'Province of Chieti', "Valle dell'Angelo", 'Vaglio Serra', 'Taipana', 'Isole', 'Perfugas', 'Santo Stefano al Mare', 'Castiglione Cosentino', 'Muggiò', 'San Mauro Forte', 'Aramengo', 'Saint-Pierre', 'Villamagna', 'San Ginesio', 'San Vincenzo al Volturno', 'Bévéra', 'Garbagna, Piedmont', 'Cefalà Diana', 'Saint-Nicolas, Aosta Valley', 'Santa Maria in Vallicella', 'Pompeii', 'Jôf di Montasio', 'Monte Castello di Vibio', 'Seulo', 'Trisobbio', 'Gorgo al Monticano', 'Arba, Friuli-Venezia Giulia', "Centro per l'arte contemporanea Luigi Pecci", 'Carro', 'Celano', 'Giau Pass', 'Monte San Savino', 'Castropignano', 'Savignano sul Panaro', 'Villa Estense', 'Calabritto', 'Ravarino', 'Favale di Malvaro', 'Roppolo', 'Biomedical University of Rome', 'Liberi', 'Rivarolo del Re ed Uniti', 'Campochiaro', 'Piovera', 'Verrayes', 'Grumello Cremonese ed Uniti', 'Trinity College, Rome Campus', 'Aeclanum', 'Guglionesi', 'Casalalta', 'Loreglia', 'Longone Sabino', 'Zeddiani', 'Povegliano Veronese', 'Villaga', 'Grumento Nova', 'Torrita di Siena', 'Santa Margherita Ligure', 'Treviolo', 'Vaie', 'Casabona', 'Pianella', 'Camairago', 'Bologna Guglielmo Marconi Airport', 'Rocca di Mezzo', 'Norma, Lazio', "Sant'Anna Arresi", 'Castelnuovo Nigra', 'International Centre for Theoretical Physics', 'San Roberto', 'Azzanello', 'Roverè Veronese', "Pino d'Asti", 'Cellarengo', 'Caraffa del Bianco', 'Liveri', 'Romano Canavese', 'Taurisano', 'Villesse', 'Fenestrelle', 'Cervo-San Bartolomeo railway station', 'Garlate', 'Viareggio', 'Riolo Terme', "Caslino d'Erba", 'Cavacurta', 'Osidda', 'Brugnato', 'Lettomanoppello', 'Spadafora', "San Mango d'Aquino", 'Province of Mantua', 'Gallo Matese', "Lanzo d'Intelvi", 'Brienno', 'Gardone Riviera', 'Rueglio', 'Vanzaghello', 'Borno', 'Delia', 'Magliano Alpi', 'Calcinato', 'Minerbe', 'Trabia', 'Portoscuso', 'Mugnano di Napoli', 'San Giacomo Filippo', 'Keats-Shelley Memorial House', 'Rodì Milici', 'San Zeno Naviglio', 'Ceprano', 'Parco Nazionale dei Monti Sibillini', "Vaprio d'Agogna", 'Favara', 'Galtellì', 'Pazzi Chapel', 'Ancona', 'Cattolica Airfield', 'Sud', 'Forum Fulvii', 'Cavargna', 'San Costanzo', 'Castel Rozzone', "Casole d'Elsa", 'Brolo', 'Adamello-Presanella Alps', 'Palagano', 'Casciago', 'Palagiano', 'Porta Pia', 'Rovello Porro', 'Soliera', 'Castelnovetto', 'Forgaria nel Friuli', 'Pudiano', 'Starhotels Anderson', 'Sulbiate', 'San Stino di Livenza', 'Villasanta', 'Marsico Nuovo', 'Luras', 'Jelsi', 'Casteldelfino', 'Aiguille des Angroniettes', 'Francavilla al Mare', 'Pollica', 'Monti Lepini', 'Chiarano', 'Cerami', 'San Paolo Bel Sito', 'Oleggio', 'Cirié', 'Roccaforte Ligure', 'Morciano di Romagna', 'Selinunte', 'Paul VI Audience Hall', 'Castelpoto', 'Province of Ravenna', 'Piz Sella', 'Montalenghe', 'Grosso', 'Ponti sul Mincio', 'Cinisello Balsamo', 'Chiopris-Viscone', 'Tavernole sul Mella', 'Lombardore', 'Francofonte', 'Fucecchio', 'Sesto San Giovanni', 'Turrivalignani', "Pizzo dell'Alpe Gelato", 'Venaus', 'Zelbio', 'Scopa, Piedmont', 'San Vitale', 'Allumiere', 'Sfruz', 'Ponzano di Fermo', 'Cremona Cathedral', 'Brunate', 'Vigo di Fassa', 'San Teodoro, Sicily', 'Monte Mario', 'Consiglio di Rumo', 'Stella, Liguria', 'Bovalino', 'Cassina Valsassina', 'Giuggianello', 'Sala Monferrato', 'Aquilonia, Italy', 'San Vendemiano', 'Carapelle', 'Bugiano', 'Province of Verona', 'Santo Stefano', 'Magna Graecia University', 'Loria, Veneto', 'Bagnone', 'San Teodoro, Sardinia', 'Palermo-Boccadifalco Airport', 'Torricella, Apulia', 'Nortosce', 'Sacile', 'Capizzi', 'Camposampiero', 'Baradili', 'Giano Vetusto', 'Novate Mezzola', 'Telve', 'Rorà', 'Paludi', 'Sernaglia della Battaglia', 'Passaggio di Assisi', 'Luisago', 'Valgrana', 'Stenico', 'Zogno', 'Vesime', 'Ranzo', 'Pontecchio Polesine', 'Incisa Scapaccino', "Sant'Omobono Terme", 'Magomadas', 'Mussomeli', 'Cerenzia', 'San Michele', 'Arzachena', 'Santo Stefano Lodigiano', 'Chiusdino', 'Serravalle Sesia', 'Framura', 'Mallare', 'Revere, Lombardy', 'Trentino-Alto Adige/South Tyrol', 'Tortora', 'Terricciola', 'Fino del Monte', 'Aosta', 'Volastra', 'Velletri', 'Gaggiano', 'Teatro Rossini, Pesaro', 'Asigliano Vercellese', 'Ardesio', 'Vallefiorita', 'San Severino Marche', 'Trino', 'Osmate', 'Deliceto', 'St. Leonhard in Passeier', 'Westin Palace Milan', 'Doues', 'Colledara', 'Santi Domenico e Sisto', 'Veddasca', 'Mandello del Lario', 'Lombriasco', 'Borgolavezzaro', 'San Silvestro al Quirinale', "Piz da l'Acqua", "Cava de' Tirreni", 'Bottidda', 'Casatisma', 'Naples International Airport', 'Moggio', 'Mortegliano', 'Sagrado', 'Lama dei Peligni', 'Tronzano Vercellese', 'Fusine', 'Capranica Prenestina', 'Novi Velia', 'Tregnago', 'Torella del Sannio', 'San Martino di Venezze', 'Nola', 'Motta San Giovanni', 'Casaletto di Sopra', 'Laurenzana', 'San Giovanni Suergiu', 'Trieste', 'Forino', 'Synagogue of Casale Monferrato', 'Montaione', 'Albairate', 'Merano', 'Udine', 'Cheremule', 'University of Catania', 'Piuro', 'Pollina', 'Crespina', 'Cenate Sopra', 'Amelia Cathedral', 'Cella Dati', 'Ceresole Reale', 'Gorizia', 'Bezzecca', 'Guardamiglio', 'Cerignale', 'Pusiano', 'Scuola Normale Superiore di Pisa', 'Rocchetta di Cerreto', 'Pegognaga', 'Povoletto', 'Mignanego', 'Magi Chapel', 'Sovana', 'Putignano', 'Schnalser Bach', 'Limatola', 'Messina', 'Tirano railway station (RFI)', 'Lizzano in Belvedere', 'Arbus, Sardinia', 'Piz Zupò', 'Montieri', 'Foglizzo', 'Trappeto', 'Vigano San Martino', 'Lido di Venezia', 'Testico', 'Serravalle Pistoiese', 'Salgareda', 'Ligonchio', 'Quarona', 'Grossetto Airport', 'Gsies', 'Staffora', 'Landriano', 'Pietrafitta', 'Torrazza Piemonte', "San Quirico d'Orcia", 'Cavaso del Tomba', 'Sestu', 'Frassinetto', 'Urbisaglia', 'Lustra', 'Palomonte', "Sant'Elia a Pianisi", 'Mombasiglio', 'Castelnovo del Friuli', 'Termini Airfield', 'Fagagna', 'Comitini', 'Orzinuovi', 'Caloveto', 'Verolavecchia', 'Frugarolo', 'Borgo Tossignano', 'Cattolica Eraclea', 'Crespadoro', 'Alvignano', 'Naviglio Grande', 'Atripalda', 'Santa Maria in Via Lata', 'Apricena', 'Casalfiumanese', 'Rocchetta Palafea', "Monteroni d'Arbia", "Boschi Sant'Anna", 'Rea, Lombardy', 'Ravanusa', 'Calosso', 'University of Pavia', 'San Martin de Tor', 'Lunamatrona', 'Stazzona', 'Fiumicello', 'Crespino', 'Redona', 'Brienza', 'Pofi', 'Lasnigo', "Lesignano de' Bagni", 'San Nicola Church, Pisa', 'Lecce', 'Valdengo', 'Ploaghe', 'Piansano', 'Resiutta', 'Via Salaria', 'Melissa', 'Cosa', 'Frontone', 'Cagno', 'Gambarana', 'Guspini', 'Santa Ninfa', 'Santa Francesca Romana, Rome', 'Province of Turin', 'Lastra a Signa', 'Pizzoferrato', 'Tufillo', 'Balsorano', 'San Cipirello', 'San Germano Vercellese', 'Vigone', 'Fiumefreddo di Sicilia', 'Noto Radio Observatory', 'Cappella Paolina', 'Murlo', 'Rodello', 'Graffignana', 'Zone', 'Rapolano Terme', 'Mount Limbara', 'Zanica', 'Piedicavallo', 'Cesenatico', 'Apricale', 'Alzate Brianza', 'San Potito Sannitico', 'Selvino', 'Porto Viro', 'Giarole', 'Gardens of Sallust', 'Altino', 'Quero', 'Piovene Rocchette', 'Costa di Serina', 'Furkelpass', 'Porlezza', 'Sedilo', 'Ossi, Sardinia', 'Anzi, Italy', 'San Giorio di Susa', 'Torresina', 'Airole', 'Copertino Castle', 'Trentinara', 'Casagiove', 'Bagnoli', 'Rossiglione', 'Zeme, Lombardy', 'Bergamasco, Piedmont', 'Finale Emilia', 'Chiusa Sclafani', 'Fino Mornasco', 'Rotonda di San Tomè', 'Sogliano Cavour', 'Monte Toc', 'Val della Torre', 'Catanzaro', 'University of Pisa', 'Guarcino', 'Auer', 'Vagli Sotto', 'Iesi Airfield', 'Teatro degli Arcimboldi', 'Polytechnic University of Turin', 'Elba', 'Dovadola', "Orto Botanico dell'Università di Sassari", 'Rivanazzano Terme', 'Mormanno', 'Santa Maria della Pietà in Camposanto dei Teutonici', 'Vedano al Lambro', 'Schlern', 'Piagge', 'Carpi, Emilia-Romagna', 'Alba Adriatica', 'Cantarana', "Sant'Ignazio Church, Rome", 'Paceco', 'Brenna, Lombardy', 'Vigliano Biellese', 'Ariccia', 'Rosello', 'Montelongo', 'Rogno', 'Petrella Tifernina', 'Cavaion Veronese', 'Santi Luca e Martina', 'Cantoira', 'Terragnolo', 'Cermis', 'Campoli del Monte Taburno', "Urago d'Oglio", 'Mori', 'Pagnacco', 'Stia', 'San Procopio', 'Preganziol', 'Galliera Veneta', "Sant'Agostino", 'Gallicano', 'Cerano', 'Po Valley', 'Poli', 'Macomer', 'Ronco Biellese', 'Pozzuoli', 'Valda', 'Nocciano', 'Sansicario Torinese', 'Scano di Montiferro', 'Terenten', 'Pescolanciano', 'Montechiarugolo', 'Secinaro', 'Spadola', 'San Giovanni Fuoricivitas', 'Casalpusterlengo', 'Province of Messina', 'Garniga Terme', 'Torraca', 'Brissogne', 'Canna, Calabria', 'Crognaleto', 'Monti Simbruini', 'Salò', 'Lodi Vecchio', 'Province of Gorizia', 'Crevalcore', 'Sacro Cuore di Gesù agonizzante a Vitinia', 'Montescudo', 'Valtopina', 'Siror', 'Scido', 'Gravina in Puglia', 'San Cipriano Picentino', 'Castelnuovo', 'Garbagnate Milanese', 'Bertiolo', 'Manziana', 'Chiaramonte Gulfi', 'Camisano Vicentino', 'Church of Domine Quo Vadis', 'Atina, Lazio', 'Pontifical Oriental Institute', 'Cesinali', 'Rodi Garganico', 'Macchia Valfortore', 'Mondaino', 'Laurito', 'San Cipriano Po', 'Tora e Piccilli', 'Fontana Maggiore', "Sant'Angelo di Brolo", 'Montegabbione', 'Cimadolmo', 'Tavigliano', 'Vicenza Airport', 'Cappella Sansevero', 'Cinquemiglia', 'Graniti', 'Corbara', 'Marianopoli', "Villa d'Este", 'Serramanna', 'Pescaglia', 'Bevagna', 'Cardito', 'Gussago', "Castello d'Argile", 'Roburent', 'Castronno', 'Verbania', 'Taufers im Münstertal', 'Dronero', 'Paesana', 'Spresiano', 'Moricone', 'Cimitile', 'Roscigno', 'Casalvieri', 'Filiano', 'Casalanguida', 'Moio della Civitella', 'Gargano', 'Chieuti', 'Cersosimo', 'Magisano', 'Solomeo', 'Prata Camportaccio', "Vezza d'Alba", 'Solbiate Olona', 'Castegnero', 'Pozzaglio ed Uniti', 'Villapiana', "Sant'Alfio", 'Larciano', 'Bari Karol Wojtyła Airport', 'Cerreto Castello', 'Barbana, Italy', 'Brognaturo', 'Montesegale', 'San Martino Valle Caudina', 'Campocologno', 'Lamporo', 'Fontanella', 'Zumaglia', 'Maranello', 'Accumoli', 'Antonimina', 'Frascineto', 'Tromello', 'Carimate', 'Gavardo', 'Savigno', 'Fagnano Castello', "Serra d'Aiello", 'Mühlbach', 'Ospedaletto Lodigiano', 'Preone', "Castell'Alfero", 'Mugnano del Cardinale', "Saviore dell'Adamello", 'Muccia', 'Camastra', 'Pietrastornina', 'Schwarzhorn', 'Bagnaria Arsa', 'Corzano', 'Gagliano Castelferrato', 'Pfitschtal', 'Valtesse', 'Strona', 'Pisa Centrale railway station', 'Garlasco', 'Barolo, Piedmont', 'Gattico', 'Staffarda Abbey', 'San Benedetto Po', 'Fiorano Circuit', 'Carrosio', 'Pisano, Piedmont', 'San Vito di Fagagna', "Ca' d'Andrea", 'Bortigiadas', 'Forenza', 'Signalkuppe', 'Poggiodomo', 'Gabicce Mare', 'Montanera', 'Castelnuovo, Trentino', 'Serravalle Langhe', 'Province of Padua', 'Zugliano', 'Matrice', 'Rocca Pia', 'Cadrezzate', 'Oristano', 'Campitello Matese', 'Venaria Reale', 'Gonnostramatza', 'Casole Bruzio', 'Chialamberto', 'Rubano', 'Monrupino', 'Caggiano', 'Cartura', 'Sanfront', 'Biblioteca Riccardiana', 'Montanaso Lombardo', 'Maniace', 'Scaldasole', 'Casier', 'Roasio', 'Andria', 'Cimon della Pala', 'Jacurso', 'Rock Drawings in Valcamonica', 'Mezzana Mortigliengo', 'Salza di Pinerolo', 'Monastier di Treviso', 'Camugnano', 'Casteldelci', 'Virgo interferometer', 'Schio', 'Castiglione a Casauria', 'Maggiora', 'Fossalta di Piave', 'Teolo', 'Pisciotta', 'Gemona del Friuli', 'Torre Pellice', 'Collegiove', 'Pocapaglia', 'Vittorio Veneto', 'Pralungo', 'Saletto', 'Porto Mantovano', 'Pantigliate', 'Sambuca Pistoiese', 'Belmonte del Sannio', 'Villorba', 'Schluderns', 'Ceva', 'Piazza al Serchio', 'Ginosa', 'Hyblaean Mountains', 'Cellatica', 'Guamaggiore', 'Guidizzolo', 'Montecrestese', 'Tornabuoni Chapel', 'Pontremoli', 'Blello', 'Ghiffa', 'Province of Livorno', 'Aveto Natural Regional Park', 'San Giovanni in Galdo', 'Veduggio con Colzano', "Gradisca d'Isonzo", "Fontaneto d'Agogna", 'Ceretto Lomellina', 'Lisciano Niccone', 'Grazzano Badoglio', "Sant'Albano Stura", 'Fregona', 'Stadio Nazionale PNF', "Ospedale L'Albergo Reale dei Poveri, Naples", 'Aviatico', 'Vernole', 'Solagna', 'Prata Sannita', 'Pazzano', 'Stadio Tommaso Fattori', 'Castroregio', 'Rovasenda', 'Nettuno', 'Rivarossa', 'Montecchio', 'Casalduni', "Corneliano d'Alba", 'Bucine', 'Marmontana', 'Caprarola', 'Barghe', 'Monti Volsini', 'Ridracoli', 'Campofiorito', 'Pomposa Abbey', 'Staranzano', 'Lacchiarella', 'Abano Terme', 'Naval Air Station Sigonella', 'Rosà', 'Castelgrande, Basilicata', 'Minervino Murge', 'Agropoli', 'Pontboset', 'Gamberale', 'Padula', 'Pallanzeno', 'Carnago', 'Aosta railway station', 'Polinago', 'Piea', 'Cremona', 'Staiti', 'Corleto Perticara', 'Santa Marina Salina', 'Senise', "Saint Peter's Square", 'Tavullia', 'Basicò', 'Villa Piovene', 'Seminara', 'Santa Giusta Cathedral', 'Salle', "Torre d'Arese", 'Maritime Alps', 'Poggio San Lorenzo', 'Loano', 'Castelcovati', 'Ovada', 'Porta Borsari', 'Orroli', 'Saint-Oyen', 'Coreglia Antelminelli', 'Ornica', 'Masate', 'Bonemerse', 'Tavernola Bergamasca', 'Canale, Piedmont', 'Pescina', 'Fontanarosa', 'Locate Varesino', 'Marzio', 'Castelfranco di Sopra', 'Igliano', 'Turin-Aeritalia Airport', 'Seriate', 'University of Molise', 'Oleggio Castello', 'Armo', 'Vinzaglio', 'Fabrecce', 'Caminata', 'Rhêmes-Saint-Georges', 'Province of Genoa', 'Solaro', 'Torrazza Coste', 'Faedis', 'Gioi', 'Scala, Campania', 'Manocalzati', 'Masi Torello', "Sant'Agata di Puglia", 'Pila', "Sant'Anselmo all'Aventino", 'Buddusò', 'Sotto il Monte Giovanni XXIII', 'Roccabernarda', 'Capri', 'Villafalletto', 'Bassano Bresciano', 'San Donato di Ninea', 'Formia', 'Sirone', 'Casanova Elvo', 'Costarainera', 'Cortandone', 'Scandicci', 'Rivarolo Mantovano', 'Ollolai', 'Santa Maria Antica', 'Guiglia', 'Lignana', 'Flavon', 'Santa Maria in Organo', 'Nespolo', 'San Francesco di Paola', 'Quaranti', 'Bardineto', 'Botticino', "Castel Sant'Angelo, Lazio", 'Caneva', 'Villafranca di Forlì', 'Valmorea', 'Bibbiano', 'Tonco', 'Monte San Giovanni Campano', 'Piz Argient', 'Nardodipace', 'Pula', 'Sarmato', 'Alta Scuola Politecnica', 'Rivisondoli', 'San Giovanni in Oleo', 'Sestri Ponente', 'Porretta Terme', 'Isola Rizza', 'Felino', 'Solbiate', 'Caravino', 'Qualiano', 'Saltara', 'Altamura', 'Campegine', 'Vico Equense', 'Nave San Rocco', 'Padova Airport', 'Balangero', 'Capriglio', 'Valsolda', 'Monte Porzio', 'Ossimo', 'Kreuzbergpass', 'Senerchia', 'Veglie', 'Roccarainola', 'San Giovanni la Punta', 'Jerago con Orago', 'Province of Treviso', 'Vermezzo', 'Galbiate', 'Salemi', 'Rottofreno', 'Boara Pisani', 'Tuglie', 'Maiori', 'Moos in Passeier', 'San Nicolò Gerrei', 'Alonte', 'Beinette', 'Argenta', 'Madonna della Strada', 'Zola Predosa', 'Diano Castello', 'Carinola', 'Grauno', 'Camburzano', 'Turners Beach, Tasmania', 'Castelbelforte', 'Fiuggi', 'Santa Lucia', 'Piantedo', 'Torbole Casaglia', 'Castiglione della Pescaia', 'Taormina', 'Osnago', "Sant'Apollinare alle Terme Neroniane-Alessandrine", 'Prunetto', 'Pedemonte', 'Pratiglione', 'Castelmola', 'Hintere Schwärze', 'San Colombano Belmonte', 'Porta Capuana', 'Ronsecco', 'Ripatransone', 'Perledo', 'Bianzè', 'Albese con Cassano', 'Dolzago', 'Wasps Stabia Rugby', 'Charvensod', 'Garzigliana', 'Trescore Cremasco', 'Foligno', 'Baragiano', 'Varano Borghi', 'Pradalunga', 'Locana', 'Bultei', 'Ceranesi', 'Torre di Mosto', 'Sale, Piedmont', 'Brenzone', 'Calamonaci', 'Premeno', 'Vintl', 'Pizzo Quadro', 'Pago del Vallo di Lauro', 'Monterosso Almo', 'International School for Advanced Studies', 'Dorio', 'Piz Schumbraida', 'Monte Cremasco', 'Duran Pass', 'San Marco la Catola', 'Crecchio', 'Mosso, Piedmont', 'Province of Sondrio', 'Codogno', 'Cogoleto', 'Mammola', 'Mazzarrone', 'Tonezza del Cimone', 'Borgo Cerreto', 'San Sebastiano da Po', 'Settimo Vittone', 'Regia', 'Circuito di Cagliari', "Borghetto d'Arroscia", 'Valfloriana', 'Rocchetta Nervina', 'Ortacesus', 'Marsaglia', 'Scapriano', 'Monte San Vito', 'Vedeseta', 'Basilica San Paolo', 'Valgrisenche', 'Province of Caserta', 'Gioia del Colle Air Base', 'Montemignaio', 'Rieti', 'Quaderni', 'Ventimiglia di Sicilia', 'Torcegno', 'Vertemate con Minoprio', 'Fogliano Redipuglia', "Castel Sant'Elmo", 'Villanders', 'Pantelleria Airport', 'University of Siena', 'Baiso', 'Barletta', 'Massa Centro railway station', "Sant'Ambrogio sul Garigliano", 'Roccagloriosa', 'Nure', 'Madesimo', 'Isola Minore', 'Fara Novarese', 'Casteggio', "Velo d'Astico", "Rivolta d'Adda", 'Massa Lombarda', 'Eremo delle Carceri', 'Ventotene', 'Monte Chiadenis', 'Piave', 'Congress of Verona', 'Molveno', 'Bosco Marengo', 'Santa Maria di Loreto, Rome', 'Frazzanò', 'Varese railway station', 'Capistrello', 'Raiano', 'Stimigliano', 'Borgia, Calabria', 'Grosio', 'Casamarciano', 'New York University', 'Rivamonte Agordino', 'Trevignano', 'Ferrera di Varese', 'Cergnago', 'Barone Canavese', 'Revò', 'Palaverde', 'Rovagnate', 'Buseto Palizzolo', 'Trani', 'Bagnoli Irpino', 'Vernate, Lombardy', 'Cordenons', 'Monleale', 'Luni', 'Pramaggiore', 'Isolabona', 'Castelnuovo Don Bosco', 'Vejano', 'Montaldo Torinese', 'Guardea', 'Boissano', 'Seravezza', 'San Pietro Mussolino', 'Arcugnano', 'Ietas', 'San Bartolomeo Val Cavargna', "Doge's Palace, Venice", 'Valverde, Sicily', 'Manarola', 'San Giuseppe Vesuviano', 'Fonni', 'University of Teramo', 'Naxos', 'Altivole', "Castel Sant'Elia", 'University of Bologna', 'Capriano del Colle', 'Valmozzola', 'Suessula', 'Rivarone', 'Cismon del Grappa', 'Roma Trastevere railway station', 'Porano', 'Posta Fibreno', 'Castellana Grotte', 'Margherita di Savoia, Apulia', 'Frontino', 'Basilica della Santissima Annunziata del Vastato', 'Frassinoro', 'Saponara', "Borgofranco d'Ivrea", 'Leonardo da Vinci–Fiumicino Airport', 'Sassello', 'Sacro Cuore di Maria', 'Piazzale Michelangelo', 'Piacenza', 'San Piero a Sieve', 'Santa Cecilia in Trastevere', 'Perloz', 'Carbonia, Sardinia', 'Pulsano', 'Faenza', 'Isola della Scala', 'Corridonia', 'Medea, Friuli-Venezia Giulia', 'Rima San Giuseppe', 'Trofarello', 'Civita', "Pieve d'Olmi", 'Gagliano del Capo', 'Foppolo', 'Besano', 'Casto', 'Carpanzano', 'Cortenova', 'Frossasco', "Sant'Elpidio a Mare", 'Matera', 'Cesana Pariol', 'Castagnole Piemonte', 'Dicomano', 'Santo Stefano di Sessanio', 'San Nicandro Garganico', 'San Giovanni Rotondo', 'Campo Calabro', 'Caldonazzo', 'Palena, Abruzzo', 'Frascarolo', 'Tresigallo', 'Rialto, Liguria', 'Lessona', 'Colonno', 'Fiesco', 'Bastia Mondovì', 'University of Milan Bicocca', 'Valtorta', 'Castelguglielmo', 'Laureana di Borrello', 'Limbiate', 'Pontecurone', "Rio nell'Elba", 'Sestino', "Sant'Antonio dei Portoghesi", 'Delia, Sicily', 'Montalbano Jonico', 'Lauco', 'Corsico', 'Codevigo', 'University of Perugia', 'Monte Disgrazia', 'Calcinaia', 'Torano Castello', 'Bardolino', 'Langosco', 'Gabiano', 'Civitavecchia', 'Figline Vegliaturo', 'Ittiri', 'Trecate', 'Taibon Agordino', 'Cetona', 'Bressanvido', 'Caiazzo', 'Calolziocorte', 'Loranzè', 'Transport in Vatican City', 'Desio', 'Bormio', 'Valprato Soana', 'San Crisogono', 'Petrelle', 'Cevo', 'Venafrum', 'Isolabella', "Castelnovo ne' Monti", 'Airasca', 'Sauris', 'Marzabotto', 'Quattro Castella', 'Praiano', 'Prato Carnico', 'Canolo', 'Lecco', 'Mornico Losana', 'Sangineto', 'Piz Cengalo', 'Chieve', 'Asola, Lombardy', 'Arquà Polesine', 'Acri', 'Collesano', 'Stromboli', 'Cusago', 'Nonantola', 'Cremenaga', 'Paderno Dugnano', 'Torvaianica', 'Olevano Romano', 'Drizzona', 'Cortiglione', 'Iesi', 'Colle La Croce', 'Malfa', 'Cencenighe Agordino', 'Rodero', 'Pontida', 'Atri', 'Cavriago', 'Sclafani Bagni', 'Biandronno', 'Città di Castello', 'Adrara San Martino', 'Alfonsine', 'Quincinetto', 'Cassina Rizzardi', 'Zerbolò', 'Buglio in Monte', 'Terlan', 'Spessa', 'Seveso', 'San Fedele', 'Cervignano del Friuli', 'Venzone', 'Portoferraio', 'Casaletto Lodigiano', 'Montecoronaro', 'Cinaglio', 'Portacomaro', 'University of Udine', 'Tramonti di Sotto', 'Pomarolo', 'Orgiano', 'Villa San Giovanni', 'Vallinfreda', 'Pratica di Mare Air Base', "Sant'Angelo in Lizzola", 'Pointe Allobrogia', 'San Felice a Cancello', 'Castelnuovo di Ceva', 'Vajont Dam', 'Cassinasco', 'Mendel Pass', 'Lerici', 'Gragnano', 'Bella, Basilicata', 'Ramponio Verna', 'San Giorgio Monferrato', 'Gangi, Sicily', 'Voltone Airfield', 'Formia-Gaeta railway station', 'San Lorenzo Isontino', 'Ravello', 'Ragusa', "St Andrew's Church, Rome", 'Castello di Montalto', 'Carmagnola', 'Roccacasale', 'Sossano', 'Santa Cristina e Bissone', 'Volpeglino', "San Francesco d'Assisi ad Acilia", 'Zerba', 'Triei', 'Costa Masnaga', 'Paternopoli', 'Berzo San Fermo', 'Santa Maria Nuova, Marche', 'Borizzo Airfield', 'San Vincenzo La Costa', 'Boffalora sopra Ticino', 'Villar Dora', 'Sibillini Mountains', 'Pistoia', 'Tarzo', 'Agra', 'Pomezia', 'Lumarzo', 'Scordia', 'San Vittore del Lazio', 'Renate', 'Bellusco', 'Stazzema', 'Pulfero', 'Pietradefusi', 'Pratica Di Mare Airport', 'San Nazaro in Brolo', 'EUR, Rome', 'Piove di Sacco', 'Conegliano', 'Gsieser Bach', 'Mazara del Vallo', 'Sesta Godano', 'Martellago', 'Borgo San Dalmazzo', 'Aliminusa', "Cascinette d'Ivrea", 'Rondissone', "Sant'Angelo Lomellina", 'Orbetello', 'Santa Maria in Portico, Naples', 'Laigueglia', 'Pasiano di Pordenone', 'Vicchio', 'Brisighella', 'Corinaldo', 'Emarèse', 'Parabita', 'Vistrorio', 'Lurano', 'Settime', 'Craveggia', 'Castel di Tora', 'Residenza Universitaria Torrescalla', 'Castelnuovo di Farfa', 'Fontecchio', 'Rivalta di Torino', "Sant'Agata Bolognese", 'Lirio', 'John Cabot University', 'Murazzano', 'Alzano Lombardo', 'Rovescala', 'Melegnano', 'Superga', 'Roccamandolfi', 'Netro, Piedmont', 'Misilmeri', 'Padule', 'Isca sullo Ionio', 'Giustenice', 'Basiglio', 'Province of Brindisi', 'Platì', 'Mojo Alcantara', 'Italian Republic', 'Gambatesa', 'Altare', 'Carnate', 'Sacro Monte di Varallo', 'Colmurano', 'Limosano', 'Perdasdefogu', 'Vezzi Portio', 'Trevignano Romano', "Torre de' Roveri", 'Morano Calabro', 'Arola', 'Cavriana', 'Valbrevenna', 'Bruino', 'Joppolo Giancaxio', 'Scontrone', 'Ampezzo', 'Candia Lomellina', 'Nurachi', 'Sedriano', "Sant'Ivo dei Bretoni", 'Lequile', 'Gambugliano', 'Verghereto', 'Cuccaro Monferrato', 'Marghera', 'Foza', 'Lequio Berria', 'Breuil-Cervinia', 'Cappelletto', 'Pamparato', 'Vessalico', 'Locri', 'Ponna', 'Fabrica di Roma', 'Carapelle Calvisio', "Trezzo sull'Adda", 'Caltagirone', 'Marecchia', 'Forcola', 'San Felice del Benaco', 'Bellano', 'Faicchio', 'Bascapè', 'Sannicandro di Bari', 'Milan Garibaldi Station', 'San Clemente Abbey', 'San Salvatore Monferrato', 'Terrassa Padovana', 'Fontanile', 'Prarostino', "Penna Sant'Andrea", 'Colfiorito', 'San Zenone al Po', 'Campania', 'Peloritani', "Motta Sant'Anastasia", "Sant'Arpino", 'Asso', 'Cervino, Campania', 'Forni di Sotto', 'Amaro, Friuli', 'Bassano del Grappa', 'Carlino', 'Ridnauntal', 'Piedimulera', 'Novellara', 'Trezzano Rosa', 'Musso, Lombardy', 'ISTAO - Istituto Adriano Olivetti Ancona, main campus', 'Mello', 'Montiglio Monferrato', 'Trecchina', 'Guardiagrele', 'Guardiaregia', 'San Torpete', 'Barletta railway station', 'Porta Esquilina', 'Suburra', 'Follo', 'Soverato', 'Santi Cosma e Damiano, Lazio', 'Gambellara', 'Canzano', 'Bicinicco', 'Capannori', 'Villafranca Piemonte', 'Massimeno', 'Succivo', 'Gridone', 'Vadena', 'Armenzano', 'Alà dei Sardi', 'Marina di Gioiosa Ionica', 'Fabbrica Curone', 'Castagnito', 'San Michele al Tagliamento', 'Gravina di Catania', "Sant'Eusanio del Sangro", 'University of Cagliari', 'Domodossola', 'Pontelandolfo', 'Voghera', 'Bosio', 'Frondarola', 'Frigento', 'Montorfano', 'Bassiano', 'Vidracco', 'Introbio', 'Fontaniva', 'Panarea', 'Giarre', 'Azzano Decimo', 'Tronzano Lago Maggiore', 'Taviano', 'Santa Flavia', 'Pontecorvo', 'Temù', 'Gioia Sannitica', 'Casaloldo', 'Badia Polesine', 'Palmas Arborea', 'Siderno', 'Ampugnano Airport', 'Lamon', 'Fermo', 'Grotta Gigante', 'Marianum', 'Aragona', 'Malagnino', 'Agnone Cilento', 'Vidor', 'Veroli', 'Castel San Giovanni', 'Lanzada', 'Temple of Saturn', 'Marcellinara', 'Ulà Tirso', 'Rosia Airfield', 'Santa Caterina Villarmosa', 'Barbara, Marche', 'Castelletto Stura', 'Creazzo', 'Arnasco', 'Orio Litta', 'Calendasco', 'Rezzato', 'Germagnano', 'Miseno', 'Grassano', 'Aiello Calabro', 'Chions', 'Ardara, Sardinia', 'The Johns Hopkins University SAIS Bologna Center', 'Ascrea', 'Villa Basilica', 'Giuncugnano', 'San Piero Patti', 'Laghi', 'Cognola', 'Lodrino, Lombardy', 'Sexten', 'Monteleone Sabino', 'San Vincenzo, Tuscany', 'Tavoleto', 'Anguillara Sabazia', 'Bisignano', 'San Demetrio Corone', 'Decimomannu Air Base', 'Patrica', 'Anchiano', 'Villa Biscossi', 'Gallavresi Palace', 'Toscolano-Maderno', 'Trepuzzi', 'Piombino', 'Ripabottoni', 'Mirabello Monferrato', 'Villa del Bosco', 'Chiauci', 'Montaldo Scarampi', 'Castiadas', 'San Giovanni in Fiore', 'Terracina', 'Briona', 'Rotondella', 'La Morra', 'Ronciglione', 'Santa Maria degli Angeli', 'Villa Opicina', 'Rivalba', 'Monte di Procida', 'ACI Vallelunga Circuit', 'Resuttano', 'Transacqua', 'Montegiordano', "Civitella d'Agliano", 'Orzivecchi', 'Sovicille', 'Sala Comacina', 'San Sosti', 'Quart', 'Bolbeno', 'Rocca di Cave', 'Enego', 'Rogolo', 'Acquafondata', 'Castelleone di Suasa', 'Fanano', "Vigliano d'Asti", 'Marano Marchesato', 'Niederdorf', "Aquila d'Arroscia", 'Somma Vesuviana', "Montechiaro d'Acqui", 'Maracalagonis', 'Genola', 'Cura Carpignano', 'Pigra', 'San Mauro di Saline', 'Giardinello', 'Bergamo Alps', 'Montalto Pavese', 'Cuorgnè', 'Avendita', 'Gaeta', 'Brivio', 'Tornimparte', 'Calciano', 'Valle dei Templi', 'Scanzorosciate', 'Cornale', 'Cesa', 'Sesto Calende', 'Santa Cesarea Terme', 'Capodrise', "Sant'Agata li Battiati", 'Muro Leccese', 'Arsiè', 'Vedano Olona', 'Casalciprano', 'Lipomo', 'Borgo Priolo', 'Indiano Bridge', 'Gagliano Aterno', 'Province of Cremona', 'Cavedine', 'Gussola', 'Pietrasanta', 'Forlì Branch of the University of Bologna', 'Laceno', 'Oppido Lucano', 'Villarbasse', 'Chiesanuova, Piedmont', 'Cervesina', 'Candiolo', 'Galluzzo', 'Piozzo', 'Roncone', 'Susegana', 'Novello', 'Villa Repeta', "Torre de' Passeri", 'San Prisco', 'Villata', 'Inarzo', 'Castro, Apulia', 'Caccuri', 'Trenzano', 'Fontevivo', 'Alfiano Natta', 'Cerro al Lambro', 'Terruggia', 'Ardea, Lazio', 'Bonito, Campania', 'Corteno Golgi', 'Aviano Air Base', 'Biblioteca Vallicelliana', 'Praia a Mare', 'Santa Caterina Albanese', 'Rufina', 'Santa Maria Rezzonico', 'Maschito', 'Abruzzo Airport', 'Palermo', 'Casalvecchio di Puglia', 'Fiano, Piedmont', 'Sanguinetto', 'Ozzero', 'Rocca Bernardo Airfield', 'Varese', 'Ceneselli', 'Irsina', 'Temple of Portunus', 'Palermo Centrale railway station', "Paderno d'Adda", 'Aspromonte', 'Segrate', 'Amblar', 'Feroleto Antico', 'Astronomical Observatory of Capodimonte', 'Cumae', 'Savoca', 'Villa Santa Lucia', 'Accadia', "Santo Stefano d'Aveto", 'Montorio nei Frentani', 'Settimo San Pietro', 'Terzolas', 'Atrani', 'Crespano del Grappa', 'Zibido San Giacomo', "Forza d'Agrò", 'Seconda Università degli Studi di Napoli', 'Chiuppano', 'Selargius', 'Pescosolido', 'Felonica', 'Seclì', 'Petruro Irpino', 'Alì Terme', 'Villasor', 'Penango', 'Elini', 'Stezzano', 'Levico Terme', 'Stroppo', 'Brunnenburg', 'Veii', 'San Sebastiano al Palatino', 'Pizz Gallagiun', 'Vertova', 'Tornolo', 'Province of Lecce', 'Cirò, Calabria', 'Striano', 'Padria', 'Carlentini', 'Asuni', 'San Bellino', 'Lungavilla', 'Pecorara', 'Molochio', 'Chieti', 'Morterone', 'Montabone', 'Federico Fellini International Airport', 'Oplontis', 'Col Agnel', 'Grimaldi, Calabria', "Sant'Agapito", 'Alpette', 'Melle', 'Grone', "Piobesi d'Alba", 'Santa Croce di Magliano', 'Sacro Monte di Ossuccio', 'Pimentel, Sardinia', 'Nucetto', 'Cervaro', 'Gavi, Piedmont', 'Bosnasco', 'Casarano', 'Montaldo Roero', 'Sacro Monte di Ghiffa', 'Cannole', 'Pralboino', 'Presenzano', 'Cinte Tesino', 'San Cesareo', 'Marmora', 'Valduggia', 'Baronissi', 'Alì', 'Burcei', 'Bulgarograsso', 'Bedulita', 'Caposele', 'Almenno San Bartolomeo', 'Capestrano', 'San Fratello', 'Palazzo Schio', 'Sacro Cuore di Gesù a Castro Pretorio', 'Osimo', 'Casapulla', 'Pertica Bassa', 'Archi, Abruzzo', 'Sassofeltrio', 'Grand Golliat', 'Barbaresco, Piedmont', 'San Giorgio in Bosco', 'Prettau', 'Castellazzo Novarese', 'San Filippo del Mela', 'University for foreigners of Reggio Calabria, main campus', 'Aldeno', 'Pieve di Ledro', 'Tramutola', 'Pecetto Torinese', 'Vistarino', 'San Giovanni Lupatoto', 'Pastorano', 'Montelanico', 'Sessano del Molise', 'Fénis Castle', 'Casalnoceto', 'Great Synagogue of Rome', 'Furci Siculo', 'Cerisano', 'Arsoli', 'Castroreale', 'Faver', 'Contarelli chapel', 'Belpasso', 'San Vito di Leguzzano', 'San Callisto', 'Bomarzo', 'Villa Comunale', "San Damiano d'Asti", "Motta de' Conti", 'Mombaldone', 'Motta Visconti', 'San Carlo ai Catinari', 'Cologno al Serio', 'Odescalchi Castle', 'Borgo', 'Scarnafigi', 'Fontechiari', 'Badia Tedalda', 'Santa Maria a Vico', 'Masone', 'Ottana', 'Cape Palinuro', 'Cloz', 'Levice', 'Ossana', 'Siano', "Castelletto d'Orba", 'Folgaria', 'Asigliano Veneto', 'Siddi, Sardinia', 'Cappadocia, Abruzzo', 'Valganna', 'Carpaneto Piacentino', "Rocchetta Sant'Antonio", 'Lastebasse', 'Civitella Messer Raimondo', 'Lurate Caccivio', 'Bussana Vecchia, Liguria', 'Mogoro', 'Galliavola', 'Pfitsch', 'Lentella', 'Piatto', 'Borgo di Terzo', 'Pompiano', 'Ortelle', 'Pettorano sul Gizio', 'Nicastro', 'St. Lorenzen', 'Pico', 'Oniferi', 'Gagliato', "Cornate d'Adda", 'Castrocaro Terme e Terra del Sole', 'Ceresole Alba', 'Cima dello Stagn', "Sant'Angelo Romano", 'Copertino', 'Rocca Cigliè', 'Ruffrè-Mendola', 'Calenzano', 'Italian Adventist College Villa Aurora', 'Polaveno', 'Cardè', 'Avetrana', 'Prossedi', 'Lugo', 'Crespellano', 'Cervia Air Force Base', 'Ivrea', 'Lisignago', 'Cantù', "Sant'Agata di Militello", 'Angolo Terme', 'Cavallino-Treporti', 'Varese Ligure', 'Duronia', 'Coggiola', 'Maierà', 'Banzi', 'San Bernardo alle Terme', 'Rosengarten group', 'Barengo', 'Anzio', 'San Zenone al Lambro', 'Sessa Cilento', 'Collebeato', 'Dolianova', 'Albenga', 'Cottanello', 'Pieve San Nicolò', 'Varaita', 'Certosa di San Martino', 'Seregno', 'Borgo San Giacomo', 'Ferrazzano', 'Monte Polizzo', 'Orta di Atella', 'Bressana Bottarone', 'Salento', 'Castellazzo Bormida', 'Tavernelle', 'Almenno San Salvatore', 'Tellaro', 'Esine', 'Cormano', 'Castelgomberto', 'Rocca Sinibalda', 'Costigliole Saluzzo', 'Divignano', "Castiglione d'Orcia", 'Livigno Alps', 'Lajatico', 'Tinnura', 'Villanterio', 'Fossalta di Portogruaro', 'Soraga', 'Montello', 'Camagna Monferrato', 'Forlì del Sannio', 'Santa Chiara', 'Sava, Apulia', 'Sarnico', 'Palata', 'Santa Maria in Cosmedin', 'Stroppiana', 'Pontinia', 'Grumello del Monte', "Sant'Antonio di Gallura", 'Cucciago', "San Nicolò d'Arcidano", 'Frassino', 'Romanengo', 'Follina', 'Bersone', 'Cavaria con Premezzo', 'Volpago del Montello', 'Monte Ramaceto', 'Tovo San Giacomo', 'Chisone', 'Folignano', 'Capua', 'Alpe della Luna', 'San Zeno di Montagna', 'San Giorgio su Legnano', 'Bellaria – Igea Marina', 'Macerata', 'Pfitscher Bach', 'Nals', 'Blevio', 'Valledoria', 'Santo Stefano di Camastra', 'Loiri Porto San Paolo', 'Saviano', 'Nelson Mandela Forum', 'Plataci', 'Arsiero', 'Isola del Piano', 'Poggio a Caiano', 'Ripa Teatina', 'Belvì', 'Isola Bella', 'Roccasecca', 'Filandari', 'Carate Brianza', 'Luserna San Giovanni', 'Asciano', 'Falcone–Borsellino Airport', 'Arquà Petrarca', 'Province of Reggio Calabria', 'Posina', 'Castiglione del Lago', 'La Cassa', 'Santo Spirito', 'Gassino Torinese', 'Isola del Giglio', 'Pinarolo Po', 'Oval Lingotto', 'Populonia', 'Bognanco', 'Manciano', 'Campli', 'Sergnano', 'Bracca', 'San Martino sulla Marrucina', "Isola Sant'Antonio", 'Valleve', "Sant'Eufemia a Maiella", 'Versa', 'Capraia', 'Caino', 'Cavedago', 'Gonnesa', 'Villalba, Sicily', 'Colle Soglio', 'University of Rome La Sapienza', 'Casteldidone', 'Colletorto', 'European University Institute', "Costa de' Nobili", 'Supersano', 'Arco', 'San Giustino', 'Brembate', 'Prato Sesia', 'Maccastorna', 'San Mauro Castelverde', 'Malpensa Airport', 'La Valle Agordina', 'Nebrodi', 'Siurgus Donigala', 'Dazio', 'Miradolo Terme', 'Tête de Ferret', 'Pompeii Airfield', 'Villa Carcina', 'Candidoni', 'Mesenzana', 'Mezzago', 'Isola dei Pescatori', 'Vita-Salute San Raffaele University', 'Borgone Susa', 'Fonteno', 'Roccabascerana', 'Frosinone', 'Ollomont', 'Cesano Maderno', 'Bordano', 'Fiorano al Serio', 'Rocchetta di Vara', 'Comabbio', 'Cles', 'Valle Piola', 'Santa Passera', 'Bondeno', 'Vione', 'Rocchetta a Volturno', 'Sale Marasino', 'Carolei', 'Nordend', 'Arielli', 'Villanova Biellese', 'Calvera', 'Cavaglio-Spoccia', 'Albugnano DOC', 'Recale', 'Mirabello Sannitico', 'Santa Maria presso San Celso', 'Scampitella', 'Porto Azzurro', 'Fiesse', 'Acquacanina', 'Budrio', 'Nervesa della Battaglia', "Dent d'Hérens", 'Flero', 'Santa Maria in Domnica', 'Carsoli', 'Grotte di Castro', 'Costa Volpino', 'Locate di Triulzi', 'La Salle', 'Uta', 'Cambiano', 'Vinchio', 'San Pietro in Cerro', 'Roma Ostiense railway station', 'Rosignano Marittimo', 'Santa Luce', 'Fiumefreddo Bruzio', 'Trecenta', 'Marano di Valpolicella', 'Polesine Parmense', 'Genivolta', 'Calliano, Piedmont', 'Pioltello', 'Meleti', 'Lestizza', 'Turania', "Sant'Anna d'Alfaedo", 'Caresana, Piedmont', 'Pontirolo Nuovo', 'Pietrapaola', 'Castagnole delle Lanze', 'Guidonia Airport', 'Mornico al Serio', 'Terranuova Bracciolini', 'Valva, Campania', 'Pieve Tesino', 'Palazzo San Gervasio', 'Tortorici', 'Sinio', 'Montecastrilli', 'Socchieve', 'Buguggiate', 'Brindisi', 'Sommariva Perno', 'Concarena', 'Cerro al Volturno', "Sant'Andrea in Via Flaminia", 'Lodè', 'Mezzocorona', 'Stadio Olimpico Carlo Zecchini', 'Offanengo', "Provaglio d'Iseo", 'Castellar, Piedmont', 'Papozze', 'Alserio', 'Andrate', 'Chamois', 'Castellina Marittima', 'Cuveglio', 'Vallelunga Pratameno', 'Sabbia', 'Seppiana', 'San Fele', 'Alimena', 'Campiglia Cervo', 'Africo', 'Pinacoteca Comunale di Cesena', 'Pfitscherjoch', 'Pellegrino Parmense', 'Robella', 'Tergu', 'Civitella in Val di Chiana', 'Albonese', 'Capriglia Irpina', 'Cascia', 'San Giorgio della Richinvelda', 'Postalesio', 'Villasimius', 'Lozzo di Cadore', 'Milzano', 'Monterubbiano', 'Linarolo', 'Mogliano', 'Stella Cilento', 'Ravascletto', 'Cumiana', 'Apiro', 'Latina', 'Gorla Maggiore', 'Momperone', 'University of Bari', 'San Floriano del Collio', 'Civitaluparella', 'Buccinasco', 'Massanzago', 'Pomarance', 'Bianzone', 'Martina Franca', 'Polish Cemetery at Monte Cassino', 'Pau, Sardinia', 'Forchia', 'Alfianello', 'Camogli', 'Barco', 'Lucrinus Lacus', "Sant'Onofrio, Calabria", 'Monteviale', 'Gromo', 'Piombino Airfield', 'San Lorenzo in Campo', 'Bulciago', 'Canegrate', 'Aiguille de Bionnassay', 'Cosio Valtellino', 'Librizzi', 'Gioiosa Ionica', 'Tanagro', 'Cortemaggiore', 'Calvanico', 'Acquasanta Terme', 'Pieve di Bono', 'Marnate', "Trinità d'Agultu e Vignola", 'Brione', 'Volongo', 'Marcedusa', 'Castello di Lombardia', 'Brentino Belluno', 'Carenno', 'Agliè', 'Piz Murtaröl', 'Santa Maria in Campitelli', 'Gambara', 'Golferenzo', 'Castelletto Molina', 'Inverno e Monteleone', 'Poggio San Marcello', 'Lugnano', 'Germignaga', 'Formigine', 'Arcevia', 'Rossa, Piedmont', 'Alezio', 'Conscenti', 'Mistretta', 'Lecce Airfield', 'Rio Saliceto', 'Villa Celiera', 'Vignole Borbera', 'Ciciliano', 'Rubiera', 'Uzzano', 'Cleto', 'Pioraco', 'Varallo Pombia', 'Borgosatollo', 'Altavilla Milicia', 'Cibiana Pass', 'Secondigliano', 'Stadio Pio XII', 'San Paolo Solbrito', 'Bastiglia', 'Curia Hostilia', 'Pantelleria', 'Rolo, Emilia-Romagna', "Villanova d'Ardenghi", 'Biella San Paolo railway station', 'Galatina', 'Uras', 'Nocera Inferiore', 'Faieto', 'Pennadomo', "Pont d'Aël", 'Cerveno', 'Reana del Rojale', 'Cossignano', 'Rocca la Meja', 'Fratta Todina', 'Novara railway station', 'Graun im Vinschgau', 'Cirigliano', 'Morigerati', 'Urbino', 'Briaglia', "Cassina de' Pecchi", 'Martirano', 'Tuscania', 'Pinasca', 'Mestre', 'Castel di Iudica', 'Mezzanino', 'San Severo', 'Spello', 'Albera Ligure', 'Pontificio Collegio Filippino', 'Caulonia', 'Ghilarza', 'Roseto Valfortore', 'Armungia', 'Palombaro', 'Campodoro', 'Ronzo-Chienis', 'University of Trento, Rovereto Campus', 'Sistiana', 'Baldissero Torinese', 'Camoscellahorn', 'Fano Airport', 'Sona', 'Elva', 'Arenzano', "Sant'Agnello", 'Sellia, Calabria', 'Isola di Fondra', "Lurago d'Erba", 'Bettola', 'Segni', 'Castions di Strada', 'Trevi, Umbria', 'Marano di Napoli', 'Camisano', 'Loiano', 'Montese', 'Sinalunga', 'Capovalle', 'Vallada Agordina', 'Rotello', 'Bellinzago Novarese', 'Varzo', 'Miglierina', 'Bra, Piedmont', 'Calice al Cornoviglio', 'Province of Pordenone', 'Cala Gonone', 'Castelnuovo Calcea', 'Arta Terme', 'Migliarino', 'Castel Volturno Airfield', 'San Vito sullo Ionio', 'Marciana Marina', 'Santadi', 'Campagnola Cremasca', 'Lamezia Terme International Airport', 'Vittuone', 'Riolunato', 'Airuno', 'Tortona', 'Bolsena', 'Andreis', 'Castel di Lucio', 'Marche', 'Caltignaga', 'Laas', 'San Pellegrino Terme', 'Solignano', 'Brindisi railway station', 'Besenello', 'Sasso di Castalda', 'Chianciano Terme', 'Burgstall', 'Taranta Peligna', 'Stagno di Cagliari', 'Amendola Airport', 'Borore', 'Neive', 'Licata', "Saint Peter's tomb", 'Boccadifalco Airport', 'Castiglione Falletto', 'Pagliara', 'Gudo Visconti', 'Gambolò', 'Castelvetro Piacentino', 'Gianico', 'Breme', 'Carloforte', 'Piazzola sul Brenta', 'Macugnaga', 'Celenza Valfortore', 'Mondolfo', 'Spinetoli', 'Perugia', 'Casale di Scodosia', 'Belmonte Calabro', "Castel d'Azzano", 'Collesalvetti', 'Mentana', 'Synagogue of Trieste', 'Church of San Francesco', 'Santa Croce Camerina', 'Pontedera Airport', 'Rocca Susella', 'Stigliano', 'Monte San Biagio', 'Cadorago', 'Sassuolo', 'Arese', 'Comerio', 'Valledolmo', 'Travedona-Monate', 'Breda di Piave', 'Taisten', 'Helorus', 'Desana', 'Carney Park', "Sant'Ippolito", 'Santopadre', 'Brendola', 'Province of Potenza', 'Solfatara', 'Montecorvino Pugliano', 'Collevecchio', 'Grottaferrata', 'Capralba', 'Conca della Campania', 'Marcallo con Casone', 'Milis', 'Torrice', 'San Mango Piemonte', 'Cardano al Campo', 'Crandola Valsassina', 'Mantua', "Sant'Egidio alla Vibrata", 'Samugheo', 'Duno', "Sant'Agata de' Goti", 'Gerocarne', 'Zenson di Piave', 'Belmonte Mezzagno', 'Serrenti', 'Santa Marinella', 'University Carlo Cattaneo', 'Torella dei Lombardi', 'Scanno', 'Crocefieschi', 'Bisegna', 'Acquarica del Capo', 'Italy', 'Pollenza', "Boffalora d'Adda", 'Laveno-Mombello', 'University of Verona', 'Vulcano Buono', 'Lecce Airport', 'Santo Stefano di Magra', 'Cinque Torri', "Misano di Gera d'Adda", "Sant'Alessio in Aspromonte", 'Montecarlo', 'Toffia', "Aci Sant'Antonio", 'Castelpizzuto', 'Istrana', 'Campospinoso', 'Santa Maria Airfield', 'Fighille', 'Teatro Sociale di Rovigo', 'Malè', 'Quaregna', 'Vibonati', 'Monte di Malo', 'Tisens', 'Civitavecchia Ferry Terminal', 'Mercato San Severino', 'Nughedu Santa Vittoria', 'Afragola', 'Pizzo, Calabria', 'Casalbuono', 'Pero', 'Borghetto di Vara', 'Bereguardo', 'Parre', 'Montefiorino', 'Baranello', 'Vigarano Mainarda', 'Zevio', 'Palazzo del Capitaniato', 'Levone', 'Marta, Lazio', "Baldissero d'Alba", 'Mazzè', 'Lavenone', 'Triponzo', 'Pineto', 'Sarre', 'Issiglio', 'Fidenza', 'Church of the Holy Spirit', 'IUC Turin', 'Sanluri', 'Salandra', 'Banari', 'Gino Lisa Airport', 'Servigliano', 'Lanuvio', 'Centro Direzionale', 'Spriana', 'Issogne Castle', 'Casalecchio di Reno', 'San Donato', 'Verrone', 'Museo Nazionale della Magna Grecia', 'Tribano', "Cappella de' Picenardi", 'Gressoney-La-Trinité', 'Arezzo Cathedral', 'Coli, Emilia-Romagna', 'Monacilioni', 'Berzo Inferiore', 'Ventimiglia, Italy', 'Piz Bles', 'Paderno Ponchielli', 'Priocca', 'Cavatore', 'Montorio Romano', 'Calizzano', 'Gallipoli, Apulia', 'Satriano di Lucania', "Scandolara Ripa d'Oglio", 'Pontifical University Antonianum', 'Monsummano Terme', 'Livraga', 'Campiglione-Fenile', 'Perugia railway station', 'Villanova Mondovì', 'Montescheno', 'Modena', 'Citerna', 'Candiana', 'Corniglio', 'Sella Pass', 'Chiampo', 'Ferrera Erbognone', 'Rusellae', 'Province of Ascoli Piceno', 'Dimaro', 'San Leucio del Sannio', 'Montebello Vicentino', 'University of Messina', 'Tresivio', "L'Aquila", 'Moraro', 'Dorno', 'San Giorgio delle Pertiche', 'Sellero', 'Bardonecchia', 'Pietrabbondante', 'Rocca Santa Maria', 'Palazzuolo sul Senio', 'Carbonara di Nola', 'Lonigo', 'Fiumalbo', 'Ubiale Clanezzo', 'Spilimbergo', 'Valera Fratta', 'Santa Cristina Gela', 'Pompeiana', 'Pramollo', 'Cutrofiano', 'Giusvalla', 'Gampen Pass', 'Cappelle sul Tavo', 'Vobarno', 'Province of Pistoia', 'Villa Cornaro', "Magliano de' Marsi", 'Mazzara Airfield', 'Agordo', 'San Mauro la Bruca', 'Gricignano di Aversa', 'Belmonte Castello', 'Medolla', 'Cavazzo Carnico', 'Zumsteinspitze', 'Anticoli Corrado', 'Arena, Calabria', 'Fossano', 'Montemagno', 'Gimigliano', 'Anza', 'Buronzo', 'Pordenone', 'Gadoni', 'Piegaro', 'Montebello sul Sangro', 'Bernate Ticino', 'Neumarkt', 'Vivaro Romano', 'Pimonte', 'Casalvolone', "Sant'Antonio da Padova in Via Tuscolana", 'Trambileno', 'Reggello', 'Province of Catanzaro', 'Visone', 'Roccamorice', 'Monte Vidon Corrado', 'Sarmede', "Sant'Anatolia di Narco", 'Titta', 'San Lorenzo in Damaso', 'Spormaggiore', 'Farigliano', 'Bordolano', 'Campo di Giove', 'Torreglia', 'Longhena', 'Grazzanise', 'Bolzano Novarese', 'Morengo', 'Amiternum', 'Faeto', 'Siculiana', 'Osasio', 'Monte Rinaldo', 'Gavinana', 'Otranto', 'Senorbì', 'Torrazzo of Cremona', 'Piz Tea Fondada', 'Vallebona', 'Bosentino', 'Caselette', 'Trovo', 'Bagnoli del Trigno', 'Gioia dei Marsi', 'Calcinate', 'Collecchio', 'Arzergrande', 'Lomello', 'Sardinia', 'San Lorenzo in Panisperna', 'Palazzolo dello Stella', 'Castel Colonna', 'Bibiana, Piedmont', 'University of Calabria', 'Caltanissetta', 'Opera, Lombardy', 'Bosia, Piedmont', 'Serradifalco', "Morro d'Oro", 'Province of Benevento', 'Clusone', 'Frassilongo', 'Noepoli', 'Cutigliano', 'San Tammaro', 'Roncegno Terme', 'Dolcè', 'Ailoche', 'Cremosano', 'Rogeno', 'Cassiglio', 'Bosaro', 'Santa Prassede', 'Monte Altissimo', 'Ancarano', 'Collegno', "Sant'Atanasio", 'Santa Emerenziana a Tor Fiorenza', 'Civitanova del Sannio', 'Lagonegro', 'Cima del Serraglio', "San Gregorio d'Ippona", 'Piazza Dante', 'San Gregorio da Sassola', 'Rudiano', 'Usseaux', 'Fierozzo', "Lugagnano Val d'Arda", 'Gallicchio', 'Barbaresco DOCG', 'Fornovo di Taro', 'Novedrate', 'Cosoleto', 'Santa Vittoria in Matenano', 'San Vito al Tagliamento', 'North Scituate', 'Vas', 'Barumini', 'Siliqua, Sardinia', 'Cimbergo', "Terno d'Isola", 'Monteroni di Lecce', 'Frassinello Monferrato', 'Rosazza', 'Sacred Mount Calvary of Domodossola', 'Vernasca', 'Ostuni', 'Mainetto', "Sant'Andrea delle Fratte", 'ZEN', 'Torre dei Gualandi', 'Ciampino–G. B. Pastine International Airport', 'Carentino', 'Fara in Sabina', 'Bedero Valcuvia', 'Province of Ancona', 'Tonadico', 'Filettino', 'Polytechnic University of Milan', 'Mocònesi', 'Rotonda', 'Sala Baganza', 'Vanzago', 'Palazzago', 'San Sebastiano', 'Province of Lodi', 'Cargeghe', 'Albrunhorn', 'Campagna Lupia', 'Milo', 'Ghemme', 'Modena Autodrome', 'Trigolo', "San Michele all'Adige", 'Cisano Bergamasco', 'Andrano', 'Eugenio Monti track', 'Derovere', 'Tolfa', 'Carlantino', 'Gorno', 'Mulazzo', 'Ollastra', 'Veronella', 'Ponsacco', 'Ala', 'Ospedaletti', 'Province of Vercelli', 'Romagnese', 'Santa Maria la Carità', 'Crescentino', 'Casale Cremasco-Vidolasco', 'Alia', 'Concordia Sagittaria', 'Autodromo di Mores', 'Sangano', 'Quargnento', 'Radicondoli', 'Cercemaggiore', 'Monale', 'Palazzo', 'Tambre', 'Serretella Airfield', 'Avella', 'Scima da Saoseo', 'Collepardo', 'Sesto al Reghena', 'Greggio', 'Caerano di San Marco', 'Troina', 'Mongiana', 'Muggia', 'Castello del Matese', 'Trasaghis', 'Celle di Macra', 'Châtillon', "Morro d'Alba", 'Odolo', 'Valstrona', 'Fiorano Modenese', "Castle of Sant'Aniceto", 'Enna', 'Castelnuovo di Conza', 'Bitti', 'Valsinni', 'Gubbio', 'Palazzo delle Esposizioni', 'Amalfi Coast', 'Buggiano', 'Casaleone', 'Falvaterra', 'Gaggi', 'Rosate', 'Condrò', 'Stadio Tupparello', 'Valdastico', 'Barasso', 'Onore', 'Santa Susanna', 'Tiglieto', 'Ratschings', 'Casorezzo', 'PalaNorda', 'Polpenazze del Garda', 'Montegioco', 'Sanza', 'Tortolì', 'Villanova del Sillaro', 'Minturno', 'Treviso', 'Monticiano', 'Verdello', 'Collepasso', 'Collazzone', 'Venosa', 'Waidbruck', 'Boccadasse', 'Legnago', 'Castiglione del Genovesi', 'San Fedele Intelvi', 'Val Rosandra', 'European College of Parma', 'Preore', 'Penne', "Monticelli d'Ongina", 'Giuliano Teatino', 'Quassolo', 'Montemagno, Piedmont', 'Recanati', 'Castrolibero', 'Tiggiano', 'Poggio di San Remo', 'Alfano', 'Bertinoro', 'Zagarise', 'Montappone', 'San Lazzaro di Savena', 'Valmacca', 'Bronte, Sicily', 'Presicce', 'Terres', 'Villarboit', 'Strambino', 'Monchio delle Corti', 'Petriolo', 'Pienza', "San Paolo d'Argon", 'Province of Rovigo', 'San Biase', 'Turbigo', 'San Giovanni Lipioni', 'Badia Calavena', 'Fertilia Airport', 'Canneto Pavese', 'Azzate', 'Martano', 'San Michele in Borgo', 'Delianuova', 'Monsampolo del Tronto', 'Isnello', 'Seborga', 'Mandela, Lazio', 'Carosino', 'Crozzon di Brenta', 'Monti Ausoni', 'Collepino', 'Bojano', 'Riccò del Golfo di Spezia', 'Rosarno', 'Castello di Milazzo', 'Levate', 'Cremeno', 'Ostiano', "Bastida de' Dossi", 'English Cemetery, Florence', 'Aquae Cutiliae', 'Fascia, Liguria', 'Martis', 'Malosco', 'Rocca Massima', 'Pravisdomini', 'Busnago', 'Castano Primo', 'San Vero Milis', 'Vallesaccarda', 'Guasila', 'Barbania', 'Albano di Lucania', 'Dolo', 'Ofenhorn', 'Colico', 'PalaMangano', 'Poggio Catino', 'Strembo', 'Pergine Valsugana', 'Mals', 'Carbonara Scrivia', 'Ronago', 'Rocchetta e Croce', 'Olbia', 'Laurentum', 'Canoscio', 'Cunardo', 'Belvedere Ostrense', 'Gessate', 'Bedollo', 'Castelmagno', 'Quarna Sotto', 'Gallinaro', 'Loazzolo', 'Filogaso', 'Nogara', 'Monte Terminillo', 'San Lorenzo Bellizzi', 'Stilo', 'Casalmoro', 'Mount Ortigara', 'Castiglione Messer Raimondo', 'Francavilla Marittima', 'Macherio', 'Basilica of Maxentius', 'Magenta', 'Anghiari', 'Ferentillo', 'Province of Viterbo', 'Montorso Vicentino', 'Bivona', 'Ripe San Ginesio', 'Rovato', 'Canossa Castle', "Sannazzaro de' Burgondi", 'San Gregorio Magno', 'Monasterace', 'San Pietro in Vinculis', 'Nurallao', 'Saint-Denis', 'Corteolona', 'Canterano', 'Prali', 'Le Roncole', 'Frisanco', 'Pollone', 'University of Rome Tor Vergata', 'Mirandola', 'Marsciano', 'Maiolo', 'Pavia', 'Bacoli', 'Ruoti', 'Venasca', 'Cavaglietto', 'Predappio', 'Borriana', 'Motor Science University of Rome', 'Front, Piedmont', 'Ardeatine massacre', 'Biella', 'Mara, Sardinia', 'Talla', 'Bagnoli di Sopra', 'Pezzana', 'Faggeto Lario', 'Aradeo', 'Goro', 'Ascoli Satriano', 'Viddalba', 'Ornago', 'Champorcher', 'Lago, Calabria', 'Vita', 'Cormons', 'Cassacco', 'Bresimo', 'Foreigners University of Siena', 'Varco Sabino', 'Casnate con Bernate', 'Crespiatica', 'Givoletto', 'Oviglio', 'Lampedusa e Linosa', 'Olgiate Molgora', 'Paratico', 'Leonessa', 'Borgo Velino', 'Anagni', 'Serradarce', 'Adelfia', 'Briosco', 'Amato', 'Misano Adriatico', 'Castellaneta', 'San Simplicio, Olbia', 'Pointe de Drône', 'Nereto', 'Grottazzolina', 'Salaparuta', 'Antegnate', 'Re', 'Terme Vigliatore', 'Labico', 'Roccalumera', 'Mombercelli', 'Casaletto Spartano', 'Province of Barletta-Andria-Trani', 'Almè', 'Teverola', 'Monteveglio', 'Olevano sul Tusciano', 'Samone, Trentino', 'Rivignano', 'Valnegra', "Castell'Umberto", 'Salsomaggiore Terme', 'Cartigliano', 'Monte Zoncolan', 'Calopezzati', 'Invorio', 'Casaluce', "Arzago d'Adda", 'Rolle Pass', 'San Mauro Marchesato', 'Livorno Centrale railway station', 'Bacchiglione', 'Uri, Sardinia', 'Tarcento', 'Novafeltria', 'Roè Volciano', 'Caccamo', 'Ascoli Piceno', 'Sarteano', 'Garzeno', 'Province of Catania', 'Montenero di Bisaccia', 'Magliano di Tenna', 'Garda, Veneto', 'Tufino', 'Ugento', 'Isola Sacra', 'Valmontone', 'Sale delle Langhe', 'Bizzarone', 'Villa Collemandina', 'Oratory of San Giacomo della Marina', 'Transpadane Republic', 'Borutta', 'Cervinara', 'Irminio', 'Maruggio', 'Montegalda', 'Campana', 'Castel Morrone', 'Lapedona', 'Montegallo', 'Genzone', 'San Giacomo delle Segnate', 'Boscotrecase', 'Fortunago', "Albaredo d'Adige", 'Bricherasio', 'Campello Alto', 'Bova Marina', 'Marostica', 'Cairano', 'Sorano', 'Montereale, Abruzzo', 'Montedinove', 'Viverone', 'Spotorno', 'Cocconato', 'Moglia', 'Carunchio', 'Busalla', "Cervignano d'Adda", 'Lesmo', 'Agnana Calabra', 'Serino', 'Treviso Airport', 'Opi, Abruzzo', 'Monticello Conte Otto', 'Rifreddo', 'Piosina', 'Cingoli', "Moio de' Calvi", 'Limone sul Garda', 'Serole', 'Monte San Giusto', 'Envie', 'Santa Severina', 'Calliano, Trentino', 'Cortona', 'Incudine', 'Morgongiori', 'Sissa', 'Vigolo Vattaro', 'Rebibbia', 'National Etruscan Museum', 'Tortorella Airfield', 'Cicerale', 'Coredo', 'Villanova Canavese', 'Cittiglio', 'Santo Stefano di Cadore', 'Rivello', 'Santa Maria del Priorato', 'Feltre', 'Carpineto Romano', 'Correzzola', 'Comazzo', 'Gaverina Terme', 'Torriglia', 'Gropello Cairoli', 'Pizzoni', 'Raviscanina', 'Torpè', "Villanova sull'Arda", 'San Remo', 'Ticengo', 'Palazzolo Acreide', 'Nerviano', 'Cernobbio', 'Fluminimaggiore', 'Busano', 'Stadio Amsicora', 'Ceraso', 'Moretta', 'Irgoli', 'Gornate-Olona', 'Quinto Vercellese', 'Chiusi della Verna', 'Lograto', 'Vasanello', 'Bassano Romano', 'Fosdinovo', 'Serrone', 'San Marzano di San Giuseppe', 'Vervò', 'Premariacco', 'Caselle Lurani', 'Magliano Vetere', 'Ponte di Legno', 'Pirelli Tower', 'Karneid', 'Morfasso', 'Brenta, Lombardy', 'Valenza', 'Fontana Liri', 'Lake Como', 'Pesco Sannita', 'Cornizzolo', 'Grondona, Piedmont', 'Andali', "Sant'Agata Feltria", 'Gorga', 'Cisano sul Neva', 'Rivara', 'Motteggiana', 'Tolve', 'Racale', 'Poggiardo', 'Marotta', 'Cercenasco', "Corigliano d'Otranto", 'Nocera Umbra', 'Montefioralle', 'Province of Foggia', 'Gerenzano', 'Borgo a Mozzano', 'Mondragone', 'Doberdò del Lago', 'Tufo', 'San Carlo Canavese', 'Basilica di Santa Giulia', 'Carlazzo', 'Caronno Varesino', 'Gazoldo degli Ippoliti', 'Montenars', 'Mantello', 'Bellino', 'Bevilacqua', 'Bione', 'Roncola', 'Inzago', 'Sarca', 'Longobardi, Calabria', 'Cecchina', 'Chiavenna', 'Novaledo', 'Cerrina Monferrato', 'Malvito', 'Gandosso', 'Collinas', 'Fumone', 'Castles of South Tyrol', 'Bergamo railway station', 'Vacone', 'Verzino', 'Cimini Hills', 'Casalromano', 'Crevoladossola', 'Porto Cervo', 'Marcon', 'LUISS University of Rome', 'Piobesi Torinese', 'Ceres, Piedmont', 'Mergozzo', 'Cancellara', 'Molise, Campobasso', 'Labro', 'Oggiono', 'Corsano', 'Voltido', 'Godiasco', 'Northern Italy', 'University of Reggio Calabria', 'Prizzi', 'Piedmont', 'Christ of the Abyss', 'Castellinaldo', 'Vatican Observatory', 'Trichiana', 'Albagiara', 'Ragalna', 'Offida', 'Lona-Lases', 'Colle Santa Lucia', 'Dogliola', 'Ocre', 'Seui', "Sant'Ilario d'Enza", 'Monte Tremalzo', 'Massiola', "Torre de' Busi", 'Cavour, Piedmont', 'Alberona', 'Saliceto', 'Castellucchio', 'Castana, Lombardy', 'Occimiano', 'Monastero di Lanzo', 'Cavernago', 'Scansano', "Rocca d'Arazzo", "Macchia d'Isernia", 'Galliate', 'San Nicola dei Lorenesi', 'Himera', 'Santa Prisca', 'Pattada', 'Berra', 'Province of Crotone', 'Rotondi', 'Lodine', 'Falconara Albanese', 'Santa Domenica Talao', 'Rocca San Felice', 'Strambinello', 'Telve di Sopra', 'Dello, Lombardy', 'Province of Carbonia-Iglesias', 'Don, Trentino', 'Panchià', 'La Spezia Centrale railway station', 'Pornassio', 'Rivolto Airport', 'Zuclo', 'Acquapendente', 'Avigliana', 'Venegono Inferiore', 'San Marcellino', 'Hingham Naval Ammunition Depot Annex', 'Castelmassa', 'Montesarchio', 'Piandimeleto', 'Frattaminore', 'Ferrere', "Montefiore dell'Aso", 'Villaurbana', 'Latina Nuclear Power Plant', "Sant'Angelo d'Alife", 'Tremestieri Etneo', 'San Giorgio di Pesaro', 'Meolo', 'Malaspina Castle', 'Mottafollone', 'Sciolze', 'Govone', 'Verolanuova', 'Cella Monte', 'Benevello', 'Manfredonia', 'Pianezze', 'Duino', 'Besenzone', 'Valeggio sul Mincio', 'Drezzo', 'Ameglia', 'Sternatia', 'Vicenza railway station', 'Bagnacavallo', 'Marano Principato', 'Belvedere di Spinello', 'Welsberg-Taisten', 'Ortler Alps', 'Arvier', 'Genzano di Lucania', 'San Venanzo', 'Soglio, Piedmont', 'Casal Cermelli', 'Beinasco', 'Casapesenna', 'Cavallermaggiore', 'Battuda', 'Configni', 'Sorgà', 'Carinaro', 'Barolo DOCG', 'Aniene', 'Baratili San Pietro', 'San Lorenzo in Banale', 'Pianopoli', 'Castello Ursino', 'Argegno', 'Cerveteri', 'Valsecca', 'Oria', 'Sirolo', 'Brissago-Valtravaglia', 'Sardigliano', 'Brembio', 'Sapri', 'Pettineo', 'Pollux', 'Fara San Martino', 'Capitignano', 'Controne', 'Giaglione', 'Villa Santa Maria', 'Parenti, Calabria', 'Robilante', 'Taranto', 'Porta Leoni', 'Corchia', 'Monte Grimano', 'Busana', 'Voghiera', 'Nonio', 'Rondanina', 'Stadio Città del Tricolore', 'Scurzolengo', 'Kurtatsch an der Weinstraße', 'Introzzo', 'Scala Regia', 'Valle San Nicolao', 'Molinella', 'Bomba, Abruzzo', 'Brancacci Chapel', 'Civitella di Romagna', 'Calvizzano', 'Arcade', 'Tenno, Trentino', 'Contrada, Campania', 'Bannio Anzino', 'Camucia', 'Maleo', 'Rionero in Vulture', 'San Bonifacio', 'Toano', 'Frasso Telesino', 'Presanella', 'Andora', 'Corato', 'Rognano', 'Logna', 'Vairano Patenora', 'Nesso', 'Cannero Riviera', 'Torretta', 'Salisano', 'Isolino di San Giovanni', 'Arzene', 'Presezzo', 'Vizzini', 'Province of Perugia', 'English Cemetery, Naples', 'Bellona, Campania', 'Trevi nel Lazio', 'Monterotondo Marittimo', 'Salzano', 'Camerota', 'Cerva', 'Montepaone', 'San Giorgio Piacentino', 'Belvedere Langhe', 'M. A. Grottag Airport', 'Como', 'Vico Canavese', 'Mercato Saraceno', 'Alice Superiore', 'Mordano', 'Monfumo', 'Tomb of the Julii', 'Negrar', 'Portico di Caserta', 'Torre di Santa Maria', 'Castello di Brianza', 'Adro', 'Agna', 'Cavallirio', 'Ardenno', 'Biccari', 'Santa Lucia di Serino', 'San Costantino Calabro', 'Cornovecchio', 'Oratorio dei Filippini', 'Arpaise', 'Villanova Truschedu', 'Croviana', 'Pavia di Udine', 'Majano', "Barbera d'Alba DOC", "S'Archittu", 'Concesio', 'Vermiglio', "Chignolo d'Isola", 'Casei Gerola', 'Capriate San Gervasio', 'Borca di Cadore', 'Ailano', 'Varsi', 'San Salvatore di Fitalia', 'Montaldo Bormida', 'Capraia e Limite', 'Cernusco Lombardone', 'Roana', 'Urbania', 'Orino, Lombardy', 'Polia', 'Falcade', 'Modigliana', 'Girifalco', 'Santa Venerina', 'Pocenia', 'Verolengo', 'Nave, Lombardy', 'Trezzo Tinella', 'San Chirico Nuovo', 'Concorezzo', 'Ziano di Fiemme', 'Arena Po', 'Filignano', 'Susa', 'Amorosi', 'Akrillai', 'Celle di Bulgheria', 'Lago Cecita', 'Salerno', 'Vazzola', 'Capoterra', 'Porte', "Cavenago d'Adda", 'Castelcivita', 'United World College of the Adriatic', 'Santi Giovanni e Paolo, Rome', 'Canossa', 'Syracuse', 'Fanna', 'Monte Giberto', 'Piz Fora', 'Avigliano Umbro', 'Accademia Nazionale di Santa Cecilia', 'Ramacca', 'San Pietro in Gu', 'Torre San Patrizio', "Sant'Antonio Abate", 'San Gregorio Matese', 'Avigliano, Basilicata', 'Anagnina', 'West Hingham', "Sant'Atanasio a Via Tiburtina", 'Marcaria', 'Sandigliano', 'Nomi, Trentino', 'Sezzadio', 'Chitignano', 'Massignano', 'Tagliacozzo', 'Embassy of the United States to the Holy See', 'Lesina, Apulia', 'Ponte Milvio', 'Castelnuovo della Daunia', 'Basiano', "Sant'Angelo Lodigiano", 'Sansepolcro', 'Antelao', 'Confienza', 'Sarnano', 'Villanovafranca', 'Sacro Monte di Belmonte', 'Giuliana, Sicily', 'Province of Olbia-Tempio', 'Sgonico', 'Erbusco', 'University of Vicenza', 'Sorso', 'Casa Sollievo della Sofferenza', 'Pedace', 'Aieta', 'Arcola', 'Alcamo', 'Sicily–Rome American Cemetery and Memorial', 'Squillace', 'Superga Rack Railway', 'San Costantino Albanese', 'Fombio', 'Fagnano Olona', "Vaprio d'Adda", 'San Damiano Macra', 'Montirone', 'Senna Lodigiana', 'Viticuso', 'Seniga', 'Pizzo di Madéi', 'Portico e San Benedetto', 'Goriano Sicoli', 'Colledimacine', 'Treville', 'San Mango sul Calore', 'Passaggio', 'Mirano', 'Torricella Sicura', 'Militello in Val di Catania', 'Taceno', 'Talamona', 'Scafa', 'Arcene', 'Gradoli', 'Fonzaso', 'Azzone', 'Besnate', 'Pertusio', 'Mezzana Bigli', 'Vallecorsa', 'San Giorgio a Cremano', 'Foggia ""Gino Lisa"" Airport', 'Massa Lubrense', "Godega di Sant'Urbano", 'Galliate Lombardo', 'Fragneto Monforte', 'Osasco', 'Matajur', 'Acqui Terme', 'Angelica vestis', 'Rovigo', 'Castelleone', 'Latina Airport', 'Montecalvo Irpino', 'Rocca di Neto', 'San Vito Romano', 'Campolieto', 'Monza railway station', 'Pinacoteca Tosio Martinengo', 'Goito', 'Angera', 'Bolognano', 'Zoppola', 'Glurns', 'Premia', 'Castel Maggiore', 'Dolo River', 'Bagnolo Piemonte', 'Piz della Forcola', 'Ostia Antica', 'Gemonio', 'Casalino', 'Pitigliano', 'Mezzani', 'Carovilli', 'Piazza Saffi', 'Calimera', 'Vicoforte', 'Province of Teramo', 'Bitonto', 'Melissano', 'Santa Margherita di Belice', 'Pfelderer Tal', 'Fiastra', 'Ostra, Marche', 'Monte Oliveto Maggiore', 'Maserà di Padova', 'Sicily', 'Sciara, Sicily', 'Ciminà', 'Nuvolento', 'San Martino di Lupari', 'Olginate', 'Berzano di San Pietro', 'Fiera Milano', 'Alsium', 'Naso', 'Carzano', 'Gaudo Airfield', 'Cannalonga', 'Marano sul Panaro', 'Calvene', "Sant'Agata di Esaro", 'Montefino', "Villanova d'Asti", 'Brandico', 'Borgomanero', 'Ponte nelle Alpi', 'Bistagno', 'Volta Mantovana', 'Castelluccio Valmaggiore', 'Galgagnano', 'Cerreto Laziale', 'San Secondo di Pinerolo', 'Rimini', 'Mereto di Tomba', 'Gorla Minore', 'Castiglioncello', 'Boville Ernica', 'Santa Fiora', 'Laurentina', 'Castelnuovo Belbo', 'Sacro Monte di Orta', 'Cansano', 'Apice', 'Civitanova Marche', 'Feroleto della Chiesa', 'Sesto Campano', 'Rezzoaglio', 'Province of Prato', 'Aosta Cathedral', 'Castel di Sangro', 'Cadelbosco di Sopra', 'Mango, Piedmont', 'Sorbo San Basile', 'Latisana', 'Castelnuovo di Garfagnana', 'Fornovo San Giovanni', 'Ceriano Laghetto', 'Atella, Basilicata', 'Friuli-Venezia Giulia', 'Guastalla', 'Pistrino', 'Cinto Caomaggiore', 'Soprana', 'Codigoro', 'Sorianello', 'Ispani', 'Fresonara', 'Montottone', 'Carisio', 'Lucca railway station', "Sant'Angelo Limosano", 'Piancastagnaio', 'Suvereto', 'Mandatoriccio', 'Volterra', 'Chiusaforte', 'Meduna di Livenza', 'Spigno Monferrato', 'Verzuolo', 'Patù', 'Umbriatico', 'San Carlo alle Quattro Fontane', 'San Martino in Pensilis', 'San Cataldo, Sicily', 'Comiso Airport', 'Valtellina', 'Scirca', 'Coassolo Torinese', 'Mascalucia', 'Pabillonis', 'Castor', "Sant'Eusanio Forconese", 'Limina', 'Gardena Ronda Express funicular', 'San Marco', 'Cassano Irpino', 'Anguillara Veneta', 'Valle Lomellina', 'Castello di Petroia', 'San Cono', 'Magliano Romano', 'Trebisacce', 'San Biagio Platani', 'Ragogna', 'Serrapetrona', 'Isola Dovarese', 'Birori', 'Castellana Caves', "Monte Sant'Angelo", "Cerreto d'Esi", 'Roncadelle', 'Montalbano Elicona', 'Treppo Carnico', 'Montanaro', 'San Benedetto del Tronto', 'Settimo Milanese', 'Vestone', "Pietra de' Giorgi", 'Assisi Cathedral', 'San Genesio ed Uniti', 'Amantea', 'Capizzone', 'Turriaco', 'Lerma', 'Camini', 'Traona', 'Ponte Caffaro', 'Carpineto della Nora', 'Castelnuovo di Val di Cecina', 'Su Nuraxi di Barumini', 'Monreale', 'Santa Severa', 'Scafati', 'Siena railway station', 'Parma', 'Pergola', 'Moro River', 'Montegiorgio', 'Volterrano', 'Loreggia', 'Cervicati', 'Banchette', 'Torrioni', 'Prezzo', 'Bolognola', 'Caorso Nuclear Power Plant', 'San Martino di Finita', 'Santa Domenica Vittoria', 'Cologno Monzese', 'Colobraro', 'Supino', 'San Valentino Torio', 'Buttapietra', 'Pastena', 'Grottaglie', 'Giarratana', 'Gaiba', 'Terenzo', 'Domodossola railway station', "Rocca de' Baldi", 'Bolano', 'Sala Bolognese', 'Cartosio', 'San Secondo', 'Brusson', 'Pierle', 'Vallemaio', 'Ornavasso', 'Lucignano', 'Lignano Sabbiadoro', 'Opi', 'Medicina Radio Observatory', 'Vahrn', 'Poffabro', 'San Nicola Arcella', 'Tumulus of Montefortini', 'Odalengo Grande', 'Allein', 'Usigni', 'Sondalo', 'Crodo', 'Cafasse', 'Savogna', 'Mollia', 'Crete Senesi', "Rocca de' Giorgi", 'Reitano', 'Madignano', 'Tiers', 'Onanì', 'Solarino', 'Viagrande', 'Roccafiorita', 'Cornino', "San Giovanni d'Asso", 'Eupilio', 'Ceregnano', 'Rabbi', 'Ternate, Lombardy', 'Angrogna', 'Sorbolo', 'Fabrizia', 'Aldein', 'Piz da las Trais Linguas', 'Province of Verbano-Cusio-Ossola', 'Scanzano Jonico', 'Sassano', 'Cavallerleone', 'Due Carrare', 'Barni', 'Nociglia', 'Brebbia', 'Soldano', 'Barbariga', 'Costanzana', 'Santa Maria in Trastevere', 'Adria International Raceway', 'Giave', 'Torino di Sangro', 'Castellammare di Stabia', 'Palazzetto dello Sport', 'Colosimi', 'Teramo', 'San Mauro Pascoli', 'Pastrengo', 'Treiso', 'Orria', 'Panni', 'Corleto Monforte', 'Hofmahdjoch', 'Ghisalba', 'Campolongo Tapogliano', "University of L'Aquila", 'Casargo', 'Monte Conero', 'Moasca', 'Volvera', 'Sizzano', 'Treppo Grande', 'Mede, Lombardy', 'Stadio del Trampolino', 'Carlopoli', 'Montaquila', 'Zero Branco', "Rignano sull'Arno", 'Val di Noto', 'Spinete', 'United Nations System Staff College', 'Villastanza', 'Germagno', 'Villastrada', 'Borgo San Martino', 'Great St Bernard Pass', 'Gallese', 'Montemarano', 'Poggibonsi', 'Raccuja', 'Torrebelvicino', 'Lungro', 'Alessandria railway station', 'Santa Maria in Aquiro', 'Salcedo', 'Latsch', 'Valfabbrica', 'Castelbellino', 'Ussana', 'Pietrapertosa', 'Province of Novara', 'Villanova Marchesana', 'Colledimezzo', 'Pieve Santo Stefano', 'Roccasparvera', 'Manzano, Friuli', 'Ischia', 'Grumo Appula', 'San Sperate', 'Piramide', 'San Damiano al Colle', 'Chiusa di Pesio', 'San Giorgio Ionico', 'Calvatone', 'Monterosi', 'Cercola', 'Pieve di Coriano', 'Monsampietro Morico', 'Roccabruna', "Rocca Sant'Angelo", 'Alassio', 'Reifenstein Castle', 'Accademia Italiana', 'Piglio', 'Camporotondo Etneo', 'San Giovanni Bianco', 'Santi Quattro Coronati', 'Canaro, Rovigo', 'Venafro', 'Paestum Airfield', 'Amatrice', 'Castel San Vincenzo', 'Domus Sanctae Marthae', 'Villagrande Strisaili', 'Laterza', 'Aglientu', 'Porcari', 'Fontanafredda', 'Carezzano', 'Laurino', 'Baton River', "Santa Margherita d'Adige", 'Piozzano', 'Villavallelonga', 'Piz Timun', 'Erbezzo', 'Province of Modena', 'Oliena', 'Melpignano', 'Davagna', 'Piz Sesvenna', 'Feletto', 'Rovito', 'Santa Maria della Concezione dei Cappuccini', "Pieve d'Alpago", 'Semproniano', 'Cuneo', 'Venice Marco Polo Airport', 'Certosa di Pavia', 'Moncalieri', 'Sanremo', 'Melfi', 'Soriso', 'Lucca Cathedral', 'Liscia', 'University of Salerno', 'Mergo', 'Marano Equo', 'Southern Italy', 'Cercepiccola', 'Bompensiere', 'Suor Orsola Benincasa University of Naples', 'Fuscaldo', "Silvano d'Orba", 'Miggiano', 'Numana', 'Castellaro', 'Pieve di Cadore', 'Berchidda', 'Ateleta', 'Giurdignano', 'Cazzago Brabbia', 'Corigliano Calabro', 'Adrara San Rocco', 'Bisuschio', 'Pistoia railway station', 'ISPI', 'Campodenno', 'Falcone', 'Lagnasco', 'Blessagno', 'San Pietro Infine', 'Piz Scerscen', 'Clavesana', 'Arpaia', 'Vilminore di Scalve', 'Muros, Sardinia', 'Esperia', 'Fiorano Canavese', 'Montaldeo', 'Saludecio', 'Valbrembo', 'Acate', 'Atena Lucana', 'Santa Maria in Traspontina', 'Cerchio', 'Tavagnasco', 'Santa Maria in Via', 'Montesano sulla Marcellana', 'Calice Ligure', 'Bosco Chiesanuova', 'Bonnanaro', 'Petilia Policastro', 'Tassarolo', 'Dalmine', 'Gonnosfanadiga', 'Nicolosi', 'Castelsardo Cathedral', 'Montecchio Maggiore', 'Canalicchio', 'Ischia di Castro', 'Bellizzi', 'Senna Comasco', 'Province of Varese', 'Punta La Marmora', 'Tresana', 'University of Insubria, Varese Campus', 'Sustinente', 'Stio', 'San Vito di Cadore', 'Clauzetto', 'Licodia Eubea', 'Zeri', 'Biferno', 'Boltiere', 'Caprino Bergamasco', 'Montefano', 'Recco', 'Battaglia Terme', 'Sassinoro', 'Pescopennataro', "Sant'Arcangelo", 'Orio Canavese', 'Venezia Mestre railway station', 'Offagna', 'Cogorno', 'Ponte', "Sant'Agata sul Santerno", 'Villa Agnedo', 'Ottobiano', "Puos d'Alpago", 'Castel di Lama', 'Buccino', 'Niella Belbo', 'Montoro Superiore', 'Quintano', 'Colosseum', 'Solofra', 'Vattaro', 'Scerni', 'Assago', 'Triggiano', 'Frabosa Sottana', 'Corte Brugnatella', 'Meduno', 'Visciano', 'Taverna, Calabria', "Baldichieri d'Asti", 'Colere', 'San Martino del Lago', 'Tiriolo', 'Potenza Centrale railway station', 'Campagnola Emilia', 'Valvisciolo Abbey', 'Terdobbiate', 'Podenzano', 'Volturara Irpina', 'Fénis', 'Magliano in Toscana', 'Bubbiano', 'Pignola', 'Nago–Torbole', 'Valle di Cadore', 'Montelupo Albese', 'Villeneuve', 'Cisliano', 'Province of Naples', 'Girasole', 'Gremiasco', 'Fontanigorda', 'Dairago', 'San Giacomo', 'Grignasco', 'Perego', 'Buti', 'Great Synagogue of Florence', 'Auditore', "Ponte dell'Olio", 'Radicofani', 'Filacciano', 'Casalserugo', 'Kaltern an der Weinstraße', 'Spinone al Lago', 'Pinerolo', 'Moruzzo', 'Tollo', 'La Loggia', 'Pieve Emanuele', "Crotta d'Adda", 'Lusigliè', 'Villadossola', 'Calascio', 'Squinzano', 'Maida, Calabria', 'Bagnolo San Vito', 'Armeno', 'Ponte Galeria Airfield', 'Valguarnera Caropepe', 'Castel Condino', 'Concei', 'Varzi', 'Genazzano', 'Vercurago', 'Montemitro', 'Monte San Giovanni in Sabina', 'Elice', 'Colleferro', 'Murisengo', 'Sperone', 'Bari Cathedral', 'Vallarsa', 'Pecco', 'Perosa Canavese', 'University of Urbino', 'Monte Santa Maria Tiberina', 'Tocco da Casauria', 'Civitella Roveto', 'Piz Costainas', 'Magasa', 'Perdifumo', 'Lappano', 'Amelia, Umbria', 'Tirrenia', 'Gerenzago', 'Orta San Giulio', 'Bene Vagienna', 'Casal di Principe', 'Camporgiano', 'Peschiera Borromeo', 'Tricarico', 'Paterno Calabro', 'Settimo Torinese', 'Botrugno', 'Albuzzano', 'Ruscio', 'Sumirago', 'Mezzanego', 'Province of Siena', 'Cusano Mutri', 'Rosignano Monferrato', 'Capodacqua', "Quarto d'Altino", 'Castello di Cisterna', 'Grandate', 'Venetico', 'Bondone', 'Alberobello', 'Altofonte', 'Crotone', 'Monfalcone railway station', 'Primavalle', 'Lavis', 'Borgio Verezzi', 'Iglesias', 'Nanto', 'Lazzate', 'Simeri Crichi', 'Ficarazzi', 'Olang', 'University of Eastern Piedmont', 'Pontey', 'Sporminore', 'Monte San Giacomo', 'Pozzolengo', 'Chiusavecchia', 'Ancona Falconara Airport', 'Fano', 'Selci', 'Massa Fermana', 'Cima Verosso', 'Province of Brescia', 'Bracigliano', 'Modolo', 'San Felice da Cantalice a Centocelle', 'Ranica', 'Collobiano', "Sant'Andrea di Conza", 'Bajardo', 'Palace of Portici', 'Fraine', 'Scala Coeli', 'Costano', 'Toblach', 'Santo Stefano del Sole', 'Maccagno', 'Neviano', 'Cossombrato', 'Calamandrana', 'Canischio', 'Scoppito', 'Cuceglio', 'Anversa degli Abruzzi', 'Vico nel Lazio', 'Lotzorai', 'Volpiano', 'Albissola Marina', 'Monte Cridola', 'Cavalese', 'Sovizzo', 'Malnate', 'Bianchi, Calabria', 'Pian Camuno', 'Poggio Mirteto', 'Deiva Marina', 'Florence American Cemetery and Memorial', 'Lamezia Terme', "Robecco d'Oglio", 'Muro Lucano', 'Poggio Rusco', 'Landiona', 'Province of Vibo Valentia', 'Lucedio Abbey', 'Golfo Aranci', 'Castellania, Piedmont', 'Olivola', 'Montagnareale', 'Nicotera', 'Lake Iseo', 'Treia', 'San Lorenzo al Mare', 'Salassa', 'Cavezzo', 'Lauria', 'Nabrežina', 'Piario', 'Itri', 'Noto', 'Mondovì', 'Condino', 'Chiusa di San Michele', "Sant'Angelo del Pesco", 'Roatto', 'Campolattaro', 'Teti', 'Casanova Lonati', 'Crosio della Valle', 'Momo, Piedmont', 'Ortona', 'Barbona', 'Campitello di Fassa', 'Bovegno', 'Moscufo', 'Gran Caffé Doney', 'San Pietro, Perugia', 'Sarconi', 'Costabissara', 'Corna Imagna', 'Albion', 'Sella group', 'Prascorsano', 'Segesta', 'Masera', 'Vajont', 'Ronchi dei Legionari', 'Sabaudia', 'Cigole', 'Castelraimondo', 'Malgrate', 'Belgirate', 'Penna San Giovanni', 'San Cristoforo', 'Villaverla', 'Castelmezzano', 'Ispica', 'Capurso', 'Gorgonzola, Milan', 'Lariano', 'Caselle Landi', 'Faloppio', 'Mira', 'Noceto', 'Comiziano', 'Dolcedo', 'Galatro', 'Villa di Serio', 'Ronchis', 'Cunevo', 'Voltaggio', 'Orsara Bormida', 'Saronno', "Corte de' Frati", 'Roverchiara', 'Gosaldo', 'Sedegliano', 'Luogosano', 'Fossato di Vico', 'Albaredo per San Marco', 'Lavinio', 'Moncestino', 'Isili', 'Pertica Alta', 'Buonvicino', 'Malvagna', 'Ne', 'Calatafimi-Segesta', 'Maglione', 'Custonaci', 'Gioiosa Marea', 'Taurasi', 'Caderzone', 'Campobello di Mazara', 'Valmadrera', 'Santa Maria Imbaro', 'Coghinas', 'Museo Civico di Zoologia', 'Castrocielo', "Sant'Antioco di Bisarcio", 'Gross Schinhorn', 'Mirto', 'Castelfranco in Miscano', 'Cenischia', 'Daverio', 'Montalcino', 'Avellino', "Barano d'Ischia", "Giano dell'Umbria", "Sant'Eustachio", 'Scheggino', 'Villa Bartolomea', 'Polesella', 'Dizzasco', 'Institute for the Works of Religion', 'Pozzaglia Sabina', 'Santa Maria la Fossa', 'Dumenza', 'Villanova del Battista', 'Chiaravalle Centrale', 'Arsita', 'Erve', 'Crucoli', "Monteleone d'Orvieto", 'San Sostene', 'Rocchetta', 'Bresso', 'German submarine U-124', 'Ortona dei Marsi', 'Vellezzo Bellini', 'Capoliveri', 'Agrigento Airfield', "Santa Maria dell'Anima", 'Brugine', 'Cogliate', 'Zerbo', 'Appignano', 'Rossano Veneto', 'Cursolo-Orasso', 'Arcisate', 'Semiana', 'Ormelle', 'Anzano di Puglia', 'Capri Leone', 'Laterina', 'Scaletta Zanclea', 'La Val', 'Codroipo', "Monteforte d'Alpone", 'Albiolo', 'Castelmauro', 'Viggianello', 'Castello di Lunghezza', 'Pontoglio', 'Albano Vercellese', 'Subbiano', 'Candida, Campania', 'Ferno', 'Cesarò', 'Enza', 'Badesi', 'Ruvo di Puglia', 'San Martino in Strada', 'Menfi', 'Massarosa', 'Vestignè', 'Pietrelcina', 'Piazza delle Erbe', 'Grazzanise Airport', 'Rocciamelone', 'Brenta group', 'Pescorocchiano', 'Capolona', 'Ose', 'San Lucido', 'Palazzo Porto', 'La Spezia', 'Prignano sulla Secchia', "Vito d'Asio", 'Lardirago', 'Latium', 'Villar Pellice', 'Tolentino', 'Serre', 'San Fior', 'Agnadello', 'Fiordimonte', 'Asti', "Palazzolo sull'Oglio", 'Monte San Pietrangeli', 'Missaglia', 'Spiazzo', 'Orciano di Pesaro', 'Merate', 'Montano Lucino', 'Adige', 'Province of Pavia', 'Preseglie', 'Sersale', 'Campo San Martino', 'Stintino', 'Casavatore', 'Seggiano', 'Sarzana', 'Armento', 'Sorrento', 'Baiano, Campania', 'Montegrino Valtravaglia', 'Tesero', 'Caudium', 'Villa San Silvestro', 'Serravalle a Po', 'Usellus', 'Etroubles', 'Gavello', 'Castel San Pietro Terme', 'Gavoi', 'American University of Rome', "Quinzano d'Oglio", "Sant'Ivo alla Sapienza", 'Forno Canavese', 'Roccanova', 'Ospitale di Cadore', 'Pollentia', 'Stadio Ciro Vigorito', 'Pignone', 'Monte Subasio', 'Trontano', 'San Casciano in Val di Pesa', 'Scigliano', 'Poggio Primocaso', 'Sordio', 'Paulilatino', 'Gonnosnò', 'Montalto di Castro Nuclear Power Station', 'Monteroduni', 'Oricola', "Mosciano Sant'Angelo", 'Bogogno', 'Ruino', 'Gatteo', 'Barrafranca', 'Gavignano', 'Calceranica al Lago', 'Ortezzano', 'Sirignano', 'Medole', 'Cecima', 'Piz Saliente', 'Column of Marcus Aurelius', 'Pisoniano', 'Theodulhorn', 'Neviglie', 'Cancello e Arnone', 'Casalgrasso', 'Aprica', 'Montecreto', 'East Weymouth', 'Baressa', 'Marciana', 'Prags', 'San Chirico Raparo', 'Manduria Airfield', 'Allaro', 'Vulci', 'Bagni di Lucca', 'Pratella', 'Gallodoro', 'Olgiate Olona', 'Appignano del Tronto', 'Mont Glacier', "Sant'Angelo dei Lombardi", 'Olevano di Lomellina', 'Montalto Di Castro Airfield', 'San Giovanni Teatino', 'Panicarola', 'Pietraporzio', 'Auletta', 'Roisan', 'Guardistallo', 'Coriano', 'Frascati', 'Parma Airport', 'Usini', 'Villa Ripa', 'Carcoforo', 'Chiari, Lombardy', 'Province of Imperia', 'Campi Bisenzio', 'Rosciano', 'Oliveto Lucano', 'Sini, Sardinia', 'Villnöß', 'Bellinzago Lombardo', 'Cartignano', 'Monticelli Pavese', 'Montale', 'Rocca Canavese', "Castel dell'Ovo", 'Bossico', 'Cenadi', 'Ripalta Arpina', 'Villa Poma', 'Campofelice di Fitalia', 'Mazzin', 'Bonvicino', 'Fortore', 'Ozegna', 'Quadrelle', 'Bernezzo', 'Pontelongo', 'Petralia Sottana', 'Luogosanto', 'Cellino San Marco', 'Pregnana Milanese', 'Pojana Maggiore', 'Teatro Sisto - Ostia Lido', 'Graglia', 'Montan', 'Castel Mella', 'Gattatico', 'Colle Umberto', 'Torrebruna', 'Grontardo', 'University of Trento, Trento Campus', 'Cagnano Varano', 'Este', 'Moniga', 'Terranova Sappo Minulio', 'Noli', 'Falerone', 'Zinasco', 'Mareo', 'Marzano', 'Meana Sardo', 'Molvena', "Cisterna d'Asti", 'Besozzo', 'Palagonia', 'Villa Cortese', 'Monteiasi', 'Biblioteca Casanatense', 'Santa Maria Antiqua', 'Heraclea Minoa', 'Futani', 'Stadio Vincenzo Presti', 'Visconti Castle', 'Spezzano Albanese', 'Trento railway station', 'Tordibetto', 'Montepulciano', 'Caselle Torinese', 'Pontechianale', 'Cima di Rosso', 'Minori', 'Maropati', 'Prarolo', 'Terravecchia', 'Colonna, Lazio', 'Budoni', 'Piane di Collevecchio', 'Perarolo di Cadore', 'Mercallo', 'Caianello', 'Paupisi', 'Spilamberto', 'Paese', 'Marcianise Airfield', 'Tufara', 'Aidone', 'Portula', 'Caprese Michelangelo', 'Jolanda di Savoia', 'Giavera del Montello', 'Sottomarina', 'Solarolo', 'Gallio, Veneto', 'Ozzano Monferrato', 'Arlena di Castro', 'Castel Boglione', 'Battipaglia', 'Rivodutri', 'Agliano Terme', 'Pons Aemilius', 'Escalaplano', 'Roio del Sangro', 'Santa Maria della Spina', 'Calvenzano', 'Vittoria, Sicily', 'Davoli', 'Pietragalla', 'Poggio Moiano', 'Province of Savona', 'Aidomaggiore', 'Sellano', 'Stienta', 'Scorrano', 'Tirol', 'Spezzano Piccolo', 'Schiara', 'Uggiano la Chiesa', 'Barlassina', 'Noragugume', 'Scalea', 'Montefranco', 'Aymavilles', "Ponte Sant'Angelo", 'Castel di Sasso', 'Agazzano', 'Taggia', 'Calco', 'Gerola Alta', 'Foreigners University of Perugia', 'Fasano', "Sant'Angelo a Fasanella", 'Semestene', 'Montebuono', 'Tornareccio', 'Castel Gandolfo', 'Cerreto di Spoleto', 'Sassoferrato', 'Todi', 'San Sisto Vecchio', 'Casanova Lerrone', 'Polonghera', 'Ternengo', 'Camerata Cornello', 'Fuipiano Valle Imagna', 'Brenner', 'Andretta', 'Santa Teresa di Riva', 'Roure', 'Dueville', 'Cellere', 'Perlo', 'Laconi', 'Fagnano Alto', 'Collemancio', 'Duino-Aurisina', 'Teatro del Silenzio', 'Brescia railway station', 'Suisio', 'Colleretto Giacosa', 'Ariano Irpino', 'Furci', 'Marciano della Chiana', 'Reano', 'Polla', 'Soddì', 'Lazio', 'Monchiero', 'Scillato', 'Cintano', 'Castelletto di Branduzzo', 'Romandola-Madonna del Ponte', 'Curti, Campania', 'San Martino Canavese', 'Arquata Scrivia', 'Gaglianico', 'Marano Vicentino', 'Villanuova sul Clisi', 'Carrodano', 'Motta Camastra', "Sant'Alessandro in Zebedia", 'Onelli', 'Ledro', 'Agosta, Lazio', 'Oggiona con Santo Stefano', 'Province of Macerata', 'Chiesa in Valmalenco', 'Azzano Mella', "Sant'Andrea al Quirinale", 'Cimone', 'San Luca', 'Nimis', "Sant'Apollinare", 'Vodo di Cadore', 'Zollino', 'Dogliani', 'Mortara, Lombardy', 'Stava', 'Torre Cajetani', 'Ranzanico', 'Orvieto', 'Nibbiano', 'Gavirate', 'EUROBUIS European Business and Innovation School', 'Padergnone', 'San Secondo Parmense', 'Palmanova', 'Latera', 'Chiusanico', 'Tizzano Val Parma', 'Albiano', 'Ospedaletto Euganeo', 'Pacentro', 'Decimomannu', 'Albosaggia', 'Ceppo Morelli', 'Pellio Intelvi', 'Ronchi Valsugana', 'Roccella Valdemone', 'Marano Lagunare', 'Caiolo', 'San Polo Matese', 'Camo', 'Martell', 'Galzignano Terme', 'Maenza', 'Montecalvo Versiggia', 'Collelongo', 'Songavazzo', 'Palagianello', 'Romagnano Sesia', 'Alzano Scrivia', 'Termini', 'Grantorto', 'Province of Belluno', 'Lama Mocogno', 'Masainas', 'Briatico', "Sant'Antimo", 'Trentino', 'Gironico', 'Cologne, Lombardy', 'Lubriano', 'Spezzano della Sila', 'Campodimele', 'Medolago', 'Villamaina', 'Tavazzano con Villavesco', 'Mafalda, Molise', 'Neviano degli Arduini', 'Cotignola', 'Torreano', 'Novi Ligure', "Costigliole d'Asti", 'Sozzago', 'Albi, Calabria', 'Niccoline Chapel', 'Santi Nereo e Achilleo', 'Bolzano Vicentino', 'Campomarino', 'Beverino', 'Tropea', 'Pianoro', 'Pignataro Maggiore Airfield', 'Gran Ega', 'Vottignasco', 'San Nicolò di Comelico', 'University of Parma', 'Corni di Canzo', 'Bleggio Superiore', 'Drena', 'Tempio Pausania', 'Volturino', 'Jerzu', 'Pescara', 'Stroncone', 'Catignano', 'Sillano', 'Schlanders', 'Autodromo Riccardo Paletti', 'Amaroni', 'None, Piedmont', 'Careri', 'Gricigliano', 'Santa Maria Maggiore, Piedmont', 'Quinto Vicentino', 'Capo di Ponte', 'Carbonara di Po', 'Pago Veiano', "Ozzano dell'Emilia", 'Casorate Sempione', 'Sinagra, Sicily', 'Tezze sul Brenta', 'Bocchigliero', 'Capaccio', 'Occhieppo Superiore', 'Gran Paradiso', 'Vernante', 'Mottola', 'Capodimonte, Lazio', 'Vestenanova', 'Fiesso Umbertiano', 'Pizzighettone', 'Sirtori', 'Tione degli Abruzzi', 'University of Venice', 'Cusano Milanino', 'Marzano di Nola', "San Marco d'Alunzio", 'Pianengo', 'Carfizzi', 'Vauda Canavese', 'Piedimonte San Germano', 'Vinci', 'Santa Maria Hoè', 'Piagiolino Airfield', 'Nantasket Junction', 'Lugnacco', 'Cisa Pass', 'Terlago', 'Terranova di Pollino', 'Zelo Buon Persico', 'Breguzzo', 'Verderio Inferiore', 'Milan Cadorna Railway Station', 'Niella Tanaro', 'Atessa', 'Scheggia e Pascelupo', 'Ospedalicchio', 'Roccaraso', 'Corno di Rosazzo', 'Gallarate railway station', 'Bucciano', 'Morimondo', 'Oulx', 'Ficarolo', 'Coreno Ausonio', 'Virle Piemonte', 'Cavallino', 'Monopoli', 'Montecosaro', 'Prignano Cilento', 'Ferrara di Monte Baldo', 'Compiano', 'Novoli', 'Bomporto', 'Gratteri', 'Ururi', 'Buttrio', 'Lentiai', 'Tivoli', 'Veneto', "Pomigliano d'Arco", 'Riano, Lazio', 'Casaletto Vaprio', 'Mascali', 'Onano', 'Cantiano', 'Campiglia Marittima', 'Benetutti', 'Roccadaspide', 'Firenzuola', 'Scorzè', 'Monzambano', 'Meldola', 'Atzara', 'Castel Ritaldi', 'Castelvetro di Modena', 'Vazzano', 'Siapiccia', 'Berzano di Tortona', 'Campoformido', 'Bussero', 'Padenghe sul Garda', 'Concordia sulla Secchia', 'Oppeano', 'Torchiarolo', 'Valsavarenche', 'Prata di Principato Ultra', 'Moscazzano', 'Berzo Demo', 'Ponzano Monferrato', 'Acquaviva Picena', 'Cornelia', 'Perito', 'Chiuduno', 'Podenzana', 'Mercenasco', 'Vignolo', 'Torricella Verzate', 'Valdidentro', 'Roccaforte Mondovì', 'Sambuco', 'Rocca di Papa', 'Rive, Piedmont', 'Vergato', 'Piateda', 'Bucchianico', 'Zovencedo', 'St. John International University', 'Monno', 'Castiglion Fibocchi', 'Lake Garda', 'Caravaggio, Lombardy', 'Bozzole', 'Mercatino Conca', 'Mont Blanc de Courmayeur', 'Macerata Campania', 'Vomano', 'Roveredo di Guà', 'Foiano della Chiana', 'Forlì', 'Tuoro sul Trasimeno', 'Nurri', 'Campomaggiore', 'Centro Svizzero Milano', 'Pinzano al Tagliamento', 'Buriasco', 'Piazzolo', 'Farnese, Lazio', 'Sommariva del Bosco', 'Montauro', 'Villa Faraldi', 'Castelfondo', 'Centro (It)', 'Cossoine', 'Alleghe', 'Barisciano', 'Ponte Buggianese', 'Tirano', 'Tenna, Trentino', 'Crosia', 'Cortanze', 'Alfedena', 'Ceri', 'Borgomale', 'Loculi', 'Ceglie Messapica', 'Marchirolo', 'Tusciano', 'Cicciano', 'Calasetta', 'Aurunci Mountains', 'Spoleto', "Sant'Arcangelo Trimonte", 'Berlingo', 'Caldogno', 'Feisoglio', 'Sale San Giovanni', 'Cuvio', 'Linate Airport disaster', 'Traves, Piedmont', 'Sagliano Micca', 'Bobbio Abbey', 'Santa Maria di Castello', 'Casalmaggiore', 'Capriana', 'Pont de Pierre', "Fiorenzuola d'Arda", 'Reinbach', 'Foggia', 'Valpelline, Aosta Valley', 'Lozio', 'Galleria Alberto Sordi', 'San Donato di Lecce', 'Fonte Avellana', 'Camandona', 'Malvicino', 'Tiana, Sardinia', 'Losine', 'Trasacco', 'Capriati a Volturno', 'Sacrofano', 'Castel di Ieri', 'Trento', 'Villa Guardia', 'Breganze', 'Induno Olona', 'Angeli, Finland', 'Narbolia', "Castrignano de' Greci", 'Zaccanopoli', "Colle di Val d'Elsa", 'Castiglione Torinese', "Cortina d'Ampezzo", 'Monticelli', 'Erchie', 'Leverano', 'Bavaria', 'Acerenza', 'Bolognetta', 'Villa Lagarina', 'Montemiletto', 'Nuoro', 'Ricigliano', 'Castelnovo di Sotto', 'Marsala', 'Serra San Bruno', 'Meda', "Tovo di Sant'Agata", 'Luino', 'Domicella', 'CityLife', 'Pallagorio', 'Vobbia', 'Province of Rieti', 'Calitri', 'Santa Margherita di Staffora', 'Palmoli', 'San Giovanni a Piro', 'Avise', 'Altissimo, Veneto', 'Dormelletto', 'Palosco', 'Ombrone Airfield', 'Casamaggiore', 'Pescocostanzo', 'Adria', "Castel d'Aiano", 'Lake Idro', 'Stupinigi', 'Patti', 'Fossato Serralta', 'San Pancrazio Salentino', 'Peltuinum', 'San Giovanni Incarico', 'Azeglio', 'Casalvecchio Siculo', 'Province of Cosenza', 'Pescia', 'Sesto Fiorentino', 'Rocca di Botte', 'Rostra', 'Ponte Salario', 'Molise', "Sant'Agata del Bianco", 'Mezzana Rabattone', 'Trentola-Ducenta', 'Santo Stefano Quisquina', 'Nostra Signora del Santissimo Sacramento e Santi Martiri Canadesi', 'Imer', 'San Floro', 'Cambiago', 'Cressa', 'Casalincontrada', 'Campagna', 'Santa Giustina', 'Murello', 'Piz Combul', 'Entracque', 'Santa Caterina dello Ionio', 'Monzuno', 'Passerano Marmorito', 'Salerano sul Lambro', 'Locatello', 'Alvito, Lazio', 'Roseto degli Abruzzi', 'Roman Forum', 'Oriolo Romano', 'Marentino', 'San Bartolomeo al Mare', 'Fano Adriano', 'Cureggio', 'Motta Montecorvino', 'Verceia', 'Premosello-Chiovenda', 'Altopascio', 'Serracapriola', 'Salcito', 'Seis am Schlern', 'Church of the Gesù', 'Montodine', 'Firenze Campo di Marte railway station', 'Camparada', 'Druogno', 'Eraclea', 'Reino', 'Fountain of the Rosello', 'Maretto', 'Solonghello', 'Bolotana', 'Montegrosso Pian Latte', 'Villa Popolo', 'Foglianise', 'Schignano', 'Cesi, Terni', 'San Pietro in Amantea', 'Leggiuno', 'Vallo di Nera', 'Monteverde, Campania', 'Boscoreale', 'Falerna', "Sant'Orsola Terme", 'Castel Baronia', 'Delebio', 'Pietraferrazzana', 'Camaiore', 'San Martino ai Monti', 'Tordandrea', 'Zignago', 'Arch of Claudius', 'South Tyrol', 'Morazzone', 'Merse River', 'Lomazzo', 'Marano Ticino', 'Province of Piacenza', 'Teatro Verdi', 'Falmenta', "Castagno d'Andrea", 'San Possidonio', 'Faleria', 'Pasturana', 'Montegrotto Terme', 'Paolisi', 'Castiglione delle Stiviere', 'Andalo', 'Fiuminata', 'Gonars', 'Barbianello', 'Aisone', 'Province of Milan', 'Temple of Vesta', 'Magnano in Riviera', 'San Rufo', 'Cortazzone', 'Pognana Lario', "Santa Croce sull'Arno", 'Treviso Bresciano', 'Venegono Superiore', 'Cene', "Cingia de' Botti", 'Sugana Valley', 'Corchiano', 'Lizzanello', 'Lupara, Molise', 'Romeno', 'Sacro Monte di Oropa', "Santa Cristina d'Aspromonte", 'Rapino', 'Cesano Boscone', 'Castello di Godego', 'Trivento', 'Pieve Torina', 'Sindia', "Trajan's Column", 'Carbognano', 'Curtarolo', 'Roaschia', 'Verucchio', 'Lasino', 'Levanto, Liguria', 'Frascaro', 'Ludus Magnus', 'Vasto', 'Forlì Airport', 'Santo Stefano Rotondo', 'Sala Consilina', 'Sturno', 'Cagliari', 'Bigarello', "Castell'Azzara", 'Free University of Bozen-Bolzano', 'Ramiseto', 'Oppido Mamertina', 'Claut', 'Teatro Olimpico', 'Traversetolo', 'Castelverde', 'Radda in Chianti', 'Nogarole Vicentino', 'Chiavari', 'Donnici', 'Grottole', 'Vialfrè', 'Montaguto', 'Osilo', 'Cerchiara di Calabria', 'Nogarole Rocca', 'Pietracatella', 'Melito di Porto Salvo', 'Paglieta', 'Teatro Diego Fabbri in Forlì', 'San Salvo', 'Cadoneghe', 'Gerbini Airfield', 'Natz-Schabs', 'Cessole', 'Castelvenere', "Sant'Angelo a Cupolo", 'Monte Civetta', "Sant'Alessio Siculo", 'Bonifati', 'Liguria', 'Province of Medio Campidano', 'Santa Elisabetta', 'San Giacomo Apostolo, Forlì', "Mazzarrà Sant'Andrea", 'Poviglio', 'Marche Polytechnic University', 'Luzzi', 'Nuragus', 'Vado Ligure', 'Piana Crixia', "L'Aquila Preturo Airport", 'Trecasali', "Monforte d'Alba", 'Presolana', 'Lanusei', 'Montefusco', 'Bellosguardo', 'San Didero', 'Moncenisio, Piedmont', 'Robecchetto con Induno', 'Joppolo', 'Vercelli railway station', 'Sori', 'Giussano', 'Salento, Campania', 'Muscoline', 'Pizzone', 'Verzegnis', 'Montefalcone di Val Fortore', 'Dossobuono', 'Santo Stefano in Aspromonte', 'Santa Paolina', 'Bibbiena', 'Centuripe', 'Cilento and Vallo di Diano National Park', 'San Clemente, Emilia-Romagna', 'Taburnus', 'Cerro Tanaro', 'Montebruno', 'Bosa Cathedral', 'Calvagese della Riviera', 'Mulazzano', 'Carugate', 'Cetara, Campania', 'Spera', "Sant'Angelo Muxaro", 'Tirol Castle', 'Taurano', 'Caponago', 'Aversa', 'Rose', 'Baunei', 'Cima di Cugn', 'Antrona Schieranco', "Sant'Ambrogio di Valpolicella", 'Tertenia', 'Osio Sopra', 'Madonie Regional Natural Park', 'Ponzone', 'Melizzano', 'Cissone', 'Acquaro', 'Civitella Casanova', 'Montelapiano', 'Inverso Pinasca', 'Pergine Valdarno', 'Mestrino', 'Colzate', 'Martignano', 'Cercola Airfield', 'Valmala, Italy', 'Castellino Tanaro', 'Maletto', 'Maranzana', 'Monte Leone', 'Savigliano', 'Suello', 'San Zeno', 'Spinazzola', 'Bleggio Inferiore', 'Santena', "Cerreto d'Asti", 'Vigonovo', 'Serramezzana', 'Lorenzana', 'Andezeno', 'Veniano', 'Pescopagano', 'Cagnano Amiterno', 'Ittireddu', "Serra de' Conti", 'Lauriano', 'Cenate Sotto', 'Nichelino', 'Varedo', 'Imbersago', 'Furnari', 'Crova', 'Raddusa', 'Scandale', 'Cinzano, Piedmont', 'Porto', 'Ziano Piacentino', 'Resana', 'Viadanica', 'Neoneli', 'Berbenno di Valtellina', 'Basilica of San Clemente', 'Castiglione di Sicilia', 'Giovo', 'Torre della Ghirlandina', 'Lanciano', 'Vigo Rendena', 'Monteriggioni', 'Letino', 'Passirano', 'Fraccano', 'Camposano', 'Calto', 'Andrian', 'San Tomaso Agordino', 'Pedesina', 'Belmonte in Sabina', 'Tarquinia Airfield', 'Cessaniti', 'Torremaggiore', 'Sperlinga', 'Perdaxius', 'Basilica of Santa Maria degli Angeli', 'Borgoforte', 'Carceri', 'Gressoney-Saint-Jean', 'Ponte Lambro', 'Trieste Centrale railway station', 'San Francesco a Ripa', 'Remedello', 'Polverigi', 'Piana', 'Ocosce', "Porto Sant'Elpidio", 'Palù', 'Serle', 'Piancogno', 'Surbo', 'San Michele in Foro', 'Castellabate', 'Ronco Canavese', 'Potenza Picena', 'Villamassargia', 'Talana', 'Castel Bolognese', 'Lardaro', 'Orta Nova', 'Ponderano', 'San Giacomo Vercellese', 'Circello', 'Panettieri', 'Cervo, Liguria', 'Bompietro', 'Sabbio Chiese', 'Pellezzano', 'Ponticelli', "Sant'Eusebio", 'Villette, Piedmont', 'Macello', 'Altidona', 'Torri di Quartesolo', 'Morrovalle', 'Carpiano', 'Solesino', 'Cugnoli', "Castello dell'Acqua", 'Frasassi Caves', 'Treglio', 'Montecatini Val di Cecina', 'Bastia Umbra', 'Savoia di Lucania', 'Rivalta Bormida', 'Campobello di Licata', 'University Iuav of Venice', 'Province of Alessandria', 'Scario', 'Buggerru', 'Lusciano', 'Alessano', 'Province of Ogliastra', 'Abbazia di San Salvatore', 'Valentano', 'Nova Siri', 'Marone', 'Pino sulla Sponda del Lago Maggiore', 'Codrongianos', 'Decollatura', 'Narcao', 'Villa Castelli', 'Baschi', 'Acceglio', 'Cesana Brianza', 'Milan', 'Lyskamm', 'Genuri', 'Cerea', 'Fiano Romano', 'Italian Met Office Airport', 'Budoia', 'Belluno', 'Sambuca di Sicilia', 'Santa Maria di Canepanova', 'Mezzegra', 'Volano', 'Telti', 'Torchiara', 'Lampedusa Airport', 'Termoli', 'Grana, Piedmont', 'Ospitaletto', "San Pietro in Ciel d'Oro", 'Cortino', 'Piverone', 'Pieve Albignola', 'Zavattarello', 'Roccafluvione', 'San Donaci', 'Montagano', 'Toirano', 'Rovereto railway station', 'Gravellona Toce', 'Rhêmes-Notre-Dame', 'Pietra Ligure', 'Cadeo', 'Pieve di Cento', 'Fratta Polesine', 'Bolgare', 'San Gemini', 'Colorno', 'Premana', 'Bisacquino', 'Agostino Gemelli University Polyclinic', 'Capracotta', 'Nus', 'Monza', 'University of Turin', 'San Salvatore in Lauro', 'Acquafredda', 'Casacanditella', 'Gesico', "Barberino Val d'Elsa", 'Bivio Canoscio', 'Val Rezzo', 'Pignataro Interamna', 'Corbola', 'Morciano di Leuca', 'Guardabosone', 'Cima del Rosso', 'Aurigo', 'Lentate sul Seveso', 'Furtei', 'Maissana', 'Cefalù', 'Civiasco', 'Fiavè', 'Dusino San Michele', 'Palazzo Pignano', 'Rome Observatory', 'San Vittore Olona', 'Catania–Fontanarossa Airport', 'Vigolo', 'University of Lecce', 'Limana', 'Roccaspinalveti', 'Misano World Circuit Marco Simoncelli', 'Soncino', 'Moriondo Torinese', 'Vicari', 'Moltrasio', 'Cima della Bondasca', 'San Martino in Rio', 'Algua', 'Casatenovo', 'Tuscany', 'Elmas', 'Linate Airport', 'Mottalciata', 'Tarsia', "Villanova d'Albenga", 'Voltago Agordino', 'Gignod', "Sant'Angelo in Vado", 'Carrè', 'Carbonera, Veneto', 'Montevago', 'Palermiti', 'Imperia', 'Carpineto Sinello', 'Trivolzio', 'Nole', 'Caramanico Terme', 'Russi', 'San Siro, Como', 'Ponte Sisto', 'Polino', 'Cessalto', 'Buja', 'Molina di Ledro', 'San Cesario sul Panaro', 'Nuraminis', 'San Romano in Garfagnana', 'Porcia, Friuli-Venezia Giulia', 'Raffadali', 'Cave', 'Marmolada', 'San Martino Sannita', 'Montefalcone Appennino', 'Cordignano', 'Council of Rimini', 'Comiso', 'Piazzatorre', 'Castelluccio Inferiore', 'Castelcivita Caves', 'Cervia', 'Bagnolo Mella', 'Mioglia', 'Cremella', 'San Donato Val di Comino', 'Viano', 'Malgesso', 'Imola', 'San Giorgio Albanese', 'Porto Tolle', 'Serrata, Italy', 'Monte Grappa', 'Scopello', 'Fondo', 'Castel Vittorio', 'Magnacavallo', 'Pettino', 'Barzio', 'Berbenno', 'Anela', 'Mombello Monferrato', 'Isernia', 'Pescantina', 'Millesimo', 'Tarvisio', 'Manerba del Garda', 'Mongiardino Ligure', 'Cadegliano-Viconago', 'Ortueri', 'Conca dei Marini', 'Guarene', 'Lonato del Garda', 'Pelago', 'Lu, Piedmont', 'Castagneto Po', 'Casapinta', 'Garigliano Nuclear Power Plant', 'Massa Fiscaglia', 'Ballabio', 'Cassano Magnago', 'Province of Matera', 'Verbicaro', 'Forlimpopoli', 'Sagama', 'Coreglia Ligure', 'Ortignano Raggiolo', 'Province of Bergamo', 'Sanctuary of Vicoforte', 'Apennine Mountains', 'Mezzana, Trentino', 'Cossano Belbo', 'Peio', "Brignano Gera d'Adda", 'Catania', 'Rassina', 'Campagnano di Roma', 'Vimercate', 'Paisco Loveno', 'Carignano', 'Guanzate', 'Arpino', 'Leffe', 'Maniago', 'Ciserano', 'Province of Ferrara', 'Albinea', 'Gifflenga', 'Colle di Tora', 'Riardo', 'Pisogne', 'Grottolella', 'Ariano nel Polesine', 'Monteodorisio', "Rive d'Arcano", 'Villa Santa Lucia degli Abruzzi', 'Albignasego', 'Mugello Circuit', 'Pont-Canavese', 'Ossona', 'Bastardo', 'Enrico Fermi Nuclear Power Plant', 'Welschnofen', 'Villa del Conte', 'Ceggia', 'Calvignasco', 'Brindisi Airport', 'Nemi', 'Premolo', 'Bovolenta', 'Pietra di Bismantova', 'Roveredo in Piano', 'Trieste Astronomical Observatory', 'Masserano', 'Rocca Grimalda', 'Colle delle Finestre', 'Selva di Progno', 'San Raffaele Cimena', 'Terni', 'Tonara', 'Tropea Castle', 'Santa Cristina Gherdëina', 'Scandiano', 'Valdina', 'San Biagio', 'Pieve del Cairo', 'Gombito', 'Pasian di Prato', 'Villamar', 'Partinico', 'Dubino', 'Plodio', 'San Severino Lucano', 'San Vito dei Normanni Air Station', 'Grammichele', 'Noventa di Piave', 'Zagarolo', 'Civitella del Lago', 'San Leo', 'Pertosa Caves', 'Sorisole', 'Camerano Casasco', 'Province of Campobasso', 'Berceto', 'Monti della Tolfa', 'Frinco', 'Ferrara', 'Sora', 'Montù Beccaria', 'Parlasco', 'Taglio di Po', 'Campogalliano', 'Verano Brianza', 'Magione', 'San Potito Ultra', 'San Maiano', 'Margno', 'Torre Mondovì', 'Pianiga', 'San Pancrazio Airfield', 'Sellia Marina', 'Figline Valdarno', 'Naples Eastern University', 'Cattolica', 'Priverno', 'Cisterna', 'Ponte San Pietro', 'Casteltermini', 'Province of Rimini', 'Ambivere', 'Villa Latina', 'Castellafiume', 'Villaspeciosa', 'Fallo', 'Cavenago di Brianza', 'Casasola, Italy', 'Aulla', 'Santa Maria in Monserrato degli Spagnoli', 'Castel San Pietro Romano', 'Basaluzzo', 'Irma, Lombardy', 'Cornegliano Laudense', "Torre d'Isola", 'Roccaromana', 'Cavasso Nuovo', 'Morbegno', 'Peschiera del Garda', 'Napoli Campi Flegrei railway station', 'Sovere', 'Castellanza', "Cerano d'Intelvi", 'Santa Marina, Campania', 'Airola', 'Bastida Pancarana', 'Montemezzo', 'Pianfei', 'Verona Villafranca Airport', 'Calabria', 'Ala di Stura', 'Calalzo di Cadore', 'Piteglio', 'Civate', 'Ossago Lodigiano', 'Castelvecchio Bridge', 'Travagliato', 'Veleso', 'Melara', 'Parrotspitze', 'Sagron Mis', 'Kastelruth', 'Valdagno', 'Ferruzzano', 'Marina di Campo Airport', 'Castelverrino', 'Celle Ligure', 'Cesiomaggiore', 'Orsago', 'Tortoli Airport', 'San Dorligo della Valle', 'Albizzate', 'Castel Castagna', 'Summonte', 'Ficulle', 'San Francesco al Campo', 'Provvidenti', 'Monteforte Cilento', 'Villastellone', "Basilica of Sant'Agostino", 'Collepepe', 'Verretto', 'Scalenghe', 'Zambana', 'Roncade', 'Ottaviano', 'Allai, Sardinia', 'Carrù', 'Cessapalombo', 'Acilia', 'Fiera di Primiero', 'Rizziconi', 'Cropalati', 'Camporeale', 'San Nazzaro Sesia', 'Santa Maria di Sala', 'Chiesa di San Giuliano dei Fiamminghi', 'Agrate Conturbia', "Crast' Agüzza", 'Bormida, Liguria', 'Rocchetta Tanaro', 'Livo, Lombardy', 'Montezemolo', 'Cortemilia', 'Santa Maria del Molise', 'Torriana', 'Stresa', 'Denno', 'San Matteo', 'Randazzo', 'Annone Veneto', 'Gorzegno', 'Bregnano', 'Bellagio', 'Santa Maria dei Miracoli and Santa Maria in Montesanto', 'Monterubiaglio', 'Merì', 'Sterparone Airfield', 'Ponzano Romano', "Sant'Angelo di Piove di Sacco", 'Cerro Veronese', 'San Quirino', 'Pumenengo', 'Bagaladi', 'Calvisano', 'Agliano', 'Balocco', 'Acuto', 'Roccaforte del Greco', 'Tadasuni', 'Caglio', 'Finale Ligure', "Cazzano Sant'Andrea", 'Larino', 'Verrua Po', 'Colle Giacone', 'Olcenengo', 'Montazzoli', 'Episcopia', 'Roncà', 'Riffian, South Tyrol', 'Vietri di Potenza', 'Vinovo', 'Grassobbio', "Castelnuovo Bocca d'Adda", 'Pavullo nel Frignano', 'Gabbioneta-Binanuova', 'Serramonacesca', 'Petronà', 'University of Bergamo', 'Santorso'}
            Answers = 9899, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.544s]
          Answers = 9899, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.545s]
        Checking schema 48 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 144
            Final Answer: {'Italian War of 1494–1498', 'Battle of Calliano', '1996 David di Donatello Awards', 'Battle of the Trebia', '1987 David di Donatello Awards', 'Piedmontese Civil War', '1985 David di Donatello Awards', 'Battle of Aquilonia', '1965 David di Donatello Awards', 'Via Giotto in Foggia building collapse', 'Social War', 'Battle of Trebbia', '2005 David di Donatello Awards', '1972 David di Donatello Awards', '1958 David di Donatello Awards', 'First Anglo-Dutch War', 'Battle of the Cremera', 'Franco-Spanish War (1635–1659)', '13th G7 summit', 'Monte la Difensa', '2012 David di Donatello Awards', 'War of the League of Cognac', 'Battle of Lake Vadimo', 'Battle of Zappolino', '1993 David di Donatello Awards', 'War of the First Coalition', '2003 David di Donatello Awards', '1970 David di Donatello Awards', '1992 David di Donatello Awards', '1991 David di Donatello Awards', 'Italian Wars', '27th G8 summit', '1978 David di Donatello Awards', 'Anglo-Dutch Wars', 'Italian invasion of France', 'Italian irredentism', '2006 David di Donatello Awards', 'Battle of Augusta', '1977 David di Donatello Awards', '1976 David di Donatello Awards', 'Third Servile War', 'Battle of Garigliano', '1973 David di Donatello Awards', 'Linor Abargil rape', 'Corto Dorico National Film Competition', 'Siege of Capua', 'Italian unification', 'Hundred Days', 'Bernhardt Line', '1981 David di Donatello Awards', '20th G7 summit', '1990 David di Donatello Awards', 'Death of Cristina and Violetta Djeordsevic', 'Italian plague of 1629–1631', '1957 David di Donatello Awards', '1991 Rome summit', 'Moro River Campaign', 'Battle of San Romano', 'African campaigns of World War II', '2011 David di Donatello Awards', '1967 David di Donatello Awards', 'Italian campaign of 1524–1525', '1966 David di Donatello Awards', 'Mediterranean and Middle East theatre of World War II', 'Italian War of 1499–1504', 'Battle of Canusium', '2007 David di Donatello Awards', 'War of the Fifth Coalition', '1997 David di Donatello Awards', '1988 David di Donatello Awards', '2000 David di Donatello Awards', '1995 David di Donatello Awards', 'Italian Campaign', '1934 FIFA World Cup', '1962 David di Donatello Awards', '1999 David di Donatello Awards', '1959 David di Donatello Awards', 'Battle of Pavia', 'Po Valley raid', 'Battle of Velletri', 'War of the Polish Succession', '1974 David di Donatello Awards', 'Battle of the Colline Gate', 'Battle of Cisterna', 'Battle of Piave River', 'War of the Third Coalition', 'Battle of Capua', 'Aragonese-French Wars', '6th G7 summit', 'Battle of Lautulae', 'Gothic War', 'Adriatic Campaign of World War II', 'Italian War of 1551–1559', 'Austro-Prussian War', 'Italian War of 1542–1546', '1989 David di Donatello Awards', 'Battle of Ticinus', 'Fascist and anti-Fascist violence in Italy', '1969 David di Donatello Awards', '1963 David di Donatello Awards', 'Battle of Lake Trasimene', 'Battle of Monte Castello', '35th G8 summit', 'War of the League of Cambrai', 'Battle of Grumentum', '2002 Rome summit', 'Battle of Palestro', 'Battle of Cerignola', 'Italian War of 1521–26', '1998 David di Donatello Awards', 'Battle of Caravaggio', 'Battle of Mantrap Wood', '2001 David di Donatello Awards', '1979 David di Donatello Awards', '1980 David di Donatello Awards', '1994 David di Donatello Awards', 'Battle of the Mincio River', 'Samnite Wars', '1982 David di Donatello Awards', '2004 David di Donatello Awards', '1986 David di Donatello Awards', '2009 David di Donatello Awards', '1990 FIFA World Cup', '1984 David di Donatello Awards', '2008 David di Donatello Awards', '1961 David di Donatello Awards', '1968 David di Donatello Awards', '1964 David di Donatello Awards', "Battle of P'ohang-dong", '1971 David di Donatello Awards', '1956 David di Donatello Awards', 'Battle of Carpi', '2002 David di Donatello Awards', '1983 David di Donatello Awards', 'Battle of Mucellium', '1975 David di Donatello Awards', 'Neapolitan War', 'Battle of the Silarus', '1960 David di Donatello Awards', 'Pizzolungo bombing', '2010 David di Donatello Awards', 'Battle of Ruvo'}
            Answers = 142, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 142, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 49 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 50 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.partially_containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.partially_containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Mediterranean Sea'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 51 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.armed_forces'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:military.military_combatant.armed_forces ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italian Army'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 52 / 333: {
          [('Main', '==', 'm.03rjj', ['fictional_universe.fictional_setting.universe'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.universe ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.universe ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {"JoJo's Bizarre Adventure"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 53 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.olympics_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.olympics_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 10
            Final Answer: {'1952 Summer Olympics', '1900 Summer Olympics', '2008 Summer Olympics', '1980 Winter Olympics', '2010 Winter Olympics', '1948 Winter Olympics', '2012 Summer Olympics', '2002 Winter Olympics', '1936 Summer Olympics', '1896 Summer Olympics'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 54 / 333: {
          [('Main', '==', 'm.03rjj', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'WoMen in Africa - No Color One Color'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 55 / 333: {
          [('Main', '==', 'm.03rjj', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 135
            Final Answer: {'The Bandit', 'Le Notti di Cabiria', 'The Family', 'La terrazza', 'The Organizer', 'The Name of the Rose', 'Gidget Goes to Rome', 'The Easy Life', 'Quantum of Solace', 'The Flame and the Arrow', 'Sole nudo', '1900', 'I ragazzi di via Panisperna', 'What Did You Do in the War, Daddy?', 'I Am David', 'Good Morning, Night', 'Only You', 'The Little Devil', 'Tragic Hunt', 'Megiddo: The Omega Code 2', 'The Widow', 'A Good Woman', 'Shoeshine', 'Allonsanfàn', 'The Bourne Supremacy', 'Arrivederci Roma', 'Il vedovo', 'The Red Violin', 'The Lizzie McGuire Movie', 'The Fallen', 'The Ignorant Fairies', 'Estate Violenta', 'The Sign of Venus', "Madigan's Millions", 'The Last Kiss', 'Sunflower', "Von Ryan's Express", 'The Last Judgement', 'The Talented Mr. Ripley', 'Enchanted April', 'Identification of a Woman', 'Persiane chiuse', 'Marriage Italian-Style', 'I mostri', 'Caro diario', 'Il Commissario Pepe', 'Cemetery Man', 'Good Evening, Ms Campbell', 'The Great War', 'The Unknown Woman', 'The Lady Without Camelias', 'Life Is Beautiful', 'Rome, Open City', 'Le Amiche', 'Swept Away', 'Wanda la peccatrice', 'What Scoundrels Men Are!', 'Captain America: The First Avenger', 'Purple Noon', 'Il Mattatore', 'The Biggest Bundle of Them All', 'The Starlit Garden', "Once You're Born You Can No Longer Hide", 'In Love and War', 'Don Camillo', 'What Time Is It?', 'Cameriera bella presenza offresi...', 'Saturn in Opposition', 'A Farewell to Arms', 'The Beast with Five Fingers', 'Un amore perfetto', 'Everybody Go Home', 'Miracle at St. Anna', 'A Question of Honour', 'Cops and Robbers', 'Half-Rate Honeymoon', 'Letters to Juliet', 'Amarcord', 'Un maledetto imbroglio', 'Coins in the Fountain', 'Don Camillo in Moscow', 'Flame and the Flesh', 'Where Angels Fear to Tread', 'Man on Fire', 'Celluloide', 'Genova', 'The Spy Who Loved Me', "Nella città l'inferno", 'Inkheart', 'Three Girls from Rome', 'Condorman', 'The Scientific Cardplayer', 'Pane, amore e...', 'Best of Youth', 'Two Mafiamen in the Far West', 'The Italian Job', 'Story of a Love Affair', 'Anna', 'Pokémon Ranger and the Prince of the Sea: Manaphy', 'Il signor Max', 'Flesh and Blood', 'Escape by Night', 'The English Patient', 'Romeo and Juliet', 'The Working Class Goes to Heaven', 'Images in a Convent', 'Fortunella', "Manuale d'amore", 'The Mountain Calls', 'I, the Other', 'Three Strangers in Rome', 'Facing Windows', 'La Fabuleuse aventure de Marco Polo', 'Stromboli', 'My House in Umbria', 'Stealing Beauty', 'Il Grido', 'Captain America', 'Roaring Years', 'Paisan', 'Senza pietà', 'The Overcoat', 'The Traffic Policeman', 'Alfredo, Alfredo', 'Big Deal on Madonna Street', 'To Live in Peace', "L'ombrellone", 'For Your Eyes Only', 'Il Postino: The Postman', 'Clarkson: Italian Job', 'An Average Little Man', "Ripley's Game", 'The Fascist', 'The Magistrate', 'Poveri ma belli'}
            Answers = 135, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 135, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 56 / 333: {
          [('Main', '==', 'm.03rjj', ['media_common.netflix_genre.titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 701
            Final Answer: {'Salon Kitty', 'Hercules in the Haunted World', 'Until Death', 'Attraction', 'Triggerman', 'Shock', 'Blade of the Ripper', "Violence in a Women's Prison", 'Sonetaula', 'The Nanny', 'Killing Birds', 'What Do You Know About Me?', 'Tempest', 'Teorema', 'First Action Hero', 'Gorbaciof', 'Thor the Conqueror', 'Incantato', 'Il Tango Della Gelosia', 'The Tomb', 'Children of Hannibal', 'Plankton', 'The Barbarians', 'Web of the Spider', 'Traveling Companion', 'One Hundred Nails', 'City of the Living Dead', 'La Strada', 'Fists in the Pocket', 'Django Shoots First', 'The Great Silence', 'Keoma', 'Cabiria', 'The Fiances', 'The Double Hour', 'Francesco', "My Mother's Smile", 'Hell Behind the Bars', 'Orchestra Rehearsal', 'Uno Bianca', 'Tosca: The Movie', 'Colt 38 Special Squad', 'Four Flies on Grey Velvet', 'La Notte', 'Open My Heart', 'The Wedding Director', 'Sunflower', 'Days', 'The Way We Laughed', 'Italian Fascism in Color', 'The Card Player', 'Man, Woman and Beast', 'Wax Mask', 'I, Don Giovanni', 'Marriage Italian-Style', 'Happy Family', 'The New Barbarians', 'Gasoline', 'Excellent Cadavers', 'Bandits in Rome', 'The Giallo Collection: The Bloodstained Shadow', "The Son's Room", 'Cats of Rome', 'Swept Away', 'The Seed of Man', 'Africa Blood and Guts', 'Hitch-Hike', 'The House by the Medlar Tree', 'Black Cobra Woman', 'Benito', 'Otello', 'Medley', "Fellini's Casanova", 'Draquila - Italy Trembles', 'The Blind Woman of Sorrento', 'Arabian Nights', 'A Cat in the Brain', "Giulia Doesn't Date at Night", 'Saturn in Opposition', 'Hercules Against Karate', 'Coeds', 'Christian', 'Rossini: La Donna del Lago: Riccardo Muti', 'Tickets', 'Django', 'Emanuelle Around the World', 'Days and Clouds', 'Find a Place to Die', 'Purple Sea', 'The Frightened Woman', 'Barbarossa', 'Confessions of a Frustrated Housewife', 'The Beast in Space: Unrated', 'The Red Queen Kills Seven Times', 'The Maniacs', 'Spartacus', 'A Whisper in the Dark', 'The Playgirls and the Vampire', 'The Monte Carlo Story', 'The Master and Margaret', 'Il mostro di Venezia', 'Code Name: Wild Geese', 'Bicycle Thieves', 'The Night Evelyn Came Out of the Grave', 'Blind Date', 'French Sex Murders', 'Il diavolo', 'The Mercenary', 'Women in Cellblock 7', 'A Special Day', 'The Spectator', "David's Birthday", 'BirdWatchers', 'Saint Anthony', 'Cry of a Prostitute', 'Satanik', 'She', 'Padre Padrone', 'Patrick Still Lives', 'The Mad Butcher', 'Illustrious Corpses', 'Close to Jesus: Mary Magdalene', 'Fantastic Argoman', 'One Hundred Steps', 'Naked You Die', 'Not of this World', 'Escape by Night', 'Walking, Walking', 'Bye Bye Monkey', 'Escape from Death Row', "The Cat o' Nine Tails", 'Red Desert', 'Tomb of Torture', 'Kidnap', 'Casablanca Express', 'Back Home Tomorrow', 'The House of Clocks', "Rahil's Secret", 'The Young Caruso', 'Wife for a Night', 'The Solitude of Prime Numbers', 'Nude for Satan', 'Vacation Massacre', 'Hands Over the City', 'Lost Kisses', 'The Eroticist', "Too Bad She's Bad", 'The Nun and the Devil', 'What Have You Done to Solange?', 'Notes of Love', 'Divorce, Italian Style', 'After Death', 'The Black Cat', 'Top Girl', 'La Luna', 'The Sicilian Girl', 'The Other Hell', 'China 9 Liberty 37', 'Il Generale della Rovere', 'Remember Me, My Love', "'Tis Pity She's a Whore", 'Matchless', 'Black Emanuelle, White Emanuelle', 'Grido', 'One Day in a Life', 'Suspiria', "Primo Levi's Journey", 'Aida: Verdi: Teatro di San Carlo', 'Sette Scialli Di Seta Gialla', 'Torso', 'Attention', 'Burial Ground: The Nights of Terror', 'Beyond the Door', 'Dinner with a Vampire', 'Do You Like Hitchcock?', 'Girl with a Suitcase', "Luna e l'Altra", 'Yellow Emanuelle', 'Hercules, Prisoner of Evil', 'Lamerica', 'Cheeky!', 'A Perfect Day', 'Two Suitcases', 'Little Girl', 'The Night of the Shooting Stars', 'The Seduction of Mimi', 'Don Matteo', 'Black Sabbath', 'Non Ti Scordar Di Me', 'To Die for Tano', 'Anotherworld', 'Emanuelle in America', 'Quiet Chaos', 'Dynamite Jim', 'Four of the Apocalypse', 'Blood Castle', "Listen, Let's Make Love", 'Bread, Love and Dreams', 'Bandits in Milan', 'All the Colors of the Dark', 'The Old Testament', 'Island of the Fishmen', 'Fiorile', 'Medea', 'Grandi Speranze', 'Arizona Colt Returns', "Don't Look in the Attic", 'La Morte Negli Occhi del Gatto', 'Manhattan Baby', 'Cottolengo', 'Touch of Death', 'The Girl by the Lake', 'Zombie Holocaust', 'The Four Times', 'Atlas in the Land of the Cyclops', 'La Dolce Vita', 'The Private Lesson', 'The Sky Is Falling', 'Pray to Kill and Return Alive', 'In the Folds of the Flesh', 'Demons 3: The Ogre', 'St. Giuseppe Moscati', 'Dillinger Is Dead', 'The Children Are Watching Us', 'The Hand That Feeds the Dead', 'Estate Violenta', 'Emanuelle and the White Slave Trade', 'Café Express', 'Giuseppe Verdi: Attila: Teatro Alla Scala', 'How to Kill a Judge', 'Knives of the Avenger', 'Eclipse', 'Il bidone', 'La maschera del demonio/Black Sunday', 'Caro diario', 'The Star Maker', 'Hell Penitentiary', 'Monika', 'Videocracy', 'Django, Kill...If You Live, Shoot!', 'Life Is Beautiful', 'The Bloody Judge', "L'Alcova", "The Jeweller's Shop", 'One Life Maybe Two', 'Three Brothers', 'Last of the Vikings', 'The New York Ripper', 'My Son, the Hero', 'The Magic of Fellini', 'Kill, Baby, Kill', 'Concerto di Natale with Jose Carreras', 'Kaos', 'Immortal', 'Voyage in Time', 'Mafioso', 'Lucifera: Demon Lover', "Don't Torture a Duckling", 'Breath', 'Bitter Rice', 'Rocco and His Brothers', 'Love and Anger', 'The Beyond', 'The Consequences of Love', 'Accattone', "The Case of the Scorpion's Tail", 'Blood and Black Lace', 'Convoy Busters', 'Look to the Sky', 'Mister Scarface', 'Warrior of the Lost World', 'The Railroad Man', 'Amarcord', 'Anthony: Warrior of God', 'Street Law', 'The Man Who Will Come', 'Good Morning Heartache', 'Red Riding Hood', 'Bawdy Tales', 'Karol: The Pope, The Man', 'And the Ship Sails on', 'Dr. Goldfoot and the Girl Bombs', 'Twitch of the Death Nerve', 'The Giant of Metropolis', 'Zombi 3', 'I Vitelloni', "Sorry, You Can't Get Through!", 'Looking for Sophia', 'Loose Cannons', 'The Squeeze', 'The Giant of Marathon', 'My Dear Killer', 'Besieged', 'Gladiators Seven', 'Jacob: The Man Who Fought with God', 'Variety Lights', 'Love and Anarchy', 'Giovannona: Long-Thigh', 'The Keys to the House', 'La Masseria Delle Allodole', 'Story of a Love Affair', 'The Universe of Keith Haring', 'Ultimo mondo cannibale', 'Catacombs', 'The Sun Also Shines at Night', 'Tangerine Dream: Inferno', 'Lisa and the Devil', 'Suor Emanuelle', 'Karajan: Mozart: Don Giovanni', 'Blaise Pascal', 'Baba Yaga', 'Women in Fury', 'Roy Colt and Winchester Jack', 'A Friend Is a Treasure', 'Salvatore Giuliano', 'White Slave', 'Storia Di Una Monaca Di Clausura', 'My Brother Is an Only Child', 'The Blonde', 'Stealing Beauty', 'War Goddess', "I'm Not Scared", 'Compañeros', 'Tales of Ordinary Madness', 'Two Women', 'Scorpion with Two Tails', 'Fangs of the Living Dead', 'Oedipus Rex', 'Seven Doors to Death', "Sodoma's Ghost", 'Close to Jesus: Judas', 'A Man Called Magnum', 'The Garden of the Finzi-Continis', 'The Virgin of Nuremberg', 'Private', 'Evilenko', 'Shadow', 'Craving Desire', 'Big Deal on Madonna Street', 'The Crusaders', 'Warriors of the Year 2072', 'La Terra Trema', 'So Young, So Lovely, So Vicious...', 'Seduced and Abandoned', 'Oasis of the Zombies', 'Ginger and Cinnamon', 'Opera', 'But Forever in My Mind', 'The Mother of Tears', 'Almost Human', 'Forever Emmanuelle', 'The Revenge of the Crusader', 'The Orange Thief', 'Emmanuelle on Taboo Island', 'Kreola', 'Ludwig', 'Beyond the Darkness', 'The Battle of El Alamein', 'Le Notti di Cabiria', 'The White Space', 'Golden Door', 'Slaughter Hotel', 'Family Flaw', 'Bread and Chocolate', 'Sacred Silence', 'Rita of the West', 'Tragic Ceremony', 'Secret Nights', 'Senso', 'Francesco Cilea: Adriana Lecouvreur: Alla Scala', 'Una Breve Vacanza', 'Loaded Guns', 'The Mouth of the Wolf', 'The White Sheik', 'Adiós, Sabata', 'Good Morning, Night', 'The Witch', 'Seven Blood Stained Orchids', 'The Hawks and the Sparrows', "Fellini: I'm a Born Liar", 'Eerie Midnight Horror Show', 'The Embalmer', 'Love by Appointment', 'The Murri Affair', 'Street People', 'The Tiger and the Snow', 'La commare secca', 'I Am Love', 'Juliet of the Spirits', 'Love Meetings', 'Saint John Bosco: Mission to Love', 'Ubalda, All Naked and Warm', 'Womens Prison Massacre: Uncut', 'Two Tigers', 'The Three Musketeers of the West', 'Eaten Alive!', 'Luciano Ercoli: Death Walks on High Heels', 'Lone Runner', 'Princesa', 'Deep Red', 'The Mountain of the Cannibal God', 'Double Game', 'Diary of a Telephone Operator', 'Woman Times Seven', 'Le Amiche', 'Il Decameron', 'The Prince of Homburg', 'Summer Night', 'The Adventures of Pinocchio', 'The Last Days of Pompeii', 'The Howl', 'Duel of the Champions', 'Stage Fright', 'The First Beautiful Thing', 'Rabid Dogs', 'Mondo Cane 2', 'A Bullet for the General', 'The Trap', 'The Queen of Sheba', 'Naked and Violent', 'Angela', 'Deadly Sweet', 'High Rollers', 'Don Camillo', 'Black Belly of the Tarantula', "Hill's Trinity", 'Nightmare City', 'The Passion of Joshua the Jew', 'St. Michael Had a Rooster', 'Roma', 'Adored: Diary of a Porn Star', 'Hercules and the Conquest of Atlantis', 'Partner', 'Mid-August Lunch', 'The Big Dream', 'The Conformist', 'Hercules Unchained', 'You Laugh', 'Love a la Carte', 'Return of the Gladiator', 'The Garden of Earthly Delights', 'Hercules Against the Barbarians', 'Beyond the Door III', 'The Voyage', 'A Policewoman in New York', 'The 10th Victim', 'Salò, or the 120 Days of Sodom', 'Cold Eyes of Fear', 'Agatha and the Storm', '1931: Once Upon a Time in New York', 'Flight Of The Innocent', 'The Girl with the Pistol', 'Cartesius', 'Troll 3', "Don't Touch the White Woman!", 'Beast with a Gun', 'Fatty Girl Goes to New York', 'Nerolio', 'A Bullet for Sandoval', 'Nabucco: Verdi: Teatro Di San Carlo', 'Shelter Me', 'Nirvana', 'Christ Stopped at Eboli', 'Stradivari', 'Flatfoot in Africa', 'No Skin', 'Lessons for the Lovelorn', 'The Sweet House of Horrors', 'Little Cannon', 'The Conjugal Bed', 'Frankenstein’s Castle of Freaks', 'As God Commands', '2019, After the Fall of New York', 'Ripped Off', 'Land of Death', 'A Blade in the Dark', 'Gambling City', 'Women of the World', 'Ulysses', 'Conquest', 'Under Ten Flags', 'The Killer Must Kill Again', 'Roma Citta Libera', 'Frivolous Lola', 'The Legend of 1900', 'To Want to Fly', "Don't Move", 'Syndicate Sadists', 'Emanuelle in Bangkok', 'Hercules Against the Mongols', 'The Stendhal Syndrome', 'Facing Windows', 'Close to Jesus: Joseph of Nazareth', 'Black and White', 'The Soul Keeper', 'My Name is Nobody', 'Who Saw Her Die?', 'Till Marriage Do Us Part', 'Paisan', 'Brother Sun, Sister Moon', 'Slaughter of the Vampires', 'Demonia', 'Mr. Superinvisible', 'Kapò', 'Unknown Beyond', 'The Youngest Son', 'Il Bacio di Tosca', 'Alfredo, Alfredo', 'Ring of Darkness', 'Napoli, Napoli, Napoli', 'The Nymph', 'The Day of the Cobra', 'Il Paese del Sesso Selvaggio', 'All Ladies Do It', 'Il Postino: The Postman', 'Hatchet for the Honeymoon', 'Miranda', 'There Was a Little Girl', 'La moglie più bella', 'Son of Samson', 'The House on the Edge of the Park', 'Sex Advice', 'Seven Beauties', 'Germany, Year Zero', 'Big Deal on Madonna Street: 20 Years Later', 'The Elective Affinities', 'Absurd', 'Mad About Opera', 'The Loves and Times of Scaramouche', 'Mondo cane', 'Quest for the Mighty Sword', 'The Tree of Wooden Clogs', 'The Inheritance', 'Last Days of Mussolini', 'Mafia Connection', 'Hercules and the Tyrants of Babylon', 'Demons 2', 'Short Night of the Glass Dolls', 'Close to Jesus: Thomas', 'Flavia the Heretic', 'The Day the Sky Exploded', 'Anyone Can Play', 'Amazons of Rome', 'Steam: The Turkish Bath', 'The Escort', 'Knife of Ice', 'The House by the Cemetery', 'Berlinguer I Love You', 'The Psychic', 'Padre Pio: Between Heaven and Earth', 'Housing', 'Paul VI: The Pope in the Tempest', 'Manhattan Gigolo', "Satan's Baby Doll", 'Son of Cleopatra', "Concorde Affaire '79", 'Inferno', 'Murder Rock', 'Mamma Roma', 'Cinema Paradiso', 'Killer Nun', 'The Ignorant Fairies', 'Robbery Roman Style', 'The Wide Blue Road', 'The Stranger', 'Graveyard Disturbance', 'The Last Round', 'La nostra vita', 'Come Undone', 'Light of My Eyes', 'The Last Kiss', 'Ginger and Fred', 'Desirable Teacher', 'Watch Me When I Kill', 'Il Divo', 'The Orchestra of Piazza Vittorio', 'Where Is Freedom?', 'Satyricon', 'Gomorrah', 'Suddenly, Last Winter', 'A Man Called Blade', 'The Unknown Woman', 'A Quiet Life', 'The Perfume of the Lady in Black', 'The House with Laughing Windows', 'Bloodsucker Leads the Dance', 'Rome, Open City', 'The AntiChrist', 'Goodbye Uncle Tom', 'Alina', 'W Django!', 'Bingo Bongo', 'The Front Line', 'Without Trace', 'Delirium', 'Antony and Cleopatra', 'The Virgo, The Taurus and The Capricorn', 'Great Leaders of the Bible', 'The Hanging Woman', 'The Mummy Theme Park', 'The Monster', 'City of Women', 'Texas, Adios', 'The Key', 'Secrets of a Call Girl', 'Bronx Executioner', 'Milano Rovente', 'La prise de pouvoir par Louis XIV', 'Toto in the Moon', 'Erik the Conqueror', 'Contraband', 'Ciao, Professore!', 'Ulysses Against the Son of Hercules', 'Intervista', 'The Inveterate Bachelor', 'Neapolitan Carousel', 'May Morning', 'Run, Man, Run!', 'From Mother to Daughter', 'Without Conscience', 'Ossessione', 'Investigation of a Citizen Above Suspicion', 'Arena', 'The Clowns', 'Fatal Charm', 'Open Letter to the Evening News', 'Street War', "I've Seen Maradona", 'Your Vice Is a Locked Room and Only I Have the Key', 'Emergency Squad', 'Mozart: Don Giovanni: Teatro Alla Scala', 'Planet of the Vampires', 'I Vinti', 'The Sister of Ursula', 'The Case of the Bloody Iris', 'Lucrèce Borgia', 'Black Emanuelle 2', 'Seeking Asylum', 'The Beast in the Heart', 'Behind Convent Walls', 'Massacre in Dinosaur Valley', 'Bad Inclination', 'Flatfoot in Hong Kong', 'Verdi: The King of Melody', 'Padre Pio: Miracle Man', 'Ace High', 'Saul e David', 'Marcello Mastroianni: I Remember', 'Sandokan the Great', 'Umberto D', 'Copkiller', 'The Desert of the Tartars', 'The Hellbenders', 'Minotaur, the Wild Beast of Crete', 'Bellini: I Puritani', 'Bread and Tulips', 'Passione', 'Macaroni', 'The Big Alligator River', 'Phenomena', "Lo Frate 'nnamorato", 'Jessica', 'The Canterbury Tales', 'Strip Nude for Your Killer', "L'Avventura", 'The Gospel According to St. Matthew', 'Il Grido', 'Caterina in the Big City', 'Luciano Ercoli: Death Walks at Midnight', 'Vincere', 'Demons', 'Yesterday, Today and Tomorrow', 'Il Posto', 'The Trial Begins', 'The Return of Don Camillo', 'Any Gun Can Play', 'Son of the Pink Panther', 'The Sinful Nuns of St. Valentine', 'Death Rides a Horse', 'The Innocent', 'Henry IV', 'Dracula', 'Malèna', 'White Fang to the Rescue', 'I Vampiri', 'White Nights', 'Baaria - La porta del vento', 'Lightning Bolt', 'Gatling Gun', 'La Bestia in Calore', 'Cut and Run', 'Bloody Che Contra', 'Passion', "I'm Crazy About Iris Blond", 'Farinelli', 'Saint Rita', 'Werewolf Woman', 'One Step to Hell', 'Once Upon a Time in the West'}
            Answers = 699, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 699, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 57 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.calling_code'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.country.calling_code ?o1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.country.calling_code ?o1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'39'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 59 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.currency_formerly_used'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Italian lira', 'Sammarinese lira'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 60 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.second_level_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.second_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.second_level_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 109
            Final Answer: {'Province of Florence', 'Province of Crotone', 'Province of Macerata', 'Province of Campobasso', 'Province of Rieti', 'Province of Taranto', 'Province of Carbonia-Iglesias', 'Province of Modena', 'Province of Benevento', 'Province of Naples', 'Province of Ragusa', 'Province of Teramo', 'Province of Rimini', 'Province of Oristano', 'Province of Lucca', 'Province of Pordenone', 'Province of Venice', 'Province of Bari', 'Province of Pavia', 'Province of Cosenza', 'Province of Ravenna', 'Province of Vicenza', 'Province of La Spezia', 'Province of Agrigento', 'Province of Sondrio', 'Province of Cremona', 'Province of Pescara', 'Province of Chieti', 'Province of Biella', 'Province of Cuneo', 'Province of Belluno', 'Province of Asti', 'Province of Medio Campidano', 'Province of Reggio Calabria', 'Province of Cagliari', 'Province of Bologna', 'Province of Trieste', 'Trentino', 'Province of Rovigo', 'Province of Verbano-Cusio-Ossola', 'Province of Como', 'Province of Genoa', 'Province of Pesaro and Urbino', 'Province of Ascoli Piceno', 'Province of Frosinone', 'Province of Isernia', 'Province of Barletta-Andria-Trani', 'Province of Padua', 'Province of Alessandria', 'Province of Savona', 'Province of Caserta', 'Province of Ancona', 'Province of Ogliastra', 'Province of Pisa', 'Province of Verona', 'Province of Forlì-Cesena', 'Province of Lecco', 'Province of Nuoro', 'Province of Rome', 'Province of Siena', 'Province of Prato', 'Province of Grosseto', 'Province of Pistoia', 'Province of Foggia', 'Province of Catania', 'Province of Lodi', 'Province of Olbia-Tempio', 'Province of Palermo', 'Province of Varese', 'Province of Matera', 'Province of Potenza', 'Province of Fermo', 'Province of Arezzo', 'Province of Messina', 'Province of Bergamo', 'Province of Brindisi', 'Province of Reggio Emilia', 'Province of Brescia', 'South Tyrol', 'Province of Salerno', 'Province of Gorizia', 'Province of Piacenza', 'Province of Catanzaro', 'Province of Vercelli', 'Province of Massa and Carrara', 'Province of Novara', 'Province of Latina', 'Province of Ferrara', 'Province of Livorno', 'Province of Treviso', 'Province of Caltanissetta', 'Province of Lecce', 'Province of Imperia', 'Province of Perugia', 'Province of Monza and Brianza', 'Province of Terni', 'Province of Trapani', 'Province of Milan', 'Province of Avellino', 'Province of Sassari', 'Province of Turin', 'Province of Syracuse', 'Province of Mantua', 'Province of Vibo Valentia', 'Province of Enna', 'Province of Viterbo', "Province of L'Aquila", 'Province of Udine', 'Province of Parma'}
            Answers = 109, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 109, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 61 / 333: {
          [('Main', '==', 'm.03rjj', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 11
            Final Answer: {'Liberazione', 'Il Messaggero', 'La Stampa', 'La Sicilia', 'La Domenica del Corriere', 'Corriere della Sera', "l'Unità", 'Il Foglio', 'La Gazzetta dello Sport', 'Avanti!', 'la Repubblica'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 62 / 333: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.administrative_children'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.administrative_children ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'Emilia-Romagna', 'Aosta Valley', 'Basilicata', 'Molise', 'Lombardy', 'Marche', 'Calabria', 'Abruzzo', 'Apulia', 'Friuli-Venezia Giulia', 'Trentino-Alto Adige/South Tyrol', 'Sicily', 'Lazio', 'Piedmont', 'Sardinia', 'Veneto', 'Campania', 'Liguria', 'Tuscany', 'Umbria'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 63 / 333: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 64 / 333: {
          [('Main', '==', 'm.03rjj', ['base.aareas.schema.administrative_area.pertinent_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.aareas.schema.administrative_area.pertinent_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 6
            Final Answer: {'Italian frazione', 'Italian region', 'Italian province', 'Italian commune', 'Italian autonomous province', 'Italian autonomous region'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 65 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Central European Time', 'UTC+01:00'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 66 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.location.area ?o1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 WHERE { fb:m.03rjj fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'301230'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 67 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Southern Europe', 'Europe', 'Eurasia'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 68 / 333: {
          [('Main', '==', 'm.03rjj', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 519
            Final Answer: {'Playing for Pizza', 'Medieval European coinage', 'Hannibal', 'Three days', 'Cause for Alarm', 'The King of Capri', 'The Miracle of Castel Di Sangro', 'North Italian Painters Of The Renaissance', 'Flavours of the Riviera', 'Some Problems in Roman History', 'Italian Mysteries', 'Old Calabria', 'The Most Beautiful Villages of Tuscany', 'Love in idleness', 'Italian, French & Spanish paintings of the seventeenth century', 'The Garden of Evil', 'A History of the Life and Voyages of Christopher Columbus', 'Rosa', 'Silence on Monte Sole', 'The making of late antiquity', 'Beloved Emma', 'The Marble Faun', 'Renaissance in Italy', 'civilization of the renaissance in Italy', 'The birth and rebirth of pictorial space', 'Sketches of protestantism in Italy, past and present', 'Those Barren Leaves', 'Vendetta', 'Visions of Emancipation', 'Little misunderstandings of no importance', 'The earthquake in the Marsica, central Italy', 'A journey to Rome and Naples, performed in 1817', 'The immaculate deception', 'Indecent secrets', 'From St. Francis To Dante', 'The gospel of Judas', 'The Waiting Land', 'Time at War', 'The Betrothed', 'Italian Neighbors', 'The Italian painters of the renaissance', 'The Fortunate Pilgrim', "Weight Watchers' Simply the Best", 'Italian incunabula', 'The Delia Collection', 'Synodal law in Florence and Fiesole, 1306-1518', 'The marshal and the murderer', 'The modern prince, and other writings', 'The quest for Corvo', 'Graziella', 'The orphan singer', 'Futurism', 'A Season with Verona', "The Renaissance painter's garden", 'Bringing Tuscany Home', 'Byron', 'End Games', 'The Italian distribution system', 'The bay of noon', 'The Heron', 'Paradise City', 'The Rough Guide to Classic Novels 1', 'Low fertility and labour force participation of Italian women', 'Translating style', 'The keyboard ricercar and fantasia in Italy c. 1500-1550', 'Medianoche En Sicilia', 'The Perfect House', 'The City of Falling Angels', 'Landmarks of botanical history', 'Gardens and gods', 'A translation of the articles established by the most excellent magistracy of revisors and regulators of the public revenue in the exchequer at Venice', 'The sacred cut', 'Hannibal Crosses the Alps', 'The Italian Renaissance in its historical background', 'The last judgement', 'Murano', 'Cosmicomics', 'Old Italian masters', 'Cities of central Italy', 'Varronianus', 'Capri file', 'The Borgia Bride', 'Italian currents in the popular music of England in the sixteenth century', 'Titian', 'The Lost Girl', 'The Silver Spoon', 'Reluctant saint', 'Nella cucina', 'Dirge for a doge', 'Sex Lives of the Popes', 'Bridge of Sighs', 'The lakes of northern Italy', 'Saving Caravaggio', 'Trattoria', 'Supernatural Tales', 'Foreign evidence on the war at the Italian front, 1915-1918', 'The Thief Lord', 'The Blood Stone', 'Palladio', 'Festa', 'The architecture of fountains and nymphaea in ancient Italy', "Deformation mechanisms, architecture, and petrophysical properties of large normal faults in platform carbonates and their role in the release of CO₂ from earth's interior in central Italy", 'The House of Medici', 'Studies on Italy, 1943-1975', 'The Lost Father', 'Fernando De Lucia', 'Brother Francis and the friendly beasts', 'Bramante', 'The Mysteries of Udolpho', 'Administering migrant workers in an irregular situation in Greece, Italy and Spain', 'La Romana', 'Nietzsche in Turin', 'Uncle Isaaco', "Heat: An Amateur's Adventures as Kitchen Slave, Line Cook, Pasta-Maker, and Apprentice to a Dante-Quoting Butcher in Tuscany", 'Primo', 'Four Days of Naples', 'Vida de Marco Bruto', 'Venice a History of', "Signpost Guide Provence and the Cote D'Azur", 'Stylistic similarities and differences among twelve mid-eighteenth century Italian Keyboard sonatas', 'Are we Aryans?', 'The transmission of trecento secular polyphony', 'Memoirs of early Italian painters', 'Modigliani', 'The campaign in Italy', 'Death and restoration', 'Facsimiles of original studies by Raffaelle in the University Galleries, Oxford', 'Julius Caesar', 'Images and Shadows', 'Felony', 'Letters from the Palazzo Barbaro', 'The central Italian painters of the renaissance', 'Death of a Dutchman', 'Southern Baroque Art', 'Brother of the More Famous Jack', 'Etruscan Magic and Occult Remedies', 'The Essential Michelangelo', 'Francesco Geminiani, composer and theorist', 'The Fifth Daughter', 'Day of confession', 'The Normans in Sicily', 'Roman sacred polyphony 1680-1730', 'Caravaggio: Painter of Miracles', 'The companion guide to Sicily', 'Cosi Fan Tutti: An Aurelio Zen Mystery', 'Sketches from the Subject and Neighbour Lands of Venice', 'Galileo', 'Romanization in the Time of Augustus', 'Can-Cans, Cats and Cities of Ash', 'Tested by Fate', 'Great Expectations', 'Articles on the earthquake at Messina, Dec.28, 1908', 'Culture and national identity in Republican Rome', 'Essentials of Classic Italian Cooking', 'The sites of written memory', 'Herculaneum', 'Studies In Roman History', 'Greene on Capri', 'The instrumental ritornello in selected vocal works of Italian composers, c. 1670-1710', 'Letter to Lorenzo', 'One Hundred and One Beautiful Small Towns of Italy', 'The story of O', 'The Nature of Blood', 'Young Italy', 'The Story of Florence', 'Street boys', 'Rom, Blicke', 'Hawkwood: Diabolical Englishman', 'Andrea del Castagno', 'Octopus', 'Descriptive catalogue of ""old masters, "" collected by James J. Jarves', 'M: The Man Who Became Caravaggio', 'Dance music in printed Italian lute tablatures from 1507-1611', 'Cavour and Garibaldi, 1860', 'Euphorion', 'Believe, obey, fight', 'From the canso to the canzoniere', 'Italian portraits of the fifteenth century', 'Italian Days', 'The ancient Romans', 'The Medici', 'Italy in the Central Middle Ages', 'Catalogue of watermarks in Italian printed maps, ca 1540-1600', 'Mrs. Pollifax and the second thief', 'Italian journeys', 'Invasion diary', 'Death in autumn', 'Roman mornings', 'Saint Catherine of Siena', 'Italian Witchcraft', 'Ways of the strega', 'Antonio Meucci, 1808-1889', 'The Agony and the Ecstasy', 'Legends of Florence', 'Property of blood', 'Death in springtime', 'Atlas of the Roman world', 'A Farewell to Arms', 'All or Nothing', 'Mannerism and anti-Mannerims in Italian paintings', 'The Prettiest Love Letters in the World', 'Across the River and into the Trees', 'The woman question in Italy, 1861-1880', 'Marcantonio and Italian engravers and etchers of the sixteenth century', 'The language of doves', 'The Italian Renaissance', 'Ways and means for suppressing beggary and relieving the poor by erecting general hospitals and charitable corporations', 'Rome and a villa', 'The next best thing', 'The Makers of Hebrew Books in Italy', 'Benevolence and Betrayal', 'Seventeenth-century Italian prints', 'The thief of Venice', 'Vessel of Sadness', 'Under the Tuscan Sun', 'An account of the Inquisition at Goa, in India', 'Katie and the Mona Lisa', 'Architecture and the state', 'Rome in the East', 'Musical tastes in fourteenth-century Italy', 'Rome Reborn', 'A General History Of Rome', 'The Etruscan Chimera', 'The Sicilian', 'Mirror, Mirror', 'The beginnings of Rome', 'Michelangelo', 'Without Reservations', 'The Twelve Caesars', 'The Charterhouse of Parma', 'The English Patient', 'Modal Subjectivities', 'Three letters concerning the present state of Italy, written in the year 1687 ...', 'The Magic Barrel', 'Eating Up Italy', 'Rapids', 'Money and the Rise of the Modern Papacy', "Borromini's baroque", 'A comparison of selected Italian vocal tutors of the period circa 1550 to 1800', 'A Thousand Days in Venice', 'The art of humanism', 'Garibaldi, a great life in brief', 'Oliver Gagliani, past and present', 'The Sixth Day and Other Tales', 'The History of the Decline and Fall of the Roman Empire', 'Ghosts of Vesuvius', 'The Comparaison de la musique italienne et de la musique françoise of Lecerf de la Vieville', 'Rome, inc.', 'The Last Generation of the Roman Republic', 'Italian Hours', 'Race of Scorpions', 'Garibaldi The Idol of the New Italy', 'And Then You Die', 'The Complete Guide to Buying Property in Italy', 'The Wings of the Dove', 'Giambattista Tiepolo', 'Americans', 'The Mafia', 'Scorpia', 'The Italian Communist Party, 1976-81', 'Modern Italian painting', 'The Garden of the Finzi-Continis', 'The laude francescane and the disciplinati of thirteenth century Umbria and Tuscany', 'The Merchant of Prato', 'Back to Bologna', 'Caesar', 'History of Italian Renaissance art', 'More lives than one', 'Titian to 1518', 'The Broker', 'The Donkey of God', 'Florence, a delicate case', 'The Evening of the Holiday', 'The life of Cesare Borgia of France', 'Flavors of the Riviera', 'Tuscany', 'Giotto and some of his followers', 'The Marshal Makes His Report', 'Records of Shelley, Byron, and the author', 'Florence: A Portrait', 'The life and work of Benito Mussolini', 'Promise of Fidelity', 'The Family', 'Lost', 'The Name of the Rose', 'Eighth Army', 'Marco Polo', 'The Man Who Never Was', 'Figures in proportion', 'Cry to Heaven', 'Architectural principles in the age of humanism', 'The Life and Opinions of Tristram Shandy, Gentleman', 'The puzzle of mass torts', 'Rubens Barrichello', 'Medici Money', 'The Siege of Venice', 'In the hour before midnight', 'Exhibition of old master drawings', 'Two women', 'Earthwork Out Of Tuscany', 'Studies on the concepts of disegno, invenzione, and colore in sixteenth and seventeenth century Italian art and theory', 'More than peace and cypresses', 'Magnificent Italian Villas and Palaces', 'The Apprentice Lover', 'Michelangelo and His Influence', 'Italy and its Monarchy', 'An unconventional brotherhood', 'Effie in Venice', 'The Dolphins of Laurentum', "Lorenzo de' Medici", 'Studies in Greek culture and Roman policy', 'Tune for an elephant.', 'Studies of the Eighteenth Century in Italy', 'The architecture of Michelangelo', 'The Seventh Sacrament', 'Four Seasons in Rome', 'Redencion', 'The Pope, His Banker, and Venice', 'Nero', 'En italia con amor', 'The Parnas', 'Making Democracy Work', 'Italian Master Drawings At The Philadelphia Museum Of Art', 'Medusa', 'Darkling I listen', 'The great Italian and French composers', 'The Conformist', 'After Hannibal', 'An Italian journey', 'A treatise concerning the causes of the magnificencie and greatnes of cities', 'Italian jeweled arts', 'Destiny', 'Mapping the edge', 'Daughter of Venice', 'Ratking', 'Giuseppe Terragni', 'Once upon a time in Italy', 'Inkheart', 'Florence', 'Girolamo Donzellino, medical science and Protestantism in the Veneto', 'The Essential Machiavelli', 'Roma Alessandrina', 'The Old English Baron', 'The big Q', 'Don Giovanna', 'Venice', 'To Noto, or, London to Sicily in a Ford', 'The Mirror Maker', 'Midnight in Sicily', 'Survival In Auschwitz', 'Dialogues', 'The Machiavellian Moment', 'The Castle of Crossed Destinies', 'Indian Summer', 'Remarks on antiquities, arts, and letters during an excursion in Italy, in the years 1802 and 1803', 'Some bitter taste', 'Jerusalem, prisoner of hope', 'Rome, 1630', "Artists' homes in sixteenth century Italy", 'The renaissance of art in Italy', 'The Renaissance in Italy and Spain', 'The Painters of the School of Ferrara', 'Italy', 'Beach Music', 'Involuntary Witness', 'Men who loved me', 'Women, family, and society in medieval Europe', 'I, Fellini', 'Barbarism and religion', 'The renaissance', 'Death of an Englishman', 'Aldus and his dream book', 'Leonardo, paintings and drawings', 'American Pie', 'The Italian crusades', "Field visit to damage from the magnitude 4.9, Sant' Agata Fossili, Italy, earthquake of 2003 April, 11", 'Il Modo Italiano: Italian Design and Avant-garde in the 20th Century', 'The History of Sicily from the Earliest Times', 'Beyond measure', 'The last promise', 'Bellarion the Fortunate', 'The book of my life', 'The Eighth Wonder of the World', 'Vive Venise', 'Boccherini, 1862-1882', 'Broken mirrors/broken minds', 'A thread of grace', 'Europa', 'Report on 2011 International Year Part 7: Photography of The African Continuum', 'Bring out your dead', 'Memoirs Of The Early Italian Painters', 'Borromini', 'Etruscan Roman Remains In Popular Tradition', 'Twilight in Italy and other essays', 'Antonio Vivaldi and the Baroque Tradition', 'Pilgrims and Shrines', 'Il sentiero dei nidi di ragno', 'The Mother', 'Italian art deco', 'Memoirs of My Life and Writings', 'The Devil You Know', 'Tenor of love', 'The Sack of Rome: How a Beautiful European Country with a Fabled History and a Storied Culture Was Taken Over by a Man Named Silvio Berlusconi', 'Pietro da Cortona and Roman Baroque architecture', 'Painting in Italy', 'The Innamorati', 'The catacombs', 'Letter from Casablanca', 'Need to Testify, A', 'Botticelli', 'The art of counterpoint in stile nuovo', 'Cabal', 'The Memory Palace of Matteo Ricci', 'Artistic theory in Italy, 1450-1600', 'Moments of Reprieve', 'The Portrait of a Lady', 'Fire In The Hills', 'The Talented Mr. Ripley', 'Verdi', 'Bibliography of the geology and eruptive phenomena of the more important volcanoes of southern Italy', 'Leonardo Da Vinci', 'Fra Angelico', 'Paganini', 'Il giardino dei Finzi-Contini', 'Modern Italy', 'An introduction to Italian painting', 'The honeymoon', 'Sergio Leone', 'The Day of Battle: The War in Sicily and Italy, 1943-1944', 'Italian hilltowns', 'The Bernini bust', 'Amzat and His Brothers', 'Sicilian odyssey', 'Brother sun, sister moon', 'A history of painting in north Italy', 'A short history of Italian painting', 'The Fascist experience in Italy', 'Chanson to Mass', 'The Urban Ideal', 'The villa of mysteries', 'The Other Side', 'The Italian Reformation of the sixteenth century and the diffusion of Renaissance culture', 'Italian petrological sketches', 'The Rommel papers', 'The paradise of cities', 'The Science of Leonardo', 'Marcantonio Rainmondi and his school', 'The road to Damietta', 'The Volcano Lover', 'Studies in the history of mediaeval Italian painting', 'Great Maria', 'An account of some of the statues, bas-reliefs, drawings and pictures in Italy, &c. with remarks', 'Surviving without governing', "Summer's Lease", 'Siena and the Virgin', 'The Renaissance', 'Italian Fever', 'Culture and Customs of Italy', 'The Comfort of Strangers', 'The Titian committee', 'Minority government and majority rule', 'Pamphlets on fossil mollusks', 'Spaghetti Westerns', 'Fresco decorations and stuccoes of churches and palaces in Italy', 'The Italian garden', 'Spoiler', 'Discerning superstition', 'Days Near Rome', 'Architecture for the Shroud', 'Portrait of a Lady', 'Roman Pictures', 'Peace', 'The life, times and works of Pietro Antonio Locatelli', 'Paintings by Italian masters in the possession of William Harrison Woodward', 'Up at the Villa', "Studies on Buontalenti's villas", 'Rome', 'La Bella Figura: A Field Guide to the Italian Mind', 'Storming the heavens', 'Politicians and politics', 'Painting in sixteenth-century Venice', 'The latest Calabrian disaster', 'The Vatican and Italian Fascism, 192932', 'The marshal and the madwoman', 'Alibi', 'Racial Theories in Fascist Italy', 'Anzio', 'Reasonable Doubts', 'Myths of Venice', 'Iris Origo', 'Barnardino Luini', 'Painting in Late Medieval and Renaissance Siena', 'A Room with a View', 'A new history of painting in Italy', 'If Not Now, When?', 'Prince of Foxes', 'Hereditary witchcraft', 'Mussolini', 'Romola', 'The stories and recollections of Umberto Saba', 'Dead Lagoon', 'The Eye of the Lynx', 'John Cabot', 'Prisoners of Hope', 'Norm and form', 'Saint Francis and the Wolf', 'A treatise on the petroleum zones of Italy', 'Gallienus', 'The Secrets of Vesuvius', 'The Accademia del disegno in sixteenth century Florence', 'Count Silvernose'}
            Answers = 511, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 511, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 69 / 333: {
          [('Main', '==', 'm.03rjj', ['organization.organization_founder.organizations_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_founder.organizations_founded ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Council of Europe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 70 / 333: {
          [('Main', '==', 'm.03rjj', ['fictional_universe.fictional_setting.works_set_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:fictional_universe.fictional_setting.works_set_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'The Cask of Amontillado'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 71 / 333: {
          [('Main', '==', 'm.03rjj', ['organization.organization_scope.organizations_with_this_scope'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:organization.organization_scope.organizations_with_this_scope ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 170
            Final Answer: {'Popular-UDEUR', 'Christian Democratic Centre', 'Sardinian Reformers', 'Unione degli Studenti', 'Movement for Democracy – The Net', 'Middle-of-the-Road Italy', 'Movement for the Left', 'Camera del Lavoro', 'Greens', 'The Democrats', 'European Popular Centre', 'Party of Democratic Reformers', "South Tyrolean People's Party", 'National Democratic Party', 'S.O.S. Italy', 'Net7', 'Autonomist Federation', 'Democratic Party', "Citizens' Union for South Tyrol", 'Italian Radicals', 'Italian General Confederation of Labour', 'Workers Autonomous Trade Unions Confederation', 'Socialist Revolutionary Anarchist Party', 'Union of Christian and Centre Democrats', 'Italy Again', 'citiservi', 'Italian Pirate Party', 'Italian Labour Union', 'Proletarian Democracy', 'Federalist Party', 'Democrats of the Left', 'Italian Communist Party', 'Sardinia Project', 'Liberal Socialist Action Party', 'Marxist–Leninist Revolutionary Party of Italy', 'Italian Democratic Socialists', 'Confederazione dei Comitati di Base', 'DIRFOR', 'Radicals of the Left', 'Rainbow Greens', 'Monarchist Alliance', 'New Sicily', 'Italy of Values', 'Democratic Union for Consumers', 'For Italy in the World with Tremaglia', 'Republican Fascist Party', 'Autonomist Trentino', 'Ladin Autonomist Union', 'Italian Socialist Party', 'National Right', 'Christian Democratic Party', 'The Old Catholic Church in Italy', 'Reformist Alliance', 'Società Anonima Vinicola Italiana', 'Active Democracy', 'Party of Italian Communists', 'Critical Left', 'National Democracy', "Italian Confederation of Free Workers' Unions", 'Forza Italia', 'Italian Socialists', 'Communist Alternative Party', 'Republican Left', 'Federation of the Greens', 'Patto Segni', 'Democratic Union for the Republic', 'Reformist Socialists', 'Lega Alleanza Lombarda', 'Monarchist National Party', 'Organisation of Communists of Italy (Marxist–Leninists)', 'Italians in the World', 'Communist Refoundation Party', 'Christian Democratic Refoundation', 'Sgarbi Liberals', 'Popular Democracy (United Left)', 'The People of Freedom Party', 'Movement for Peace and Socialism', 'Società Psicoanalitica Italiana', 'Lega Nord', 'Action Party', 'Decide!', "People's Monarchist Party", 'Italian Democratic Party of Monarchist Unity', 'Democratic Left', 'Liberal Reformers', 'Unified Communist Party of Italy', 'Valdotanian Union', 'Christian Extended Pact', 'European Republicans Movement', 'Unitalia', 'General Labour Union', 'Italian Renewal', "Italian People's Party", 'Italian Democratic Socialist Party', 'Ladins Political Movement', 'Moderate Italy', 'Greens Greens', 'Pact for Sicily', "Pensioners' Party", 'European Democracy', 'Socialist Party of Italian Workers', 'Sardinia Nation', 'United Socialist Party', 'Platipus Anchors', "Partito dell'Amore", 'United Democratic Christians', 'Italian Associations in South America', 'Movement of Unitarian Communists', 'Italian Liberal Party', 'Independence Republic of Sardinia', 'Volpianian Independents', 'Sardinian Action Party', 'With Monti for Italy', "National Autonomous School Workers' Trade Union", 'Unione Sindacale Italiana', 'No Euro Movement', 'Fronte Marco Polo', 'Perfume Click', 'Fascism and Freedom Movement', 'Left Ecology Freedom', 'Italian Marxist–Leninist Party', 'The Italian Socialists', 'Labour Democratic Party', 'National Fascist Party', 'Lega Nord Toscana', 'Confederazione Generale del Lavoro', 'Association for the Rose in the Fist', 'Friuli Movement', 'Lega Sud Ausonia', 'National Alliance', 'New Action Party', 'Democratic Party of the Left', 'North-East Project', 'Communist Party of Italy', 'Democratic Party of South Tyrol', 'Marxist–Leninist Italian Communist Party', 'Trentino Tyrolean Autonomist Party', 'Cultural Video Foundation', 'Humanist Party', 'Italian Republican Party', 'United Pensioners', 'Proletarian Unity Party', 'Democratic Alliance', 'Italian Socialist Party of Proletarian Unity', 'Christian Democracy for Autonomies', 'Five Star Movement', 'Christian Democracy', 'European Federalist Movement', 'Movement for Autonomies', 'Movement for the Confederation of the Communists', 'United Consumers', 'iProspect', 'Federation of Liberals', 'Party of Christian Democracy', 'New Christian Democracy', 'Southern Democratic Party', 'Democracy is Freedom – The Daisy', 'Sicilian Alliance', 'Andromeda Systems Engineering LLC', 'New Italian Socialist Party', "Consumers' List", 'Italian Animal Welfare Party', 'Civic Choice', 'For the South', 'Democratic Republicans', 'Lively Aosta Valley', 'Radical Party'}
            Answers = 167, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 167, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 72 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.multi_event_tournaments_participated_in'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:sports.sport_country.multi_event_tournaments_participated_in ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'2012 World Mountain Running Championships', '2007 World Championships in Athletics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 73 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_country.national_federation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.national_federation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.national_federation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Federazione Italiana di Atletica Leggera'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 74 / 333: {
          [('Main', '==', 'm.04_x4', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 183
            Final Answer: {'The importance of money flows from it being a link between the present and the future.', 'It requires a great deal of boldness and a great deal of caution to make a great fortune, and when you have it, it requires ten times as much skill to keep it.', 'It is the heart that makes a man rich. He is rich according to what he is, not according to what he has.', 'If you are poor, though you dwell in the busy marketplace, no one will inquire about you; if you are rich, though you dwell in the heart of the mountains, you will have distant relatives.', 'There is no fortune so strong that money cannot take it.', 'If you want to know what God thinks about money, just look at the people He gives it to.', 'We might make a public moan in the newspapers about the decay of conscience, but in private conversation, no matter what crimes a man may have committed or how cynically he may have debased his talent or his friends, variations on the answer Yes, but I did it for the money, satisfy all but the most tiresome objections.', 'When money speaks the truth is silent.', "Money won't make you happy... but everybody wants to find out for themselves.", 'The Lord commonly gives riches to foolish people, to whom he gives nothing else.', "All things are sold: the very light of heaven is venal; earth's unsparing gifts of love, the smallest and most despicable things that lurk in the abysses of the deep, all objects of our life, even life itself, and the poor pittance which the laws allow of liberty, the fellowship of man, those duties which his heart of human love should urge him to perform instinctively, are bought and sold as in a public mart of not disguising selfishness, that sets on each its price, the stamp-mark of her reign.", 'The use of money is all the advantage there is in having money.', 'Money is the fruit of evil, as often as the root of it.', 'The only wealth is life.', 'It is not how much one makes but to what purpose one spends.', 'Money without brains is always dangerous.', 'I am opposed to millionaires, but it would be dangerous to offer me the position.', 'Money differs from an automobile or mistress in being equally important to those who have it and those who do not.', 'Sir, money, money, the most charming of all things; money, which will say more in one moment than the most elegant lover can in years. Perhaps you will say a man is not young; I answer he is rich. He is not genteel, handsome, witty, brave, good-humored, but he is rich, rich, rich, rich, rich --that one word contradicts everything you can say against him.', 'Revenue is vanity... margin is sanity... cash is king.', 'Finance, like time, devours its own children.', 'Anyone can be great with money. With money, greatness is not a talent but an obligation. The trick is to be great without money.', 'There is only one class in the community that thinks more about money than the rich, and that is the poor. The poor can think of nothing else.', "Money's a horrid thing to follow, but a charming thing to meet.", 'But for money and the need of it, there would not be half the friendship in the world. It is powerful for good if divinely used. Give it plenty of air and it is sweet as the hawthorn; shut it up and it cankers and breeds worms.', "Yes! Ready money is Aladdin's lamp.", "I have not observed men's honesty to increase with their riches.", 'Money speaks, but it speaks with a male voice.', 'The way by which you may get money almost without exception leads downward.', 'There is a strange and mighty race of people called the Americans who are rapidly becoming the coldest in the world because of this cruel, man-eating idol, lucre.', 'You never suffer from a money problem, you always suffer from an idea problem.', 'His money is twice tainted: taint yours and taint mine.', "If you're going to lend money make sure somebody else is around. If you're going to give money make sure nobody else is around.", 'Money is like fire, an element as little troubled by moralizing as earth, air and water. Men can employ it as a tool or they can dance around it as if it were the incarnation of a god. Money votes socialist or monarchist, finds a profit in pornography or translations from the Bible, commissions Rembrandt and underwrites the technology of Auschwitz. It acquires its meaning from the uses to which it is put.', 'Rule No.1: Never lose money. Rule No.2: Never forget rule No.1.', "No man's credit is ever as good as his money.", 'Money is indeed the most important thing in the world; and all sound and successful personal and national morality should have this fact for its basis.', 'All riches have their origin in mind. Wealth is in ideas -- not money.', 'The money men make lives after them.', "Ready money is Aladdin's lamp.", 'If you have money, men think you are wise, handsome, and able to sing like a bird.', 'The love of money is the root of all evil.', 'There are people who have money and people who are rich.', 'The price we have to pay for money is sometimes liberty.', "Once upon a time only Washington's face was on our money, now Washington's hands are on it too.", 'Money often costs too much.', 'A miser grows rich by seeming poor. An extravagant man grows poor by seeming rich.', "Many of the things you can count, don't count. Many of the things you can't count, really count.", 'Taking it all in all, I find it is more trouble to watch after money than to get it.', 'Lack of money is the root of all evil.', "Money is a singular thing. It ranks with love as man's greatest source of joy. And with death as his greatest source of anxiety. Over all history it has oppressed nearly all people in one of two ways: either it has been abundant and very unreliable, or reliable and very scarce.", 'When I chased after money, I never had enough. When I got my life on purpose and focused on giving of myself and everything that arrived into my life, then I was prosperous.', 'Nowadays nothing but money counts: a fortune brings honors, friendships, the poor man everywhere lies low.', 'The covetous man never has money. The prodigal will have none shortly.', 'Money is good, love is wealth.', "Successful people make money. It's not that people who make money become successful, but that successful people attract money. They bring success to what they do.", "When a man says money can do anything, that settles it. He hasn't any.", 'It is only the poor who pay cash, and that not from virtue, but because they are refused credit.', 'Money was never a big motivation for me, except as a way to keep score. The real excitement is playing the game.', 'The want of money is the root of all evil.', "Money doesn't talk, it swears.", "Many people make the mistake of thinking that all the challenges in their lives would dissipate if they just had enough money. Nothing could be further from the truth. Earning more money, in and of itself, rarely frees people. It's equally ridiculous to tell yourself that greater financial freedom and mastery of your finances would not offer your greater opportunities to expand, share, and create value for yourself and others.", 'All social rules and all relations between individuals are eroded by a cash economy, avarice drags Pluto himself out of the bowels of the earth.', 'Money is the most important thing in the world. It represents health, strength, honor, generosity, and beauty as conspicuously as the want of it represents illness, weakness, disgrace, meanness, and ugliness.', 'When it is a question of money, everybody is of the same religion.', 'If you want to know what God thinks of money, look at the people he gives it to.', 'There is nothing so habit-forming as money.', 'A fool and her money are soon courted.', 'The lack of money is the root of all evils.', 'Money is like muck, not good except it be spread.', 'Money is better than poverty, if only for financial reasons.', 'The universal regard for money is the one hopeful fact in our civilization. Money is the most important thing in the world. It represents health, strength, honor, generosity and beauty. Not the least of its virtues is that it destroys base people as certainly as it fortifies and dignifies noble people.', 'Money is flat and meant to be piled up.', 'The world is his who has money to go over it.', 'Money is the representative of a certain quantity of corn or other commodity. It is so much warmth, so much bread.', "A nickel isn't worth a dime today.", 'Does he council you better who bids you, Money, by right means, if you can: but by any means, make money ?', 'I have imbibed such a love for money that I keep some sequins in a drawer to count, and cry over them once a week.', 'Those who are of the opinion that money will do everything may reasonably be expected to do everything for money.', 'Money is like a sixth sense without which you cannot make a complete use of the other five.', 'Cash-payment never was, or could except for a few years be, the union-bond of man to man. Cash never yet paid one man fully his deserts to another; nor could it, nor can it, now or henceforth to the end of the world.', 'I never attempt to make money on the stock market. I buy on the assumption that they could close the market the next day and not reopen it for five years.', 'Money is like an arm or leg -- use it or lose it.', "I don't care too much for money, money can't buy me love.", 'The chief value of money lies in the fact that one lives in a world in which it is overestimated.', "Money can't buy health, happiness, or what it did last year.", 'God gave me my money. I believe the power to make money is a gift from God . to be developed and used to the best of our ability for the good of mankind. Having been endowed with the gift I possess, I believe it is my duty to make money and still more money and to use the money I make for the good of my fellow man according to the dictates of my conscience.', 'Money cannot buy peace of mind. It cannot heal ruptured relationships, or build meaning into a life that has none.', 'When the strong box contains no more both friends and flatterers shun the door.', "You can be young without money but you can't be old without it.", 'Preoccupation with money is the great test of small natures, but only a small test of great ones.', 'Money has never made man happy, nor will it, there is nothing in its nature to produce happiness. The more of it one has the more one wants.', 'Money is like love; it kills slowly and painfully the one who withholds it, and enlivens the other who turns it on his fellow man.', 'Money never made a fool of anybody; it only shows them up.', 'Profits are an opinion, cash is a fact.', 'The buck stops here.', 'If you want him to mourn, you had best leave him nothing.', 'Money is always there but the pockets change.', 'Many people take no care of their money till they come nearly to the end of it, and others do just the same with their time.', 'He who gathers money little by little makes it grow. -- Proverbs 13:11', "The trick is to make sure you don't die waiting for prosperity to come.", 'Money may be the husk of many things, but not the kernel. It brings you food, but not appetite; medicine, but not health; acquaintances, but not friends; servants, but not faithfulness; days of joy, but not peace and happiness.', 'Money is not required to buy one necessity of the soul.', 'Money is the seed of money, and the first guinea is sometimes more difficult to acquire than the second million.', 'It is better that a man should tyrannize over his bank balance than over his fellow-citizens and whilst the former is sometimes denounced as being but a means to the latter, sometimes at least it is an alternative.', 'There is no intrinsic worth in money but what is alterable with the times, and whether a guinea goes for twenty pounds or for a shilling, it is the labor of the poor and not the high and low value that is set on gold or silver, which all the comforts of life must arise from.', 'Money talks and often just says, Good Bye.', 'Make all you can, save all you can, give all you can.', 'Money begets money.', 'Almost any man knows how to earn money, but not one in a million knows how to spend it.', 'Business, you know, may bring you money, but friendship hardly ever does.', 'Money is usually attracted, not pursued.', 'There are few ways in which a man can be more innocently employed than in getting money.', "God makes, and apparel shapes; but it's money that finishes the man.", "In any country where talent and virtue produce no advancement, money will be the national god. Its inhabitants will either have to possess money or make others believe that they do. Wealth will be the highest virtue, poverty the greatest vice. Those who have money will display it in every imaginable way. If their ostentation does not exceed their fortune, all will be well. But if their ostentation does exceed their fortune they will ruin themselves. In such a country, the greatest fortunes will vanish in the twinkling of an eye. Those who don't have money will ruin themselves with vain efforts to conceal their poverty. That is one kind of affluence: the outward sign of wealth for a small number, the mask of poverty for the majority, and a source of corruption for all.", 'A feast is made for laughter, and wine maketh merry: but money answereth all things. -- Ecclesiastes 10:19', 'Dollars! All their cares, hopes, joys, affections, virtues, and associations seemed to be melted down into dollars. Whatever the chance contributions that fell into the slow cauldron of their talk, they made the gruel thick and slab with dollars. Men were weighed by their dollars, measures were gauged by their dollars; life was auctioned, appraised, put up, and knocked down for its dollars. The next respectable thing to dollars was any venture having their attainment for its end. The more of that worthless ballast, honor and fair-dealing, which any man cast overboard from the ship of his Good Nature and Good Intent, the more ample stowage-room he had for dollars. Make commerce one huge lie and mighty theft. Deface the banner of the nation for an idle rag; pollute it star by star; and cut out stripe by stripe as from the arm of a degraded soldier. Do anything for dollars! What is a flag to them!', "Many folks think they aren't good at earning money, when what they don't know is how to use it.", 'Be not penny-wise. Riches have wings. Sometimes they fly away of themselves, and sometimes they must be set flying to bring in more.', "If you can actually count your money, then you're not a rich man.", 'Why is there so much month left at the end of the money?', 'But it is a pretty thing to see what money will do!', 'However toplofty and idealistic a man may be, he can always rationalize his right to earn money.', "The poor man's budget is full of schemes.", 'When you have too much month for you paycheck, then what you need to do is realize that there is abundance all around you and focus on the abundance and not your lack and as night follows day abundance will come to you.', 'When money is taken freedom is forsaken.', 'A wise person should have money in their head, but not in their heart.', 'The most valuable of all human possessions, next to a superior and disdainful air, is the reputation of being well-to-do.', 'A single idea -- the sudden flash of a thought -- may be worth a million dollars.', "The more you learn to live without, the more you'll have to live with.", "It doesn't matter whether you are rich or poor -- as long as you've got money.", "It's important to me that money not be important to me.", 'Money will buy a bed but not sleep; books but not brains; food but not appetite; finery but not beauty; a house but not a home; medicine but not health; luxuries but not culture; amusements but not happiness; religion but not salvation; a passport to everywhere but heaven.', "When asked what would he do if he found $1 million, Yogi responded, If the guy was poor, I'd give it back.", 'It is a kind of spiritual snobbery that makes people think they can be happy without money.', "I don't like money actually, but it quiets the nerves.", 'The safest way to double your money is to fold over once and put it in your pocket.', "Money, it turned out, was exactly like sex, you thought of nothing else if you didn't have it and thought of other things if you did.", 'Ideas are the beginning points of all fortunes.', 'Where gold speaks every tongue is silent.', "Modern man is frantically trying to earn enough to buy things he's too busy to enjoy.", 'If money be not they servant, it will be thy master. The covetous man cannot so properly be said to possess wealth, as that may be said to possess him.', 'Getting money is like digging with a needle, spending it is like water soaking into sand.', 'you must get money to chase you, but never let it catch up.', 'Economy is half the battle of life. It is not so hard to earn money as to spend it well.', "Money doesn't always bring happiness. A man with ten million dollars is no happier than a man with nine million dollars.", "I haven't got as much money as some folks, but I've got as much impudence as any of them, and that's the next thing to money.", 'Money is like manure. You have to spread it around or it smells.', 'Money is truthful. If a man speaks of honor, make him pay cash.', 'Our income are like our shoes; if too small, they gall and pinch us; but if too large, they cause us to stumble and trip.', 'If you make money your god, it will plague you like the devil.', "But money, wife, is the true Fuller's Earth for reputations, there is not a spot or a stain but what it can take out.", 'A great fortune is a great slavery.', 'Money is the sinews of love, as of war.', 'The love of money grows as the money itself grows.', "No man's fortune can be an end worthy of his being.", 'Money will say more in one moment than the most eloquent lover can in years.', "I'm tired of love; I'm still more tired of rhyme; but money gives me pleasure all the time.", "There's only one thing money won't buy, and that is poverty.", 'He that is of the opinion money will do everything may well be suspected of doing everything for money.', 'A rich man is nothing but a poor man with money.', 'Never underestimate the value of cold cash.', 'Whatever you have spend less.', "If you know how to spend less than you get, you have the philosopher's stone.", "When someone says it ain't the money, but its the principal of the thing, it's the money.", 'More gold has been mined from the thoughts of men than has been taken from the earth.', 'We all need money, but there are degrees of desperation.', 'Comparatively few people know what a million dollars actually is. To the majority it is a gaseous concept, swelling or decreasing as the occasion suggests. In the minds of politicians, perhaps more than anywhere, the notion of a million dollars has this accordion-like ability to expand or contract; if they are disposing of it, the million is a pleasing sum, reflecting warmly upon themselves; if somebody else wants it, it becomes a figure of inordinate size, not to be compassed by the rational mind.', "Don't ever let economic alone determine your career or how you spend the majority of your time.", 'The day, water, sun, moon, night -- I do not have to purchase these things with money.', 'The highest use of capital is not to make more money, but to make money do to more for the betterment of life.', "I know of nothing more despicable and pathetic than a man who devotes all the hours of the waking day to the making of money for money's sake.", 'When I was young I used to think that money was the most important thing in life; now that I am old, I know it is.', 'Money, which represents the prose of life, and which is hardly spoken of in parlors without an apology, is, in its effects and laws, as beautiful as roses.', 'Sex can be dismissed as hormonal or emotional and be genuinely regretted. Money is always a calculated decision.', 'If a person gets his attitude toward money straight, it will help straighten out almost every other area in his life.', 'Money is human happiness in the abstract: he, then, who is no longer capable of enjoying human happiness in the concrete devotes his heart entirely to money.', 'Take a dollar from a thousand and it will be a thousand no more.', 'God shows his contempt for wealth by the kind of person he selects to receive it.', 'Good management is better than good income.', 'Part of your heritage in this society is the opportunity to become financially independent.', "Money can't buy happiness; it can, however, rent it.", 'Money makes a good servant, but a bad master.'}
            Answers = 183, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 183, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 75 / 333: {
          [('Main', '==', 'm.04_x4', ['cvg.computer_game_subject.games'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:cvg.computer_game_subject.games ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:cvg.computer_game_subject.games ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'Evoke'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 76 / 333: {
          [('Main', '==', 'm.04_x4', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'97% Owned'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 77 / 333: {
          [('Main', '==', 'm.04_x4', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.04_x4 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 37
            Final Answer: {'The Case for Gold', 'Economics of a pure gold standard', 'Money, language, and thought', 'The Economy of Literature', 'The creature from Jekyll Island', 'Millionaire Republican', 'Money and European Union', 'False Hopes', 'Indian Currency and Finance', 'How to Get Fabulously Rich', 'Money Makes the World Go Around: One Investor Tracks Her Cash through the Global Economy, from Brooklyn to Bangkok and Back', 'Devil May Care', 'Eat the Rich: A Treatise on Economics', 'Monetary Policy', 'Money Madness', 'The Wall Street Journal: Complete Money and Investing Guidebook', 'Fiat Money Inflation in France', "Money and Magic: A Critique of the Modern Economy in the Light of Goethe's Faust", 'Some Thoughts Concerning Education', 'The General Theory of Employment, Interest and Money', 'Double Fudge', 'The Millionaires: A Novel of the New South', 'Gold, Peace, and Prosperity', 'Money, and the Law of Attraction', 'The Money Men', 'The 21 Success Secrets of Self-Made Millionaires', 'The Rules of Money', 'A Tract on Monetary Reform', 'Confidence games', 'Bunny money', 'The Case Against the Fed', 'Greenback: The Almighty Dollar and the Invention of America', 'Money: Whence It Came, Where It Went', 'Bailouts or Bail-Ins', 'The Passion-Driven Writer and the Digital-Age Literary Marketplace', 'The Ascent of Money: A Financial History of the World', 'A history of American currency'}
            Answers = 37, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 37, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 78 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 59
            Final Answer: {'Alberto Gilardino', 'Manolo Gabbiadini', 'Daniele De Rossi', 'Luca Cigarini', 'Fabio Borini', 'Davide Astori', 'Giorgio Chiellini', 'Francesco Acerbi', 'Antonio Candreva', 'Diego Fabbrini', 'Christian Maggio', 'Salvatore Bocchetti', 'Mattia De Sciglio', 'Marco Verratti', 'Andrea Pirlo', 'Stephan El Shaarawy', 'Giampaolo Pazzini', 'Claudio Marchisio', 'Luca Antonelli', 'Franco Brienza', 'Alberigo Evani', 'Antonio Cassano', 'Mattia Cassani', 'Domenico Criscito', 'Gianfranco Zola', 'Ezequiel Schelotto', 'Davide Santon', 'Leonardo Bonucci', 'Antonio Nocerino', 'Paolo Maldini', 'Angelo Ogbonna', 'Andrea Barzagli', 'Emanuele Giaccherini', 'Thiago Motta', 'Sebastian Giovinco', 'Roberto Di Matteo', 'Pablo Daniel Osvaldo', 'Riccardo Montolivo', 'Mattia Destro', 'Federico Peluso', 'Emiliano Viviano', 'Morgan De Sanctis', 'Alberto Aquilani', 'Alessio Cerci', 'Mario Barwuah Balotelli', 'Federico Balzaretti', 'Salvatore Sirigu', 'Antonio Di Natale', 'Gianluigi Buffon', 'Alessandro Matri', 'Alessandro Florenzi', 'Amauri', 'Alessandro Nesta', 'Lorenzo Insigne', 'Fabio Capello', 'Alessandro Diamanti', 'Ignazio Abate', 'Andrea Poli', 'Andrea Ranocchia'}
            Answers = 59, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 59, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 79 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 80 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 18
            Final Answer: {'2009', '1994', '2011', '2005', '1996', '1991', '1997', '2007', '2008', '2003', '1972', '1988', '2012', '2004', '2002', '2006', '2013', '2010'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 81 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played ?o2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.matches_played ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 14
            Final Answer: {'13', '29', '63', '51', '99', '3', '70', '38', '17', '130', '91', '25', '2', '35'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 82 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.players ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 23
            Final Answer: {'Federico Marchetti', 'Alberto Gilardino', 'Daniele De Rossi', 'Giorgio Chiellini', 'Christian Maggio', 'Salvatore Bocchetti', 'Andrea Pirlo', 'Giampaolo Pazzini', 'Claudio Marchisio', 'Gennaro Gattuso', 'Domenico Criscito', 'Leonardo Bonucci', 'Vincenzo Iaquinta', 'Riccardo Montolivo', 'Gianluca Zambrotta', 'Morgan De Sanctis', 'Fabio Cannavaro', 'Antonio Di Natale', 'Gianluigi Buffon', 'Mauro Camoranesi', 'Fabio Quagliarella', 'Simone Pepe', 'Angelo Palombo'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 83 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.national_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.national_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.national_team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 84 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.competitor_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.competitor_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.competitor_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 85 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.rank ?o2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 2
            Final Answer: {'1', '2'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 86 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.tournaments.tournament_competitor.matches', 'base.tournaments.match_competitor_relationship.match'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.matches ?o1 . ?o1 fb:base.tournaments.match_competitor_relationship.match ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.matches ?o1 . ?o1 fb:base.tournaments.match_competitor_relationship.match ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 7
            Final Answer: {'2006 FIFA World Cup Final', '2010 FIFA World Cup Group F - ITA ./. NZL', '2010 FIFA World Cup Group F - ITA ./. PAR', 'UEFA Euro 2012 Final', 'UEFA Euro 2012 Semi-final II', 'UEFA Euro 2012 Quarter-final IV', '2010 FIFA World Cup Group F - SVK ./. ITA'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 87 / 333: {
          [('Main', '==', 'm.01_lhg', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 88 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 9
            Final Answer: {'1994', '2005', '1997', '1998', '1978', '2002', '2006', '2013', '2010'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 89 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 90 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored ?o2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.goals_scored ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 7
            Final Answer: {'5', '16', '3', '8', '1', '9', '2'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 91 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.national_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.national_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.national_team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 92 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.world_cup'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.world_cup ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.world_cup ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'2010 FIFA World Cup'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 93 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_as'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_as ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_as ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Group/Round Winner'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.038s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.038s]
        Checking schema 94 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.last_round_played'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.last_round_played ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.last_round_played ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 2
            Final Answer: {'UEFA Euro 2012 Final', '2010 FIFA World Cup - Group Stage'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 95 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 96 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.tournaments.tournament_competitor.matches', 'base.tournaments.match_competitor_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.matches ?o1 . ?o1 fb:base.tournaments.match_competitor_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.matches ?o1 . ?o1 fb:base.tournaments.match_competitor_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 97 / 333: {
          [('Main', '==', 'm.01_lhg', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.from ?o2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'2010'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 98 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 4
            Final Answer: {'Goalkeeper', 'Midfielder', 'Forward', 'Defender'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 99 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 4
            Final Answer: {'Goalkeeper', 'Midfielder', 'Forward', 'Defender'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Current: 100 / 333
        Checking schema 100 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad', 'base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_squad.current_world_cup_squad ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.current_world_cup_squad.current_club ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 9
            Final Answer: {'U.C. Sampdoria', 'A.C. Milan', 'Juventus F.C.', 'A.S. Roma', 'ACF Fiorentina', 'S.S.C. Napoli', 'Genoa C.F.C.', 'Cagliari Calcio', 'Udinese Calcio'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 101 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on ?o2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'2009'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 102 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup', 'base.x2010fifaworldcupsouthafrica.world_cup_team.qualification_group'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualification_group ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:19:59] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.x2010fifaworldcupsouthafrica.world_cup_participation.world_cup ?o1 . ?o1 fb:base.x2010fifaworldcupsouthafrica.world_cup_team.qualification_group ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'2010 FIFA World Cup qualification – UEFA Group 8'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 103 / 333: {
          [('Main', '==', 'm.01_lhg', ['base.tournaments.tournament_competitor.tournaments', 'base.tournaments.tournament_participating_competitor.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:base.tournaments.tournament_competitor.tournaments ?o1 . ?o1 fb:base.tournaments.tournament_participating_competitor.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 3
            Final Answer: {'2010 FIFA World Cup', '2006 FIFA World Cup', 'UEFA Euro 2012'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 104 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 2
            Final Answer: {'UEFA', 'Italian Football Federation'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 105 / 333: {
          [('Main', '==', 'm.01_lhg', ['soccer.football_team.manager', 'soccer.football_team_management_tenure.manager'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.manager ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:soccer.football_team.manager ?o1 . ?o1 fb:soccer.football_team_management_tenure.manager ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Cesare Prandelli'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 106 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.tournament_event_competitor.country', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.tournament_event_competitor.country ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.tournament_event_competitor.country ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 107 / 333: {
          [('Main', '==', 'm.01_lhg', ['sports.tournament_event_competitor.country', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.tournament_event_competitor.country ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:sports.tournament_event_competitor.country ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'Italy national football team'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 108 / 333: {
          [('Main', '==', 'm.01_lhg', ['user.jeff.default_domain.football_tournament_participating_team.tournament_results', 'user.jeff.default_domain.football_tournament_match_statistics.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'2006 FIFA World Cup'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 109 / 333: {
          [('Main', '==', 'm.01_lhg', ['user.jeff.default_domain.football_tournament_participating_team.tournament_results', 'user.jeff.default_domain.football_tournament_match_statistics.number_of_matches_won'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.number_of_matches_won ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.number_of_matches_won ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'6'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 110 / 333: {
          [('Main', '==', 'm.01_lhg', ['user.jeff.default_domain.football_tournament_participating_team.tournament_results', 'user.jeff.default_domain.football_tournament_match_statistics.number_of_goals_scored'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.number_of_goals_scored ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.number_of_goals_scored ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'12'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 111 / 333: {
          [('Main', '==', 'm.01_lhg', ['user.jeff.default_domain.football_tournament_participating_team.tournament_results', 'user.jeff.default_domain.football_tournament_match_statistics.number_of_goals_against'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.number_of_goals_against ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.01_lhg fb:user.jeff.default_domain.football_tournament_participating_team.tournament_results ?o1 . ?o1 fb:user.jeff.default_domain.football_tournament_match_statistics.number_of_goals_against ?o2 . }|None|||None||None
            Forbidden mid: {'m.01_lhg'}
            Query return lines = 1
            Final Answer: {'2'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.053s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.053s]
        Checking schema 112 / 333: {
          [('Main', '==', 'm.01q7l', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01q7l'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 113 / 333: {
          [('Main', '==', 'm.01q7l', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01q7l fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01q7l'}
            Query return lines = 1
            Final Answer: {'Currency'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 114 / 333: {
          [('Main', '==', 'm.02h2_g', ['military.military_conflict.combatants', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 1
            Final Answer: {'Italian Campaign'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 115 / 333: {
          [('Main', '==', 'm.02h2_g', ['military.military_conflict.combatants', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.combatants ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 5
            Final Answer: {'Kingdom of Italy', 'British Raj', 'Union of South Africa', 'Poland', 'Nazi Germany'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 116 / 333: {
          [('Main', '==', 'm.02h2_g', ['military.military_conflict.commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 1
            Final Answer: {'Italian Campaign'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 117 / 333: {
          [('Main', '==', 'm.02h2_g', ['military.military_conflict.commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02h2_g fb:military.military_conflict.commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02h2_g'}
            Query return lines = 5
            Final Answer: {'Harold Alexander, 1st Earl Alexander of Tunis', 'Benito Mussolini', 'Dwight D. Eisenhower', 'Albert Kesselring', 'Rodolfo Graziani'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 118 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'57157406', '58607043', '56671781', '57604658', '52519000', '56843400', '54751406', '56906744', '60483385', '50536350', '55955411', '56564074', '50199700', '56977217', '59832179', '56942108', '53537950', '56596155', '56501675', '56155143', '59375289', '52900500', '56629288', '53235750', '51252000', '51675350', '56593071', '56860281', '60723603', '54073490', '56797087', '56890372', '56719240', '56831821', '52112350', '56844303', '56601931', '56758521', '50879450', '56433883', '58175310', '56543548', '56576718', '55110868', '56916317', '60192698', '56317749', '55441001', '58941499', '55718260', '54381345', '53821850'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 119 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 20
            Final Answer: {'506000', '454300', '473000', '440000', '471100', '450000', '445000', '554100', '436000', '471000', '585000', '359378', '580900', '482600', '503100', '367550', '326939', '521200', '385100', '493000'}
            Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 20, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 120 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1.69084e+11', '2.11115e+12', '1.73552e+12', '1.1237e+12', '1.19865e+12', '1.10401e+12', '1.13177e+12', '8.79422e+10', '1.02607e+12', '6.79782e+10', '1.39956e+11', '8.94752e+11', '2.04364e+12', '7.36549e+10', '1.92278e+11', '9.70851e+10', '1.20818e+12', '2.12718e+12', '1.05908e+12', '1.87298e+12', '4.11671e+11', '6.31754e+10', '7.76293e+11', '5.77107e+10', '4.35705e+11', '4.21899e+11', '1.2012e+11', '2.16512e+11', '1.26635e+12', '1.13341e+12', '4.14976e+11', '3.79302e+11', '2.19475e+12', '3.03554e+11', '2.4819e+11', '5.03839e+10', '4.26865e+11', '4.03853e+10', '1.5145e+12', '4.48428e+10', '2.30731e+12', '1.27196e+12', '1.78628e+12', '1.22458e+12', '1.22518e+12', '8.59052e+11', '8.11331e+10', '6.17003e+11', '4.5983e+11', '1.19526e+12', '2.19382e+11', '1.09255e+11'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 121 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 57
            Final Answer: {'32420', '33010', '1074', '32070', '2710', '1011', '2160', '32100', '2163', '1210', '1727', '1650', '1878', '1977', '2829', '2089', '1818', '31960', '1010', '1899', '2556', '2365', '2743', '1342', '32040', '1431', '1905', '1344', '2366', '1212', '2250', '31750', '1542', '1871', '2083', '1983', '1733', '1811', '2708', '1648', '1540', '1132', '2254', '1282', '2676', '1429', '1280', '9240', '30450', '9250', '1075', '30490', '1131', '2709', '32710', '2422', '32020'}
            Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 122 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 60
            Final Answer: {'1.59588e+12', '5.21923e+11', '9.3368e+11', '1.12371e+12', '1.93294e+12', '6.39458e+11', '7.24494e+11', '7.60815e+11', '1.96888e+12', '1.54422e+12', '1.22843e+12', '1.97494e+12', '1.54366e+12', '1.07903e+12', '1.79717e+12', '1.06271e+12', '1.23011e+12', '1.34666e+12', '1.92041e+12', '6.07184e+11', '6.84752e+11', '1.98773e+12', '5.71319e+11', '1.52946e+12', '1.90128e+12', '6.08003e+11', '1.9023e+12', '8.72085e+11', '1.79481e+12', '7.25471e+11', '1.1842e+12', '8.09796e+11', '1.65788e+12', '8.08705e+11', '9.79681e+11', '9.83049e+11', '1.93025e+12', '1.03203e+12', '8.73261e+11', '1.08255e+12', '6.40321e+11', '1.27991e+12', '1.28223e+12', '1.45535e+12', '5.70549e+11', '1.12729e+12', '1.0281e+12', '1.34561e+12', '6.85676e+11', '1.37879e+12', '1.18751e+12', '1.06644e+12', '1.93226e+12', '9.34939e+11', '5.2122e+11', '1.56063e+12', '1.45558e+12', '1.59586e+12', '1.56003e+12', '7.59791e+11'}
            Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 123 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 53
            Final Answer: {'6735.04', '2151', '1402', '31000', '1805', '1991', '2221', '3885.83', '2006', '2029', '4435.5', '1126', '3957.03', '2122', '2239', '7698.91', '3088.21', '1371', '804.49', '2115', '1863', '2143', '1222', '7457.11', '990.26', '33786.6', '5405.63', '1938', '35826', '2573', '2227', '30478.8', '1090', '1972', '7280.6', '1651', '7546.57', '2106', '3488.92', '8148.12', '7344.49', '31777', '887.34', '2983', '1304', '2629', '1516', '38563.1', '1813', '1533', '36130.4', '35073.2', '1578'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.048s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.048s]
        Checking schema 124 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 8
            Final Answer: {'2.18', '0.83', '1.31', '0.86', '1.69', '1.63', '1.49', '0.93'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 125 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'74.354', '78.014', '70.926', '75.811', '69.248', '76.225', '72.992', '80.58', '77.51', '77.75', '81.285', '71.807', '70.312', '72.026', '81.385', '69.15', '79.932', '76.878', '73.365', '79.427', '75.495', '76.859', '80.729', '74.003', '82.088', '72.647', '74.64', '78.332', '73.943', '75.39', '74.815', '78.827', '71.559', '76.406', '70.957', '70.172', '73.693', '72.734', '78.427', '77.238', '72.075', '78.629', '76.805', '70.812', '70.78', '81.132', '79.978', '81.737', '79.829', '69.124', '69.76'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 126 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 44
            Final Answer: {'1.42', '1.52', '2.535', '2.425', '1.28', '2.407', '1.617', '1.29', '2.331', '2.508', '1.37', '1.41', '2.406', '1.87', '2.339', '1.21', '2.547', '2.625', '1.462', '1.4', '1.33', '1.592', '2.463', '2.665', '1.975', '1.32', '2.411', '1.64', '2.493', '1.3', '1.27', '1.39', '1.35', '1.34', '1.22', '2.108', '1.23', '1.25', '1.762', '1.18', '2.359', '2.701', '1.26', '2.208'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 127 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 50
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '2002', '1979', '2005', '1995', '1961', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '1973', '1981', '1965', '2004'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 128 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.measurement_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.measurement_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '1979', '2002', '2005', '1995', '1961', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '1973', '1981', '1965', '2004', '2010'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 129 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 30
            Final Answer: {'British airborne operations in North Africa', 'Gulf War air campaign', 'Operation Compass', 'Allied invasion of Italy', 'Iraqi no-fly zones', 'Middle East Theatre of World War II', 'War in Afghanistan (2001–present)', 'Occupation of Constantinople', 'Action of 27 February 1941', 'Operation Unified Protector', 'NATO bombing of Yugoslavia', 'Battle of Santander', 'Battle of Bardia', 'Action of 14 February 1944', 'Battle of Beirut', 'World War I', 'Battle of Benevento', 'Operation Gothic Serpent', 'Battle of Guadalajara', 'Battle of Mogadishu', 'Battle of Ponta Delgada', 'Operation Shingle', 'Battle of Rimini', 'War on Terrorism', 'Operation Airone', 'Battle of Sirmium', 'Second Battle of the Marne', 'Battle of Košare', 'Operation Active Endeavour', 'Battle of Bilbao'}
            Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 30, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 130 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 6
            Final Answer: {'Australia', 'United States of America', 'France', 'Russia', 'United Kingdom'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 131 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '2002', '1979', '2005', '1995', '1961', '1994', '1985', '1993', '1989', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 132 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '2008', '2007', '1990', '2002', '2005', '1995', '1994', '1985', '1993', '1989', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 133 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 134 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 135 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 136 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 137 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 138 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Gross Domestic Product'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 139 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'GNI per capita in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'GNI per capita in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 140 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Gross National Income in PPP dollars, World Development Indicators and Global Development Finance, World Bank', 'Gross National Income in PPP dollars, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 141 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'GDP per capita (current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 142 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Pump price for fuel, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 143 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'GDP growth rate, World Development Indicators, World Bank', 'World Bank, World Development Indicators, GDP Growth Rate'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 144 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Part time employment, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 145 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'High-technology exports (% of manufactured exports), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 146 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Military expenditure as percentage of GDP, World Development Indicators and Global Development Finance, World Bank', 'Military expenditure as percentage of GDP, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 147 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Long-term unemployment, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 148 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Merchandise trade (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 149 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Interest rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 150 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'GDP production (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 151 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'GDP expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 152 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Government debt as percent of GDP, Government Debt in Europe, Eurostat', 'Eurostat, Government Debt, Government Debt as Percentage of GDP'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 153 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Broadband penetration rate, Broadband penetration in Europe, Eurostat'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 154 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Prevalence of undernourishment (% of population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 155 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Labor participation rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 156 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Emigration rate of tertiary educated (% of total tertiary educated population), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 157 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Literacy rate, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 158 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '1979', '2002', '2005', '1961', '1995', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 159 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }
          [2020-12-03 14:20:00] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '2002', '1979', '1961', '1995', '2005', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '1981', '1973', '1965', '2004', '2010'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 160 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 65
            Final Answer: {'7.47866', '7.67826', '5.51339', '4.68661', '6.38859', '2.8785', '7.86048', '3.2151', '6.89248', '7.49754', '6.57562', '7.94463', '3.6415', '6.47144', '7.66311', '4.07944', '5.76232', '7.77666', '7.2586', '7.5324', '7.32044', '6.69042', '7.73682', '6.88301', '6.49825', '7.62169', '8.07719', '7.62291', '5.04331', '6.17432', '7.69863', '8.13041', '7.87011', '7.44707', '6.36535', '6.53799', '6.04932', '6.77841', '7.43945', '2.46456', '8.0434', '6.64649', '6.52151', '7.64598', '7.76274', '6.59232', '6.4749', '7.83527', '8.08746', '3.40505', '7.71747', '7.47702', '7.25086', '7.59887', '6.65921', '8.12661', '4.43148', '7.55233', '7.43739', '7.84621', '7.76634', '6.88', '2.17844', '7.97698', '7.53743'}
            Answers = 65, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 65, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 161 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '2002', '1979', '1961', '1995', '2005', '1994', '1985', '1989', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 162 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Energy use per capita, World Development Indicators, World Bank', 'Energy use per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 163 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 164 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 165 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Population'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 166 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.size_of_armed_forces', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.size_of_armed_forces ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Armed forces personnel, total, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 167 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '2002', '1979', '2005', '1961', '1995', '1994', '1985', '1989', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 168 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 32
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '1990', '2007', '2008', '1988', '2002', '2005', '1995', '1994', '1985', '1993', '1989', '1999', '2003', '1986', '1998', '2000', '1983', '1980', '2011', '1981', '2004', '2010'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 169 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 32
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '2008', '2007', '1990', '1988', '2002', '2005', '1995', '1994', '1989', '1993', '1985', '1999', '2003', '1986', '1998', '2000', '1983', '1980', '2011', '1981', '2004', '2010'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 170 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '1979', '2002', '2005', '1961', '1995', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 171 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 9
            Final Answer: {'2008', '1998', '2012', '2002', '2000', '2004', '2006', '2010', '1995'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 172 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 56
            Final Answer: {'3.43002', '1.86601', '2.15102', '-2.09016', '5.98479', '2.85997', '7.12538', '-0.852806', '1.44816', '0.844228', '0.834275', '2.5605', '1.8114', '8.20725', '6.20365', '5.95916', '3.19196', '0.451436', '0.931267', '2.7977', '6.54455', '7.12586', '0.43108', '1.80445', '3.22585', '-5.49441', '0.413586', '2.05258', '6.09806', '5.60973', '1.73066', '2.88684', '1.98578', '0.43588', '5.50014', '2.19892', '1.86263', '0.772944', '1.53373', '5.3105', '4.19438', '2.79809', '3.38838', '1.1692', '3.69049', '1.45109', '1.81811', '7.17861', '-1.15623', '3.26802', '1.68306', '1.13468', '-0.046578', '3.6536', '1.53845', '3.24014'}
            Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 173 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'15.2', '12.2', '10.5', '10', '15.9', '8', '11.7', '8.1', '16.7', '15.8', '7.8', '14.7', '7.9', '8.5', '11.3', '11.2', '8.6', '9', '14.6', '11.6', '16.3', '15', '11.8', '8.9'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 174 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 23
            Final Answer: {'8.09', '9.56', '7.36', '7.61', '8.04', '8.2', '7.47', '9.48', '8.58', '7.9', '8.55', '7.33', '7.98', '9.19', '7.79', '8.28', '8.13', '7.24', '8.38', '7.21', '6.26', '8.03', '6.4'}
            Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 23, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 175 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 28
            Final Answer: {'1.7119', '1.85105', '1.56819', '1.96576', '2.28416', '2.03602', '1.92267', '1.95837', '1.81471', '2.00446', '1.99687', '1.89569', '1.96566', '1.9612', '2.02678', '1.78369', '1.98844', '1.69058', '1.91716', '2.02997', '1.78752', '1.56763', '2.0623', '1.87687', '1.72734', '1.72725', '2.22721', '2.05381'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.033s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 176 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 27
            Final Answer: {'48.5', '57.1', '57.2', '47.7', '68', '48', '63.8', '44.1', '60.8', '66.2', '58.9', '68.6', '48.3', '66.3', '62.9', '46.8', '45.1', '69.3', '67', '65.1', '51.3', '57.5', '59.1', '65.6', '60.6', '57.7', '69.7'}
            Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 27, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 177 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'25.87', '47.88', '38.89', '45.72', '24.92', '37.76', '21.91', '38.86', '35.77', '36.37', '25.79', '40.93', '37.59', '28.82', '39.14', '27.1', '30.93', '33.51', '20.78', '45.89', '37.63', '42.78', '31.86', '37.86', '20.97', '34.04', '32.81', '37.09', '38.94', '23.28', '21.31', '22.84', '41.29', '39.58', '20.92', '39.41', '21.44', '31.22', '37.21', '37.73', '49.26', '29.33', '47.55', '37.49', '43.41', '29.59', '40.86', '42.43', '31.01', '22.58', '37.91', '30.95'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 178 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 26
            Final Answer: {'1.61', '11', '1.84', '12.7', '0.95', '3.16', '1.96', '6.45', '6.2', '1.43', '4.83', '15.28', '6.8', '6.49', '6.64', '14.31', '7.79', '6.93', '7.01', '10.59', '10.82', '11.75', '7.11', '6.69', '8.89', '12.91'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 179 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 39
            Final Answer: {'2.51', '3.29', '8.09', '3.56', '2.19', '3.07', '7.48', '6.34', '6.74', '3.44', '5.38', '4.67', '2.11', '4.3', '3', '7.6', '2.66', '4.48', '3.77', '3.88', '8.34', '8.75', '2.05', '6.64', '4.97', '2.78', '3.31', '3.28', '5.47', '7.01', '3.48', '2.01', '1.89', '7.23', '6.02', '5.62', '2.52', '2.55', '3.18'}
            Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 180 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 50
            Final Answer: {'3.92', '-3.89', '3.84', '-1.95', '0.81', '0.86', '1.97', '0.22', '1.69', '0.52', '3.19', '0.7', '0.95', '4.72', '-2', '-0.06', '3.22', '2.16', '-1.29', '-1.12', '1.92', '-1.48', '0.44', '-0.4', '0.94', '1.01', '-0.53', '-1.91', '1.32', '1.38', '0.1', '-2.18', '3.45', '-0.42', '1.3', '1.13', '-0.25', '0.54', '-2.68', '0.26', '-0.83', '0.23', '-0.07', '0.96', '0.07', '0.09', '0', '-0.37', '2.2', '-0.82'}
            Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 50, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 181 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 28
            Final Answer: {'105.1', '114.2', '113.1', '103.7', '117.5', '108.3', '103.4', '105.4', '104.1', '116.4', '127', '105.7', '120.7', '108.5', '103.9', '108.2', '108.6', '106.3', '103.3', '113', '119.3', '114.3', '120.9', '120.8', '119.2', '117.4', '106.1', '120.2'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 182 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'14.4', '3.8', '18.1', '15.9', '1', '11.7', '2.8', '6.7', '8.1', '4.8', '21.9', '21.3', '17.1', '20.5', '6.1', '1.7', '1.3', '18.8', '13.1', '19.8', '9.5'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 183 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'5'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 184 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'36.22', '40.24', '39.25', '40.34', '40', '39.03', '36.38', '37.85', '36.93', '40.33', '36.61', '36.73', '37.3', '40.25', '39.98', '39.44', '38.45', '40.11', '38.66', '37.53', '39.94'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 185 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'9.68', '11.59'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 186 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'98.93', '98.42', '96.46'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 187 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '1979', '2002', '2005', '1961', '1995', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 188 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.part_time_employment_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.part_time_employment_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 29
            Final Answer: {'2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '1990', '2008', '2007', '1988', '2002', '2005', '1995', '1994', '1989', '1985', '1993', '1999', '2003', '1986', '1998', '2000', '1983', '2011', '2004', '2010'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 189 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.high_tech_as_percent_of_manufactured_exports', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.high_tech_as_percent_of_manufactured_exports ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '1990', '2007', '2008', '1988', '2002', '2005', '1995', '1994', '1989', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 190 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.military_expenditure_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.military_expenditure_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '2008', '2007', '1990', '1988', '2002', '2005', '1995', '1994', '1989', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 191 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.long_term_unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.long_term_unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 29
            Final Answer: {'2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '2008', '2007', '1990', '1988', '2002', '2005', '1995', '1994', '1985', '1989', '1993', '1999', '2003', '1986', '1998', '2000', '1983', '2011', '2004', '2010'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 192 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.merchandise_trade_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.merchandise_trade_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '1979', '2002', '2005', '1961', '1995', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 193 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.deposit_interest_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.deposit_interest_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 26
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '1987', '1996', '1990', '1988', '2002', '1979', '1995', '1994', '1985', '1993', '1989', '1999', '2003', '1986', '1998', '1978', '2000', '1983', '1980', '1981'}
            Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 26, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 194 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.agriculture_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.agriculture_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 41
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1976', '1987', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '1979', '2002', '2005', '1995', '1994', '1985', '1989', '1993', '1974', '1999', '2003', '1986', '1998', '1978', '1972', '2000', '1983', '1971', '1975', '1980', '1973', '1981', '2004', '2010'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 195 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.trade_balance_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.trade_balance_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '1979', '2002', '2005', '1961', '1995', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 196 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.government_debt_percent_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.government_debt_percent_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 18
            Final Answer: {'2009', '2011', '1996', '2001', '2008', '1999', '1997', '2007', '2003', '1998', '2010', '2012', '2002', '2000', '2004', '2006', '2005', '1995'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 197 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.broadband_penetration_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.broadband_penetration_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 21
            Final Answer: {'2009', '2011', '2008', '2007', '2003', '2010', '2004', '2002', '2006', '2005'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 198 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.prevalence_of_undernourisment', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.prevalence_of_undernourisment ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'2011', '1991', '2008', '2000', '2005'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 199 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.labor_participation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.labor_participation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 22
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '2008', '2007', '1990', '2002', '2005', '1995', '1994', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Current: 200 / 333
        Checking schema 200 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.brain_drain_percent', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.brain_drain_percent ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'1990', '2000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 201 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.literacy_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.literacy_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'1981', '2010', '2001'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 202 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.life_expectancy', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.life_expectancy ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Life expectancy, World Development Indicators, World Bank', 'World Bank, World Development Indicators, Life Expectancy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 203 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.fertility_rate', 'measurement_unit.dated_float.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.fertility_rate ?o1 . ?o1 fb:measurement_unit.dated_float.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'World Bank, World Development Indicators, Fertility Rate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 204 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.co2_emissions_per_capita', 'measurement_unit.dated_metric_ton.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.co2_emissions_per_capita ?o1 . ?o1 fb:measurement_unit.dated_metric_ton.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'CO2 emissions per capita, World Development Indicators, World Bank', 'CO2 emissions per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 205 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.energy_use_per_capita', 'measurement_unit.dated_kgoe.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.energy_use_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kgoe.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 57
            Final Answer: {'2799', '2340', '2942', '2627', '2796', '3128.31', '2645', '1949', '2738', '1221', '794.821', '2583', '2813', '3024.8', '2311', '2611', '3114.73', '2265', '1832', '3016.32', '3084.93', '2566', '2212', '2719', '2026', '2204', '1316', '2264', '2735', '2814', '3137.39', '3021.25', '2834', '1431', '2957', '2203', '3089.51', '1119', '2941', '2912', '2462', '2106', '2407', '1007', '2318', '1551', '1698', '2050', '2253', '890.68', '2284', '2175', '3012.22', '2247', '3016.17', '2206', '2578'}
            Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 57, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 206 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 207 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjusted_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjusted_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'3.16096e+11', '1.12237e+12', '9.37596e+11', '4.27527e+11', '6.74424e+11', '1.14684e+12', '5.75615e+11', '1.17182e+12', '9.71274e+11', '1.17019e+12', '4.83284e+11', '7.48448e+11', '7.45365e+11', '8.88628e+11', '6.53257e+11', '7.39125e+11', '6.36948e+11', '8.52856e+11', '7.81625e+11', '3.76367e+11', '1.11068e+12', '8.26475e+11', '9.51976e+11', '1.1173e+12', '9.18738e+11', '1.02857e+12', '7.57199e+11', '5.37326e+11', '5.08949e+11', '3.64457e+11', '3.98892e+11', '5.18202e+11', '9.50813e+11', '9.98731e+11', '3.54538e+11', '1.00967e+12', '1.12218e+12', '3.35706e+11', '2.92121e+11', '1.04299e+12', '8.03495e+11', '7.14614e+11', '1.05826e+12', '5.94582e+11', '1.12508e+12', '4.55507e+11', '1.09734e+12', '1.13937e+12', '9.59334e+11', '6.07275e+11', '1.18754e+12'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 208 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'44.2632'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 209 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'11.4403'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 210 / 333: {
          [('Main', '==', 'm.03rjj', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Slovenia', 'Switzerland', 'France', 'Austria'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 211 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 6
            Final Answer: {'Antigua and Barbuda', 'Albania', 'Tuvalu', 'Madagascar', 'Scotland', 'Algeria'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 212 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'2004'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 213 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.athlete'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.athlete ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 420
            Final Answer: {'Simone Collio', 'Marcello Miani', 'Federica Radicchi', 'Francesco Faraldo', 'Paola Croce', 'Roberta Bianconi', 'Fabrizio Tosini', 'Carlo Gartner', 'Gabriele Detti', 'Edwige Gwend', 'Marta Menegatti', 'Costanza Zanoletti', 'Marianna Longa', 'Fabrizio Donato', 'Vincenzo Capelli', 'Elena Romagnolo', 'Mattia Cola', 'Giacomo Bozzano', 'Claudia Cesarini', 'Salvatore Sanzo', 'Diletta Carli', 'Anna Incerti', 'Barbara Baldissera', 'Cecilia Maffei', 'Simone Raineri', 'Andreea Stefanescu', 'Greta Cicolari', 'Julieta Cantaluppi', 'Simone Parodi', 'Marco De Luca', 'Vincenzo Picardi', 'Danijel Premuš', 'Stefano Carozzo', 'Vincenzo Mangiacapre', 'Niccolò Gitto', 'Matteo Angioletti', 'Matteo Aicardi', 'Alessandro Fabian', 'Michela Guzzetti', 'Luigi Mastrangelo', 'Annamaria Mazzetti', 'Matteo Trentin', 'Nedo Nadi', 'Andrea Pirlo', 'Alessio Sartori', 'Giovanna Micol', 'Elisa Di Francisca', 'Luigi Agostino Lodde', 'Vanessa Ferrari', 'Giovanni Pellielo', 'Gerhard Plankensteiner', 'Deni Fiorentini', 'Nicola Vizzoni', 'Chiara Boggiatto', 'Dario Mangiarotti', 'Marco Galiazzo', 'Luigi Tarantino', 'Gianfranco Sibello', 'Silvia Salis', 'Michal Lasko', 'Vittorio Chierroni', 'Elisa Rigaudo', 'Margherita Granbassi', 'Niccolo Mornati', 'Martino Goretti', 'Francesca Piccinini', 'Emanuele Abate', 'Roberto Chiacig', 'Francesca Dallapé', 'Roberto Cammarelle', 'Ennio Falco', 'Sebestian Colloredo', 'Elio Verde', 'Roberta Vinci', 'Federico Esposito', 'Aldo Montano', 'Elisa Casanova', 'Renato Pasini', 'Chiara Costazza', 'Chiara Rosa', 'Giacomo Pastorino', 'Manuel De Vecchi', 'Sebastian Colloredo', 'Denise Karbon', 'Mara Navarria', 'Andrea Morassi', 'Reinhold Rainer', 'Noemi Batki', 'Maximilian Benassi', 'Federica Pellegrini', 'Moreno Boer', 'Patrick Thaler', 'Fabio Casartelli', 'Yannick Kocon', 'Valentino Gallo', 'Andrea Chiarabini', 'Maria Enrica Spacca', 'Gianluca Basile', 'Alessandro Pittin', 'Samuele Papi', 'Stefano Pozzolini', 'Rosaria Console', 'Monia Baccaille', 'Matteo Rivolta', 'Jacques Riparelli', 'Andrea Baldini', 'Mattia Pesce', 'Andrea Cassarà', 'Mario Paonessa', 'Paolo Cozzi', 'Nicola Rodigari', 'Carlotta Ferlito', 'Teresa Frassinetti', 'Elena Gemo', 'Petra Zublasing', 'Vencislav Simeonov', 'Arianna Barbieri', 'Giorgia Bronzini', 'Valeria Straneo', 'Daniele Lupo', 'Lucia Recchia', 'Gianmarco Pozzecco', 'Luigi Samele', 'Marco Belotti', 'Matteo Morandi', 'Norma Murabito', 'Simone Malusa', 'Andrea Barzagli', 'Erika Fasana', 'Stefano Cipressi', 'Arianna Errigo', 'Massimo Giacoppo', 'Matej Cernic', 'Igor Cassina', 'Tatiana Guderzo', 'Jessica Rossi', 'Cristian Moreni', 'Antonio Ciano', 'Michele Frangilli', 'Michele Regolo', 'Laura Vernizzi', 'Rosalba Forciniti', 'Mauro Sarmiento', 'Andrea Rolla', 'Stefano Tempesti', 'Francesca Schiavone', 'Silvia Weissteiner', 'Giampiero Pastore', 'Clara Giai Pron', 'Corinna Boccacini', 'Nadia Ejjafini', 'Elisa Santoni', 'Rossella Fiamingo', 'Niccolò Ferrari', 'Simona Gioli', 'Ilaria Bianchi', 'Alberto Schiavon', 'Vincenzo Nibali', 'Carolina Costagrande', 'Vittorio Parrinello', 'Nathalie Moellhausen', 'Sabina Valbusa', 'Laura Letrari', 'Walter  Bormolini', 'Irene Vecchi', 'Elisabetta Preziosa', 'Samuel Pizzetti', 'Bianca Del Carretto', 'Stefano Brecciaroli', 'Eros Poli', 'Luca Garri', 'Giuseppe Mangiarotti', 'Elia Luini', 'Michela Ponza', 'Davide Manenti', 'Carolina Kostner', 'Agnese Allegrini', 'Massimo Bulleri', 'Nicola Benedetti', 'Giulia Quintavalle', 'Lorenzo Carboncini', 'Eva Lechner', 'Giorgio Avola', 'Gianmarco Tamberi', 'Gioia Marzocca', 'Yuri Floriani', 'Vito Dellino', 'Giulia Emmolo', 'Giulia Conti', 'Marco De Nicolo', 'Filippo Pozzato', 'Elisa Blanchi', 'Nicole Della Monica', 'Martina Grimaldi', 'Libania Grenot', 'Cristian Savani', 'Manuel Cappai', 'Daniela Merighetti', 'Rodolfo Rombaldoni', 'Arianna Follis', 'Guglielmo Presenti', 'Alex Giorgetti', 'Matteo Tagliariol', 'Alberto Schieppati', 'Giorgia Campana', 'Niccolò Campriani', 'Stefania Pirozzi', 'Gianluca Maglia', 'Livio Trape', 'Eleonora Lo Bianco', 'Alessia Filippi', 'Rudy Galli', 'Jessica Gillarduzzi', 'Katia Zini', 'Filippo Maria Baldassari', 'Marco Pantani', 'Giorgio Cagnotto', 'Sacha Modolo', 'Karen Putzer', 'Francesca Clapcich', 'Flavia Pennetta', 'Amaurys Perez', 'Giulia Lapi', 'Pietro Zucchetti', 'Sara Bertolasi', 'Sabrina Crognale', 'Luca Dotto', 'Paolo Bettini', 'Gerhard Kerschbaumer', 'Paolo Pizzo', 'Nikola Radulovic', 'Pietro Camporesi', 'Domenico Valentino', 'Francesco Fossi', 'Gloria Hooper', 'Alice Nesti', 'Michele Benedetti', 'Ruggero Pertile', 'Josefa Idem', 'Matteo Ferrari', 'Fabio Fognini', 'Giovanna Trillini', 'Jessica Tomasi', 'Daniele Molmenti', 'Michele Mian', 'Lucia Bosetti', 'Manfred Mölgg', 'Claudia Wurzel', 'Diego Marani', 'Roland Fischnaller', 'Frank Bizzoni', 'Chiara Cainero', 'Sebastiano Ranfagni', 'Jenny Barazza', 'Simona Abbate', 'Rosario La Mastra', 'Pietro Reggio', 'Alexander Ploner', 'Natalia Valeeva', 'Simona La Mantia', 'Dante Boninfante', 'Giulia Rondon', 'Giuseppe Giordano', 'Michele Santucci', 'Sara Errani', 'Romano Battisti', 'Valerio Cleri', 'Enrico Fabris', 'Patrick Staudacher', 'Anikó Pelle', 'Elisa Cusma', 'Davide Rebellin', 'Vittoria Panizzon', 'Massimo Scali', 'Erika Ferraioli', 'Matteo Soragna', 'Tania di Mario', 'Franco Ferraris', "Francesco Dell'Uomo", 'Alberto Busnari', 'Deborah Scanzio', 'Yuri Confortola', 'Enrico Pozzo', 'Davide Simoncelli', 'Daniele Di Spigno', 'Vera Carrara', 'Giorgio Rocca', 'Federico Turrini', 'Nicole Gius', 'Diego Confalonieri', 'Francesco Bruno', 'Manuela Mölgg', 'Manuela Gentili', 'Daniele Danesin', 'Luca Agamennoni', 'Marco Pinotti', 'Elena Gigli', 'Marta Pagnini', 'Marco Aurelio Fontana', 'Andrea Sartoretti', 'Ivan Zaytsev', 'Andrea Bari', 'Massimo Fabbrizi', 'Daniela Ceccarelli', 'Valentina Truppa', 'Giulia Arcioni', 'Nadia Fanchini', 'Emanuele Birarelli', 'Roberto Meloni', 'Daniele Greco', "Francesco D'Aniello", 'Maurizio Felugo', 'Gabrio Zandonà', 'Romina Laurito', 'Giuseppe Michielli', 'Mirco Scarantino', 'Riccardo De Luca', 'Brenda Spaziani', 'Alessandra Sensini', 'Ilario Di Buò', 'Paolo Ottavi', 'Giulia Rambaldi Guidasci', 'Noemi Cantele', 'Elania Nardelli', 'Tania Cagnotto', 'Gennaro Gattuso', 'Pierpaolo Frattini', 'Simone Bertazzo', 'Andrea Giovi', 'Mariangela Perrupato', 'Caterina Bosetti', 'Elena Maria Bonfanti', 'Wilfried Huber', 'Lorenzo Povegliano', 'Daniele Nardello', 'Carmen Ranigler', 'Arianna Fontana', 'Alberto Cisolla', 'Damiano Pippi', 'Anzhelika Savrayuk', 'Pia Lionetti', 'Simone Venier', 'Daniele Bracciali', 'Alice Mizzau', 'Carlo Molfetta', 'Daniele Meucci', 'Ilaria Salvatori', 'Giorgio Di Centa', 'Andreas Seppi', 'Andrea Ferrari', 'Ermanno Ioriatti', 'Matteo Stefanini', 'Davide Uccellari', 'Giorgio Rubino', 'Dragan Travica', 'Mihai Bobocica', 'Aleksandra Cotti', 'Meinhard Erlacher', 'Alfredo Rota', 'José Reynaldo Bencosme de Leon', 'Paolo Nicolai', 'Peter Fill', 'Valerio Aspromonte', 'Eleonora Anna Giorgi', 'Christian Oberstolz', 'Magda Genuin', 'Giulia Gorlero', 'Marzia Caravelli', 'Tommaso Rinaldi', 'Giovanni Lombardi', 'Manuel Pietropoli', 'Mirco Di Tora', 'Daigoro Timoncini', 'Diego Occhiuzzi', 'Francesca Deagostini', 'Valentina Arrighetti', 'Sarah Podorieszach', 'Federica Faiella', 'Patrick Gruber', 'Erica Barbieri', 'Fabio Cerutti', 'Luca Tesconi', 'Elia Viviani', 'Chiara Bazzoni', 'Luca Marin', 'Riccardo Maestri', 'Maurizio Oioli', 'Luca Paolini', 'Fabio Scozzoli', 'Giuseppe Angilella', 'Klaus Dibiasi', 'Silvio Alverà', 'Alex Di Giorgio', 'Oswald Haselrieder', 'Wendy Siorpaes', 'Andrea Minguzzi', 'Pietro Piller Cottrer', 'Pietro Ruta', 'Antonella Del Core', 'Monica de Gennaro', 'Allegra Lapi', 'Marco Orsi', 'Armin Zöggeler', 'Pietro Figlioli', 'Wenling Tan Monfardini', 'Valentina Vezzali', 'Flavio Cannone', 'Alessandro Fei', 'Gregorio Paltrinieri', 'Massimiliano Blardone', 'Giacomo Galanda', 'Denis Marconato', 'Filippo Magnini', 'Mauro Nespoli', 'Elena Moretti', 'Alex Righetti', 'Andrea Caianiello', 'Elio Ragni', 'Christian Presciutti', 'Clemente Russo'}
            Answers = 420, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.042s]
          Answers = 420, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.042s]
        Checking schema 214 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 215 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'UK £'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 216 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'9.25e+08'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 217 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.sport'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.sport ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 53
            Final Answer: {'Figure skating', 'Shooting sport', 'Swimming', 'Beach volleyball', 'Cycling', 'Skeleton', 'Freestyle skiing', 'Canoe Slalom', 'Racewalking', 'Freestyle wrestling', 'Weightlifting', 'Badminton', 'Artistic gymnastics', 'BMX racing', 'Track cycling', 'Bobsleigh', 'Table tennis', 'Nordic combined', 'Trampoline', 'Snowboarding', 'Taekwondo', 'Football', 'Dressage', 'Rowing', 'Speed skating', 'Biathlon', 'Luge', 'Modern pentathlon', 'Equestrian vaulting', 'Eventing', 'Greco-Roman wrestling', 'Water polo', 'Rhythmic gymnastics', 'Judo', 'Archery', 'Tennis', 'Road running', 'Diving', 'Triathlon', 'Track and field athletics', 'Canoe Sprint', 'Alpine skiing', 'Sailing', 'Short track speed skating', 'Road cycling', 'Ski jumping', 'Basketball', 'Volleyball', 'Mountain biking', 'Synchronized swimming', 'Boxing', 'Cross-country skiing', 'Fencing'}
            Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 53, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 218 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.national_anthem', 'government.national_anthem_of_a_country.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 219 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.national_anthem', 'government.national_anthem_of_a_country.official_anthem_since'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.official_anthem_since ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'1946'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 220 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 221 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.athletes', 'olympics.olympic_athlete_affiliation.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.athletes ?o1 . ?o1 fb:olympics.olympic_athlete_affiliation.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 31
            Final Answer: {'1952 Summer Olympics', '1964 Summer Olympics', '1956 Summer Olympics', '2012 Summer Olympics', '1952 Winter Olympics', '1994 Winter Olympics', '1948 Winter Olympics', '1988 Winter Olympics', '1972 Summer Olympics', '2010 Winter Olympics', '1976 Summer Olympics', '1936 Winter Olympics', '1988 Summer Olympics', '2002 Winter Olympics', '1920 Summer Olympics', '1936 Summer Olympics', '2008 Summer Olympics', '1992 Summer Olympics', '1904 Summer Olympics', '2004 Summer Olympics', '1992 Winter Olympics', '2000 Summer Olympics', '1968 Summer Olympics', '1984 Summer Olympics', '1980 Summer Olympics', '1998 Winter Olympics', '1908 Summer Olympics', '2006 Winter Olympics', '1960 Summer Olympics', '1948 Summer Olympics', '1996 Summer Olympics'}
            Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 222 / 333: {
          [('Main', '==', 'm.03rjj', ['location.country.national_anthem', 'government.national_anthem_of_a_country.anthem'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.country.national_anthem ?o1 . ?o1 fb:government.national_anthem_of_a_country.anthem ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Il Canto degli Italiani'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 223 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:01] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 224 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.sports'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.sports ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Swimming'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 225 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.competitor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.competitor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Federica Pellegrini', 'Italy national football team'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 226 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletes', 'sports.competitor_country_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletes ?o1 . ?o1 fb:sports.competitor_country_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 4
            Final Answer: {'2007 World Aquatics Championships', '2009 World Aquatics Championships', '2005 World Aquatics Championships', '2009 Mediterranean Games'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 227 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 11
            Final Answer: {'-231807', '1853', '1648', '2253', '1525', '1998', '2663', '-559782', '-10241', '-231694', '1940'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 228 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '2002', '1979', '2005', '1961', '1995', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '1973', '1981', '1965', '2004', '2010'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 229 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'2295', '4224.74', '5406.2', '1823', '1143', '4007.18', '1446', '4791.28', '2710', '3825.92', '2476', '2152', '3134.39', '4597.89', '3104.86', '4658.7', '3391.67', '3132.77', '3662.67', '4144.91', '975.026', '1046', '5079.49', '1353', '3304.33', '5384.17', '4310.54', '5640.09', '4439.32', '5754.52', '1693', '3096.93', '3040.96', '1266', '4955.72', '3490.34', '5668.74', '5270.54', '4303.65', '1934', '2776', '2537', '5299.87', '5661.18', '5530.18', '1573', '2891', '2457', '5712.73', '2072', '5623.92'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 230 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 7
            Final Answer: {'1.95192e+10', '2.11437e+10', '3.17014e+09', '3.47064e+09', '5.20758e+10', '2.29962e+10', '7.89811e+10'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 231 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 232 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 4
            Final Answer: {'Prime minister', 'Senator', 'Dictator', 'President'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 233 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.governmental_body'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.governmental_body ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Senate of the Republic', 'Chamber of Deputies'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 234 / 333: {
          [('Main', '==', 'm.03rjj', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 235 / 333: {
          [('Main', '==', 'm.03rjj', ['organization.organization_member.member_of', 'organization.organization_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'1937'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 236 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'World War II', 'Battle of Lissa'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 237 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.imported_from'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.imported_from ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.027s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.027s]
        Checking schema 238 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'2008'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 239 / 333: {
          [('Main', '==', 'm.03rjj', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 240 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Operation Crusader', 'War in Afghanistan (2001–present)'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 241 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.casualties', 'military.casualties.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 242 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.casualties', 'military.casualties.type_of_casualties'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.type_of_casualties ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Military - Dead', 'Military - Wounded', 'Military - MIA'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 243 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 41
            Final Answer: {'1952 Summer Olympics', '1964 Summer Olympics', '1956 Summer Olympics', '1928 Summer Olympics', '2012 Summer Olympics', '1952 Winter Olympics', '1994 Winter Olympics', '1948 Winter Olympics', '1988 Winter Olympics', '1972 Summer Olympics', '1968 Winter Olympics', '1900 Summer Olympics', '1912 Summer Olympics', '1980 Winter Olympics', '1976 Winter Olympics', '2010 Winter Olympics', '1976 Summer Olympics', '1988 Summer Olympics', '2012 Summer Paralympics', '2002 Winter Olympics', '1920 Summer Olympics', '1936 Summer Olympics', '1932 Summer Olympics', '2008 Summer Olympics', '1992 Summer Olympics', '1960 Winter Olympics', '2004 Summer Olympics', '1992 Winter Olympics', '2000 Summer Olympics', '1968 Summer Olympics', '1972 Winter Olympics', '1984 Summer Olympics', '1980 Summer Olympics', '1998 Winter Olympics', '1908 Summer Olympics', '2006 Winter Olympics', '1984 Winter Olympics', '1924 Summer Olympics', '1960 Summer Olympics', '1948 Summer Olympics', '1996 Summer Olympics'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 244 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 452
            Final Answer: {"Volleyball at the 2008 Summer Olympics – Women's tournament", "Fencing at the 1984 Summer Olympics - Men's Foil, Individual", "Shooting at the 2000 Summer Olympics - Men's Trap", "Luge at the 1994 Winter Olympics - Women's Singles", "Swimming at the 2000 Summer Olympics – Men's 100 metre breaststroke", "Beach volleyball at the 2008 Summer Olympics – Men's tournament", "Sailing at the 2008 Summer Olympics – Men's Laser class", "Judo at the 2012 Summer Olympics – Women's 52 kg", "Taekwondo at the 2012 Summer Olympics – Men's 80 kg", "Gymnastics at the 2012 Summer Olympics – Women's rhythmic group all-around", "Canoeing at the 1992 Summer Olympics – Men's K-2 500 metres", "Alpine skiing at the 2010 Winter Olympics – Men's slalom", 'Boxing at the 1984 Summer Olympics - Heavyweight', 'Cross-country skiing at the 2006 Winter Olympics - 4 x 10 Km relay', "Athletics at the 1908 Summer Olympics – Men's 800 metres", "Canoeing at the 1996 Summer Olympics – Men's K-1 500 metres", "Fencing at the 1932 Summer Olympics - Men's Épée, Individual", "Fencing at the 1920 Summer Olympics - Men's Sabre, Individual", "Alpine skiing at the 1952 Winter Olympics – Women's downhill", "Fencing at the 1984 Summer Olympics - Men's Sabre, Individual", "Diving at the 1972 Summer Olympics – Men's 3 metre springboard", 'Boxing at the 1948 Summer Olympics - Bantamweight', "Wrestling at the 1928 Summer Olympics - Men's Greco-Roman Featherweight", "Tennis at the 1924 Summer Olympics - Men's Singles", "Athletics at the 1936 Summer Olympics – Men's 4x100 metre relay", "Fencing at the 1936 Summer Olympics - Men's Foil, Individual", "Fencing at the 1928 Summer Olympics - Men's Sabre, Individual", "Cycling at the 2000 Summer Olympics – Women's cross-country", 'Equestrian at the 1980 Summer Olympics - Individual Eventing', "Swimming at the 2000 Summer Olympics – Men's 200 metre freestyle", 'Equestrian at the 1920 Summer Olympics – Individual eventing', "Fencing at the 1912 Summer Olympics – Men's foil", "Cross Country Skiing at the 1994 Winter Olympics - Women's 5km", 'Equestrian at the 1972 Summer Olympics - Individual Eventing', "Athletics at the 1936 Summer Olympics – Men's discus throw", 'Boxing at the 1960 Summer Olympics - Bantamweight', "Cycling at the 1960 Summer Olympics - Men's Sprint", 'Equestrian at the 1972 Summer Olympics - Jumping, Individual', "Weightlifting at the 1924 Summer Olympics - Men's Featherweight 60 kg", "Cross-Country Skiing at the 2006 Winter Olympics – Men's 30km Pursuit", "Diving at the 1976 Summer Olympics – Men's 10 metre platform", "Taekwondo at the 2008 Summer Olympics – Men's 80 kg", "Fencing at the 1936 Summer Olympics - Men's Sabre, Individual", "Rowing at the 1948 Summer Olympics - Men's Single Sculls", "Luge at the 1998 Winter Olympics - Men's Singles", "Snowboarding at the 2002 Winter Olympics – Women's parallel giant slalom", "Canoeing at the 2004 Summer Olympics – Women's K-1 500 metres", "Swimming at the 1988 Summer Olympics – Men's 400 metre individual medley", 'Wrestling at the 1948 Summer Olympics - Greco-Roman Middleweight', "Athletics at the 1980 Summer Olympics – Men's 200 metres", "Gymnastics at the 1932 Summer Olympics - Men's Vault", 'Boxing at the 1952 Summer Olympics - Featherweight', "Fencing at the 1956 Summer Olympics - Men's Épée, Individual", 'Boxing at the 1948 Summer Olympics - Flyweight', "Cycling at the 1976 Summer Olympics – Men's individual road race", 'Equestrian at the 1960 Summer Olympics - Jumping, Individual', "Cross-country skiing at the 2010 Winter Olympics – Men's 15 kilometre freestyle", 'Shooting at the 1984 Summer Olympics - Trap', "Gymnastics at the 1920 Summer Olympics - Men's artistic individual all-around", "Fencing at the 1952 Summer Olympics - Men's Épée, Individual", 'Boxing at the 1964 Summer Olympics – Welterweight', "Fencing at the 1948 Summer Olympics - Men's Sabre, Individual", "Fencing at the 1988 Summer Olympics - Men's Foil, Individual", "Fencing at the 2012 Summer Olympics - Women's Foil, Individual", "Fencing at the 1952 Summer Olympics - Men's Foil, Individual", "Biathlon at the 1988 Winter Olympics - Men's 20km Individual", "Sailing at the 2000 Summer Olympics - Women's Sailboard", "Swimming at the 2004 Summer Olympics – Women's 200 metre freestyle", "Athletics at the 1984 Summer Olympics – Women's 1500 metres", 'Shooting at the 1980 Summer Olympics - Trap Shooting', "Wrestling at the 1948 Summer Olympics - Men's Greco-Roman flyweight", "Athletics at the 1920 Summer Olympics - Men's 3000 metre steeplechase", "Athletics at the 1912 Summer Olympics – Men's 10 kilometres walk", "Cycling at the 1968 Summer Olympics - Men's Sprint", "Luge at the 1994 Winter Olympics - Men's Doubles", "Cycling at the 2000 Summer Olympics – Men's cross-country", "Athletics at the 1924 Summer Olympics – Men's 10 kilometres walk", "Athletics at the 1996 Summer Olympics – Women's 10 kilometres walk", "Alpine skiing at the 2002 Winter Olympics – Women's downhill", "Athletics at the 1988 Summer Olympics – Men's 10,000 metres", "Shooting at the 2008 Summer Olympics - Men's Double Trap", "Short track speed skating at the 2002 Winter Olympics – Men's 5000 metre relay", "Athletics at the 1936 Summer Olympics - Women's 80m Hurdles", "Swimming at the 2008 Summer Olympics – Women's 800 metre freestyle", "Swimming at the 2000 Summer Olympics – Men's 200 metre breaststroke", "Alpine Skiing at the 1988 Winter Olympics - Men's Slalom", "Volleyball at the 1996 Summer Olympics – Women's beach volleyball", "Athletics at the 2004 Summer Olympics – Men's pole vault", "Fencing at the 2012 Summer Olympics - Men's sabre, Individual", "Swimming at the 1972 Summer Olympics - Women's 400 metre freestyle", "Gymnastics at the 1932 Summer Olympics – Men's parallel bars", 'Cross-country skiing at the 2002 Winter Olympics - 4 x 10 Km relay', 'Boxing at the 1952 Summer Olympics - Light Welterweight', "Boxing at the 1932 Summer Olympics – Men's light heavyweight", "Athletics at the 1920 Summer Olympics – Men's 10 kilometres walk", 'Boxing at the 1956 Summer Olympics - Heavyweight', 'Boxing at the 1948 Summer Olympics - Featherweight', "Fencing at the 1972 Summer Olympics - Women's Foil, Individual", "Wrestling at the 1952 Summer Olympics - Men's Greco-Roman Flyweight", 'Boxing at the 2008 Summer Olympics – Heavyweight', "Cross-Country Skiing at the 1992 Winter Olympics - Men's 50km freestyle", "Fencing at the 1952 Summer Olympics - Women's Foil, Individual", "1956 Summer Olympics - Men's Heavyweight Boxing", "Athletics at the 2000 Summer Olympics - Women's Long Jump", "Weightlifting at the 1972 Summer Olympics -Men's Middleweight 67.5-75 kg", "Alpine Skiing at the 1998 Winter Olympics -Women's Slalom", "Canoeing at the 2000 Summer Olympics – Men's slalom K-1", "Fencing at the 2008 Summer Olympics – Men's team sabre", "Cross Country Skiing at the 2002 Winter Olympics - Women's 30km", "Volleyball at the 1996 Summer Olympics – Men's tournament", "Gymnastics at the 1928 Summer Olympics - Men's Horizontal Bar", 'Shooting at the 1972 Summer Olympics - Trap', "Judo  at the 1976 Summer Olympics - Men's Lightweight (63kg)", "Sailing at the 1996 Summer Olympics - Women's Sailboard", "Boxing at the 2012 Summer Olympics – Men's super heavyweight", 'Boxing at the 1968 Summer Olympics - Heavyweight', "Weightlifting at the 1984 Summer Olympics - Men's Heavyweight 100-110 kg", 'Boxing at the 1984 Summer Olympics - Bantamweight', "Volleyball at the 2004 Summer Olympics – Women's volleyball", "Fencing at the 1932 Summer Olympics - Men's Sabre, Individual", "Shooting at the 2012 Summer Olympics - Men's Trap", "Boxing at the 2012 Summer Olympics – Men's heavyweight", "Cycling at the 1960 Summer Olympics - Men's individual road race", "Rowing at the 2012 Summer Olympics – Men's double sculls", "Swimming at the 1992 Summer Olympics – Men's 200 metre backstroke", 'Wrestling at the 1956 Summer Olympics - Greco-Roman Heavyweight', "Shooting at the 1996 Summer Olympics - Men's Double Trap", "Weightlifting at the 1928 Summer Olympics - Men's Featherweight 60 kg", "Shooting at the 2000 Summer Olympics - Women's Double Trap", "Cycling at the 1956 Summer Olympics – Men's sprint", "Athletics at the 1948 Summer Olympics - Men's discus throw", 'Boxing at the 1960 Summer Olympics - Welterweight', 'Sailing at the 1968 Summer Olympics - Finn', "Cross-country Skiing at the 2006 Winter Olympics – Men's 50km Freestyle", "Diving at the 1980 Summer Olympics – Men's 3 metre springboard", "Athletics at the 1948 Summer Olympics – Women's shot put", "Cycling at the 1996 Summer Olympics - Women's Individual Pursuit", 'Boxing at the 2008 Summer Olympics – Super heavyweight', "Athletics at the 1972 Summer Olympics - Women's 1500 metres", "Weightlifting at the 1932 Summer Olympics - Men's Lightweight 60-67.5 kg", 'Boxing at the 2008 Summer Olympics – Flyweight', "Cycling at the 1956 Summer Olympics - Men's 1000m Time Trial", "Cycling at the 1964 Summer Olympics – Men's individual road race", "Shooting at the 2012 Summer Olympics - Men's 50 metre rifle three positions", "Shooting at the 2008 Summer Olympics - Women's Skeet", 'Boxing at the 1960 Summer Olympics - Featherweight', "Diving at the 1968 Summer Olympics – Men's 3 metre springboard", "Wrestling at the 1988 Summer Olympics - Men's Greco-Roman Light Flyweight", "Gymnastics at the 2004 Summer Olympics – Men's rings", 'Shooting at the 1956 Summer Olympics - Trap', "Gymnastics at the 2004 Summer Olympics - Men's Horizontal Bar", "Fencing at the 1984 Summer Olympics - Women's Foil, Individual", "Gymnastics at the 1996 Summer Olympics – Men's rings", "Shooting at the 2004 Summer Olympics – Men's skeet", "Fencing at the 1920 Summer Olympics – Men's foil", 'Fencing at the 1948 Summer Olympics - Team Epee', "Athletics at the 1996 Summer Olympics – Men's 3000 metres steeplechase", "Gymnastics at the 1960 Summer Olympics – Men's parallel bars", 'Wrestling at the 1948 Summer Olympics - Greco-Roman Heavyweight', "Alpine Skiing at the 1972 Winter Olympics - Men's Giant Slalom", "Athletics at the 1920 Summer Olympics – Men's marathon", 'Wrestling at the 1932 Summer Olympics - Greco-Roman Welterweight', "Fencing at the 2008 Summer Olympics -Women's Foil, Individual", "Fencing at the 2000 Summer Olympics - Women's Foil, Individual", "Gymnastics at the 1912 Summer Olympics - Men's artistic individual all-around", "Athletics at the 1984 Summer Olympics – Men's long jump", "Shooting at the 2012 Summer Olympics - Men's 10 metre air pistol", "Beach volleyball at the 1996 Summer Olympics – Men's tournament", "Athletics at the 1984 Summer Olympics – Men's 10,000 metres", "Cycling at the 1952 Summer Olympics – Men's sprint", "Gymnastics at the 1960 Summer Olympics - Men's Floor Exercises", "Archery at the 1976 Summer Olympics - Men's Individual", "Shooting at the 2004 Summer Olympics – Men's trap", "Alpine Skiing at the 1952 Winter Olympics - Men's downhill", "Modern Pentathlon at the 1984 Summer Olympics - Men's Individual", "Alpine skiing at the 2002 Winter Olympics – Women's Super-G", "Volleyball at the 1992 Summer Olympics – Men's tournament", "Sailing at the 2004 Summer Olympics – Women's sailboard", "Cross-country skiing at the 2002 Winter Olympics – Women's 10 kilometre classical", "Cross-Country Skiing at the 1988 Winter Olympics - Men's 50km", 'Shooting at the 1976 Summer Olympics – Trap', "Luge at the 1984 Winter Olympics - Men's Singles", 'Nordic combined at the 2010 Winter Olympics – Individual normal hill/10 km', "Fencing at the 1964 Summer Olympics - Women's Foil, Individual", "Fencing at the 2004 Summer Olympics - Women's Foil, Individual", "Weightlifting at the 1960 Summer Olympics - Men's Featherweight 56-60 kg", "Modern Pentathlon  at the 1936 Summer Olympics - Men's Individual", "Fencing at the 1976 Summer Olympics - Women's Foil, Individual", "Cycling at the 1992 Summer Olympics – Men's individual road race", "Gymnastics at the 1964 Summer Olympics - Men's Floor Exercises", "Wrestling at the 1932 Summer Olympics - Men's Greco-Roman Light Heavyweight", "Shooting at the 1932 Summer Olympics – Men's 25 metre rapid fire pistol", "Fencing at the 1900 Summer Olympics – Men's masters sabre", "Luge at the 1980 Winter Olympics - Men's Singles", "Cross Country Skiing at the 1998 Winter Olympics - Women's 30km Freestyle", "Basketball at the 2004 Summer Olympics – Men's tournament", 'Boxing at the 1964 Summer Olympics – Flyweight', "Alpine Skiing at the 1988 Winter Olympics - Men's Giant Slalom", "Boxing at the 1932 Summer Olympics – Men's heavyweight", "Athletics at the 1960 Summer Olympics - Men's 200 metres", "Cross Country Skiing at the 1992 Winter Olympics - Men's 10km", "Alpine Skiing at the 1994 Winter Olympics - Women's Giant Slalom", 'Boxing at the 1984 Summer Olympics - Super Heavyweight', "Athletics at the 1960 Summer Olympics - Men's 50km Walk", "Athletics at the 1996 Summer Olympics - Women's Long Jump", "Athletics at the 1980 Summer Olympics – Men's 20 kilometres walk", "Weightlifting at the 1920 Summer Olympics - Men's Heavyweight +82.5 kg", "Wrestling at the 1984 Summer Olympics - Men's Greco-Roman Light Flyweight", "Cycling at the 2012 Summer Olympics – Men's cross-country", "Shooting at the 2008 Summer Olympics - Men's Trap", "Volleyball at the 2000 Summer Olympics – Men's tournament", 'Boxing at the 1960 Summer Olympics - Light Middleweight', 'Boxing at the 1948 Summer Olympics - Welterweight', "Alpine Skiing at the 1984 Winter Olympics - Women's Slalom", "Boxing at the 1928 Summer Olympics – Men's middleweight", "Cross Country Skiing at the 1994 Winter Olympics - Men's 15km Pursuit", "Modern Pentathlon at the 1988 Summer Olympics - Men's Individual", "Cycling at the 2008 Summer Olympics - Men's individual road race", "Fencing at the 2004 Summer Olympics - Men's Sabre, Individual", "Luge at the 2002 Winter Olympics – Men's singles", "Swimming at the 1996 Summer Olympics – Men's 200 metre backstroke", "Shooting at the 2012 Summer Olympics - Men's 10m air rifle", "Wrestling at the 2008 Summer Olympics - Men's Greco-Roman Middleweight", "Weightlifting at the 1932 Summer Olympics - Men's Middleweight 67.5-75 kg", "Cross Country Skiing at the 1994 Winter Olympics - Women's 30km", "Swimming at the 2012 Summer Olympics – Women's marathon 10 kilometre", "Alpine Skiing at the 1972 Winter Olympics - Men's Slalom", 'Equestrian at the 1956 Summer Olympics - Jumping, Individual', "Wrestling at the 1992 Summer Olympics - Men's Greco-Roman Light Flyweight", "Canoeing at the 2000 Summer Olympics – Women's K-1 500 metres", "Cross Country Skiing at the 1992 Winter Olympics -Women's 10km pursuit", "Cycling at the 1956 Summer Olympics – Men's individual road race", 'Boxing at the 1964 Summer Olympics – Heavyweight', "Wrestling at the 1980 Summer Olympics - Men's freestyle Light Flyweight", "Fencing at the 1936 Summer Olympics - Men's Épée, Individual", "Volleyball at the 2000 Summer Olympics – Women's beach volleyball", "Boxing at the 1928 Summer Olympics – Men's flyweight", "Fencing at the 2012 Summer Olympics – Women's team foil", 'Boxing at the 1960 Summer Olympics - Heavyweight', "Athletics at the 1964 Summer Olympics – Men's 400 metres hurdles", "Judo at the 1996 Summer Olympics - Men's Extra Lightweight (-60 kg)", "Diving at the 1972 Summer Olympics – Men's 10 metre platform", "Swimming at the 2008 Summer Olympics – Women's 200 metre freestyle", "Athletics at the 2008 Summer Olympics – Women's 800 metres", "Athletics at the 1968 Summer Olympics - Men's 110 metre hurdles", "Alpine Skiing at the 1976 Winter Olympics - Men's Slalom", "Cycling at the 1964 Summer Olympics - Men's 1000m Time Trial", "Alpine Skiing at the 1960 Winter Olympics - Women's Giant Slalom", "Weightlifting at the 1924 Summer Olympics -Men's Middleweight 67.5-75 kg", "Fencing at the 2012 Summer Olympics – Men's team foil", 'Equestrian at the 1920 Summer Olympics – Individual jumping', "Weightlifting at the 1920 Summer Olympics - Men's Middleweight 67.5-75 kg", "Cycling at the 1968 Summer Olympics - Men's individual road race", "Sailing at the 2008 Summer Olympics – Women's sailboard", "Judo at the 1984 Summer Olympics - Men's Lightweight (71kg)", "Cycling at the 1996 Summer Olympics – Women's cross-country", "Athletics at the 2008 Summer Olympics - Men's 50 km walk", "Judo at the 2004 Summer Olympics – Women's 78 kg", "Short track speed skating at the 2006 Winter Olympics – Women's 3000 metre relay", "Swimming at the 1992 Summer Olympics – Men's 400 metre individual medley", "Athletics at the 1976 Summer Olympics - Women's High Jump", "Judo at the 2000 Summer Olympics – Women's 78 kg", "Athletics at the 1920 Summer Olympics – Men's 3 kilometres walk", "Fencing at the 2004 Summer Olympics - Men's Foil, Individual", 'Fencing at the 1952 Summer Olympics - Individual Epee', "Judo at the 2000 Summer Olympics - Men's Lightweight (73kg)", "Cycling at the 2008 Summer Olympics - Women's individual road race", "Cross Country Skiing at the 1994 Winter Olympics -Men's 10km", "Cycling at the 1996 Summer Olympics - Women's individual road race", "Alpine Skiing at the 1992 Winter Olympics - Men's Combined", "Weightlifting at the 1956 Summer Olympics - Men's Heavyweight +90 kg", "Gymnastics at the 1964 Summer Olympics – Men's rings", "Judo at the 1996 Summer Olympics - Women's Half Heavyweight (72kg)", "Canoeing at the 1996 Summer Olympics – Men's K-1 1000 metres", "Modern Pentathlon at the 1976 Summer Olympics - Men's Individual", "Canoeing at the 2012 Summer Olympics – Men's slalom K-1", "Shooting at the 1996 Summer Olympics – Men's 10 metre air pistol", "Cycling at the 1996 Summer Olympics – Men's points race", "Gymnastics at the 1932 Summer Olympics – Men's pommel horse", "Short track speed skating at the 2010 Winter Olympics – Women's 500 metres", "Athletics at the 1952 Summer Olympics - Men's 50km Walk", "Snowboarding at the 1998 Winter Olympics - Men's Giant Slalom", "Judo at the 2008 Summer Olympics - Women's 57 kg", "Swimming at the 2004 Summer Olympics – Men's 4 × 200 metre freestyle relay", "Diving at the 1964 Summer Olympics – Men's 10 metre platform", "Athletics at the 1972 Summer Olympics - Men's 200 metres", "Fencing at the 1956 Summer Olympics - Men's Foil, Individual", "Fencing at the 1960 Summer Olympics - Men's Sabre, Individual", "Gymnastics at the 1932 Summer Olympics – Men's rings", "Cross Country Skiing at the 1994 Winter Olympics - Women's Combined Pursuit (5 km + 10 km)", "Athletics at the 1948 Summer Olympics – Women's discus throw", "Weightlifting at the 1956 Summer Olympics - Men's Middleweight 67.5-75 kg", "Volleyball at the 1988 Summer Olympics – Men's tournament", "Athletics at the 2000 Summer Olympics - Men's hammer throw", "Taekwondo at the 2012 Summer Olympics – Men's +80 kg", "Fencing at the 1932 Summer Olympics - Men's Foil, Individual", "Wrestling at the 1972 Summer Olympics - Men's Greco-Roman Flyweight", "Alpine Skiing at the 1994 Winter Olympics - Women's Super-G", 'Boxing at the 1964 Summer Olympics – Light heavyweight', "Weightlifting at the 1924 Summer Olympics - Men's Heavyweight +82.5 kg", "Fencing at the 1948 Summer Olympics - Men's Épée, Individual", "Cycling at the 2000 Summer Olympics - Women's Points Race", "Volleyball at the 2012 Summer Olympics – Men's tournament", "Swimming at the 1972 Summer Olympics - Women's 400 metre individual medley", "Cycling at the 1952 Summer Olympics - Men's individual road race", 'Boxing at the 1984 Summer Olympics - Light Flyweight', 'Shooting at the 1960 Summer Olympics - Trap', "Archery at the 2004 Summer Olympics – Men's individual", "Volleyball at the 2004 Summer Olympics – Women's beach volleyball", 'Boxing at the 1948 Summer Olympics - Middleweight', 'Boxing at the 1988 Summer Olympics - Featherweight', "Athletics at the 1932 Summer Olympics - Men's 50km Walk", "Diving at the 1976 Summer Olympics – Men's 3 metre springboard", "Skeleton at the 1948 Winter Olympics - Men's Skeleton", 'Equestrian at the 1900 Summer Olympics – High jump', "Cross Country Skiing at the 1992 Winter Olympics - Men's 15km Pursuit", "Boxing at the 1936 Summer Olympics – Men's flyweight", "Athletics at the 1988 Summer Olympics – Men's marathon", "Swimming at the 2000 Summer Olympics – Men's 200 metre individual medley", "Gymnastics at the 1908 Summer Olympics - Men's artistic individual all-around", "Athletics at the 2008 Summer Olympics - Women's 20 km walk", "Athletics at the 2012 Summer Olympics – Men's triple jump", "Shooting at the 1968 Summer Olympics - Men's Skeet", "Cycling at the 1996 Summer Olympics - Men's Individual Pursuit", "Luge at the 2006 Winter Olympics - Men's Doubles", "Cycling at the 1932 Summer Olympics - Men's Individual Time Trial", "Alpine Skiing at the 1998 Winter Olympics -Women's Giant Slalom", "Athletics at the 1988 Summer Olympics – Men's 20 kilometres walk", "Fencing at the 2008 Summer Olympics – Women's team foil", "Cycling at the 1952 Summer Olympics - Men's 1000 m Time Trial", "Cross Country Skiing at the 1994 Winter Olympics - Women's 15km", 'Shooting at the 1964 summer Olympics - Trap', 'Boxing at the 1956 Summer Olympics - Light Welterweight', "Beach volleyball at the 2000 Summer Olympics – Men's tournament", 'Boxing at the 1964 Summer Olympics – Middleweight', "Cycling at the 2004 Summer Olympics - Men's individual road race", "Gymnastics at the 1964 Summer Olympics – Men's parallel bars", "Fencing at the 2008 Summer Olympics – Men's team épée", "Judo at the 1980 Summer Olympics - Men's Lightweight (71kg)", "Boxing at the 1928 Summer Olympics – Men's lightweight", "Gymnastics at the 1924 Summer Olympics – Men's parallel bars", "Athletics at the 1960 Summer Olympics - Women's 100 metres", 'Boxing at the 2000 Summer Olympics - Super Heavyweight', "Luge at the 2006 Winter Olympics – Men's singles", "Shooting at the 1984 Summer Olympics - Women's 10 metre air rifle", "Athletics at the 1964 Summer Olympics - Men's 50 km walk", 'Boxing at the 1952 Summer Olympics - Lightweight', "Boxing at the 2012 Summer Olympics – Men's light welterweight", 'Equestrian at the 1900 Summer Olympics – Long jump', "Judo at the 2000 Summer Olympics – Women's 70 kg", "Judo at the 2000 Summer Olympics - Men's Half Lightweight (66 kg)", "Athletics at the 1984 Summer Olympics - Women's high jump", "Short Track Speed Skating at the 1994 Winter Olympics - Men's 500m", "Cross-Country Skiing at the 1998 Winter Olympics - Men's 30km", "Wrestling at the 1972 Summer Olympics - Men's Greco-Roman Lightweight", "Fencing at the 1992 Summer Olympics - Men's Sabre, Individual", "Fencing at the 2008 Summer Olympics - Men's Foil, Individual", "Archery at the 1980 Summer Olympics - Men's Individual", "Weightlifting at the 1928 Summer Olympics - Men's Middleweight 67.5-75 kg", "Fencing at the 1960 Summer Olympics - Men's Épée, Individual", "Wrestling at the 1932 Summer Olympics - Men's Greco-Roman Featherweight", "Volleyball at the 2004 Summer Olympics – Men's tournament", "Football at the 2004 Summer Olympics – Men's tournament", "Cross-Country Skiing at the 1968 Winter Olympics - Men's 30 km", "Fencing at the 1996 Summer Olympics - Men's Foil, Individual", "Biathlon at the 1998 Winter Olympics - Men's 20 km Individual", "Athletics at the 1924 Summer Olympics – Men's marathon", "Volleyball at the 2008 Summer Olympics – Men's tournament", "Diving at the 1968 Summer Olympics – Men's 10 metre platform", 'Sailing at the 2000 Summer Olympics - Finn Class', "Canoeing at the 1996 Summer Olympics – Women's K-1 500 metres", "Gymnastics at the 1932 Summer Olympics - Men's artistic individual all-around", 'Equestrian at the 1964 Summer Olympics – Individual eventing', "Alpine Skiing at the 1992 Winter Olympics - Men's Slalom", "Alpine Skiing at the 1994 Winter Olympics - Women's Downhill", "Cycling at the 1992 Summer Olympics – Men's points race", "Gymnastics at the 1924 Summer Olympics – Men's rings", "Fencing at the 1928 Summer Olympics - Men's Foil, Individual", "Cycling at the 1964 Summer Olympics – Men's sprint", "Alpine Skiing at the 1994 Winter Olympics - Men's Slalom", "Athletics at the 2004 Summer Olympics – Men's 20 kilometres walk", 'Figure skating at the 2010 Winter Olympics – Pair skating', 'Boxing at the 1984 Summer Olympics - Welterweight', "Swimming at the 1972 Summer Olympics - Women's 800 metre freestyle", "Canoeing at the 2008 Summer Olympics – Women's K-1 500 metres", 'Boxing at the 1980 Summer Olympics - Light Welterweight', "Alpine Skiing at the 1992 Winter Olympics - Women's Super-G", "Luge at the 2010 Winter Olympics – Men's singles", "Speed skating at the 2006 Winter Olympics - Men's 1500m", "Archery at the 2008 Summer Olympics – Men's team", "Athletics at the 1936 Summer Olympics – Men's 800 metres", "Shooting at the 1996 Summer Olympics – Men's skeet", "Swimming at the 2012 Summer Olympics – Women's 400 metre individual medley", 'Boxing at the 1960 Summer Olympics - Light Heavyweight', 'Shooting at the 1992 Summer Olympics – Skeet', "Judo at the 1992 Summer Olympics - Women's Middleweight (66kg)", "Cycling at the 2012 Summer Paralympics – Men's road time trial", 'Wrestling at the 1932 Summer Olympics - Greco-Roman Bantamweight', "Cycling at the 1960 Summer Olympics - Men's 1000m Time Trial", 'Boxing at the 1928 Summer Olympics - Bantamweight', 'Boxing at the 2004 Summer Olympics – Super heavyweight', "Cross Country Skiing at the 1992 Winter Olympics - Women's 30 km freestyle", "Luge at the 1994 Winter Olympics - Men's Singles", "Alpine Skiing at the 1976 Winter Olympics - Women's Slalom", "Water polo at the 2012 Summer Olympics – Men's tournament", "Gymnastics at the 2012 Summer Olympics – Men's rings", "Athletics at the 1984 Summer Olympics – Men's shot put", "Fencing at the 1988 Summer Olympics - Men's Sabre, Individual", "Speed Skating at the 2006 Winter Olympics - Men's 5000m", "Cycling at the 1948 Summer Olympics - Men's Sprint", "Speed skating at the 2006 Winter Olympics - Men's team pursuit", "Athletics at the 1936 Summer Olympics – Men's 1500 metres", "Athletics at the 1952 Summer Olympics - Men's Discus Throw", 'Boxing at the 1936 Summer Olympics - Bantamweight', "Athletics at the 1992 Summer Olympics – Men's 20 kilometres walk", "Athletics at the 1932 Summer Olympics - Men's 1500 metres", "Wrestling at the 1908 Summer Olympics – Men's Greco-Roman lightweight", "Fencing at the 2008 Summer Olympics - Men's Épée, Individual", "Alpine Skiing at the 1992 Winter Olympics - Men's Giant Slalom", 'Shooting at the 1992 Summer Olympics – Trap', "Athletics at the 1984 Summer Olympics – Men's 20 kilometres walk", "Shooting at the 1996 Summer Olympics – Men's 50 metre pistol", "Shooting at the 2004 Summer Olympics - Women's 50 metre rifle, three positions", "Volleyball at the 2000 Summer Olympics – Women's tournament", "Luge at the 1968 Winter Olympics - Women's Singles", "Gymnastics at the 1932 Summer Olympics - Men's Floor Exercises", "Swimming at the 2000 Summer Olympics – Men's 400 metre freestyle", "Cycling at the 1932 Summer Olympics - Men's sprint", "Athletics at the 1984 Summer Olympics – Men's 50 kilometres walk", "Wrestling at the 1928 Summer Olympics - Men's Greco-Roman Bantamweight", "Fencing at the 1992 Summer Olympics - Women's Foil, Individual", "Athletics at the 1980 Summer Olympics – Women's high jump", 'Cross-country skiing at the 2006 Winter Olympics - 4 x 5 Km relay', "Archery at the 2012 Summer Olympics – Men's team", 'Fencing at the 1952 Summer Olympics - Team Epee', "Athletics at the 1968 Summer Olympics - Men's Triple Jump", "Fencing at the 1976 Summer Olympics - Men's Foil, Individual", "Wrestling at the 1956 Summer Olympics - Men's Greco-Roman Flyweight", 'Boxing at the 1960 Summer Olympics - Lightweight', "Canoeing at the 1992 Summer Olympics – Men's slalom K-1", "Boxing at the 1920 Summer Olympics – Men's featherweight", 'Equestrian at the 1924 Summer Olympics – Jumping, Individual', "Athletics at the 1996 Summer Olympics – Women's 5000 metres", "Fencing at the 2012 Summer Olympics – Men's team sabre", "Cycling at the 1964 Summer Olympics – Men's individual pursuit", "Alpine Skiing at the 1976 Winter Olympics - Men's Downhill", "Cross-Country Skiing at the 2002 Winter Olympics - Men's Sprint, Individual", "Shooting at the 2012 Summer Olympics - Women's Trap", "Shooting at the 1976 Summer Olympics - Men's 25 metre rapid fire pistol", "Athletics at the 2004 Summer Olympics – Men's marathon", "Cross-Country Skiing at the 2002 Winter Olympic - Women's 15km freestyle mass start", "Fencing at the 1996 Summer Olympics - Women's Foil, Individual"}
            Answers = 452, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 452, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 245 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 11
            Final Answer: {'1980', '1985', '1970', '1990', '1965', '2010', '2000', '1960', '1975', '2005', '1995'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 246 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.electricity_consumption_per_capita', 'measurement_unit.dated_kilowatt_hour.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.electricity_consumption_per_capita ?o1 . ?o1 fb:measurement_unit.dated_kilowatt_hour.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Electricity consumption per capita, World Development Indicators, World Bank', 'Electricity consumption per capita, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 247 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 248 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Foreign direct investment, net (BoP, current US$), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 249 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Eurostat, Unemployment, Unemployment Rate', 'Unemployment rate, Unemployment in Europe (monthly), Eurostat'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 250 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Inflation, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 251 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Proportion of seats held by women in national parliaments (%), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 252 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Internet users as percentage of population, World Development Indicators and Global Development Finance, World Bank', 'Internet users as percentage of population, World Development Indicators, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 253 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Population growth rate, World Development Indicators, World Bank', 'Population Growth Rate, World Development Indicators and Global Development Finance, World Bank'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 254 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Market capitalization of listed companies (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 255 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Health expenditure (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 256 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Gross savings (% of GDP), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 257 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Consumer price index (2005 = 100), World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 258 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 16
            Final Answer: {'Enrico Letta', 'Carlo Azeglio Ciampi', 'Umberto Bossi', 'Giorgio Napolitano', 'Luigi Einaudi', 'Giulio Tremonti', 'Angelo Maria Cicolani', 'Sandro Pertini', 'Benito Mussolini', 'Bettino Craxi', 'Giuseppe Basile', 'Mario Monti', 'Maria Rosaria Carfagna', 'Franco Frattini', 'Lucio Malan', 'Silvio Berlusconi'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 259 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'Prime Minister of Italy', 'President of Italy', 'Italian Minister of Foreign Affairs', 'Duce', 'Minister for Equal Opportunity'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 260 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Province of Rieti'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 261 / 333: {
          [('Main', '==', 'm.03rjj', ['organization.organization_member.member_of', 'organization.organization_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 4
            Final Answer: {'1999', '1920', '1957', '1955'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 262 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 263 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 264 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'1.21e+10'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 265 / 333: {
          [('Main', '==', 'm.03rjj', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'999', '5690'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 266 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'2795', '54000'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 267 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.casualties', 'military.casualties.lower_estimate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.lower_estimate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'1980', '6100', '2300'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.003s]
        Checking schema 268 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 269 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Gold medal', 'Silver medal', 'Bronze medal'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 270 / 333: {
          [('Main', '==', 'm.03rjj', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 271 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.net_migration', 'measurement_unit.dated_integer.source'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.net_migration ?o1 . ?o1 fb:measurement_unit.dated_integer.source ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Net migration, World Development Indicators, World Bank'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 272 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.valid_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.valid_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 7
            Final Answer: {'2009', '2011', '2008', '2007', '2010', '2006', '2005'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 273 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 58
            Final Answer: {'8.7', '6.3', '10.5', '11', '10', '7.1', '8.4', '7.7', '9.5', '8', '6.2', '7.3', '11.5', '7.2', '8.8', '9.7', '11.7', '10.1', '10.2', '6.5', '8.1', '8.2', '9.1', '7.6', '7.8', '10.3', '6.8', '6.9', '7.4', '9.4', '7.9', '9.6', '5.8', '10.4', '8.5', '10.9', '6', '6.1', '7', '11.3', '11.2', '8.6', '6.6', '10.6', '9', '7.5', '11.1', '9.9', '10.8', '10.7', '9.3', '11.4', '9.8', '8.3', '5.9', '9.2', '6.4', '8.9'}
            Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 58, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 274 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 48
            Final Answer: {'2.04', '4.44', '3.09', '6.3', '1.54', '6.22', '16.58', '10.74', '3.19', '10.85', '1.96', '2.68', '5.24', '14.63', '3.95', '5.22', '6.5', '19.4', '0.75', '7.59', '5.5', '4.48', '5.8', '3.38', '16.38', '17.79', '2.7', '5.08', '21.28', '12.11', '2.46', '1.66', '16.87', '2.07', '4.81', '5.11', '5.88', '3.97', '2.74', '1.82', '4.03', '9.21', '2.22', '2.79', '4.73', '17.43', '2.52', '2'}
            Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 48, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 275 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 8
            Final Answer: {'12.9', '21.4', '21.6', '9.8', '21.3', '17.3', '11.5', '11.1'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 276 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 44
            Final Answer: {'28.04', '23.1109', '2.27665', '1.02469', '33.24', '0.017545', '28.2075', '0.524413', '40.79', '0.070174', '2.27674', '48.83', '0.070053', '35.0383', '56.8175', '0.12269', '44.53', '40.8724', '56.8', '48.8754', '44.5741', '0.525554', '0.01758', '4.5541', '1.02329', '38.0806', '23.1288', '27.2221', '4.55852', '29.1709', '35', '29.04', '53.68', '0.192305', '0.035124', '27.3282', '0.122462', '14.3676', '14.3784', '33.2906', '53.7399', '0.192717', '0.035063', '37.99'}
            Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 44, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 277 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 35
            Final Answer: {'0.06', '0.05', '0.65', '0.4', '0.47', '0.63', '0.12', '0.03', '0.5', '0.02', '0.74', '0.21', '0.99', '0.04', '0.57', '0.68', '0.78', '0.42', '0.72', '0.73', '0.36', '0.6', '0.48', '0.84', '0.77', '0.32', '0.67', '0.01', '0.82', '1.99', '0.07', '0.08', '0.29', '0.53', '0'}
            Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 35, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 278 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'19.67', '45.49', '39.23', '40.6', '69.6', '20.39', '15.71', '50.43', '18.51', '46.52', '44.68', '54.81', '28.75', '15.03', '17.01', '46.93', '15.57', '60.28', '13.09', '10.14', '18.89', '22.57', '13.27', '13.24'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 279 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 17
            Final Answer: {'7.74', '8.01', '8.97', '8.31', '8.62', '7.34', '8.9', '9.55', '9.48', '8.3', '7.61', '9', '7.22', '8.17', '8.64', '7.68', '9.5'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 280 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.rate'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.rate ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 41
            Final Answer: {'24.51', '21.7', '22.2', '22.51', '19.65', '22.6', '16.42', '21.81', '20.76', '23.78', '20.49', '20.63', '21.64', '21.93', '18.97', '21.8', '24.48', '21.39', '18.79', '25.21', '19.78', '20.99', '20.17', '19.69', '22.24', '22.06', '25.77', '24.7', '25.34', '20.91', '21.16', '21.13', '26.79', '16.77', '25.86', '17.07', '25.35', '20.4', '20.88', '25.45', '20.19'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 281 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.unemployment_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.unemployment_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 363
            Final Answer: {'2001', '1991', '1997', '1992', '1984', '2006', '1987', '2009', '1996', '1990', '2008', '2007', '1988', '2002', '2013', '2005', '1995', '1994', '1989', '1993', '1985', '1999', '2003', '1986', '1998', '2012', '2000', '1983', '2011', '2004', '2010'}
            Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 31, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 282 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.cpi_inflation_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.cpi_inflation_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 51
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1968', '1964', '1992', '1984', '2006', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '2007', '1990', '1988', '1979', '2002', '1961', '2005', '1995', '1994', '1989', '1993', '1985', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 283 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gender_balance_members_of_parliament', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gender_balance_members_of_parliament ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 17
            Final Answer: {'2009', '2011', '2005', '2001', '1990', '1997', '1999', '2007', '2003', '2008', '1998', '2004', '2012', '2002', '2000', '2006', '2010'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 284 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.internet_users_percent_population', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.internet_users_percent_population ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 22
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '2008', '2007', '1990', '2002', '2005', '1995', '1994', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.034s]
          Answers = 22, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.034s]
        Checking schema 285 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.population_growth_rate', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.population_growth_rate ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '1963', '2001', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '1990', '2008', '2007', '1988', '1979', '2002', '1961', '1995', '2005', '1994', '1989', '1985', '1993', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '1972', '2000', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1973', '1981', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 286 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.market_cap_of_listed_companies_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 24
            Final Answer: {'2001', '1991', '1997', '1992', '2006', '2009', '1996', '1990', '2007', '2008', '1988', '2002', '2005', '1995', '1994', '1989', '1993', '1999', '2003', '1998', '2000', '2011', '2004', '2010'}
            Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 24, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 287 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.health_expenditure_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.health_expenditure_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 17
            Final Answer: {'2009', '2011', '1996', '2005', '2001', '2008', '2007', '1997', '1999', '2003', '1998', '2002', '2000', '2004', '2006', '2010', '1995'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 288 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gross_savings_as_percent_of_gdp', 'measurement_unit.dated_percentage.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.gross_savings_as_percent_of_gdp ?o1 . ?o1 fb:measurement_unit.dated_percentage.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 42
            Final Answer: {'1982', '2001', '1991', '1997', '1992', '1984', '2006', '1976', '1987', '2009', '1996', '1970', '1977', '1990', '2007', '2008', '1988', '1979', '2002', '2005', '1995', '1994', '1985', '1989', '1993', '1974', '1999', '2003', '1986', '1998', '1978', '1972', '2000', '1983', '1971', '1975', '1980', '2011', '1981', '1973', '2004', '2010'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 289 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'1982', '2001', '1963', '1991', '1997', '1964', '1968', '1992', '1984', '2006', '1960', '1976', '1987', '1962', '2009', '1996', '1970', '1977', '2008', '1990', '2007', '1988', '1979', '2002', '1961', '1995', '2005', '1994', '1985', '1993', '1989', '1974', '1999', '2003', '1986', '1998', '1969', '1978', '2000', '1972', '1983', '1971', '1975', '1966', '1967', '1980', '2011', '1981', '1973', '1965', '2004', '2010'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 290 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.consumer_price_index', 'measurement_unit.dated_index_value.index_value'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:location.statistical_region.consumer_price_index ?o1 . ?o1 fb:measurement_unit.dated_index_value.index_value ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 52
            Final Answer: {'78.67', '107.44', '8.25', '28.94', '46.74', '11.51', '109.91', '51.79', '5.54', '5.97', '98.04', '86.52', '7.45', '6.71', '9.85', '33.68', '112.92', '83.47', '93.42', '57.82', '24.57', '91.17', '42.8', '74.75', '108.24', '17.67', '13.42', '54.43', '88.7', '6.16', '38.61', '5.79', '71.86', '102.07', '4.56', '4.68', '5.23', '49.45', '6.28', '95.92', '15.76', '81.8', '85.11', '4.86', '65.45', '61.58', '7.08', '68.78', '103.93', '100', '6.4', '20.26'}
            Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 52, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 291 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 20
            Final Answer: {'1994', '2011', '1993', '2001', '2008', '1999', '1948', '1924', '1992', '1978', '2006', '2013', '1983', '1987'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 292 / 333: {
          [('Main', '==', 'm.03rjj', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 14
            Final Answer: {'1994', '2011', '1985', '1955', '1992', '2012', '1987', '2004', '2013', '1943', '2006', '1995'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 293 / 333: {
          [('Main', '==', 'm.03rjj', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 14
            Final Answer: {'Asian Development Bank', 'League of Nations', 'African Development Bank', 'Organisation for Economic Co-operation and Development', 'G-20 major economies', 'European Space Agency', 'Caribbean Development Bank', 'Paris Club', 'World Bank', 'European Union', 'Council of Europe', 'United Nations', 'Western European Union', 'Zangger Committee'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 294 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Benito Mussolini', 'Carlo Pellion di Persano'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 295 / 333: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.exported_to'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:02] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.exported_to ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Albania', 'Algeria', 'United States of America'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 296 / 333: {
          [('Main', '==', 'm.03rjj', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 297 / 333: {
          [('Main', '==', 'm.03rjj', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'11', '5201'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 298 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 299 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_combatant.casualties', 'military.casualties.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_combatant.casualties ?o1 . ?o1 fb:military.casualties.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Operation Crusader'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Current: 300 / 333
        Checking schema 300 / 333: {
          [('Main', '==', 'm.03rjj', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 483
            Final Answer: {'Marta Capurso', 'Pietro Speciale', 'Paola Croce', 'Piero Gros', 'Martina Guiggi', 'Fiorenzo Marini', 'Renzo Morigi', 'Abdon Pamich', 'Francesco Damiani', 'Girolamo Giovinazzo', 'Edoardo Garzena', 'Manuela Secolo', 'Fabrizio Donato', 'Giacomo Bozzano', 'Nino Bibbia', 'Andrea Benelli', 'Paola Pezzo', 'Salvatore Sanzo', 'Pierfranco Vianelli', 'Andreea Stefanescu', 'Antonio Conte', 'Antonio Spallino', 'Aldo Nadi', 'Simone Parodi', 'Antonio Rossi', 'Vincenzo Picardi', 'Danijel Premuš', 'Stefano Carozzo', 'Vincenzo Mangiacapre', 'Niccolò Gitto', 'Matteo Aicardi', 'Carlo Orlandi', 'Luigi Mastrangelo', 'Gian Giorgio Trissino', 'Alessandro Ciceri', 'Giovanni Gozzi', 'Matteo Pelliciari', 'Nedo Nadi', 'Andrea Pirlo', 'Luca Cantagalli', 'Alessio Sartori', 'Ylenia Scapin', 'Marco Meoni', 'Thomas Prugger', 'Elisa Di Francisca', 'Giovanni Pellielo', 'Cristian Zorzi', 'Gerhard Plankensteiner', 'Deni Fiorentini', 'Andrea Gardini', 'Alberto Braglia', 'Nicola Vizzoni', 'Lucia Morico', 'Dario Mangiarotti', 'Franco Riccardi', 'Taismary Agüero', 'Michele Antonioli', 'Marco Galiazzo', 'Patrizio Oliva', 'Maurizio Stecca', 'Bruno Mario Rossetti', 'Luigi Tarantino', 'Gianfranco Martin', 'Michal Lasko', 'Elisa Rigaudo', 'Margherita Granbassi', 'Carlo Cavagnoli', 'Mario Lanzi', 'Francesca Piccinini', 'Roberto Chiacig', 'Jury Chechi', 'Roberto Cammarelle', 'Ennio Falco', 'Johann Passler', 'Darina Mifkova', 'Giovanni Zuddas', 'Franco Nones', 'Nicola Grigolo', 'Josef Polig', 'Aldo Montano', 'Gavino Matta', 'Claudio Pollio', 'Albano Pera', 'Alex Schwazer', 'Domenico Fioravanti', 'Silvio Fauner', 'Emanuele Merisi', 'Giacomo Pastorino', 'Ettore Caffaratti', 'Simone Rosalba', 'Matteo Martino', 'Anna Vania Mello', 'Pasquale Gravina', 'Franco Bertinetti', 'Ivano Brugnetti', 'Giancarlo Ferrari', 'Gianni Caldana', 'Nicola Franceschina', 'Dorando Pietri', 'Paoletta Magoni', 'Federica Pellegrini', 'Francesco Martino', 'Roberto Battaglia', 'Fabio Casartelli', 'Yannick Kocon', 'Leandro Faggin', 'Tullio Gonnelli', 'Valentino Gallo', 'Marco Antonio Mandruzzato', 'Kurt Brugger', "Raimondo D'Inzeo", 'Gianluca Basile', 'Alessandro Pittin', 'Samuele Papi', 'Amelia Piccinini', 'Fernando Atzori', 'Antonella Bellutti', 'Andrea Baldini', 'Mario Lertora', 'Antonella Bragaglia', 'Andrea Cassarà', 'Mauro Gavotto', 'Paolo Cozzi', 'Nicola Rodigari', 'Vencislav Simeonov', 'Marco Albarello', 'Giovanni Carminucci', 'Gianmarco Pozzecco', 'Luigi Samele', 'Giorgio Bambini', 'Giovanni Parisi', 'Ugo Frigerio', 'Laura Bruschini', 'Mirko Corsano', 'Giorgio Bocchino', 'Imelda Chiappa', 'Matteo Morandi', 'Salvatore Antibo', 'Gino Rossi', 'Roberto Ferraris', 'Domenico Matteucci', 'Andrea Barzagli', 'Luigi Beccali', 'Arianna Errigo', 'Massimo Giacoppo', 'Matej Cernic', 'Igor Cassina', 'Tatiana Guderzo', 'Silvano Basagni', 'Jessica Rossi', 'Alessandro Puccini', 'Cristian Moreni', 'Michele Frangilli', 'Mirko Vuillermin', 'Manuela Di Centa', 'Giorgio Vanzetta', 'Silvano Bertini', 'Lidia Trettel', 'Cosimo Pinto', 'Isolde Kostner', 'Rosalba Forciniti', 'Bruno Pellizzari', 'Giovanni Pettenella', 'Marco Venturini', 'Mauro Sarmiento', 'Giuseppe Tosi', 'Romolo Catasta', 'Stefano Tempesti', 'Vincenzo Pinton', 'Giampiero Pastore', 'Gastone Pierini', 'Angelo Musone', 'Fernando Altimani', 'Maurizio Damilano', 'Alberto Pigaiani', 'Luca Cordano', 'Elisa Santoni', 'Beniamino Bonomi', 'Gianni Ghidini', 'Simona Gioli', 'Adolfo Consolini', 'Pierino Gabetti', 'Carlo Massullo', 'Gustavo Marzi', 'Luciano Giovannetti', 'Dino Bruni', 'Sabina Valbusa', 'Wladimiro Calarese', 'Ubaldesco Baldi', 'Giovanni De Benedictis', 'Marcello Nizzola', 'Eros Poli', 'Luca Garri', 'Mieczysław Nowicki', 'Omero Bonoli', 'Italo Santelli', 'Andrea Ghiurghi', 'Vincenzo Maenza', 'Daniela Gattelli', 'Ana Paula de Tassis', 'Massimo Bulleri', 'Galliano Rossini', 'Luca Sacchi', 'Angelo Scalzone', 'Giulia Quintavalle', 'Giorgio Avola', 'Luigi Cantone', 'Hubert Pallhuber', 'Carmelo Bossi', 'Manuela Leggeri', 'Andrea Collinelli', 'Ercole Gallegati', 'Simone Cercato', 'Filippo Pozzato', 'Felice Mariani', 'Elisa Blanchi', 'Nicole Della Monica', 'Martina Grimaldi', 'Gustav Thöni', 'Cristian Savani', 'Emilio Lunghi', 'Paola Cardullo', 'Giuseppe Martinelli', 'Rodolfo Rombaldoni', 'Luigi Rovati', 'Alessandro Valerio', 'Davide Rummolo', 'Novella Calligaris', 'Francesca Ferretti', 'Herbert Plank', 'Arianna Follis', 'Guglielmo Presenti', 'Giordano Turrini', 'Serena Ortolani', 'Alex Giorgetti', 'Matteo Tagliariol', 'Niccolò Campriani', 'Stefania Pirozzi', 'Marco Bui', 'Piero Toscani', 'Paola Cacchi', 'Diego Romero', 'Livio Trape', 'Ercole Baldini', 'Eleonora Lo Bianco', 'Alessia Filippi', 'Fabio dal Zotto', 'Erika Lechner', 'Katia Zini', 'Giancarlo Bergamini', 'Giuseppe Tonani', 'Giuseppe Gibilisco', 'Giulio Gaudini', 'Clemente Russo', 'Stefania Belmondo', 'Giorgio Cagnotto', 'Karen Putzer', 'Emiliano Brembilla', 'Pier Alberto Carrara', 'Savino Guglielmetti', 'Amaurys Perez', 'Attilio Pavesi', 'Eddy Ottoz', 'Giuseppe Maddaloni', 'Giovanni Scalzo', 'Claudia Giordani', 'Nadia Centoni', 'Sante Gaiardoni', 'Paolo Bettini', 'Daniele Masala', 'Nikola Radulovic', 'Irene Camber', 'Giovanni Evangelisti', 'Paolo Vidoz', 'Sergio Caprari', 'Alberto Cova', 'Josefa Idem', 'Sergio Bianchetto', 'Aureliano Bolognesi', 'Matteo Ferrari', 'Ernesto Formenti', 'Valerio Vermiglio', 'Valentina Turisini', 'Giovanna Trillini', 'Bruno Monti', 'Nino Benvenuti', 'Daniele Molmenti', 'Ennio Mattarelli', 'Carlo Agostoni', 'Pino Dordoni', 'Silvio Martinello', 'Michele Mian', 'Mauro Numa', 'Tommaso Lequio di Assaba', 'Luciano Bruno', 'Chiara Cainero', 'Stefano Battistelli', 'Jenny Barazza', 'Romano Garagnani', 'Silvano Abba', 'Federico Euro Roman', 'Luca Devoti', 'Serafino Mazzarochi', 'Giorgio Zampori', 'Alex Zanardi', 'Dante Boninfante', 'Vittorio Tamagnini', 'Emanuela Pierantozzi', 'Alberto Tomba', 'Romano Battisti', 'Salvatore Todisco', 'Enrico Fabris', 'Gerda Weissensteiner', 'Romeo Bertini', 'Elisa Cusma', "Piero D'Inzeo", 'Davide Rebellin', 'Giuseppe Bognanni', 'Giorgio Ursi', 'Marco Marin', 'Matteo Soragna', 'Salvatore Morale', 'Orazio Mariani', 'Lucilla Perrotta', 'Gabriella Paruzzi', 'Federico Cappellazzo', 'Carlo Galimberti', 'Spartaco Bandinelli', 'Mauro Checcoli', 'Gabriella Dorio', 'Diego Confalonieri', 'Alessandro Paparoni', 'Giuliano Razzoli', 'Sandro Lopopolo', 'Ermanno Pignatti', 'Maurizio Pimponi', 'Alessandro Andrei', 'Deborah Gelisio', 'Giuseppe Ros', 'Adelmo Bulgarelli', 'Pietro Bianchi', 'Mario Gruppioni', 'Maurizio Carnino', 'Marta Pagnini', 'Marco Aurelio Fontana', 'Andrea Sartoretti', 'Gian-Matteo Ranzi', 'Ivan Zaytsev', 'Massimiliano Rosolino', 'Andrea Bari', 'Vigor Bovolenta', 'Valerio Arri', 'Massimo Fabbrizi', 'Simona Rinieri', 'Marco Bracci', 'Daniela Ceccarelli', 'Giovanni Lattuada', 'Emanuele Birarelli', "Francesco D'Aniello", 'Maurizio Felugo', 'Romina Laurito', 'Alessandra Sensini', 'Edith Gufler', 'Ilario Di Buò', 'Elisa Togut', 'Sebastiano Mannironi', 'Valentino Gasparella', 'Riccardo Lione', 'Antonella Confortola Wyatt', 'Andrea Giovi', 'Gerolamo Quaglia', "Alessandro D'Ottavio", 'Wilfried Huber', 'Consuelo Turetta', 'Daniele Nardello', 'Arianna Fontana', 'Deborah Compagnoni', 'Zeno Colò', 'Alberto Cisolla', 'Edoardo Mangiarotti', 'Elisabetta Perrone', 'Fiona May', 'Filippo Bottino', 'Damiano Pippi', 'Umberto De Morpurgo', 'Anzhelika Savrayuk', 'Ernesto Ambrosini', 'Anselmo Silvino', 'Ivano Fontana', 'Mara Zini', 'Franco De Piccoli', 'Alessandro Lambruschini', 'Carlo Molfetta', 'Ilaria Salvatori', 'Giorgio Di Centa', 'Francesco Musso', 'Giorgio Oberweger', 'Dragan Travica', 'Sandro Bellucci', 'Alfredo Rota', 'Ulderico Sergo', 'Franco Valle', 'Graziano Mancinelli', 'Valerio Aspromonte', 'Roberto Di Donna', 'Vincenzo Zucconelli', 'Paola Paggi', 'Pierpaolo Ferrazzi', 'Carlo Pavesi', 'Mario Ghella', 'Bino Bini', 'Stefano Baldini', 'Guido Fantoni', 'Giovanni Lombardi', 'Enzo Sacchi', 'Hristo Zlatanov', 'Marino Morettini', 'Guglielmo Segato', 'Diego Occhiuzzi', 'Franco Nenci', 'Franco Menichelli', 'Enrico Porro', 'Lorenzo Bernardi', 'Edera Gentile', 'Luca Tesconi', 'Pietro Lombardi', 'Andrea Raffaelli', 'Giuseppe Delfino', 'Maurizia Cacciatori', 'Antonella Ragno-Lonzi', 'Paul Hildgartner', 'Gelindo Bordin', 'Roberta Brunet', 'Giuliana Minuzzo', 'Ignazio Fabra', 'Luca Paolini', 'Ezio Gamba', 'Dorina Vaccaroni', 'Giancarlo Cornaggia Medici', 'Ondina Valla', 'Klaus Dibiasi', 'Mario Zanin', 'Pietro Mennea', 'Maurilio De Zolt', 'Manlio di Rosa', 'Stefano Cerioni', 'Andrea Zorzi', 'Oswald Haselrieder', 'Andrea Giani', 'Sara Simeoni', 'Fabio Albarelli', 'Andrea Minguzzi', 'Pietro Piller Cottrer', 'Norberto Oberburger', 'Saverio Ragno', 'Maria Consolata Collino', 'Giuseppina Leone', 'Antonella Del Core', 'Alessandro Argenton', 'Armin Zöggeler', 'Romeo Neri', 'Bruno Visintin', 'Pietro Figlioli', 'Valentina Vezzali', 'Alessandro Fei', 'Eugenio Amore', 'Giacomo Galanda', 'Giuseppe Gentile', 'Denis Marconato', 'Primo Zamparini', 'Giulio Saraudi', 'Filippo Magnini', 'Sabrina Bertini', 'Mauro Nespoli', 'Roland Thöni', 'Livio Berruti', 'Alex Righetti', 'Bruno Dreossi', 'Fabio Carta', 'Paolo Tofoli', 'Elio Ragni', 'Christian Presciutti', 'Annamaria Solazzi'}
            Answers = 483, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 483, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 301 / 333: {
          [('Main', '==', 'm.03rjj', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 8
            Final Answer: {'Tony Parker', 'Clive Owen', 'Balthazar Getty', 'Colin Farrell', 'Alicia Keys', 'James Wilkie Broderick', 'Anne Hathaway', 'Claire Danes'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 302 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_post.people_posted_here', 'military.military_posting.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_post.people_posted_here ?o1 . ?o1 fb:military.military_posting.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_post.people_posted_here ?o1 . ?o1 fb:military.military_posting.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Lyn Philp'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 303 / 333: {
          [('Main', '==', 'm.03rjj', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 304 / 333: {
          [('Main', '==', 'm.03rjj', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 305 / 333: {
          [('Main', '==', 'm.03rjj', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 306 / 333: {
          [('Main', '==', 'm.03rjj', ['military.military_post.people_posted_here', 'military.military_posting.post'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_post.people_posted_here ?o1 . ?o1 fb:military.military_posting.post ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:military.military_post.people_posted_here ?o1 . ?o1 fb:military.military_posting.post ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 307 / 333: {
          [('Main', '==', 'm.03rjj', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Flag of Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 308 / 333: {
          [('Main', '==', 'm.03rjj', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'1948'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 309 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.tournament'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.tournament ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 5
            Final Answer: {'2009 Mediterranean Games', '2007 World Aquatics Championships', '2009 World Aquatics Championships', '2011 European Mountain Running Championships', '2005 World Aquatics Championships'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 310 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Gold medal', 'Silver medal', 'Bronze medal'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 311 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.championships'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.championships ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.championships ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'2007 World Championships in Athletics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 312 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_area.current_records', 'base.athletics.current_area_record.mark'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.mark ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.mark ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 313 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_area.current_records', 'base.athletics.current_area_record.area'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.area ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.area ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 314 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competitors'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competitors ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'Antonella Confortola Wyatt', 'Federica Pellegrini', 'Gabriele Abate'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.051s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.051s]
        Checking schema 315 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.rank ?o2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 3
            Final Answer: {'3', '1', '2'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 316 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.athlete_s'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.athlete_s ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.athlete_s ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Andrew Howe', 'Antonietta Di Martino'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 317 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.medal'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.medal ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Silver medal'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 318 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_area.current_records', 'base.athletics.current_area_record.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 319 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_area.current_records', 'base.athletics.current_area_record.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {"Men's Long jump"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 320 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 321 / 333: {
          [('Main', '==', 'm.03rjj', ['sports.sport_country.athletic_performances', 'sports.competitor_competition_relationship.competition'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:sports.sport_country.athletic_performances ?o1 . ?o1 fb:sports.competitor_competition_relationship.competition ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 7
            Final Answer: {"Swimming at the 2007 World Aquatics Championships – Women's 200 metre freestyle", "Swimming at the 2005 World Aquatics Championships – Women's 200m freestyle", 'Senior Men race at 2011 European Mountain Running Championships', 'Senior Women race at 2011 European Mountain Running Championships', "Swimming at the 2009 World Aquatics Championships – Women's 400 metre freestyle", "Swimming at the 2009 Mediterranean Games - Women's 400 metre freestyle", "Swimming at the 2009 World Aquatics Championships – Women's 200 metre freestyle"}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 322 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {"2007 World Championships in Athletics – Men's long jump", "2007 World Championships in Athletics – Women's high jump"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 323 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_country.championships_athletes_performances', 'base.athletics.athletics_championships_competition_athlete_relationship.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_country.championships_athletes_performances ?o1 . ?o1 fb:base.athletics.athletics_championships_competition_athlete_relationship.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 324 / 333: {
          [('Main', '==', 'm.03rjj', ['base.athletics.athletics_area.current_records', 'base.athletics.current_area_record.record_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.record_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:base.athletics.athletics_area.current_records ?o1 . ?o1 fb:base.athletics.current_area_record.record_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Andrew Howe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 325 / 333: {
          [('Main', '==', 'm.04_x4', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 326 / 333: {
          [('Main', '==', 'm.04_x4', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'1496'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 327 / 333: {
          [('Main', '==', 'm.04_x4', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 328 / 333: {
          [('Main', '==', 'm.04_x4', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'Money'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 329 / 333: {
          [('Main', '==', 'm.04_x4', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'Money'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 330 / 333: {
          [('Main', '==', 'm.04_x4', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 WHERE { fb:m.04_x4 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'201'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 331 / 333: {
          [('Main', '==', 'm.04_x4', ['base.symbols.symbolized_concept.symbolized_by', 'base.symbols.symbolism.concept'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.symbols.symbolized_concept.symbolized_by ?o1 . ?o1 fb:base.symbols.symbolism.concept ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.symbols.symbolized_concept.symbolized_by ?o1 . ?o1 fb:base.symbols.symbolism.concept ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'Money'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 332 / 333: {
          [('Main', '==', 'm.04_x4', ['base.symbols.symbolized_concept.symbolized_by', 'base.symbols.symbolism.symbol'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.symbols.symbolized_concept.symbolized_by ?o1 . ?o1 fb:base.symbols.symbolism.symbol ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.04_x4 fb:base.symbols.symbolized_concept.symbolized_by ?o1 . ?o1 fb:base.symbols.symbolism.symbol ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.04_x4'}
            Query return lines = 1
            Final Answer: {'Maneki-neko'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        324 / 333 coarse schemas kept with ans_size > 0.
      } [5.694s]
      Coarse level ended, resulting in 324 schemas.
    } [18.569s]
    Type level searching (total types = 10): {
      Current: 0 / 324
[{'type.datetime'}]
[{'people.gender'}]
[{'sports.sports_team_location'}]
[{'sports.sports_championship_event'}]
[{'soccer.football_match'}]
[{'sports.sport'}]
[{'book.written_work'}]
[{'base.ikariam.ikariam_resources'}]
[{'location.location'}]
[{'type.datetime'}]
[{'time.event'}]
[{'film.film'}]
[{'type.datetime'}]
[{'time.event'}]
[{'common.topic'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.governmental_body'}]
[{'government.government_agency'}]
[{'people.person'}]
[{'location.location'}]
[{'military.military_combatant'}]
[{'music.composition'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'olympics.olympic_athlete'}]
[{'base.locations.continents'}]
[{'food.beer'}]
[{'base.thoroughbredracing.thoroughbred_racehorse'}]
[{'biology.animal_breed'}]
[{'finance.currency'}]
[{'language.human_language'}]
[{'internet.top_level_domain'}]
[{'location.administrative_division'}]
[{'symbols.namesake'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'government.government_office_or_title'}]
[{'government.government'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.location'}]
[{'military.armed_force'}]
[{'fictional_universe.fictional_universe'}]
[{'olympics.olympic_games'}]
[{'exhibitions.exhibition'}]
[{'film.film'}]
[{'media_common.netflix_title'}]
[{'location.citytown'}]
[{'type.int'}]
[{'finance.currency'}]
[{'location.administrative_division'}]
[{'book.newspaper'}]
[{'base.aareas.schema.administrative_area'}]
[{'base.aareas.schema.administrative_area_type'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'organization.organization'}]
[{'fictional_universe.work_of_fiction'}]
[{'organization.organization'}]
[{'sports.multi_event_tournament'}]
[{'base.athletics.athletics_organization'}]
[{'media_common.quotation'}]
[{'cvg.computer_videogame'}]
[{'film.film'}]
[{'book.written_work'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'type.int'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'base.x2010fifaworldcupsouthafrica.world_cup_participant'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.world_cup_participation'}]
[{'base.tournaments.tournament_participating_competitor'}, {'base.tournaments.tournament_competitor'}]
[{'base.tournaments.tournament_participating_competitor'}, {'type.int'}]
[{'base.tournaments.match_competitor_relationship'}, {'base.tournaments.tournament_match'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'type.int'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'base.x2010fifaworldcupsouthafrica.world_cup_squad'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.fifa_world_cup'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.qualification_criteria'}]
[{'base.tournaments.tournament_participating_competitor'}, {'base.tournaments.tournament_round'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'base.tournaments.match_competitor_relationship'}, {'base.tournaments.tournament_competitor'}]
[{'soccer.football_team_management_tenure'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'soccer.football_position'}]
[{'base.x2010fifaworldcupsouthafrica.current_world_cup_squad'}, {'soccer.football_team'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'type.datetime'}]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team'}, {'base.x2010fifaworldcupsouthafrica.world_cup_qualification_group'}]
[{'base.tournaments.tournament_participating_competitor'}, {'base.tournaments.tournament'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'soccer.football_team_management_tenure'}, {'soccer.football_team_manager'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
      Current: 100 / 324
[{'user.jeff.default_domain.football_tournament_match_statistics'}, {'base.tournaments.tournament'}]
[{'user.jeff.default_domain.football_tournament_match_statistics'}, {'type.int'}]
[{'user.jeff.default_domain.football_tournament_match_statistics'}, {'type.int'}]
[{'user.jeff.default_domain.football_tournament_match_statistics'}, {'type.int'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_float'}, {'type.float'}]
[{'measurement_unit.dated_metric_ton'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'type.datetime'}]
[{'measurement_unit.dated_metric_ton'}, {'type.float'}]
[{'measurement_unit.dated_kgoe'}, {'type.datetime'}]
[{'measurement_unit.dated_kgoe'}, {'dataworld.information_source'}]
[{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
[{'measurement_unit.adjusted_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_float'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_metric_ton'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_kgoe'}, {'type.float'}]
[{'measurement_unit.adjusted_money_value'}, {'type.datetime'}]
[{'measurement_unit.adjusted_money_value'}, {'type.float'}]
      Current: 200 / 324
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_athlete'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_participating_country'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_sport'}]
[{'government.national_anthem_of_a_country'}, {'location.country'}]
[{'government.national_anthem_of_a_country'}, {'type.datetime'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'olympics.olympic_athlete_affiliation'}, {'olympics.olympic_games'}]
[{'government.national_anthem_of_a_country'}, {'government.national_anthem'}]
[{'sports.competitor_country_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_country_relationship'}, {'sports.sport'}]
[{'sports.competitor_country_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_country_relationship'}, {'sports.multi_event_tournament'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'type.float'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.governmental_body'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'location.imports_and_exports'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'military.casualties'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.casualties_type'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_kilowatt_hour'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'measurement_unit.dated_money_value'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_percentage'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_index_value'}, {'dataworld.information_source'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'organization.organization_membership'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'location.imports_and_exports'}, {'finance.currency'}]
[{'location.imports_and_exports'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'military.force_strength'}, {'type.int'}]
[{'military.casualties'}, {'type.int'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_medal'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'measurement_unit.dated_integer'}, {'dataworld.information_source'}]
[{'measurement_unit.dated_money_value'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.float'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_percentage'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.datetime'}]
[{'measurement_unit.dated_index_value'}, {'type.float'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'location.imports_and_exports'}, {'location.statistical_region'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'military.casualties'}, {'military.military_conflict'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'military.military_posting'}, {'military.military_person'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'military.military_posting'}, {'military.military_post'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
      Current: 300 / 324
[{'symbols.flag_use'}, {'type.datetime'}]
[{'sports.competitor_competition_relationship'}, {'sports.multi_event_tournament'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_medal'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_championships'}]
[{'base.athletics.current_area_record'}, {'base.athletics.athletics_area'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competitor'}]
[{'sports.competitor_competition_relationship'}, {'type.int'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.track_and_field_athlete'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_medal'}]
[{'base.athletics.current_area_record'}, {'base.athletics.athletics_country'}]
[{'base.athletics.current_area_record'}, {'base.athletics.athletics_event'}]
[{'sports.competitor_competition_relationship'}, {'sports.sport_country'}]
[{'sports.competitor_competition_relationship'}, {'sports.tournament_event_competition'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_championships_competition'}]
[{'base.athletics.athletics_championships_competition_athlete_relationship'}, {'base.athletics.athletics_country'}]
[{'base.athletics.current_area_record'}, {'base.athletics.track_and_field_athlete'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.symbols.symbolism'}, {'base.symbols.symbolized_concept'}]
[{'base.symbols.symbolism'}, {'base.symbols.symbol'}]
      11 typed schemas retrieved from 324 coarse schemas.
      Calculating F1 for 11 typed schemas: {
        Current: 0 / 11
        Checking schema 0 / 11: {
          [('Main', '==', 'm.03rjj', ['location.country.currency_used']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'finance.currency'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_used ?o1 . ?o1 fb:type.object.type fb:finance.currency . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_used ?o1 . ?o1 fb:type.object.type fb:finance.currency . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'Euro'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.007s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.007s]
        Checking schema 1 / 11: {
          [('Main', '==', 'm.03rjj', ['location.country.currency_formerly_used']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'finance.currency'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.type fb:finance.currency . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03rjj fb:location.country.currency_formerly_used ?o1 . ?o1 fb:type.object.type fb:finance.currency . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 2
            Final Answer: {'Italian lira', 'Sammarinese lira'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 2 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal', 'measurement_unit.dated_money_value.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 3 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_per_capita_in_ppp_dollars', 'measurement_unit.dated_money_value.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_per_capita_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 4 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gni_in_ppp_dollars', 'measurement_unit.dated_money_value.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gni_in_ppp_dollars ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 5 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_nominal_per_capita', 'measurement_unit.dated_money_value.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_nominal_per_capita ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 6 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.diesel_price_liter', 'measurement_unit.dated_money_value.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.diesel_price_liter ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 7 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.gdp_real', 'measurement_unit.adjusted_money_value.adjustment_currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'measurement_unit.adjusted_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.gdp_real ?o1 . ?o1 fb:measurement_unit.adjusted_money_value.adjustment_currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 8 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_imported_from', 'location.imports_and_exports.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_imported_from ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'UK £'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 9 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.foreign_direct_investment_net_inflows', 'measurement_unit.dated_money_value.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'measurement_unit.dated_money_value'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.foreign_direct_investment_net_inflows ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 10 / 11: {
          [('Main', '==', 'm.03rjj', ['location.statistical_region.places_exported_to', 'location.imports_and_exports.currency']), ('Type', '==', 'finance.currency', ['type.object.type'])]
          var_types: [{'location.imports_and_exports'}, {'finance.currency'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:20:03] Q_Schema Request: {
            WebQ_2195|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03rjj fb:location.statistical_region.places_exported_to ?o1 . ?o1 fb:location.imports_and_exports.currency ?o2 . ?o2 fb:type.object.type fb:finance.currency . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03rjj'}
            Query return lines = 1
            Final Answer: {'United States dollar'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        11 / 11 typed schemas kept with ans_size > 0.
      } [0.100s]
      Typed level ended, resulting in 335 schemas.
    } [0.116s]
    Time level searching (total times = 0): {
      Current: 0 / 335
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [{'government.government_agency.date_founded'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'food.beer.first_brewed'}]
self.var_time_preds: [{'base.thoroughbredracing.thoroughbred_racehorse.date_of_death', 'base.thoroughbredracing.thoroughbred_racehorse.foaled'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.top_level_domain.introduced'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [{'cvg.computer_videogame.release_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      Current: 100 / 335
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_float.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_metric_ton.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kgoe.date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
      Current: 200 / 335
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_kilowatt_hour.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_percentage.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'military.military_posting.to_date', 'military.military_posting.from_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'military.military_posting.to_date', 'military.military_posting.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
      Current: 300 / 335
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.athletics.current_area_record.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.athletics.current_area_record.date'}, set()]
self.var_time_preds: [{'base.athletics.current_area_record.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.athletics.current_area_record.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'location.imports_and_exports.date'}, set()]
      0 timed schemas retrieved from 335 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 335 schemas.
    } [0.007s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 335
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'film.film.initial_release_date'}]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[{'government.government_agency.date_founded'}]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[{'food.beer.first_brewed'}]
[{'base.thoroughbredracing.thoroughbred_racehorse.date_of_death', 'base.thoroughbredracing.thoroughbred_racehorse.foaled'}]
[set()]
[set()]
[set()]
[{'internet.top_level_domain.introduced'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'organization.organization.date_founded'}]
[set()]
[{'organization.organization.date_founded'}]
[set()]
[set()]
[{'media_common.quotation.date'}]
[{'cvg.computer_videogame.release_date'}]
[{'film.film.initial_release_date'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[set(), set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[set(), set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[{'base.x2010fifaworldcupsouthafrica.world_cup_team.qualified_on'}, set()]
[set(), set()]
[set(), set()]
[{'soccer.football_team_management_tenure.from', 'soccer.football_team_management_tenure.to'}, set()]
[set(), set()]
[set(), set()]
      Current: 100 / 335
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_float.date'}, set()]
[{'measurement_unit.dated_metric_ton.date'}, set()]
[{'measurement_unit.dated_kgoe.date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
      Current: 200 / 335
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'government.national_anthem_of_a_country.official_anthem_until', 'government.national_anthem_of_a_country.official_anthem_since'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, {'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_kilowatt_hour.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_percentage.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'measurement_unit.dated_index_value.base_period', 'measurement_unit.dated_index_value.date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[set(), set()]
[{'location.imports_and_exports.date'}, set()]
[set(), set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[set(), set()]
[set(), set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'military.military_posting.to_date', 'military.military_posting.from_date'}, set()]
[set(), set()]
[set(), set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'military.military_posting.to_date', 'military.military_posting.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
      Current: 300 / 335
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.athletics.current_area_record.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.athletics.current_area_record.date'}, set()]
[{'base.athletics.current_area_record.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.athletics.current_area_record.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set()]
[set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'measurement_unit.adjusted_money_value.measurement_date', 'measurement_unit.adjusted_money_value.adjustment_date'}, set()]
[{'location.imports_and_exports.date'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'location.imports_and_exports.date'}, set()]
      0 ordinal schemas retrieved from 335 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 335 schemas.
    } [0.007s]
    [2020-12-03 14:20:03] buffer saved.
    335 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2195_schema].
  } [6m23.761s]
  Entering Q 2196 / 5810 [b'what years did the orioles play in the world series?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [4, 5) (orioles) == m.01d6g (Baltimore_Orioles) {'score': 27879.419883, 'source': 0.0}
      #01 Entity: [4, 5) (orioles) == m.02_v8m (Baltimore_Orioles_(19th_century)) {'score': 1.537166, 'source': 1.0}
      #02 Entity: [8, 10) (world series) == m.0fjp3 (World_Series) {'score': 15589.844692, 'source': 0.0}
      #03 Type: [5, 6) (play) == theater.play (play) {'sim': 1.0}
      #04 Type: [5, 6) (play) == games.playing_card_game_play_direction (playing card game play direction) {'sim': 0.872757}
      #05 Type: [9, 10) (series) == film.film_series (film series) {'sim': 0.805849}
      #06 Type: [9, 10) (series) == travel.guidebook_series (guidebook series) {'sim': 0.805833}
      #07 Type: [1, 4) (years did the) == time.day_of_year (day of year) {'sim': 0.803403}
      #08 Type: [9, 10) (series) == comic_books.comic_book_series (comic book series) {'sim': 0.802737}
      #09 Type: [9, 10) (series) == visual_art.art_series (art series) {'sim': 0.798734}
      #10 Type: [5, 6) (play) == games.playing_card_game (playing card game) {'sim': 0.797933}
      #11 Type: [9, 10) (series) == book.literary_series (literary series) {'sim': 0.786984}
      #12 Type: [9, 10) (series) == conferences.conference_series (conference series) {'sim': 0.785124}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:26:09) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.01d6g ?p1 ?o1 . }
        [2020-12-03 14:26:09] SPARQL hit!
        Filt_Query_Ret = 14 / 29 ( 0.000s)
        [Len-1||F1/3||3/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01d6g ?p1 ?o1 . ?o1 ?p2 fb:m.0fjp3 . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01d6g ?p1 ?o1 . ?o1 ?p2 fb:m.0fjp3 . }
            Query return lines = 2
          } [0.010s]
          Filt_Query_Ret = 2 / 2 ( 0.010s)
        } [0.010s]
      } [0.011s]
      [Len-1||F2/3] (2020-12-03 14:26:09) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02_v8m ?p1 ?o1 . }
        [2020-12-03 14:26:09] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02_v8m ?p1 ?o1 . }
          Query return lines = 14
        } [0.019s]
        Filt_Query_Ret = 5 / 14 ( 0.019s)
        [Len-1||F2/3||3/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 fb:m.0fjp3 . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 fb:m.0fjp3 . }
            Query return lines = 0
          } [0.010s]
          Filt_Query_Ret = 0 / 0 ( 0.011s)
        } [0.011s]
      } [0.029s]
      [Len-1||F3/3] (2020-12-03 14:26:09) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0fjp3 ?p1 ?o1 . }
        [2020-12-03 14:26:09] SPARQL hit!
        Filt_Query_Ret = 4 / 13 ( 0.000s)
        [Len-1||F3/3||1/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 fb:m.01d6g . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 fb:m.01d6g . }
            Query return lines = 4
          } [0.017s]
          Filt_Query_Ret = 4 / 4 ( 0.017s)
        } [0.018s]
        [Len-1||F3/3||2/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 fb:m.02_v8m . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 fb:m.02_v8m . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
      } [0.035s]
      [Len-2||F1/3] (2020-12-03 14:26:09) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.01d6g ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:09] SPARQL hit!
        Filt_Query_Ret = 31 / 356 ( 0.002s)
        [Len-2||F1/3||3/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01d6g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0fjp3 . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01d6g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0fjp3 . }
            Query return lines = 30
          } [0.013s]
          Filt_Query_Ret = 0 / 30 ( 0.013s)
        } [0.013s]
        [Len-2||F1/3||3/3-2] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01d6g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0fjp3 . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.01d6g ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0fjp3 . }
            Query return lines = 3
          } [0.310s]
          Filt_Query_Ret = 1 / 3 ( 0.310s)
        } [0.311s]
      } [0.326s]
      [Len-2||F2/3] (2020-12-03 14:26:09) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:09] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 166
        } [0.025s]
        Filt_Query_Ret = 8 / 166 ( 0.025s)
        [Len-2||F2/3||3/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0fjp3 . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.0fjp3 . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-2||F2/3||3/3-2] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0fjp3 . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02_v8m ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.0fjp3 . }
            Query return lines = 2
          } [0.310s]
          Filt_Query_Ret = 0 / 2 ( 0.311s)
        } [0.311s]
      } [0.357s]
      [Len-2||F3/3] (2020-12-03 14:26:09) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:09] SPARQL hit!
        Filt_Query_Ret = 2 / 132 ( 0.001s)
        [Len-2||F3/3||1/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01d6g . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.01d6g . }
            Query return lines = 60
          } [0.031s]
          Filt_Query_Ret = 0 / 60 ( 0.031s)
        } [0.031s]
        [Len-2||F3/3||1/3-2] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01d6g . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.01d6g . }
            Query return lines = 0
          } [0.129s]
          Filt_Query_Ret = 0 / 0 ( 0.129s)
        } [0.129s]
        [Len-2||F3/3||2/3-1] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02_v8m . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02_v8m . }
            Query return lines = 0
          } [0.017s]
          Filt_Query_Ret = 0 / 0 ( 0.017s)
        } [0.017s]
        [Len-2||F3/3||2/3-2] (2020-12-03 14:26:09) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02_v8m . }
          [2020-12-03 14:26:09] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.0fjp3 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02_v8m . }
            Query return lines = 1
          } [0.170s]
          Filt_Query_Ret = 0 / 1 ( 0.171s)
        } [0.171s]
      } [0.349s]
      71 coarse schemas retrieved from scratch.
      Calculating F1 for 71 coarse schemas: {
        Current: 0 / 71
        Checking schema 0 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.current_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 1 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.01d6g fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 WHERE { fb:m.01d6g fb:sports.sports_team.founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'1954'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 2 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.team_mascot'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.team_mascot ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'The Oriole Bird'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.previously_known_as'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.previously_known_as ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.previously_known_as ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 2
            Final Answer: {'St. Louis Browns', 'Milwaukee Brewers'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.league'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.league ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.league ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'American League'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 5 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.current_manager'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_manager ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_manager ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Buck Showalter'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 6 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.location'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.location ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 7 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.colors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.colors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 2
            Final Answer: {'Black', 'Orange'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 8 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.championships'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.championships ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.championships ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 3
            Final Answer: {'1983 World Series', '1966 World Series', '1970 World Series'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.012s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.012s]
        Checking schema 9 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 10 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.division'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.division ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:baseball.baseball_team.division ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'American League East'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.028s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.028s]
        Checking schema 11 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baseball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 12 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.arena_stadium'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.arena_stadium ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Oriole Park at Camden Yards'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 13 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.professional_sports_team.owner_s'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.professional_sports_team.owner_s ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Peter Angelos'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 14 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.championships']), ('Entity', '==', 'm.0fjp3', ['time.event.instance_of_recurring_event'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.championships ?o1 . ?o1 fb:time.event.instance_of_recurring_event fb:m.0fjp3 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.championships ?o1 . ?o1 fb:time.event.instance_of_recurring_event fb:m.0fjp3 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g', 'm.0fjp3'}
            Query return lines = 3
            Final Answer: {'1983 World Series', '1966 World Series', '1970 World Series'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.036s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.036s]
        Checking schema 15 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.championships']), ('Entity', '==', 'm.0fjp3', ['sports.sports_championship_event.championship'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.championships ?o1 . ?o1 fb:sports.sports_championship_event.championship fb:m.0fjp3 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.01d6g fb:sports.sports_team.championships ?o1 . ?o1 fb:sports.sports_championship_event.championship fb:m.0fjp3 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g', 'm.0fjp3'}
            Query return lines = 3
            Final Answer: {'1983 World Series', '1966 World Series', '1970 World Series'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.021s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.021s]
        Checking schema 16 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02_v8m fb:sports.sports_team.founded ?o1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 WHERE { fb:m.02_v8m fb:sports.sports_team.founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'1882'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 17 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.defunct_sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:sports.defunct_sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:sports.defunct_sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'Baseball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 18 / 71: {
          [('Main', '==', 'm.02_v8m', ['baseball.baseball_team.historical_roster'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:baseball.baseball_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:baseball.baseball_team.historical_roster ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 19 / 71: {
          [('Main', '==', 'm.02_v8m', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {"Where They Ain't: The Fabled Life and Untimely Death of the Original Baltimore Orioles, the Team That Gave Birth to Modern Baseball"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 20 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.sport'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:sports.sports_team.sport ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'Baseball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 21 / 71: {
          [('Main', '==', 'm.0fjp3', ['time.recurring_event.instances'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fjp3'}
            Query return lines = 106
            Final Answer: {'1903 World Series', '2003 World Series', '1927 World Series', '1993 World Series', '1988 World Series', '1983 World Series', '1950 World Series', '2000 World Series', '2001 World Series', '1921 World Series', '1963 World Series', '1985 World Series', '1914 World Series', '1979 World Series', '1992 World Series', '1909 World Series', '1926 World Series', '2005 World Series', '1930 World Series', '1989 World Series', '1916 World Series', '1925 World Series', '1990 World Series', '1959 World Series', '1920 World Series', '1965 World Series', '1953 World Series', '1978 World Series', '1945 World Series', '1968 World Series', '1981 World Series', '1947 World Series', '1919 World Series', '1951 World Series', '1956 World Series', '1952 World Series', '1967 World Series', '1934 World Series', '2004 World Series', '1943 World Series', '1908 World Series', '1939 World Series', '2007 World Series', '1922 World Series', '1971 World Series', '1991 World Series', '1906 World Series', '1933 World Series', '1997 World Series', '1923 World Series', '1995 World Series', '2009 World Series', '1999 World Series', '1970 World Series', '1986 World Series', '1998 World Series', '2006 World Series', '1977 World Series', '1936 World Series', '1980 World Series', '1942 World Series', '1917 World Series', '1944 World Series', '1910 World Series', '1932 World Series', '1937 World Series', '1964 World Series', '1928 World Series', '2002 World Series', '1969 World Series', '1973 World Series', '1912 World Series', '1911 World Series', '1975 World Series', '1996 World Series', '1931 World Series', '1987 World Series', '1913 World Series', '1984 World Series', '2010 World Series', '1938 World Series', '1960 World Series', '1907 World Series', '1957 World Series', '1966 World Series', '1958 World Series', '2008 World Series', '1948 World Series', '1929 World Series', '1941 World Series', '1924 World Series', '1974 World Series', '1961 World Series', '1982 World Series', '1940 World Series', '1905 World Series', '1915 World Series', '1935 World Series', '1946 World Series', '1976 World Series', '1918 World Series', '1955 World Series', '1954 World Series', '1949 World Series', '1962 World Series', '1972 World Series'}
            Answers = 106, P = 0.028302, R = 1.000000, F1 = 0.055046
          } [0.016s]
          Answers = 106, P = 0.028302, R = 1.000000, F1 = 0.055046
        } [0.017s]
        Checking schema 22 / 71: {
          [('Main', '==', 'm.0fjp3', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fjp3'}
            Query return lines = 1
            Final Answer: {"The Gashouse Gang: How Dizzy Dean, Leo Durocher, Branch Rickey, Pepper Martin, and Their Colorful, Come-from-Behind Ball Club Won the World Series - and America's Heart - During the Great Depression"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 23 / 71: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fjp3'}
            Query return lines = 110
            Final Answer: {'1903 World Series', '2003 World Series', '1927 World Series', '1993 World Series', '1988 World Series', '1983 World Series', '1950 World Series', '2000 World Series', '2001 World Series', '1921 World Series', '1963 World Series', '1985 World Series', '1914 World Series', '1979 World Series', '1992 World Series', '1909 World Series', '1926 World Series', '2005 World Series', '1930 World Series', '1989 World Series', '1916 World Series', '1925 World Series', '1990 World Series', '1959 World Series', '1920 World Series', '1965 World Series', '1953 World Series', '1978 World Series', '1945 World Series', '1968 World Series', '1981 World Series', '1947 World Series', '1919 World Series', '1951 World Series', '1956 World Series', '1952 World Series', '1967 World Series', '1934 World Series', '2004 World Series', '1943 World Series', '1908 World Series', '1939 World Series', '2007 World Series', '1922 World Series', '1971 World Series', '1991 World Series', '1906 World Series', '1933 World Series', '1997 World Series', '1923 World Series', '1995 World Series', '2009 World Series', '1999 World Series', '1970 World Series', '1986 World Series', '1998 World Series', '2006 World Series', '1977 World Series', '1936 World Series', '1980 World Series', '1942 World Series', '1917 World Series', '1944 World Series', '1910 World Series', '1932 World Series', '1937 World Series', '1994 World Series', '1964 World Series', '1928 World Series', '2002 World Series', '1969 World Series', '1973 World Series', '1912 World Series', '1911 World Series', '1975 World Series', '1996 World Series', '1931 World Series', '1987 World Series', '1913 World Series', '1984 World Series', '2010 World Series', '1938 World Series', '1960 World Series', '1907 World Series', '1957 World Series', '1966 World Series', '1958 World Series', '2008 World Series', '1948 World Series', '1929 World Series', '1941 World Series', '1904 World Series', '1924 World Series', '1974 World Series', '2011 World Series', '2012 World Series', '1961 World Series', '1982 World Series', '1940 World Series', '1905 World Series', '1915 World Series', '1935 World Series', '1946 World Series', '1976 World Series', '1918 World Series', '1955 World Series', '1954 World Series', '1949 World Series', '1962 World Series', '1972 World Series'}
            Answers = 110, P = 0.027273, R = 1.000000, F1 = 0.053097
          } [0.016s]
          Answers = 110, P = 0.027273, R = 1.000000, F1 = 0.053097
        } [0.017s]
        Checking schema 24 / 71: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.league'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.league ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.league ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fjp3'}
            Query return lines = 1
            Final Answer: {'Major League Baseball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 25 / 71: {
          [('Main', '==', 'm.0fjp3', ['time.recurring_event.instances']), ('Entity', '==', 'm.01d6g', ['sports.sports_championship_event.runner_up'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:sports.sports_championship_event.runner_up fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:sports.sports_championship_event.runner_up fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g', 'm.0fjp3'}
            Query return lines = 3
            Final Answer: {'1971 World Series', '1979 World Series', '1969 World Series'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 26 / 71: {
          [('Main', '==', 'm.0fjp3', ['time.recurring_event.instances']), ('Entity', '==', 'm.01d6g', ['sports.sports_championship_event.champion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:sports.sports_championship_event.champion fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:time.recurring_event.instances ?o1 . ?o1 fb:sports.sports_championship_event.champion fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g', 'm.0fjp3'}
            Query return lines = 3
            Final Answer: {'1983 World Series', '1966 World Series', '1970 World Series'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.020s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.020s]
        Checking schema 27 / 71: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.events']), ('Entity', '==', 'm.01d6g', ['sports.sports_championship_event.runner_up'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:sports.sports_championship_event.runner_up fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:sports.sports_championship_event.runner_up fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g', 'm.0fjp3'}
            Query return lines = 3
            Final Answer: {'1971 World Series', '1979 World Series', '1969 World Series'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 28 / 71: {
          [('Main', '==', 'm.0fjp3', ['sports.sports_championship.events']), ('Entity', '==', 'm.01d6g', ['sports.sports_championship_event.champion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:sports.sports_championship_event.champion fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:sports.sports_championship.events ?o1 . ?o1 fb:sports.sports_championship_event.champion fb:m.01d6g . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.01d6g', 'm.0fjp3'}
            Query return lines = 3
            Final Answer: {'1983 World Series', '1966 World Series', '1970 World Series'}
            Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.024s]
          Answers = 3, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.024s]
        Checking schema 29 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 30 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.season'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.season ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 73
            Final Answer: {'1895 Major League Baseball Season', '1892 Major League Baseball season', '1898 Major League Baseball Season', '1964 Major League Baseball Season', '2001 Major League Baseball Season', '1954 Major League Baseball season', '1978 Major League Baseball Season', '1894 Major League Baseball Season', '1983 Major League Baseball Season', '2003 Major League Baseball season', '1896 Major League Baseball Season', '1962 Major League Baseball Season', '2007 Major League Baseball season', '1885 Major League Baseball Season', '1973 Major League Baseball Season', '1961 Major League Baseball Season', '1982 Major League Baseball Season', '1995 Major League Baseball Season', '1966 Major League Baseball Season', '1888 Major League Baseball Season', '1990 Major League Baseball Season', '1991 Major League Baseball Season', '1997 Major League Baseball Season', '1996 Major League Baseball Season', '1956 Major League Baseball Season', '1987 Major League Baseball Season', '1899 Major League Baseball Season', '1970 Major League Baseball Season', '2000 Major League Baseball season', '1968 Major League Baseball Season', '1959 Major League Baseball Season', '1886 Major League Baseball Season', '1890 Major League Baseball season', '1976 Major League Baseball Season', '1963 Major League Baseball Season', '1883 Major League Baseball Season', '1955 Major League Baseball Season', '1971 Major League Baseball Season', '1889 Major League Baseball Season', '1972 Major League Baseball Season', '1989 Major League Baseball Season', '1985 Major League Baseball season', '1986 Major League Baseball Season', '2008 Major League Baseball season', '1887 Major League Baseball season', '2005 Major League Baseball season', '1975 Major League Baseball Season', '1967 Major League Baseball Season', '1974 Major League Baseball Season', '1984 Major League Baseball Season', '1882 Major League Baseball Season', '1981 Major League Baseball Season', '1993 Major League Baseball Season', '2002 Major League Baseball Season', '1977 Major League Baseball Season', '1999 Major League Baseball Season', '1998 Major League Baseball Season', '1979 Major League Baseball Season', '1969 Major League Baseball Season', '1891 Major League Baseball Season', '2004 Major League Baseball season', '1893 Major League Baseball Season', '1988 Major League Baseball Season', '1980 Major League Baseball Season', '1960 Major League Baseball Season', '1994 Major League Baseball Season', '1897 Major League Baseball Season', '1992 Major League Baseball Season', '1957 Major League Baseball Season', '1884 Major League Baseball Season', '2006 Major League Baseball season', '1965 Major League Baseball Season', '1958 Major League Baseball Season'}
            Answers = 73, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 73, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 31 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 117
            Final Answer: {'Aubrey Huff', 'Jim Thome', 'Tommy Hunter', 'Zach Phillips', 'José Bautista', 'Ryan Adams', 'Luis Ayala', 'Dana Eveland', 'Curt Schilling', 'Josh Stinson', 'Alexi Casilla', 'Félix Pie', 'Yamaico Navarro', 'Danny Valencia', 'Steven Tolleson', 'Chris Ray', 'Chris Waters', 'George Kell', 'Danys Báez', 'Pedro Strop', 'Lew Ford', 'Jamie Walker', 'Joel Piñeiro', 'Oliver Drake', 'Jason Berken', 'Mark Reynolds', 'Scott Moore', 'Melvin Mora', 'Luke Scott', 'Miguel Socolovich', 'David Hernandez', 'Joe Saunders', 'Alfredo Simón', 'Miguel González', 'Brian Roberts', 'Wilson Betemit', 'Ronny Paulino', 'Manny Machado', 'Joe Mahoney', 'Ty Wigginton', 'Nate McLouth', 'Matt Lindstrom', 'Kam Mickolio', 'Dylan Bundy', 'Jonathan Schoop', 'Russ Canzler', 'Xavier Avery', 'Jason Hammel', 'Brian Matusz', 'Radhames Liz', 'Steve Pearce', 'Bob McCrory', 'Daniel Cabrera', 'Whitey Herzog', 'Kyle Hudson', 'Lance Cormier', 'Dennys Reyes', 'Lou Montañez', 'George Sherrill', 'Alex Burnett', 'Wei-Yin Chen', 'Jeremy Guthrie', 'Steve Johnson', 'Freddy García', 'Omar Quintanilla', 'Luis Exposito', 'Jim Hoey', 'Robert Andino', 'Chris Dickerson', "Darren O'Day", 'Adam Jones', 'Troy Patton', 'Taylor Teagarden', 'Hayden Penn', 'Chris Tillman', 'Jai Miller', 'Tsuyoshi Wada', 'Koji Uehara', 'Kevin Gregg', 'J. C. Romero', 'Gregg Zaun', 'Zach Britton', 'Mike Belfiore', 'Kevin Gausman', 'Matt Albers', 'Endy Chávez', 'Mark Hendrickson', 'Rich Hill', 'Jake Arrieta', 'Brad Bergesen', 'Matt Wieters', 'Jim Johnson', 'Ryan Freel', 'Jim Miller', 'Stuart Pomeranz', 'Ramón Hernández', 'Randy Wolf', 'Joshua Bell', 'Eli Whiteside', 'Nick Johnson', 'J. J. Hardy', 'Zach Clark', 'Jair Jurrjens', 'Bill Hall', 'Nick Markakis', 'Garrett Olson', 'Chris Davis', 'Chris Snyder', 'Brian Burres', 'Dennis Sarfate', 'Ryan Flaherty', 'Dave Leonhard', 'Guillermo Quiróz', 'Oscar Salazar', 'T.J. McFarland', 'L. J. Hoes', 'Nolan Reimold'}
            Answers = 117, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 117, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 32 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.roster', 'sports.sports_team_roster.number'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.number ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 33 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 19
            Final Answer: {'2009', '2011', '2001', '2008', '2007', '1988', '2010', '2012', '1956', '2004', '2000', '2006', '2013', '1961', '2005', '1967'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 34 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.035s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.035s]
        Checking schema 35 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_coaches', 'baseball.historical_coaching_tenure.baseball_coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.baseball_coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.baseball_coach ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 8
            Final Answer: {'Juan Samuel', 'John Shelby', 'Rick Kranitz', 'Ruben Felix', 'Alan Dunn', 'Terry Crowley', 'Earl Weaver', 'Ronnie Deck'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 36 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_coaches', 'baseball.historical_coaching_tenure.coaching_position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.coaching_position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.coaching_position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 6
            Final Answer: {'Bullpen Coach', 'First Base Coach', 'Hitting Coach', 'Third Base Coach', 'Pitching Coach', 'Bullpen Catcher Coach'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 37 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 38 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.from ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 3
            Final Answer: {'1996', '1968', '1985'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 39 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.current_coaches', 'baseball.current_coaching_tenure.coaching_position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.coaching_position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.coaching_position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 7
            Final Answer: {'Bullpen Coach', 'First Base Coach', 'Hitting Coach', 'Third Base Coach', 'Pitching Coach', 'Bench Coach', 'Bullpen Catcher Coach'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 40 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.wins'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.wins ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.wins ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 41
            Final Answer: {'63', '95', '83', '19', '88', '73', '76', '60', '28', '90', '57', '41', '80', '87', '77', '96', '59', '68', '48', '78', '89', '70', '91', '101', '98', '69', '102', '71', '108', '46', '54', '86', '79', '67', '94', '97', '15', '74', '109', '100', '85'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 41 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 17
            Final Answer: {'2009', '2011', '2008', '2007', '1991', '1990', '2010', '1957', '2012', '2006', '2013', '1971', '2005', '1962'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 42 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 43 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 42
            Final Answer: {'Alvie Shepherd', 'Mike Paradis', 'Matt Wieters', 'Jeffrey Hammonds', 'Ben McDonald', 'Mark Smith', 'Gregg Olson', 'Ted Parks', 'Billy Rowell', 'Dallas Williams', 'Larry Bigbie', 'Ken Thomas', 'Mike Parrott', 'Brad DuVall', 'Randy Stein', 'Scott McDonald', 'Darnell McDonald', 'Drungo Hazewood', 'Michael Mussina', 'Rick Elder', 'Junior Kennedy', 'Robert Boyce', 'Beau Hale', 'Jayson Werth', 'Wade Townsend', 'Keith Reed', 'Brandon Snyder', 'Jay Powell', 'Dave Ford', 'Chris Myers', 'Adam Loewen', 'John Hoover', 'Rich Dauer', 'Nicholas Markakis', 'Don Hood', 'James West', 'Joe Kucharski', 'Richard Stahl', 'Mike Fontenot', 'Wayne Wilson', 'Bobby Grich', 'Chris Smith'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 44 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.school'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.school ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.school ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 19
            Final Answer: {'Westfield High School', 'Clemson University', 'University of California', 'Providence College', 'Bishop Eustace Preparatory School', 'University of Nebraska at Omaha', 'University of Southern California', 'Mississippi State University', 'University of South Carolina', 'Ball State University', 'California State University, Fresno', 'Stanford University', 'Georgia Institute of Technology', 'Auburn University', 'Virginia Polytechnic Institute and State University', 'Cumberland University', 'Rice University', 'Louisiana State University', 'Young Harris College'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 45 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_coaches', 'baseball.historical_coaching_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.from ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 5
            Final Answer: {'2008', '2007', '2006', '1976', '1967'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 46 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.to ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 3
            Final Answer: {'1982', '1997', '1986'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 47 / 71: {
          [('Main', '==', 'm.01d6g', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 48 / 71: {
          [('Main', '==', 'm.01d6g', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.030s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.030s]
        Checking schema 49 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 50 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.current_coaches', 'baseball.current_coaching_tenure.baseball_coach'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.baseball_coach ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.baseball_coach ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 7
            Final Answer: {'Jim Presley', 'Bobby Dickerson', 'John Russell', 'Rudy Árias', 'Rick Adair', 'Wayne Kirby', 'Bill Castro'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 51 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.team_stats', 'baseball.baseball_team_stats.losses'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.losses ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.team_stats ?o1 . ?o1 fb:baseball.baseball_team_stats.losses ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 41
            Final Answer: {'63', '95', '83', '73', '76', '19', '88', '62', '40', '57', '80', '77', '107', '68', '53', '78', '89', '70', '91', '39', '101', '98', '64', '69', '71', '93', '43', '54', '46', '79', '67', '65', '97', '75', '49', '58', '74', '84', '100', '92', '85'}
            Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 41, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 52 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.roster', 'sports.sports_team_roster.position'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.position ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 4
            Final Answer: {'Infielder', 'Catcher', 'Pitcher', 'Outfielder'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 53 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.pick_overall'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.pick_overall ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.pick_overall ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 21
            Final Answer: {'21', '19', '10', '8', '17', '1', '4', '5', '18', '26', '20', '22', '13', '16', '24', '7', '23', '9', '14', '15', '25'}
            Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 21, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 54 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.professional_sports_team.draft_picks', 'sports.sports_league_draft_pick.draft'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.draft ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.professional_sports_team.draft_picks ?o1 . ?o1 fb:sports.sports_league_draft_pick.draft ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 36
            Final Answer: {'2006 Major League Baseball Draft', '1989 Major League Baseball Draft', '1977 Major League Baseball Draft', '1972 Major League Baseball Draft', '2007 Major League Baseball Draft', '1997 Major League Baseball Draft', '1968 Major League Baseball Draft', '1990 Major League Baseball Draft', '1992 Major League Baseball Draft', '1966 Major League Baseball Draft', '1991 Major League Baseball Draft', '1984 Major League Baseball Draft', '1971 Major League Baseball Draft', '1995 Major League Baseball Draft', '1988 Major League Baseball Draft', '1976 Major League Baseball Draft', '1969 Major League Baseball Draft', '2003 Major League Baseball Draft', '1987 Major League Baseball Draft', '1998 Major League Baseball Draft', '1983 Major League Baseball Draft', '1970 Major League Baseball Draft', '2001 Major League Baseball Draft', '2004 Major League Baseball Draft', '1982 Major League Baseball Draft', '1974 Major League Baseball Draft', '1999 Major League Baseball Draft', '1993 Major League Baseball Draft', '1967 Major League Baseball Draft', '1965 Major League Baseball Draft', '1978 Major League Baseball Draft', '2000 Major League Baseball Draft', '1973 Major League Baseball Draft', '2002 Major League Baseball Draft', '2005 Major League Baseball Draft', '1975 Major League Baseball Draft'}
            Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 36, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 55 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_coaches', 'baseball.historical_coaching_tenure.baseball_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.baseball_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.baseball_team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 56 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_coaches', 'baseball.historical_coaching_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.to ?o2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_coaches ?o1 . ?o1 fb:baseball.historical_coaching_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 4
            Final Answer: {'1982', '2010', '2009', '1967'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 57 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.historical_managers', 'baseball.baseball_historical_managerial_position.manager'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.manager ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:10] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.historical_managers ?o1 . ?o1 fb:baseball.baseball_historical_managerial_position.manager ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 18
            Final Answer: {'Davey Johnson', 'Ray Miller', 'Cal Ripken, Sr.', 'Billy Hitchcock', 'Dave Trembley', 'Lee Mazzilli', 'Paul Richards', 'Brian Bass', 'Lum Harris', 'César Izturis', 'Sam Perlozzo', 'Hank Bauer', 'Joe Altobelli', 'Frank Robinson', 'Earl Weaver', 'Johnny Oates', 'Phil Regan', 'Mike Hargrove'}
            Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 18, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 58 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 3
            Final Answer: {'Major League Baseball', 'American League East', 'American League'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 59 / 71: {
          [('Main', '==', 'm.01d6g', ['baseball.baseball_team.current_coaches', 'baseball.current_coaching_tenure.baseball_team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.baseball_team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:baseball.baseball_team.current_coaches ?o1 . ?o1 fb:baseball.current_coaching_tenure.baseball_team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 60 / 71: {
          [('Main', '==', 'm.01d6g', ['sports.sports_team.league', 'sports.sports_league_participation.league']), ('Entity', '==', 'm.0fjp3', ['sports.sports_league.championship'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:sports.sports_league.championship fb:m.0fjp3 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.01d6g fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:sports.sports_league.championship fb:m.0fjp3 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.01d6g', 'm.0fjp3'}
            Query return lines = 1
            Final Answer: {'Major League Baseball'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 61 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.defunct_sports_team.active', 'measurement_unit.time_interval.end'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.defunct_sports_team.active ?o1 . ?o1 fb:measurement_unit.time_interval.end ?o2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.defunct_sports_team.active ?o1 . ?o1 fb:measurement_unit.time_interval.end ?o2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'1899'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 62 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.roster', 'sports.sports_team_roster.player'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.player ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'Bill Wise'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 63 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.roster', 'sports.sports_team_roster.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'1882'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 64 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.roster', 'sports.sports_team_roster.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'1886'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 65 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.roster', 'sports.sports_team_roster.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.roster ?o1 . ?o1 fb:sports.sports_team_roster.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 66 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.league', 'sports.sports_league_participation.team'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.team ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'Baltimore Orioles'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 67 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.defunct_sports_team.active', 'measurement_unit.time_interval.start'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.defunct_sports_team.active ?o1 . ?o1 fb:measurement_unit.time_interval.start ?o2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 WHERE { fb:m.02_v8m fb:sports.defunct_sports_team.active ?o1 . ?o1 fb:measurement_unit.time_interval.start ?o2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 1
            Final Answer: {'1882'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 68 / 71: {
          [('Main', '==', 'm.02_v8m', ['sports.sports_team.league', 'sports.sports_league_participation.league'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02_v8m fb:sports.sports_team.league ?o1 . ?o1 fb:sports.sports_league_participation.league ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 2
            Final Answer: {'American Association', 'National League'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 69 / 71: {
          [('Main', '==', 'm.0fjp3', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fjp3 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fjp3 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fjp3'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 70 / 71: {
          [('Main', '==', 'm.0fjp3', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fjp3 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.0fjp3 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.0fjp3'}
            Query return lines = 1
            Final Answer: {'World Series'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        67 / 71 coarse schemas kept with ans_size > 0.
      } [1.053s]
      Coarse level ended, resulting in 67 schemas.
    } [2.160s]
    Type level searching (total types = 10): {
      Current: 0 / 67
[{'type.datetime'}]
[{'sports.mascot'}]
[{'sports.defunct_sports_team'}]
[{'baseball.baseball_league'}]
[{'baseball.baseball_manager'}]
[{'sports.sports_team_location'}]
[{'visual_art.color'}]
[{'sports.sports_championship_event'}]
[{'baseball.baseball_division'}]
[{'sports.sport'}]
[{'sports.sports_facility'}]
[{'sports.sports_team_owner'}]
[{'sports.sports_championship_event'}]
[{'sports.sports_championship_event'}]
[{'type.datetime'}]
[{'sports.sport'}]
[{'book.written_work'}]
[{'sports.sport'}]
[{'time.event'}]
[{'book.written_work'}]
[{'sports.sports_championship_event'}]
[{'sports.sports_league'}]
[{'time.event'}]
[{'time.event'}]
[{'sports.sports_championship_event'}]
[{'sports.sports_championship_event'}]
[{'baseball.baseball_team_stats'}, {'baseball.baseball_team'}]
[{'baseball.baseball_team_stats'}, {'sports.sports_league_season'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_league_draft_pick'}, {'sports.professional_sports_team'}]
[{'baseball.historical_coaching_tenure'}, {'baseball.baseball_coach'}]
[{'baseball.historical_coaching_tenure'}, {'baseball.baseball_coaching_position'}]
[{'baseball.baseball_historical_managerial_position'}, {'baseball.baseball_team'}]
[{'baseball.baseball_historical_managerial_position'}, {'type.datetime'}]
[{'baseball.current_coaching_tenure'}, {'baseball.baseball_coaching_position'}]
[{'baseball.baseball_team_stats'}, {'type.int'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_league_draft_pick'}, {'sports.drafted_athlete'}]
[{'sports.sports_league_draft_pick'}, {'education.educational_institution'}]
[{'baseball.historical_coaching_tenure'}, {'type.datetime'}]
[{'baseball.baseball_historical_managerial_position'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'baseball.current_coaching_tenure'}, {'baseball.baseball_coach'}]
[{'baseball.baseball_team_stats'}, {'type.int'}]
[{'sports.sports_team_roster'}, {'sports.sports_position'}]
[{'sports.sports_league_draft_pick'}, {'type.int'}]
[{'sports.sports_league_draft_pick'}, {'sports.sports_league_draft'}]
[{'baseball.historical_coaching_tenure'}, {'baseball.baseball_team'}]
[{'baseball.historical_coaching_tenure'}, {'type.datetime'}]
[{'baseball.baseball_historical_managerial_position'}, {'baseball.baseball_manager'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'baseball.current_coaching_tenure'}, {'baseball.baseball_team'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'measurement_unit.time_interval'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.pro_athlete'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'type.datetime'}]
[{'sports.sports_team_roster'}, {'sports.sports_team'}]
[{'sports.sports_league_participation'}, {'sports.sports_team'}]
[{'measurement_unit.time_interval'}, {'type.datetime'}]
[{'sports.sports_league_participation'}, {'sports.sports_league'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
      2 typed schemas retrieved from 67 coarse schemas.
      Calculating F1 for 2 typed schemas: {
        Current: 0 / 2
        Checking schema 0 / 2: {
          [('Main', '==', 'm.02_v8m', ['book.book_subject.works']), ('Type', '==', 'theater.play', ['type.object.type'])]
          var_types: [{'theater.play', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02_v8m fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02_v8m'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 1 / 2: {
          [('Main', '==', 'm.0fjp3', ['book.book_subject.works']), ('Type', '==', 'theater.play', ['type.object.type'])]
          var_types: [{'theater.play', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:11] Q_Schema Request: {
            WebQ_2196|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0fjp3 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:theater.play . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0fjp3'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        0 / 2 typed schemas kept with ans_size > 0.
      } [0.012s]
      Typed level ended, resulting in 67 schemas.
    } [0.015s]
    Time level searching (total times = 0): {
      Current: 0 / 67
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
self.var_time_preds: [{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [{'baseball.current_coaching_tenure.started'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'baseball.current_coaching_tenure.started'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), {'sports.sports_league_draft.year'}]
self.var_time_preds: [{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
self.var_time_preds: [{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
self.var_time_preds: [{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'baseball.current_coaching_tenure.started'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.time_interval.start', 'measurement_unit.time_interval.end'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
self.var_time_preds: [{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
self.var_time_preds: [set(), {'sports.sports_team.founded'}]
self.var_time_preds: [{'measurement_unit.time_interval.start', 'measurement_unit.time_interval.end'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      0 timed schemas retrieved from 67 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 67 schemas.
    } [0.001s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 67
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set(), set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
[{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[{'baseball.current_coaching_tenure.started'}, set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), set()]
[set(), set()]
[{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[set(), set()]
[set(), set()]
[set(), {'sports.sports_team.founded'}]
[{'baseball.current_coaching_tenure.started'}, set()]
[set(), set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[set(), set()]
[set(), {'sports.sports_league_draft.year'}]
[{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
[{'baseball.historical_coaching_tenure.to', 'baseball.historical_coaching_tenure.from'}, set()]
[{'baseball.baseball_historical_managerial_position.to', 'baseball.baseball_historical_managerial_position.from'}, set()]
[set(), set()]
[{'baseball.current_coaching_tenure.started'}, set()]
[set(), set()]
[{'measurement_unit.time_interval.start', 'measurement_unit.time_interval.end'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.pro_athlete.career_start', 'sports.pro_athlete.career_end'}]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, set()]
[{'sports.sports_team_roster.to', 'sports.sports_team_roster.from'}, {'sports.sports_team.founded'}]
[set(), {'sports.sports_team.founded'}]
[{'measurement_unit.time_interval.start', 'measurement_unit.time_interval.end'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
      0 ordinal schemas retrieved from 67 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 67 schemas.
    } [0.001s]
    [2020-12-03 14:26:11] buffer saved.
    67 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2196_schema].
  } [20.126s]
  Entering Q 2197 / 5810 [b'what does the roman empire consist of?']: {
    Show 5 E + 10 T + 0 Tm + 0 Ord = 15 linkings: {
      #00 Entity: [3, 5) (roman empire) == m.017cw (Byzantine_Empire) {'score': 6.47129, 'source': 0.0}
      #01 Entity: [3, 5) (roman empire) == m.02l341 (Ancient_Rome) {'score': 2227.174454, 'source': 0.0}
      #02 Entity: [3, 5) (roman empire) == m.03gk2 (Holy_Roman_Empire) {'score': 9.94339, 'source': 0.0}
      #03 Entity: [3, 5) (roman empire) == m.06c62 (Rome) {'score': 1.688287, 'source': 1.0}
      #04 Entity: [3, 5) (roman empire) == m.06cmp (Roman_Empire) {'score': 14310.43113, 'source': 0.0}
      #05 Type: [6, 7) (of) == measurement_unit.substance_unit (unit of amount of substance) {'sim': 0.819865}
      #06 Type: [6, 7) (of) == religion.type_of_place_of_worship (type of place of worship) {'sim': 0.816341}
      #07 Type: [6, 7) (of) == measurement_unit.force_moment_unit (unit of moment of force) {'sim': 0.814276}
      #08 Type: [6, 7) (of) == measurement_unit.time_unit (unit of time) {'sim': 0.759887}
      #09 Type: [6, 7) (of) == chemistry.phase_of_matter (phase of matter) {'sim': 0.74294}
      #10 Type: [6, 7) (of) == measurement_unit.potential_unit (unit of potential) {'sim': 0.736018}
      #11 Type: [6, 7) (of) == government.form_of_government (form of government) {'sim': 0.733953}
      #12 Type: [6, 7) (of) == time.day_of_year (day of year) {'sim': 0.733432}
      #13 Type: [6, 7) (of) == book.place_of_publication_period (place of publication period) {'sim': 0.725918}
      #14 Type: [6, 7) (of) == people.cause_of_death (cause of death) {'sim': 0.723725}
    } [0.000s]
    15 link data save to file.
    Coarse level searching (total entities = 5): {
      [Len-1||F1/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.017cw ?p1 ?o1 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.017cw ?p1 ?o1 . }
          Query return lines = 24
        } [0.006s]
        Filt_Query_Ret = 13 / 24 ( 0.006s)
      } [0.006s]
      [Len-1||F2/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02l341 ?p1 ?o1 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02l341 ?p1 ?o1 . }
          Query return lines = 16
        } [0.018s]
        Filt_Query_Ret = 9 / 16 ( 0.018s)
      } [0.018s]
      [Len-1||F3/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03gk2 ?p1 ?o1 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.03gk2 ?p1 ?o1 . }
          Query return lines = 26
        } [0.020s]
        Filt_Query_Ret = 12 / 26 ( 0.021s)
      } [0.021s]
      [Len-1||F4/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06c62 ?p1 ?o1 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06c62 ?p1 ?o1 . }
          Query return lines = 56
        } [0.010s]
        Filt_Query_Ret = 32 / 56 ( 0.010s)
      } [0.010s]
      [Len-1||F5/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06cmp ?p1 ?o1 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06cmp ?p1 ?o1 . }
          Query return lines = 33
        } [0.006s]
        Filt_Query_Ret = 17 / 33 ( 0.007s)
      } [0.007s]
      [Len-2||F1/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.017cw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.017cw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 270
        } [0.032s]
        Filt_Query_Ret = 9 / 270 ( 0.033s)
      } [0.033s]
      [Len-2||F2/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02l341 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02l341 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 184
        } [0.016s]
        Filt_Query_Ret = 4 / 184 ( 0.017s)
      } [0.017s]
      [Len-2||F3/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03gk2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03gk2 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 314
        } [0.018s]
        Filt_Query_Ret = 34 / 314 ( 0.019s)
      } [0.019s]
      [Len-2||F4/5] (2020-12-03 14:26:28) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c62 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:28] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06c62 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 1313
        } [0.183s]
        Filt_Query_Ret = 41 / 1313 ( 0.188s)
      } [0.188s]
      [Len-2||F5/5] (2020-12-03 14:26:29) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06cmp ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:26:29] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06cmp ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 473
        } [0.063s]
        Filt_Query_Ret = 19 / 473 ( 0.065s)
      } [0.065s]
      190 coarse schemas retrieved from scratch.
      Calculating F1 for 190 coarse schemas: {
        Current: 0 / 190
        Checking schema 0 / 190: {
          [('Main', '==', 'm.017cw', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 2
            Final Answer: {'Absolute monarchy', 'Autocracy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 1 / 190: {
          [('Main', '==', 'm.017cw', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 2
            Final Answer: {'Latin Language', 'Greek Language'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 2 / 190: {
          [('Main', '==', 'm.017cw', ['government.governmental_jurisdiction.government_bodies'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.government_bodies ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'Byzantine Senate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 3 / 190: {
          [('Main', '==', 'm.017cw', ['location.dated_location.date_dissolved'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.017cw fb:location.dated_location.date_dissolved ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.017cw fb:location.dated_location.date_dissolved ?o1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'1453'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 190: {
          [('Main', '==', 'm.017cw', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 13
            Final Answer: {'Saint Telemachus', 'Theodore Balsamon', 'Irene Lekapene', 'Nikephoros I', 'Helena Kantakouzene', 'Pope Boniface IV', 'Irene Palaiologina, Empress of Bulgaria', 'Kosara of Bulgaria', 'Smiltsena Palaiologina', 'Nikephoros I of Constantinople', 'Alexios I Komnenos', 'Theodora Palaiologina', 'Constans II'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 5 / 190: {
          [('Main', '==', 'm.017cw', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.017cw fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.017cw fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'0330-05-11'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 6 / 190: {
          [('Main', '==', 'm.017cw', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'University of Constantinople'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 7 / 190: {
          [('Main', '==', 'm.017cw', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 10
            Final Answer: {'Battle of the Meander', 'Battle of Akroinon', 'Byzantine conquest of Bulgaria', 'Byzantine–Bulgarian wars', 'Massacre of the Latins', 'Siege of Constantinople', 'Battle of Gallipoli'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 8 / 190: {
          [('Main', '==', 'm.017cw', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 9 / 190: {
          [('Main', '==', 'm.017cw', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'Constantinople'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 10 / 190: {
          [('Main', '==', 'm.017cw', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 2
            Final Answer: {'Southern Europe', 'Near East'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 11 / 190: {
          [('Main', '==', 'm.017cw', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 9
            Final Answer: {'Count Belisarius', 'The New Cambridge Medieval History, Vol. 5', 'Byzantium - The Decline and Fall', 'The Trolley to Yesterday', 'The Byzantine commonwealth', 'History of the Lombards', 'The History of the Decline and Fall of the Roman Empire', 'Flavours of Byzantium', 'The Byzantine Empire'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.040s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.040s]
        Checking schema 12 / 190: {
          [('Main', '==', 'm.017cw', ['user.robert.roman_empire.roman_region.emperors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:user.robert.roman_empire.roman_region.emperors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:user.robert.roman_empire.roman_region.emperors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 69
            Final Answer: {'Alexander', 'Leo VI the Wise', 'Constantine VII', 'Zeno', 'Romanos IV Diogenes', 'Constantine V', 'Leo IV the Khazar', 'Alexios III Angelos', 'Basil I', 'Leo V the Armenian', 'Alexios IV Angelos', 'Maurice', 'Anastasios II', 'Justinian II', 'Zoe Porphyrogenita', 'Isaac II Angelos', 'Romanos III Argyros', 'Basil II', 'Constans II', 'Marcian', 'Constantine VI', 'Arcadius', 'Constantine VIII', 'Nikephoros III Botaneiates', 'John I Tzimiskes', 'Leo I the Thracian', 'Michael II', 'Michael IV the Paphlagonian', 'Andronikos I Komnenos', 'Phocas', 'Theodosius II', 'Basiliscus', 'Justinian I', 'Tiberios III', 'Staurakios', 'Constantine IX Monomachos', 'Irene of Athens', 'Leo III the Isaurian', 'Theodora', 'Romanos II', 'Heraklonas', 'Isaac I Komnenos', 'Philippikos Bardanes', 'John II Komnenos', 'Theodosios III', 'Alexios II Komnenos', 'Tiberius II Constantine', 'Heraclius', 'Leontios', 'Michael V Kalaphates', 'Manuel I Komnenos', 'Michael III', 'Constantine IV', 'Anastasius I Dicorus', 'Leo II', 'Michael VI Bringas', 'Constantine X Doukas', 'Nikephoros I', 'Constantine Laskaris', 'Michael I Rangabe', 'Justin I', 'Diocletian', 'Justin II', 'Alexios V Doukas', 'Alexios I Komnenos', 'Galerius', 'Michael VII Doukas', 'Nikephoros II Phokas', 'Constantine III'}
            Answers = 69, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 69, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 13 / 190: {
          [('Main', '==', 'm.02l341', ['location.dated_location.date_dissolved'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02l341 fb:location.dated_location.date_dissolved ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.02l341 fb:location.dated_location.date_dissolved ?o1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'1453'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.032s]
        Checking schema 14 / 190: {
          [('Main', '==', 'm.02l341', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 16
            Final Answer: {'Saint Nicomedes', 'Terentia', 'Vitellius', 'Castus', 'Bryan Ward-Perkins', 'Aspasia Annia Regilla', 'Phaedrus', 'Cornelius Nepos', 'Livia', 'Quintus Tullius Cicero', 'Lucius Tarquinius Superbus', 'Publius Septimius Geta', 'Andrea Carandini', 'Lucius Tarquinius Priscus', 'Lucius Junius Brutus', 'Faustina the Elder'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 15 / 190: {
          [('Main', '==', 'm.02l341', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'Ancestors Of Ancient Rome: The Etruscans'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 16 / 190: {
          [('Main', '==', 'm.02l341', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.02l341 fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.02l341 fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'-0752'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 17 / 190: {
          [('Main', '==', 'm.02l341', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 20
            Final Answer: {'Great Altar of Hercules', 'Basilica Fulvia', 'Shrine of Venus Cloacina', 'Porta Capena', 'Via Tiburtina', 'Temple of Minerva Medica', 'Basilica Ulpia', 'Colosseum', 'Servian Wall', 'Villa delle Vignacce', 'Porta Trigemina', 'Temple of Jupiter Stator', 'Stadium of Domitian', 'Temple of Apollo Palatinus', 'Campus Martius', 'Villa Publica', 'Temple of Cybele', 'Villa Magna', 'Via Labicana'}
            Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 19, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 190: {
          [('Main', '==', 'm.02l341', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'Battle of the Colline Gate'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 19 / 190: {
          [('Main', '==', 'm.02l341', ['exhibitions.exhibition_subject.exhibitions_created_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'Pompeii and the Roman Villa: Art and Culture around the Bay of Naples'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 20 / 190: {
          [('Main', '==', 'm.02l341', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 32
            Final Answer: {'A Struggle for Rome', 'Barbarism and religion', 'The History of the Decline and Fall of the Roman Empire', 'Hannibal Crosses the Alps', 'The Roman Empire And the New Testament', 'Julius Caesar (Life & Times S.)', 'The Last Generation of the Roman Republic', 'The ancient Romans', 'Spartacus', 'Greek Thought', 'History of Rome', 'City: A Story of Roman Planning and Construction', 'Romanization in the Time of Augustus', "Cicero: The Life and Times of Rome's Greatest Politician", 'Roman Agrarian History and its Significance for Public and Private Law', 'Roman Fort', 'Rubicon: The Last Years of the Roman Republic', 'Caesar', 'Studies in Ancient Greek and Roman Society', "The Assassination of Julius Caesar: A People's History of Ancient Rome", 'Mystic Italy', 'Herculaneum', 'Studies In Roman History', 'Roman Social Relations, 50 B.C. to A.D. 284', 'The Culture of Classicism: Ancient Greece and Rome in American Intellectual Life 1780-1910', 'Death and Renewal', 'Rubicon', 'Decline and Fall', 'Storming the heavens', 'Sex Lives of the Roman Emperors', 'Blood of the Caesars', 'The Roman Revolution'}
            Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 32, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 21 / 190: {
          [('Main', '==', 'm.02l341', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.02l341 fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'Genseric Sacking Rome, 455'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 22 / 190: {
          [('Main', '==', 'm.03gk2', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Elective monarchy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 23 / 190: {
          [('Main', '==', 'm.03gk2', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 5
            Final Answer: {'Latin Language', 'Slavic language', 'Italian Language', 'German Language', 'West Germanic languages'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 24 / 190: {
          [('Main', '==', 'm.03gk2', ['location.dated_location.date_dissolved'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03gk2 fb:location.dated_location.date_dissolved ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.03gk2 fb:location.dated_location.date_dissolved ?o1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'1806'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 25 / 190: {
          [('Main', '==', 'm.03gk2', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Otto III, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 26 / 190: {
          [('Main', '==', 'm.03gk2', ['location.country.languages_spoken'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.languages_spoken ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 4
            Final Answer: {'Dutch Language', 'Slovenian language', 'French Language', 'Czech Language'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 27 / 190: {
          [('Main', '==', 'm.03gk2', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03gk2 fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.03gk2 fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'0800-12-25'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 28 / 190: {
          [('Main', '==', 'm.03gk2', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 3
            Final Answer: {'Electoral Palatinate of the Rhine', 'County of Tecklenburg', 'County of Bentheim'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 29 / 190: {
          [('Main', '==', 'm.03gk2', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 8
            Final Answer: {'Battle of Vienna', 'Schmalkaldic War', 'Second Margrave War', 'Siege of Vienna', 'Battle of Mühlberg', 'Siege of Neuss', 'Spanish conquest of Sardinia'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 30 / 190: {
          [('Main', '==', 'm.03gk2', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 31 / 190: {
          [('Main', '==', 'm.03gk2', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'Frankfurt', 'Regensburg'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 32 / 190: {
          [('Main', '==', 'm.03gk2', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Europe'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 190: {
          [('Main', '==', 'm.03gk2', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 5
            Final Answer: {'The Emperor Charles V', 'I, Claudius', 'Frederick II', 'Church and Cosmos in Early Ottonian Germany', 'Charlemagne'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 34 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.tourist_attractions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:travel.travel_destination.tourist_attractions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 39
            Final Answer: {'Via Veneto', 'Appian Way', 'Seven Pilgrim Churches of Rome', 'Tabularium', "St. Peter's Basilica", 'Churches of Rome', 'Bocca della Verità', "Castel Sant'Angelo", 'Palazzo Barberini', 'Palazzo Chigi', 'Palazzo Venezia', 'Spanish Steps', 'Fontana delle Naiadi', 'Colosseum', 'Quirinal Palace', 'Piazza Venezia', 'Basilica di Santa Maria Maggiore', 'Piazza Navona', 'Pyramid of Cestius', 'Piazza del Popolo', 'Roman Forum', 'Capitoline Hill', 'Catacombs of Rome', 'Circus Maximus', "Villa d'Este", 'Palazzo Spada', 'Galleria Borghese', 'Rome Observatory', 'Raphael Rooms', 'San Nicola in Carcere', 'Apostolic Palace', 'Pantheon', 'Domus Aurea', 'Baths of Caracalla', 'Palazzo Farnese', 'Santa Maria sopra Minerva', "Hadrian's Villa", 'Fontana di Trevi', 'Archbasilica of St. John Lateran'}
            Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 39, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 35 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.local_transportation'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:travel.travel_destination.local_transportation ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:travel.travel_destination.local_transportation ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 2
            Final Answer: {'ATAC SpA', 'Metropolitana di Roma'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 36 / 190: {
          [('Main', '==', 'm.06c62', ['base.biblioness.bibs_location.loc_type'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.biblioness.bibs_location.loc_type ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 37 / 190: {
          [('Main', '==', 'm.06c62', ['base.biblioness.bibs_location.is_clear'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.biblioness.bibs_location.is_clear ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 38 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 2523
            Final Answer: {'Luca Ferri', 'Alessio di Savino', 'Saverio Costanzo', 'Renzo Cesana', 'Luca Marinelli', 'Marco Perez', 'Andrea De Sica', 'Daniele Nannuzzi', 'Claudio Santamaria', 'Filippo Walter Ratti', 'Fulvio Conti', 'Manfredo Tafuri', 'Anna Maria Corazza Bildt', 'Lisa Mazzotti', 'Franca Tamantini', 'Luce Fabbri', 'Pope Anastasius III', 'Beatrice Giorgi', 'Andy Selva', 'Aldo Palazzeschi', 'Oscar Blando', 'Matteo Carandini', 'Nicola Zingaretti', 'Alessandro Boccolini', 'Pope Anastasius IV', 'Sandro Giordano', 'Marco Sansovini', 'Francesco Quintini', 'Aitana Sánchez-Gijón', 'Rossella Drudi', 'Alberto Aquilani', 'Edmond Amateis', 'Antonio Di Carlo', 'Alessandro Florenzi', 'Elodie Treccani', 'Domitian', 'Giovanni Giraud', 'Cristian Silvestri', 'Michele Cruciani', 'Mario Pinzauti', 'Gabriella Pallotta', 'Nitto Francesco Palma', 'Alessandra Vanzi', 'Valerio Di Cesare', 'Saint Donatus of Muenstereifel', 'Marco De Luca', 'Andrea Purgatori', 'Niccolò Gitto', 'Franco Sensi', 'Alberto Giolitti', 'Gianni Toti', 'Monica Gravina', 'Giuseppe Rinaldi', 'Giorgio Gorgone', 'Mimmo Poli', 'Francesca Dellera', 'Belisario L. Randone', 'Danny Raco', 'Attilio Mattei', 'Enzo Cozzolini', 'Adelaide Orsola Appignani', 'Sabrina Siani', 'Alfredo Ildefonso Schuster', 'Lamberto Zauli', 'Chiara Salerno', 'Julian Cesarini', 'Galeazzo Maria Alvise Emanuele Ruspoli, 2nd Duke of Morignano', 'Mario Spinetti', 'Paola Onofri', 'Patrizia Panico', 'Marco Piccioni', 'Onofrio de Santa Croce', 'Kikko Solaris', 'Sara Ukić', 'Giovanni Battista de Rossi', 'Piero Tiberi', 'Marcus Antonius Antyllus', 'Fabrizio Di Mauro', 'Alfredo Giannetti', 'Eugenia Zuffoli', 'Marina Ripa di Meana', 'Alessandro Nesta', 'Giulio Tonti', 'Giovanni Angelo Canini', 'Justus', "Tullia d'Aragona", 'Pietro Colonna', 'Francesca Calvelli', 'Augusto Camerini', 'Ulderico Marcelli', 'Antonello Fassari', 'Stefano Caruso', 'Kim Rossi Stuart', 'Luciano Martino', 'Agostino Tassi', 'Pope Benedict III', 'Alessandro Romeo', 'Andrea Conti', 'Vincenzo Cerami', 'Andrea Riccardi', 'Nicola Di Gioia', 'Pope Sixtus I', 'Luca Manfredi', 'Mino Roli', 'Pope Nicholas III', 'Guido Ascanio Sforza di Santa Fiora', 'David Giubilato', 'Sandro Casamonica', 'Roberto Lippi', 'Valeria De Felice', 'Pope Sixtus III', 'Saint Alexius', 'Francesco Stipo', 'Dimitri Alexandre Hamlin', 'Domenico Fetti', 'Paola Tiziana Cruciani', 'Pietro Francisci', 'Flo McGarrell', 'Pietro Castellitto', 'Pietro Fumasoni Biondi', 'Noemi', 'Armando Nannuzzi', 'Piero Regnoli', 'Pope Pelagius II', 'Giulio Coltellacci', 'Leone Caetani', 'Carla Mancini', 'Franca Faldini', 'Federica Sorriso', 'Vittorio Zarfati', 'Ira von Fürstenberg', 'Giulio Berruti', 'Franco Frattini', 'Pope Agapetus I', 'Roberta Angelilli', 'Princess Mafalda of Savoy', 'Lollipop', 'Paltemio Barbetti', 'Ugo Lombardi', 'Adriano Bonaiuti', 'Massimiliano Camaiti', "Raimondo D'Inzeo", 'Ruggero Maccari', 'Alberto Moravia', 'Asia Argento', 'Emiliano Moretti', 'Jorge de Bagration', 'Anita Pallenberg', 'Hippolytus of Rome', 'Pope Lucius I', 'Hortense Mancini', 'Giangiacomo Guelfi', 'Julius Caesar', 'Giorgio Simonelli', 'Oliviero De Fabritiis', 'Luca Romagnoli', 'Claudio Saraceni', 'Francesco Scaratti', 'Bruno Corbucci', 'Bobby Solo', 'Fabio Conversi', 'Virgilio Gazzolo', 'Fausto Brizzi', 'Giuseppe La Torre', 'Emanuel Glicen Romano', 'Bruno Finesi', 'Tonino Ricci', 'Marcello Aliprandi', 'Lilí Álvarez', 'Sara Varone', 'Giorgio Agamben', 'Giulio Caccini', 'Mario Camerini', 'Luca Magnani', 'Fabrizio Frizzi', 'Isabella Rossellini', 'Antonella Attili', 'Laura Fermi', 'Stefano Fanucci', 'Paolo Mastrantonio', 'Marco Di Vaio', 'Fabio Ferrari', 'Gary Low', 'Ennio Coltorti', 'Pier Leone Ghezzi', 'Allison Miller', 'Renzo Rossellini', 'Timoty Aliprandi', 'Max Biaggi', 'Luciana Angiolillo', 'Luis Simarro Lacabra', 'Filippo I Colonna', 'Ernesto Buonaiuti', 'Spadino', 'Daniele Secci', 'Milly Vitale', 'Sergio Tofano', 'Giulia Elettra Gorietti', 'Giuseppe Acquari', 'Riccardo del Fra', 'Cristian Bucchi', 'Giovanna of Italy', 'Massimiliano La Pegna', 'Tommaso Gaffi', 'Pope John XVII', 'Saints Chrysanthus and Daria', 'Bernard Mary of Jesus', 'Livia Venturini', 'Remo Remotti', 'Giuliano Gemma', 'Carlo Minnaja', 'Alfredo Pea', 'Andrea Silenzi', 'Bernardino Giraud', 'Fausto Acke', 'Giulio Calì', 'Bruno Carotenuto', 'Alberto Ginulfi', 'Giorgio Gobbi', 'Paolo Pietrangeli', 'Alessio Scarchilli', 'Marco Giallini', 'Enzo Cerusico', 'Amir Issaa', 'Fabio Luigi Lionello', 'Guido Vetere', 'Antonio Margheriti', 'Sergio Garrone', 'Carlo Siliotto', 'Daniele Capezzone', 'Valeria Messalina', 'Marcello Fiorentini', 'Francesco Venditti', 'Armando Colafrancesco', 'Oliver Russell, 2nd Baron Ampthill', 'Giulio Toniolatti', 'Rossana Di Lorenzo', 'Dirce Funari', 'Franca Gonella', 'Franco Interlenghi', 'Vera Gemma', 'Silvia De Santis', 'Bernardino Maffei', 'Matteo Sommacal', 'Boniface of Tarsus', 'Telemaco Arcangeli', 'Giovanna Ralli', 'Franco Fraticelli', 'Camillo di Pietro', 'Gabriele Maruotti', "Luigi Filippo D'Amico", 'Giovanni Francesco Anerio', 'Armenia Balducci', 'Max Gazzè', 'Elena Domenica Rubeo', 'Francesco Munzi', 'Alessandra Guerzoni', 'Deva Cassel', 'Lorenzo Lauri', 'Laura Margherita Mazzarini', 'Dina Talaat', 'Gabriele Grossi', 'Giovanna Marini', 'Giuseppe Gioacchino Belli', 'Giuseppe Curia', 'Andrea Mengoni', 'Monique Bégin', 'Enrico Fabbro', 'Pope Leo VII', 'Diana Luna', 'Ornella Muti', 'Carlo Egidi', 'Agnese Allegrini', 'Franco Bracardi', 'Cristiana Mancinelli', 'Niccolò Fabi', 'Corrado Mantoni', 'Felice Farina', 'Gianni Lunadei', 'Filippo II Colonna', 'Fiore Argento', 'Daniela Sanzone', 'Fabrizio Bava', 'Giorgio Mitolo', 'Anna Campori', 'Raimondo Crociani', 'Claudio Argento', 'Alberto Orlando', 'Luca Infascelli', 'Mario Caiano', 'Walter Patriarca', 'Adelmo Prenna', 'Pier Ruggero Piccio', 'Stefano Lentini', 'Pope Donus', 'Enzo Staiola', 'Pope Honorius IV', 'Sergio Montanari', 'Giuseppe De Luca', 'Pio Piacentini', 'Herbert Haseltine', 'Louis Handley', 'Gerino Gerini', 'Prince Ferdinand Pius, Duke of Calabria', 'Pierpaolo Cristofori', 'Marco Lodoli', 'Wendel Meldrum', 'Sabrina Ferilli', 'Giorgia Campana', 'Luca Ward', 'Giuseppe Jannaconi', 'Gregorio Allegri', 'Daniela Bianchi', 'Francesca Ventura', 'Juan Carlos I of Spain', 'Gianfranco Barra', 'Lavinia Guglielman', 'Manolo Pestrin', 'Massimo De Rossi', 'Nino Gaetano Martinetti', 'Mirella Gregori', 'Domenico Gnoli', 'Anthony Gradwell', 'Adriano Panatta', 'Ida Carloni Talli', 'Luciana Sbarbati', 'Frances of Rome', 'Gabriel Sava', 'Giuseppe Bottai', 'Silvano Tranquilli', 'Raimondo Van Riel', 'Marco Napolioni', 'Italo Tomassi', 'Leda Gys', 'Joel McHale', 'Pope Boniface II', 'Roberto Infascelli', 'Fiorenzo Angelini', 'Paolo Triestino', 'Maurizio Molinari', 'Alfredo Campoli', 'Nero Claudius Drusus', 'Giuseppe Manfridi', 'Giampaolo Menichelli', 'Loretta Goggi', 'Umberto Guidoni', 'Elio de Angelis', 'Filippo Costaggini', 'Luigi Albani', 'Vittorio Gui', 'Pope Sylvester I', 'Saint Silvia', 'Luciano Ricceri', 'Alessandro Gassman', 'Pope Zephyrinus', 'Marco Angeletti', 'Marcello Bacciarelli', 'Andrea Cano', 'Gianguido Baldi', 'Tommaso Marconi', 'Federico Moccia', 'Ludovica Albertoni', 'Romolo Garroni', 'Roberto Policano', 'Giovanni Mossi', 'Rhipsime', 'Giovanni Frattini', 'Alessandro Crescenzi', 'Camille-Marie Stamaty', 'Fabrizio De Angelis', 'Sabatino Moscati', 'Luca Firth', 'Enzo Liberti', 'Shadi Ghosheh', 'Daniele Luchetti', 'David Riccitelli', 'Nicola Piovani', 'Massimiliano Cappioli', 'Fernando Saraceni', 'Roberto Capucci', 'Franco Nebbia', 'Catiline', 'Eleonora Giorgi', 'Paolo Giobbe', 'Carlo Gualandri', 'Marie von Schleinitz', 'Michele Mercati', 'Pino Colizzi', 'Fabio Simonelli', 'Eleonora Fonseca Pimentel', 'Francesco Vedovati', 'Marco Morandi', 'Piero Natoli', 'Stefano Battistelli', 'Antonio Faraò', 'Daniele Morante', 'Fernando Risi', 'Francesco Marconi', 'Lea Massari', 'Gianluca Castán', 'Ludovica Modugno', 'Carmen Boni', 'Scipione Borghese', 'Riccardo Di Segni', 'Elio Pandolfi', 'Pope Boniface VI', 'Luisa Maneri', 'Arturo Vivante', 'Aldo Giordani', 'Sveva Caetani', 'Giuseppe Albani', 'Scilla Vannucci', 'Paola Tedesco', 'Giovanni Fago', 'Alessandro Zamperini', 'Sergio Nuti', 'Aldo Nardi', 'Mariana Mussolini', 'Pope John XIII', 'Giacomo Durzi', 'Alessandro Rinaldi', 'Elsa Morante', 'Mario Bertoncini', 'Agnese Nano', 'Massimo Ciavarro', 'Alessandro Piperno', 'Leopoldo Valentini', 'Marcellinus and Peter', 'Francesco Ruspoli, 10th Prince of Cerveteri', 'Nello Pazzafini', 'Francesco Trapani', 'Gianluca Ramazzotti', 'Sergio Raimondi', 'Lucullus', 'Maurizio Merli', 'Vincenzo Camuccini', 'Domenico Corri', 'Monica Vullo', 'Daria Galateria', 'Enrico Sgrulletti', 'Achille Pinelli', 'Marco Lo Muscio', 'Pier Giorgio Bellocchio', 'Giorgio Calcaterra', 'Luciano Salce', 'Federico Cesi', 'Cesare Valletti', 'Danny Huston', 'Tommaso Tittoni', 'Giovanni Corbyons', 'Augustus', 'Otello Martelli', 'Raoul Torresi', 'Mario Carotenuto', 'Bianca Maria Fusari', 'Giulio Aristide Sartorio', 'Pietro Castrucci', 'Alfredo Ottaviani', 'Massimo Massimi', 'Fortunato Pio Castellani', 'Ettore Marchiafava', 'Cesare Pascarella', 'Stefano Pelinga', 'Roberto Mazzucato', 'Fausta', 'Alessia Marcuzzi', 'Francesco Bilotti', 'Pier Luigi Farnese, Duke of Parma', 'Sandro Moretti', 'Paolo Calabresi', 'Carlo Mazzantini', 'Daniele Del Giudice', 'Prince Michael of Greece and Denmark', 'Tazio Secchiaroli', 'Richard Antinucci', 'Alex Ponti', 'Marco Luly', 'Dona Bertarelli', 'Augusto Mastrantoni', 'Piero Marrazzo', 'Giulia Salvatori', 'Taiyo Yamanouchi', 'Manuela Mandracchia', 'Elisabetta Mussolini', 'Christian Halsey Solomon', 'Giovanni Gaetano Orsini', 'Antonio Tajani', 'Bruno Paolinelli', 'Viola Moreschina Nuschi Adec Nicoletta Maria Arrivabene-Valenti-Gonzaga', 'Marcello Fondato', 'Federico Martinengo', 'Aldo De Benedetti', 'Wilma Labate', 'Bruno Martino', 'Vincenzo Labella', 'Rodolfo Lombardi', 'Francesco Marchetti Selvaggiani', 'Cesare Sterbini', 'Saint Serapia', 'Saint Balbina', 'Raffaella De Laurentiis', 'Paolo Lucidi', 'Euridice Axen', 'Michele Ceccoli', 'Oliviero Carafa', 'Fabrizio Di Bella', 'Francesco Maria Mancini', 'Mario De Micheli', 'Filippo Lauri', 'Ennio Guarnieri', 'Pietro Lazzari', 'Claudia Rivelli', 'Maurizio Mosca', 'Francesco Scura', 'Renato Baldini', 'Saint Paula', 'Stefano di Battista', 'Dante Giacosa', 'Nymphidius Sabinus', 'Princess Marie Louise of Bourbon-Parma', 'Paila Pavese', 'Veniero Colasanti', 'Gerolama Orsini', 'Sandro Ruffini', 'Ezio Pinza', 'Franco Lucchini', 'Gabriele Paoletti', 'Giulio Cagiati', 'Orazio Benevoli', 'Francesco De Masi', 'Andrea Sorrentino', 'Beatrice Cenci', 'Alberto Di Chiara', 'Amedeo Fago', 'Romolo Guerrieri', 'Giuliano Taviani', "Ilaria D'Amico", 'Corrado Guzzanti', 'Leone Colonna', 'Maura Morales Bergmann', 'Giovanna Mezzogiorno', 'Luca Lionello', 'Francesco Totti', 'Ingrid Rossellini', 'Amleto Palermi', 'Luca Prodan', 'Eugenio Alabiso', 'Alvaro-Jaime de Orléans-Borbón y Parodi Delfino', 'Rossella Como', 'Maria Jacobini', 'Massimo Zeri', 'Piergiorgio Welby', 'Benedetto Pistrucci', 'Roberto Fiore', 'Cyriaca', 'Danilo Desideri', 'Rossano Rubicondi', 'Apollonius the Apologist', 'Stefano Pasetto', 'François Gerard', 'Daniele Portanova', 'Pompeo Cannicciari', 'Mario Novelli', 'Claudio Pistolesi', 'Roberto Scarpetti', 'Camillo Mastrocinque', 'Mauro Sandreani', 'Giuseppe Ruzzolini', 'Giovanni Degni', 'Selen', 'Sergio Spina', 'Andrea Palmisano', 'Marco Tulli', 'Simonetta Di Pippo', 'Andrea Bianchi', 'Lionello Grifo', 'Nathan ben Jehiel', 'Alfredo Balloni', 'Gigi Sabani', 'Luigi Chiarini', 'Sophia Loren', 'Giordano Meloni', 'Osvaldo Desideri', 'Roberto Della Casa', 'Andrea Bertolacci', 'Giuseppe Colizzi', 'Furio Scarpelli', 'Catherine de Vivonne, marquise de Rambouillet', 'Memmo Carotenuto', 'Leopoldo Fregoli', 'Antonella Interlenghi', 'Emiliano Corapi', 'Lucien Louis Joseph Napoleon Bonaparte', 'Ludovica Rampoldi', 'Clayton Halsey', 'Pope Vigilius', 'Elio Germano', 'Marco Pontecorvo', 'Giorgia Trasselli', 'Leonardo Cortese', 'Bruno Nicolai', "Joe D'Amato", 'Enrico Silvestrin', 'Baldassarre Boncompagni', 'Alex Di Giorgio', 'Liberto Rabal', 'Fabio Grossi', 'Carlo Rainaldi', 'Simone Corsi', 'Lino Del Fra', 'Federico Capasso', 'Pope Benedict V', 'Elio Pecoraro', 'Jesto', 'Francesco Maselli', 'Alberto Piccinini', 'Pietro Aldobrandini', 'Marco Bonini', 'Francesco Borgongini Duca', 'Mario Albertelli', 'Federica Sbrenna', 'Ezio Sella', 'Howard Ross', 'Davide Lionello', 'Pamela Petrarolo', 'Emanuela Rossi', 'Romano Tozzi Borsoi', 'Marco Sanges', 'Giuseppe Gentile', 'Sara Franchetti', 'Maurizio Argentieri', 'Enrico Lorenzetti', 'Riccardo Onorato', 'Meryem of Morocco', 'Luigi del Gallo Roccagiovine', 'Anna Maria Sandri', 'Federica Radicchi', 'Mario Artistico', 'Antonietta Meo', 'Valentina Cervi', 'Maurizio Di Nardo', 'Cristiano Gimelli', 'Enrico Cecchetti', 'Saverio Deodato Dionisio', 'Katia Ancelotti', 'Mita Medici', 'Alex Vega', 'Mario Dominici', 'Christian Conti', 'Elio Petri', 'Tata Giacobetti', 'Emimmo Salvi', 'Patrizia Lombardo', 'Gianluca Toscano', 'Mariano Laurenti', 'Giuseppe Sabbatini', 'Francesco Bellissimo', 'Mario Cardoni', 'Guglielmo Sinaz', 'Alessandra Martines', 'Matteo Pratichetti', 'Claudia Cesarini', 'Alessandra Mussolini', 'Daniele Pecci', 'Federico Dordei', "Marco D'Alessandro", 'Marco Modugno', 'Massimo Rinaldi', 'Renato Dandi', 'Nina Torresi', 'Sandro Merli', 'Giulio Andreotti', 'Andrea de Cesaris', 'Gorella Gori', 'Gianluca Freddi', 'Gianfranco Leoncini', 'Stella Interlenghi', 'Arsenius the Great', 'Francesco De Vito', 'Luigi Ciccarese', 'Alessandro Romano', 'Infanta Margarita, Duchess of Soria', 'Paola Barbara', 'Flavio Lazzari', 'Marco Turco', 'Princess Maria Francesca of Savoy', 'Jacopo Peri', 'Mutio Vitelleschi', 'Daniele Martinetti', 'Mario Montuori', 'Maurizio Costanzo', 'Gigi Proietti', 'Stefano Di Chiara', 'Marco Vicario', 'Simonetta Stefanelli', 'Furio Monicelli', 'Nicolas Vaporidis', 'Pope Felix I', 'Pope Sergius IV', 'Anna Miserocchi', 'Romano Calò', 'Laura Muccino', 'Michele Miarelli', 'Gianluca Bacchiocchi', 'Glauco Signorini', 'Omero Chiesa', 'Enzo G. Castellari', 'Paola S. Timiras', 'Gaspar de Guzmán, Count-Duke of Olivares', 'Mario Ponzo', 'Flavia Vento', 'Pope Sylvester III', 'Pietro Bracci', 'Sílvia Buarque', 'Nico Garrone', 'Giovanni Maria Lancisi', 'Franco Evangelisti', 'Alexander Farnese, Duke of Parma', 'Angela Borgia', 'Pier Paolo Petroni', 'Fadilla', 'Luigi De Laurentiis Jr.', 'Luca Spinetti', 'Pope Pelagius I', 'Angelo Paolanti', 'Claudio De Sousa', 'Giambattista Valli', 'Lorenzo De Silvestri', 'Marcello Giorda', 'Orazio Costa', 'Cecilia Dazzi', 'Serafino Dubois', 'Francesca Marciano', 'Antonio Isopi', 'Ennio Antonelli', 'Marino Girolami', 'Lorenzo Magalotti', 'Piero Gerlini', 'Emilio Petacci', 'Domenico Serafini', 'Paolo Pellegrin', 'Danny Quinn', 'Fabrizio Grillo', 'Giada De Laurentiis', 'Elagabalus', 'Marco Marinangeli', 'Fabio Lopez', 'Titus Statilius Taurus', 'Renato William Jones', 'Ernesto Bertarelli', 'Piero Fantastichini', 'Silvana Mangano', 'Daniel Acon', 'Cinzia Petrucci', 'Gianni Pulone', 'Anna Maria Villani Scicolone', 'Antonia Gordiana', 'Andrea Giallombardo', 'Gordian II', 'Claudia Octavia', 'Matteo Ripaldi', 'Matteo Merini', 'Alessandro Roja', 'Oliviero Zega', 'Giuseppe Giulietti', 'Andrea Chiarabini', 'Livia Giuggioli', 'Alberto De Martino', 'Antipope Anacletus II', 'Micaela Ramazzotti', 'Bice Valori', 'Pope Stephen II', 'Paolo Jacobini', 'Marco Capparella', 'Urbano Barberini', 'Mario Scaccia', 'Stefano Masciolini', 'Pope Cornelius', 'Alvaro Mancori', 'Massimo Bonanni', 'Claudio Villa', 'Mario Guerra', 'Ercole Consalvi', 'Pope Paul I', 'Antonello Venditti', 'Léonie Cassel', 'Paolo Carosone', 'Tommaso Ceccarelli', 'Rodolfo Lanciani', 'Davide Giugliano', 'Carlo Sironi', 'Francesco Siacci', 'Antipope Boniface VII', 'Nathalie', 'Lelio Colista', 'Raffaella Rossellini', 'Ben Pastor', 'Romano Musumarra', 'Claudio Fragasso', 'Roberta Bruni', 'Enzo Siciliano', 'Enrico Montesano', 'Sergio Liani', 'Pope Clement III', 'Mauro Bigonzetti', 'Jan Miczaika', 'Francesco Mancini', 'Marco Tudini', 'Nadja Salerno-Sonnenberg', 'Silvia Dionisio', 'Stefano Sollima', 'Rafael Sánchez Ferlosio', 'Emiliano Landolina', 'Giammarco Frezza', 'Eugenio Colombo', 'Sandra Valenti', 'Giulio Paradisi', 'Tino Santoni', 'Ida Smeraldo', 'Maurizio Savini', 'Tony Brandt', 'Marco Arpino', 'Massimo Taccon', 'Stefano Viali', 'Maria Fiore', 'Maurizio Arena', 'Gianni Di Gregorio', 'Simone Annicchiarico', 'Chiara Mastalli', 'Riccardo Petrazzi', 'Bruttia Crispina', "Roberto D'Ettorre Piazzoli", 'Patrizio Cigliano', 'Stefano Pettinari', 'Angelo Caroselli', 'Dario Bellezza', 'Pope Adrian I', 'Riccardo Romagnoli', 'Niccolò Ammaniti', 'Claudia Pandolfi', 'Riccardo Scicolone', 'Giovanni Lopez', 'Giampaolo Letta', 'Paolo Panelli', 'Federico de Madrazo', 'Augusto Poggioli', 'Raffaele De Vita', 'Marco Frisina', 'Veronica De Laurentiis', 'Philippe Hersant', 'Alessio Gelsini Torresi', 'Remo Capitani', 'Lola Visconti-Brignone', 'Marcus Aurelius', 'Alessandro Blasetti', 'Giulio Battiferri', 'Flora Carabella', 'Raffaella Fantasia', 'Antipope Celestine II', 'Gino Mangini', 'Simone Braguglia', 'Lorenzo Quinn', 'Gabriele Renzi', 'Mauro Cioffi', 'Lucio Fulci', 'Valerio Virga', "Gabriele Dell'Otto", 'Raimondo Del Balzo', 'Gabriele Valvassori', 'Giovanni Canevari', 'Nicolas De Toth', 'Mario Bianchi', 'Andrea Briotti', 'Alessandro Pesci', 'Aulus Gellius', 'Rolando Ravello', 'Bettina Perut', 'Cristiano Pogany', 'Lionello Manfredonia', 'Panos Cosmatos', 'Valerio Bernabò', 'Luca Scribani Rossi', 'Piero Palermini', 'Roman Santanova', 'Claudio Amendola', 'Giuseppina Cirulli', 'Benedetta Craveri', 'Antonio Acqua', 'Demofilo Fidani', 'Pierino Massenzi', 'Nazzareno Celestini', 'Egidio Vagnozzi', 'Eugenio Fontana', 'Emanuele Crialese', 'Lavinia Bonessio', 'Enrico Gennari', 'Luca Pancalli', 'Julia the Elder', 'Maria Rosa Coccia', 'Mario Sonnino', 'Alexandra Aidini', 'Pope Benedict II', 'Mattia Sbragia', 'Federico Macheda', 'Sergio Ferrara', 'Federico Zeri', 'Ottavio Mai', 'Raf Baldassarre', 'Pope Gregory IV', 'Omero Carmellini', 'Mario Labroca', 'Charly B', 'Giuseppe Signorini', 'Gianni Marchetti', 'Eleonora De Angelis', 'Claudia Gerini', 'Giulia Luzi', 'Fernanda Battiferri', 'Luciano Maiani', 'Claudia Corsini', 'Mario Ruspoli', 'Giacomo Cavalieri', 'Giuseppe Soleri', 'Sebastiano Antonio Tanara', 'Patrizio Pelizzi', 'Alessandro Sgrigna', 'Dario di Palma', 'Fulvio Palmieri', 'Orazio Borgianni', 'Luciano Rossi', 'Matteo Rosso Orsini', 'Bob Perani', 'Cato the Younger', 'Mario Imperoli', 'Paola Gassman', 'Stefano Landi', 'Matteo Gazzolo', 'Luciano Bernasconi', "Silvio D'Amico", 'Elena Pompei', 'Enzo Trapani', 'Spurius Cassius Viscellinus', 'Claudio Lotito', 'Giulio Liberati', 'Pietro Raimondi', 'Luca Zingaretti', 'Giovanni Domenico de Cupis', 'Arvid Pardo', 'Romaine Brooks', 'Franco Giornelli', 'Alessandro Specchi', 'Carlo Infascelli', 'Giorgio Scarlatti', 'Emiliano Dei', 'Stefano Impallomeni', 'Riccardo Capogna', 'Ivo Perilli', 'Carlo Odescalchi', 'Pope Innocent X', 'Sergio Rossi', 'Paola Quattrini', 'Egidio Guarnacci', 'Sergio Corbucci', 'Britannicus', 'Junio Valerio Borghese', 'Filippo Valle', 'Ilaria Fraioli', 'Daniele Marino', 'Attilio Nicodemo', 'Carola Cicconetti', 'Victor Alfieri', 'Pope Nicholas I', 'Marco Trentini', 'Fernando Silva', 'Salvatore Baccaloni', 'Bernardino Molinari', 'Luca Giurato', 'Fernando De Luca', 'Antonella Mosetti', 'Max Malatesta', 'Francesca Lo Schiavo', 'Carlo Cremonesi', 'Federico Pacifici', 'Letícia Román', 'Pope Stephen I', 'Emanuele Padella', 'Lilia Silvi', 'Oscar Mammì', 'Gaetano Koch', 'Giovanni Costa', 'Bindo Altoviti', 'Nino Dal Fabbro', 'Anna Magnani', 'Simone Loiodice', 'Luigi Moretti', 'Paolo Lorenzani', 'Concordius of Spoleto', 'Enrico Vanzina', 'Valerio Attanasio', 'Karen Ciaurro', 'Alessio Sestu', 'Alfredo Welby', 'Pinuccia Nava', 'Paolo Anesi', "Suso Cecchi d'Amico", 'Fiorenza Tessari', 'Giacomo Ciarrapico', 'Lucio Gregoretti', 'Pope Anastasius I', 'Rizia Ortolani', 'Flavia Domitilla', 'Ilario Lanna', 'Martino Longhi the Younger', 'Beatrice Mancini', 'Julius Evola', 'Milena Mancini', 'Melania the Younger', 'Benito Stefanelli', 'Ciro Ferri', 'Camillo Borghese, 6th Prince of Sulmona', 'Carlo Di Palma', 'Antonino Bernardini', 'Alessandro Pepe', 'Pope Urban I', 'Piero Taruffi', 'Lilla Brignone', 'Basilissa and Anastasia', 'Enrico Fermi', 'Pope Gregory II', 'Maria Rosaria Omaggio', 'Ennio Girolami', 'Gabriella Porpora', 'Pippo Franco', 'Marco Conidi', 'Paolo Emilio Rondinini', 'Laura Biagiotti', 'Gianluca Francesconi', 'Susanna Javicoli', "Piero D'Inzeo", 'Aulus Avilius Flaccus', 'Frida Giannini', 'Sergio Sollima', 'Andrea Locatelli', 'Manuel Coppola', 'Luca Maria Patella', 'Marco Mancini', 'Gennaro Chierchia', 'Valerio Vigliar', 'Giacomo Gaetani Stefaneschi', 'Vinicio Diamanti', 'Massimo Mongai', 'Daniele Di Spigno', 'Spean Covery', 'Esterino Montino', 'Daniele Silvestri', 'Titus', 'Alberto Ziveri', 'Ada Feinberg-Sireni', 'Gaia Germani', 'Paolo Portoghesi', 'Lucrezia Lante della Rovere', 'Pope Felix III', 'Andrea Farri', 'Raoul Bova', 'Justin Davidson', 'Lucilla Andreucci', 'Pope Alexander I', 'Agnes of Rome', 'Albino Cocco', 'Giancarlo Nicotra', 'Lucius Julius Libo', 'Pier Ludovico Pavoni', 'Adam Healey', 'Valerio Fiori', 'Giorgio Colangeli', 'Alessandro Proni', 'Andrea Angioli', 'Luigi Calabresi', 'Eleonora Vallone', 'Stefano Madia', 'Gino Sinimberghi', 'Alessandro Cucciari', 'Giovanni Cimara', 'Joy Saltarelli', 'Stefania Girolami Goodwin', 'Lorenzo Foschi', 'Paul Frajese', 'Massimo Morsello', 'Carlo Armellini', 'Immanuel the Roman', 'Leila Durante', 'Alfredo Montori', 'Roberto Meloni', 'Luca Barbarossa', 'Alessandro Parrello', 'Gabrio Zandonà', 'Pope Urban VII', 'Bianca Riario', 'Andrea Di Stefano', 'Valerio Morucci', 'Leila Parisi', 'Marco Foschi', 'Enrico Tamberlik', 'Maurizio Domizzi', 'Biagio Proietti', 'Saint Xenia the Righteous of Rome', 'Marco Quintili', 'Jone Frigerio', 'Marcello Mandò', 'Eleonora Ivone', 'Alessandro Di Carlo', 'Giovanni Battista Verger', 'Barnaba Tortolini', 'Giuseppe Cades', 'Vittorio Dagianti', 'Tatiana Dogaru', 'Edvige Valcarenghi', 'Marco Piccinini', 'Bruno Scipioni', 'Pope John II', 'Alessia Aureli', 'Claudio Bellucci', 'Enzo Stuarti', 'Margit Evelyn Newton', 'Riccardo Brosco', 'Angelo Palma', 'Pierre Napoleon Bonaparte', 'Michele Sepe', 'Mary Elizabeth Maugham', 'Pier Luigi Cherubino', 'Ignazio Lupi', 'Antipope Sylvester IV', 'Luca Ragazzi', 'Marie Mancini', 'Ryan Paris', 'Matteo Zingales', 'Andreina Pagnani', 'Maurizio Mattioli', 'Tullio Covaz', 'Nicola Cabibbo', 'Cornelio Sommaruga', 'Bernardino Zapponi', 'Pope Boniface III', 'Enzo Barboni', 'Romolo Alzani', 'Anda Federica Angelica Maria', 'Mario Salvadori', 'Countess Xenia Nikolaevna Sheremeteva', 'Roberto Savarese', 'Felicitas of Rome', 'Carlo Verdone', 'Aldo Aureggi', 'Giovanni Battista Rinuccini', 'Marzia Mete', 'Jovanotti', 'Giorgio Rubino', 'Roberto Stellone', 'Stefano Pirandello Jr.', 'Giuseppe Speluzzi', 'Elio Bianchi', 'Guillaume Apollinaire', 'Elsa Respighi', 'Francesco Sansovino', 'Gina Mascetti', 'Domiziana Giordano', 'Alberto Molinari', 'Princess Cristina of Bourbon-Two Sicilies', 'Valerio Aspromonte', 'Edoardo Nevola', 'Tiberius', 'Pio Angeletti', 'Emilio Bonucci', 'Piero Gemelli', 'Silvio Muccino', 'Pierluigi Giombini', 'Noel Borshi', 'Christian De Sica', 'Orsetta Gregoretti', 'Eduard Ender', 'Angela Goodwin', 'Roberto Fabbri', 'Paolo Bonacelli', 'Alessio Sakara', 'Manfredo Colassanti', 'Serena Dandini', 'Armando Preti', 'Tommaso Rinaldi', 'Otelo Zeloni', 'Adriano Aragon', 'Wilma Montesi', 'Federico Giancamilli', 'Bruno Minniti', 'Pope Liberius', 'Rui Luís', "Federico D'Anna", 'Ricky Memphis', 'Franco Festucci', 'Giacomo della Porta', 'Giuseppe Valadier', 'Paolo Lorenzi', 'Lorella Cuccarini', 'Franco Piersanti', 'Ugo Sansonetti', 'Augusto Genina', 'Daniele Incalcaterra', 'Veronica Logan', 'Remo De Angelis', 'Luigi Cimara', 'Giovanni Battista Salvi da Sassoferrato', 'Manuel Mancini', 'Julia Caesaris ""Major""', 'Sergio Romano', 'Gonippo Raggi', 'Ettore Petrolini', 'Daniele Dublino', 'Veronica Zinny', 'Alessandro Capone', 'Akiko Kusayanagi', 'Aldo Vergano', 'Pope Mark', 'Sforza Marescotto dei Principi Ruspoli', 'Paola Bizzarri', 'Amedeo Minghi', 'Lou Albano', 'Cinzia De Carolis', 'Renato Zero', 'Antonio Cinelli', 'Giancarlo De Sisti', 'Maurizio Amati', 'Daniele Corvia', 'Luciano Ercoli', 'Lucrezia Marricchi', 'Antonio Giolitti', 'Claudio Matteini', 'Daniele Galloppa', 'Virgilio Riento', 'Rosalinda Celentano', 'Francesca Tosti', 'Ada Colangeli', 'Lisa Fissneider', 'Gabriele Ferzetti', 'Carlo Bordini', 'Giancarlo Morresi', 'Blasco Giurato', 'Pietro Leonardi', 'Massimo Introvigne', 'Carlo Mucari', 'Julia Flavia', 'Flavio Cipolla', 'Nino Scolaro', 'Achille Campanile', 'Simone Legno', 'Luigi Pichler', 'Zenaida del Gallo Marchesa di Roccagiovine', 'Antonio Tosti', 'Ugo Guerra', 'Alessio Figalli', 'Pope John XII', 'Romina Mondello', 'Pandulf Masca', 'Pope Innocent II', 'Luca Tommassini', 'Prospero Colonna', 'Albert Roccardi', 'Paolo Guzzanti', 'Pope Agapetus II', 'Gabriele Bartoletti', 'Eloisa De Laurentiis', 'Princess Camilla, Duchess of Castro', 'Sophie Taricone', 'Vittorio Lampugnani', 'Myriam Catania', 'Ludovico Fremont', 'Pasquale Africano', 'Giovanni Omiccioli', 'Bruno di Luia', 'Giuseppe Puglia', 'Mario Rossi', 'Constantino Brumidi', 'Monica Simeone', 'Ennio de Concini', 'Fausto Pirandello', 'Giovanna Palermi', 'Alessandro Vita Kouzkin', 'Cesira Sonnino', 'Valerio Morabito', 'Claudia Mori', 'Carl Marzani', 'Vincenzo Capelli', 'Luigi Serafini', 'Enzo Sisti', 'Giovanni Bertini', 'Daniele Fruci', 'Alex Britti', 'Alberto Sorbelli', 'Gianluigi Gelmetti', 'Raimondo Vianello', 'Lorenzo Mieli', 'Claudio Maselli', 'Valeria Valeri', 'Pope Adeodatus I', 'Selvaggia Quattrini', 'Cosimo Alemà', 'Gaetano De Sanctis', 'Fabio Tinazzi', 'Nicolás Mascardi', 'Laura Mancini', 'Alessio Tombesi', 'Ugo Cerroni', 'Fernando Cerulli', 'Ettore Roesler Franz', 'Edoardo Anton', 'Giancarlo Pantano', 'Giorgio Veccia', 'Emanuele Concetti', 'Claudia Koll', 'Gina Amendola', 'Elena Fabrizi', 'Giovanni Pucci', 'Luciano de Paolis', 'Carolina Benvenga', 'Pope Eugene I', 'Giulio Bonnard', 'Andrea Pavan', 'Mario Praz', 'Raffaello Matarazzo', 'Stefano Vanzina', 'Gianfranco Ghirlanda', 'Bimba Bosé', 'Riccardo Giagni', 'Livilla', 'Renato Speziali', 'Carlo Maria Cordio', 'Carlo Mazzone', 'Giampiero Pinzi', 'Pierre Wiazemsky', 'Salvatore Argento', 'Marco Quadrini', 'Anastasia Dogaru', 'Michele Massimo Tarantini', 'Paolo Rustichelli', 'Ubaldo Maria Del Colle', 'Nicola Giovanni Civetta', 'Franco Micalizzi', 'Cristiana Possenti', 'Pierfrancesco Favino', 'Luciano Marini', 'Prince Nikolaos of Greece and Denmark', 'Rabarama', 'Sal Borgese', "Federico D'Angelo", 'Ross Cheever', 'Daniele Archibugi', 'Pope Adeodatus II', 'Gastone Renzelli', 'Thomas Jenkins', 'Lia Amanda', 'Angela Bianchini', 'Alessandro Loy', 'Niccolò Marini', 'Maya Sansa', 'Eraldo Da Roma', 'Francesca de Sapio', 'Adriano Giannini', 'Giovanni Paolo Melchiori', 'Lina Wertmüller', 'Rossana Montesi', 'Anne Marie Manzel', 'Alberto Ronchey', 'Frankie Provenzano', 'Mario Draghi', 'Andrea Negroni', 'Anna Demetrio', 'Pope Paschal I', 'Carlotta Natoli', 'Stefano Colantuono', 'Rino Di Silvestro', 'Tony Lecce', 'Stefano Di Fiore', 'Alfredo Del Francia', 'Pope Benedict IV', 'Angelo Colagrossi', 'Elena Varzi', 'Francesco Bulckaen', 'Roberto Gatto', 'Andrea Valentini', 'A‐Love', 'Ottavio Leoni', 'Luigi Musso', 'Giuliano Ferrara', 'Alex Argenti', 'Luigi Kuveiller', 'Manlio De Angelis', 'Gea Lionello', 'Paolo Damiani', "Cosmo D'Angeli", 'Nathalie Caldonazzo', 'Drusus Julius Caesar', 'Danilo Soddimo', 'Lorenza Indovina', 'Lello Bersani', 'Simone Iannarelli', 'Andrea Cappa', 'Winni Riva', 'Maurizio Calvesi', 'Maurizio Pradeaux', 'Silvio Vannucci', 'Daniele Vocaturo', 'Pope Benedict VI', 'Clotilde Scarpitta', 'Filippo Passerini', 'Amedeo Rega', 'Francesco Marcucci', 'Flavio Orsini', 'Giovanni Borgia, 2nd Duke of Gandia', 'Enrico Brignano', 'Carolina Crescentini', 'Andrea Crisanti', 'Stefano Napoleoni', 'Tullo Gramantieri', 'Simone Sello', 'Orazio Torsellino', 'Gio Paolo Bombarda', 'Francesco Cabras', 'Milko Skofic Jr.', 'Marzio Ciano', 'Fabrizio Moro', 'Daniele Lupo', 'Giulia Mafai', 'Massimo Rotundo', 'Princess Maria Isabella of Savoy-Genoa', 'Claudio Mancini', 'Stefano Mainetti', 'Anna Mazzamauro', 'Francesca Gregorini', 'Paola Cortellesi', "Gianfranco D'Angelo", 'Paola Pessot', 'Pope Julius I', 'Carla Tatò', 'Francesca Quondamcarlo', 'Simona Borioni', 'Scipio Africanus', 'Maria Monaci Gallenga', 'Alberto Grifi', 'Bruno Giordano', 'Claudio Noce', 'Aurelio De Laurentiis', 'Antonio Monda', 'Angelo Ferrari', 'Michelangelo Cerquozzi', 'Saint Bibiana', 'Stefano Desideri', 'Camillo Ruspoli, 1st Prince of Candriano', 'Giulio Romano', 'Marco Nappi', 'Gianmaria Bruni', 'Pino Locchi', 'Alessandro Sperduti', 'Ughetto Bertucci', 'Danilo Massi', 'Giorgio Pessina', 'Hadrian', 'Ippolito Ippoliti', 'Giorgio De Lullo', 'Armando Trovajoli', 'Cinzia Leone', 'Federico Sevieri', 'Fulvio Bernardini', 'Novatus', 'Emilio Bizzi', 'Bartolomeo Pinelli', 'Marta Zoffoli', 'Lorenzo Del Prete', 'Nicola Salvi', "Marco Dell'Uomo", 'Giuliana Novarese', 'Franca Scagnetti', 'Elisa Santoni', 'Sebastian Harrison', 'Melissa Scott', 'Alfonso Brescia', 'Sandro Continenza', 'Carlo Giorgio Dmitri Drago Maria Laetitia', 'Carlo Massullo', 'Gian Francesco Albani', 'Alessio Foconi', 'Stefano Rulli', 'Luigi Serventi', 'Busiri Vici Andrea', 'Ric Formosa', 'Adriano Aprà', 'Giovanni Di Clemente', 'Luca Damiano', 'Maria Michi', 'Brenno Placido', 'Francesco Siciliano', 'Torquato Conti', 'Simone Santarelli', 'Massimo Sallusti', 'Sergio Stivaletti', 'Paolo Vasile', 'Cesare Gelli', 'Stefano Brecciaroli', 'Mario Brega', 'Vittorio Manunta', 'Claudio Pacifico', 'Andrea Russotto', 'Marcus Junius Brutus', 'Alessandra Acciai', 'Pope Pius XII', 'Paolo Stoppa', 'Anne Marie Martinozzi', 'Sergio Salvati', 'Andrea Bajani', 'Caterina Guzzanti', 'Gino Leurini', 'Wladimiro Falcone', 'Andrea Barbato', 'Giulio Gianini', 'Miriam Giovanelli', 'Enrico Giovannini', 'Niccolo Senni', 'Francesco La Vecchia', 'Angelo Paradiso', 'Daniele Liotti', "Ottaviano Dell'Acqua", 'Girolamo Rainaldi', 'Mario Caserini', 'Federico Groppioni', 'Dante Mircoli', 'Franco Citti', 'Balilla Lombardi', 'Enrico Pieranunzi', 'Flavio Insinna', 'Giulia Conti', 'Virginia Bourbon del Monte', 'Sasha Mesina', 'Leonida Pallotta', 'Marina Bonfigli', 'David Colin Jr.', 'Massimo Wertmuller', 'Mario Cipriani', "Dominic D'Alessandro", 'Luca Dal Fabbro', 'Ivano De Matteo', 'Giampiero Pocetta', 'Michela Miti', 'Roberto Ferrari', 'Simone Cristicchi', 'Paola Senatore', "Francesco D'Macho", 'Giovanni Felice Sances', 'Marta Flavi', 'Giorgia Meloni', 'Roberto Russo', 'Esmeralda Ruspoli', 'Raimundo de Madrazo y Garreta', 'Alessia Filippi', 'Marie Anne Mancini', 'Ermelinda De Felice', 'Nicoletta Romanoff', 'Angelo Di Loreta', 'Carlo Grano', 'Tiziana Tosca Donati', 'Cristina Raffaeli', 'Silvia Scola', 'Mariacarla Boscono', 'Paola Comencini', 'Sofia Spada', 'Franco Maria Malfatti', 'Gonzalo, Duke of Aquitaine', 'Gianfrancesco Lazotti', 'Nicola Francesco Haym', 'Camillo Boito', 'Paolo Marella', 'Ilaria Alpi', 'Alba de Céspedes y Bertini', 'Filippo De Grassi', 'Latino Orsini', 'Luca Savelloni', 'Pope Clement I', 'Leila Leigh', 'Carlo Rosselli', 'Giancarlo Prete', 'Riccardo Ghedin', 'Sabrina Crognale', 'Giuliano Giuliani', 'Barbara De Rossi', "Sergio D'Offizi", 'Nino Baragli', 'Carlo De Mejo', 'Pope Lando', 'Fernanda Negri', 'Peter Pareuzi', 'Daniele Masala', 'Massimo De Francovich', 'Henry Benedict Stuart', 'Piotta', 'Francesco Prando', 'Vittorio Musy Glori', 'Michele Pace del Campidoglio', 'John Nobili', 'Edoardo Liberati', 'Andrea Volpini', 'Toni Garrani', 'Dario Sabatello', 'Chiara Colizzi', 'Umberto Massimo Lattuca', 'Mark and Marcellian', 'Boethius', 'Steve Bastoni', 'Andrea Di Vito', 'Massimiliano Fuksas', 'Fiorella Infascelli', 'Augusto De Angelis', 'Daniele De Vezze', 'Jasmine Trinca', 'Bruno Monti', 'Paolo Matthiae', 'Carlo Perrone', 'Evelina Nazzari', 'Ray Lovelock', 'Vittorio Storaro', 'Enzo Garinei', 'Angelo Nicotra', 'Pope Leo IV', 'Pope John VIII', 'Edward Chiera', 'Luigi Di Biagio', 'Giovanni Bisignani', 'Mario Morra', 'Roberto Perpignani', 'Anicetus', 'Gina Rovere', 'Max Turilli', 'Alessio Vlad', 'Pope Anastasius II', 'Roberto Giannarelli', 'Umberto Utili', 'Letizia Carnevale', 'Anita Durante', 'Luigi Magni', 'Mario Bianchini', 'Kassandra Voyagis', 'Marina Torlonia di Civitella-Cesi', 'Pope Stephen IV', 'Lorenzo Maria of Saint Francis Xavier', 'Cristiano Doni', 'Carlo Lizzani', 'Carlo Luca De Ruggieri', 'Roberto Rossellini', 'Muzio Clementi', 'Sabrina Impacciatore', 'Vinicio Marchioni', 'Massimiliano Marsili', 'Dario Argento', 'Giorgio Tirabassi', 'Maurizio Ponzi', 'Patrizio Marone', 'Pope Benedict IX', 'Eva Cantarella', 'Antonio Fusco', 'Franca Squarciapino', 'Corrado Pani', 'Lucrezia Lante Della Rovere', 'Camillo Massimo', 'Piero Betello', 'Pietro Della Valle', 'Antonio Sabàto, Jr.', 'Lina Bo Bardi', 'Costanza Farnese', 'Umberto Eusepi', 'Daniele Cesarano', 'Francesco Castellacci', 'Aldo Valletti', 'Lorenzo Valla', 'Eolo Capritti', 'Marco Stefanelli', 'Massimiliano Masin', 'Stefano Infessura', 'Taddeo Barberini', 'Silvia Baraldini', 'Vigilius of Trent', 'Michele Maffei', 'Massimo Costa', 'Lidia Vitale', 'Calpurnia Pisonis', 'Gabriele Muccino', 'Antonio Canevari', 'Olympia Mancini', 'Pucci Dellanno', 'Altiero Spinelli', 'Tania di Mario', "Massimo D'Alema", 'Simonetta Rimoldi', 'Camillo Pilotto', 'Silvia Verdone', 'Mino Argento', 'Maria Antonietta Picconi', 'Giancarlo Schiaffini', 'Flavio Roma', 'Marina Ninchi', 'Alberto di Jorio', 'Annalisa Foa', 'Giovanni Zamboni', 'Saint Cecilia', 'Francesco Carbone', 'Irene Cefaro', 'Stefano Nolfi', 'Saverio Vallone', 'Francesco Scali', 'Giuseppe Rotunno', 'Constantin Hansen', 'Massimo Bonetti', 'Massimo Giuliani', 'Angelo Bernabucci', 'Pope Celestine III', 'Ashraf Saber', 'Pope Eugene II', 'Cristian Ranalli', 'Claudio Baglioni', 'Raffaele Frumenti', 'Nicole Brühl', 'Flavio Bizzarri', 'Boris Porena', 'Massimiliano Bruno', 'Giovanni Sgambati', 'Ermanno Donati', 'Franco Rossellini', 'Jean-Baptiste Tuby', 'Alessandro Stradella', 'Stelvio Cipriani', 'Ruben Rigillo', 'Simone Pizzuti', 'Vendramino Bariviera', 'Mario Ielpo', 'Mario Gianani', 'Antonio Filauri', 'Pope John XV', 'Vincenzo Crocitti', 'Carlo Grippo', 'Paola Minaccioni', 'Angelo Di Livio', 'Lucius Cornelius Cinna', 'Fernando Orsi', 'Lola Pagnani', 'Giacomo Cimini', 'Pope Benedict VIII', 'Elisabetta Rocchetti', 'Attilio Riccio', 'Giuseppe Baini', 'Riccardo De Luca', 'Pierluigi Castellano', 'Fulvia Mammi', 'Silvester Petra Sancta', "Pilar de Orléans-Borbón y San Martino d'Agliè", 'Aldo Fabrizi', 'Cornelius Laco', 'Umberto Avattaneo', 'Mark Antony', "Francesca d'Aloja", 'Giampiero Ingrassia', 'Giovanni Rosati', 'Riccardo Paladini', 'Pope Celestine I', 'Marina Morgan', 'Alessandro Malomo', 'Daniele Quadrini', 'Francesco Scipione Maria Borghese', 'Giovanni Battista Casali', 'Monica Vitti', 'Renato Corsetti', 'Silvia Montefoschi', 'Ugo Gregoretti', 'Gian Franco Romagnoli', 'Edoardo Siravo', 'Pietro De Silva', 'Latino Malabranca Orsini', 'Fabrizio Anselmi', 'Simonetta Bardi', 'Pietro Filippo Scarlatti', 'Alessandro Ruspoli, 9th Prince of Cerveteri', 'Mario Bossi', 'Diego Alessi', 'Fabrizio Mioni', 'Marek Żuławski', 'Paolo Maria Nocera', 'John H. Secondari', 'Giovanni Antonio Grecolini', 'Andrea Molaioli', 'Riccardo Rossi', 'Saint Sabina', 'Ezio Brevi', 'Giuseppe Cederna', 'Baldassarre Negroni', 'Enrica Maria Modugno', 'Annia Cornificia Faustina', 'Giuliana Salce', 'Aloysius Gentili', 'Francisco Macri', 'Sabina Sciubba', 'Fanfulla', 'Robertino Loreti', 'Paolo Di Canio', 'Scipione Breislak', 'Gordian III', 'Roberto Scarnecchia', 'Ignazio Giunti', 'Antonio Marcellini', 'Ernesto de Fiori', 'Andrea Prodan', 'Lucilla', 'Lorenzo De Luca', 'Luciano Floridi', 'Michel Fabrizio', 'Anna Galiena', 'DJ Satomi', 'Pope Benedict VII', 'Francesco Saverio de Zelada', 'Alessandro Morbidelli', 'Giacomo Valentini', 'Teoberto Maler', 'Antonio Barluzzi', 'Claudia Cedro', 'Giuseppe Morelli', 'Keivan Zarineh', 'Francesco Statuto', 'Marco Onorato', 'Milena Vukotic', 'Trilussa', 'Massimiliano Amato', 'Amedeo Salfa', 'Gianfranco Parolini', 'Enzo Sereni', 'Matteo Garrone', 'Ylenia Carrisi', 'Alfredo Rampi', "Fabiomassimo Dell'Orco", 'Pope Marcellinus', 'Pope Marinus II', 'Franco Lucentini', 'Luca Urbani', 'Carlo Zecchi', 'Nico Fidenco', 'Simone Palermo', 'Jozef Michal Poniatowski', 'Franca Marzi', 'Bruto Castellani', 'Mario Castellani', 'Giovanni Battista Passeri', 'Manuel Meli', 'Marcello Marchesi', 'Vittorio Nino Novarese', 'Jacopo Ferretti', 'Marco Leto', 'Luigi Di Franco', 'Rudolph Schadow', 'John De Margheriti', 'Mauro Nardoni', 'Christopher Barker', 'Pope Valentine', 'Edoardo Ferretti', 'Tommaso Lomonaco', 'Carlo Giorgio Garofalo', 'Enzo Cosimi', 'Marco Pisano', 'Gianluca Cherubini', 'Marcus Terentius Varro Lucullus', 'Mary Easton Sibley', 'Agostino Masucci', "Andrea D'arrigo", 'Maresa Gallo', 'Leandro Greco', 'Fiorenzo Fiorentini', 'Luca Lombardi', 'Sandro Samuele Sonnino', 'Arabella Vallone', 'Sabina Guzzanti', 'Alfredo Marini', 'Claudio Capone', 'Otello Trombetta', 'Jone Morino', 'Paolo Antonio Rolli', 'Renato Pagliari', 'Riccardo Garrone', 'Daniele Franceschini', 'Leonora Ruffo', 'Rini Bell', 'Alessandro Morace', 'Claudio Capponi', 'Mino Guerrini', 'Caterina Ginnasi', 'Federico Chirico', 'Lucio Colletti', 'Carlo Boccarini', 'Paolo Heusch', 'John William Waterhouse', 'Fulvio Flavoni', 'Kaspar Capparoni', 'James Rosapepe', 'Gianmario Pagano', 'Gianluca Vivan', 'Scipione Tecchi', 'Francesco Rutelli', 'Diomira Jacobini', 'Giovanni Antonio Galli', 'Cristina Comencini', 'Walter Casaroli', 'Pope Adrian II', 'Romolo Bacchini', 'Gianluca Tiberti', 'Mark Shannon', 'Lorenzo Arnone Sipari', 'Giulio Pampiglione', 'Vincenzo Tommasini', 'Rodolfo Bigotti', 'Manuel Angelilli', 'Giulia Michelini', 'Guglielmo Janni', 'Maurizio Thermes', 'Francesco Amantini', 'Mauro Di Lello', 'Peppe Barra', 'Clara von Simson', 'Giuseppe Sermonti', 'Michele Zarrillo', 'Giuseppe Ferretto', 'Gianmarco Tognazzi', 'Daniel Zampieri', 'Ottavio Cinquanta', 'Valerio Magrelli', 'Sergio Martino', 'Giles of Rome', 'Federico Zampaglione', 'Daniele Aliprandi', 'Carlo Barberini', 'Antonio Pietrangeli', 'Franco Delli Colli', 'Andrea Morricone', 'Gianni Mazza', 'Pope John III', 'Giulio Manfredonia', 'Saint Fabiola', 'Pietro Sforza Pallavicino', 'Domenico Distilo', 'Faustina the Younger', 'Matteo Milli', 'Louis Visconti', "Alessandro D'Alatri", 'Lorenzo Molajoli', 'Sonia Viviani', 'Andrea Giordana', 'Vittoria Colonna', 'Francesco Foggia', 'Michela Quattrociocche', 'Mario Costa', 'Roberto Gerardi', 'Salvatore Boccaccio', 'Gianluca Curci', 'Arthur Valerian Wellesley, 8th Duke of Wellington', 'Sergio Castellitto', 'Ettore Manni', 'Perla Liberatori', 'Alberto Rinaldi', 'Zak Lee', 'Jacopo Gassman', 'Claudio Cavalieri', 'Viviana Durante', 'Domenico Tardini', 'Gaius Julius Caesar', 'Loris Gizzi', 'Samuele Bacchiocchi', 'Stefano Colagrande', 'Odoacre Chierico', 'Cristina Flamini', 'Lorenzo Poli', 'Armando Grottini', 'Rossana Rory', 'Maurizio Guarini', 'Alberto Tavazzi', 'Alessandro Alessandroni', 'Francesca Archibugi', 'Marcella Kjeltoft', 'Sergio Donati', 'Franco Modigliani', 'Gian Paolo Chiti', 'Saint Maurus', 'Stella Carnacina', 'Giovanni Lombardo Radice', 'Enrico Guazzoni', 'Marco Valerio Pugini', 'Renato Del Frate', 'Francesco Zizola', 'Franca May', 'Pietro Baldassare', 'Renato Izzo', 'Antonia Brancati', 'Filippo Bonanni', 'Romina Johnson', 'Alessandro Tulli', 'Francesco Mulé', 'Pierfrancesco Pavoni', 'Monica Scattini', 'Luciana Paluzzi', 'Rosella Sensi', 'Tony Frenguelli', 'Marco Spoletini', 'Federico Lapenna', 'Pope Leo VIII', 'Barbara Livi', 'Lucius Verus', 'Lucia Traversa', 'Pope Stephen VII', 'Bruno Rubeo', 'Renzo Nostini', 'Princess Maria Theresa of Löwenstein-Wertheim-Rosenberg', 'Francesco Ruspoli, 8th Prince of Cerveteri', 'Mario Bonnard', 'Paolo Moffa', 'Elisa Torrini', 'Pietro Ceccarelli', 'Rita Savagnone', 'Raffaele Mertes', "Fedele D'Amico", 'Franco Amurri', 'Cesare Augusto Fasanelli', "Emilio de' Cavalieri", 'Francesco Martino', 'Igiaba Scego', 'Stefano Pellegrini', 'Bruno Mattei', 'Matteo Cassese', 'Anna Maria Cancellieri', 'Aisha Cerami', 'Tonino Cervi', 'Loretta Napoleoni', 'Tonino Delli Colli', 'Giorgio Bracardi', 'Giulio Rosati', 'Claudio Della Penna', 'Marilù Tolo', 'Filippo Coarelli', 'Graziella Polesinanti', 'Davide Petrucci', 'Piernicola Di Muro', 'Riccardo Anedda', 'Andrea Renzi', 'Giovanna Amati', 'Nello De Rossi', 'Antonio Barberini', 'Carla Vistarini', 'Maria Sole Tognazzi', 'Lorenzo Bucchi', 'Antonio Mennini', 'Luca De Dominicis', 'Paola Binetti', 'Francesco Coleman', 'Roberto Muzzi', 'Andrea Saraceni', 'Gregorio della Suburra', 'Cesare Borgia', 'Alessandra Celi', 'Gianfranco Di Julio', 'Matteo Rovere', 'Alberto Sordi', 'Giovanni Baglione', 'Mauro del Vecchio', 'Armando Latini', 'Paolo Cimini', 'Saint Marcella', 'Carlo Marchione', 'Silla Bettini', 'Emanuele Sembroni', 'Stefano Fava', 'Luigi Nobile', 'Primo Reggiani', 'Ennio Morricone', 'Princess Yolanda of Savoy', 'Pope Leo III', 'Pierluigi Aprà', 'Alessandro Mattei', 'Io Apolloni', 'Deddi Savagnone', 'Amilcare Pettinelli', 'Alessandra Panaro', 'Victor de Broglie', 'Marcello Giombini', 'Chiara Meloni', 'Daniele Musa', 'Infante Alfonso of Spain', 'Francesca Campana', 'Fiorenza Marchegiani', 'Saverio Di Biagio', 'Emanuele Morini', 'Pina Piovani', 'Tony Kendall', 'Claudio Merlo', 'David Marconi', 'Luca De Filippo', 'Letizia Ciampa', 'Alessandro Campagna', 'Joseph Bonomi the Elder', 'Lamberto Bava', 'Gaspar del Bufalo', 'Giancarlo Sbragia', 'Alessandro Ferri', 'Anthony Steffen', 'Raimonda Ciano', 'Pope Stephen V', 'Eleonora Albrecht', 'Saint Lea', 'Rossella Infanti', 'Francesco Montanari', 'Stefano Masciarelli', 'Franco Prosperi', 'Tiberio Crispo', 'Luciano Bonanni', 'Luca Miti', 'Alessandro Molinari', 'Cristiana Capotondi', 'Mario Mafai', 'Roberto ""Rob"" Letizia', 'Alessia Mancini', 'Giulio Tomei', 'Ugo Grappasonni', 'Claudio Ammendola', 'Vanessa Hessler', 'Ezio Carabella', 'Giovanni Battista Savelli', 'Mario Riva', 'Franco Castellano', 'Federica Ridolfi', 'Pope Theodore II', "Lucio D'Ambra", 'Archimede Nardi', 'Carlo Fecia di Cossato', 'Guido Mussolini', 'Pope Severinus', 'Massimo Pallottino', 'Silvia Nebbia', 'Carlo Alianello', 'Mario Scarpetta', 'Marco Lombardo Radice', 'Francesco De Gregori', 'Olga Raggio', 'Fiammetta Baralla', 'Claudio Castellini', 'Andrea Borsa', 'Danilo Bacchi', 'Giorgio Parisi', 'Bruno Tommaso', 'Massimo Vanni', 'Alvaro Vitali', 'Luigi Zampa', 'Francesco Sanetti', 'Giulia Verdone', 'Umberto Sacripante', 'Cesare R. Mainardi', 'Domenico Jacobini', 'Elsa Schiaparelli', 'Pope Sergius III', 'Pope Clement X', 'Duccio Camerini', 'Mark Gregory', 'Pietro Ciriaci', 'Monica Guerritore', 'Renzo Vespignani', 'Gianni Polidori', 'Miriam di San Servolo', 'Luciano Milo', 'Silvia di Pietro', 'Pope Fabian', 'Eloisa Cianni', 'Luca Montanari', 'Lapo da Castiglionchio', 'Pope Leo VI', 'Antonella Costa', 'Filippo Scicchitano', 'Dino De Laurentiis', 'Giorgio Prosperi', 'Fabrizio Capucci', 'Giuseppe Giannini', 'Pope Callixtus I', 'Anna Longhi', 'Alessandro Verdecchi', 'Pope Julius III', 'Edoardo Piscopo', 'Massimo Franciosa', 'Shahrum Kashani', 'Michela Cerruti', 'Carlo Crivelli', 'Don Alonso de Orléans-Borbón y Parodi Delfino', 'Carlos Luis de Ribera y Fieve', 'Julia Caesaris ""Minor""', 'Simone Farina', 'Mattia Pin', 'Daniele Magliocchetti', 'Diana Dei', 'Alessandro Tiberi', 'Lucius Cornelius Sulla', 'Antonia', 'Giampiero Maini', 'Filippo Camassei', 'Valeria Ciangottini', 'Checco Durante', 'Nora Visconti', 'Valerio Barigelli', 'Fulvio Lucisano', 'Francesco Alvaro Maria Giorgio Ruspoli, 1st Duke of Morignano', 'Toni Ucci', 'Luciano Bartoli', 'Gianfranco De Angelis', 'Antonio Zarro', 'Benedetto Pamphili', 'Francesco Quinn', 'Philippine Leroy-Beaulieu', 'Francesca Comencini', 'Cesare Bovo', 'Marcello Gatti', 'Enrico Toti', 'Franca Bettoia', 'Vittorio Metz', 'Alessandra Celletti', 'Edoardo Sylos Labini', 'Marisa Merlini', 'Jenny Tamburi', 'Valentino Fioravanti', 'Luigi Agricola', 'Guido Freddi', 'Alberto Gallitti', 'Amos Luzzatto', 'Ennio Quirino Visconti', 'Domenico Maria Jacobini', 'Franca Fiacconi', "Hugh O'Connor", 'Giorgio Bianchi', 'Bruno Zumino', 'Cristiana Lionello', 'Mario Ferrari', "Serena Anderlini-D'Onofrio", 'Arnaldo Faustini', 'Tatiana of Rome', 'Fausto Tozzi', 'Claudio Ranieri', "Andrés de Orléans-Borbón y San Martino d'Agliè", 'Pope Adrian III', 'Pope Paul V', 'Leda Gloria', 'Mauro Tassotti', 'Pope Gelasius I', 'A. F. K. Organski', 'Renato Cipriani', 'Tiziano Maggiolini', 'Adalberto Maria Merli', 'Vittorio Lucarelli', 'Fabio Petruzzi', 'Giacomo Scarpelli', 'Margie Kinsky', 'Filippo Leutenegger', 'Duilio Cambellotti', 'Ignazio Ferronetti', 'Julius of Rome', 'Stefano Dionisi', 'Manuela Andrei', 'Marcella De Marchis', 'Aleandro Rosi', 'Ilary Blasi', 'Giorgio Amendola', 'Gaspard Dughet', 'Michael Collins', 'Iacopo La Rocca', 'Pierpaolo De Mejo', 'Pope Siricius', 'Amedeo Mecozzi', 'Death of Carlo Giuliani', 'Giancarlo Zarfati', 'Simone Cecchetti', 'Antonio Zugarelli', 'Alfredo Carpaneto', 'Leone Pompucci', 'Sergio Vastano', 'Remo Giazotto', 'Filippo Nigro', 'Roberto Tozzi', 'Emiliano Coltorti', 'Dario Minieri', 'Antonella Bechi Piaggio', 'Sonya Scarlet', 'Mario Theodoli', 'Cecilia Bartoli', 'Caterina Gabrielli', 'Gaetano Tedeschi', 'Vittoria Panizzon', 'Joseph Arena', 'Roberto Bianchi Montero', 'Carlo Vanzina', 'Erika Ferraioli', 'Mario Liverani', 'Valeria De Franciscis', 'Alessandro Bianchi', 'Giuseppe Lanci', 'Francesca De Martini', 'Tiberius Gemellus', 'Titina Maselli', 'Michelangelo Minieri', 'Mario Pei', 'Maurizio Gasparri', 'Peter Brunelli', 'Victor Cavallo', 'Carlotta Cerquetti', 'Cesare Francalancia', 'Mehdi Mahdloo', 'Pope John XIX', 'Andrea Tonacci', 'Fabio Ceccarelli', 'Eustochium', 'Andrea Bargnani', 'Valeria Marini', 'Edoardo Margheriti', 'Gino Del Signore', 'Francesco Coccia', 'Simone Berardi', 'Attilio Ferraris', 'Claudia Sbarigia', 'Cristina Moffa', 'Marzio Casa', 'Mirko Savini', 'Nicoletta Elmi', 'Franco Giacobini', 'Lianella Carell', 'Roberto Bomprezzi', 'Yvonne Sciò', 'Aloysius Gottifredi', 'Roberto Angelini', 'Jean-Sélim Kanaan', 'Simona Cavallari', 'Enrico Coletti', 'Ines Nobili', 'Marco Lupis', 'Vincent Pallotti', 'Federico Erba', 'Giorgio Frezzolini', 'Brando De Sica', 'Prince Paolo di Borghese', 'Giulia Arcioni', 'Alessia Fugardi', 'Antonio Petrucci', 'Augusto De Marsanich', 'Ennio Lorenzini', 'Adelmo Togliani', 'Gaia Tortora', 'Uberto Pasolini', 'Giulio Castagnoli', 'Gianni Buffardi', 'Massimo Spano', 'Giorgio Pelloni', 'Carlo Emanuele Ruspoli, 3rd Duke of Morignano', 'Fabrizio Gifuni', 'Marco Belladonna', 'Gianni Gregorini', 'Franco Arcalli', 'Gianni Giansanti', 'Pope Sergius II', 'Franco Committeri', 'Bartolomeo Ruspoli', 'Augustine of Canterbury', 'Giorgia', 'Edoardo Albinati', 'Achille Millo', 'Sandro Petraglia', 'Silvio Raffo', 'Nils Aall Barricelli', 'Gianluca Nani', 'Marcello Piacentini', 'Gwyn Sannia', 'Walter Veltroni', 'Federico Peluso', 'Furio Meniconi', 'Ettore Blasi', 'Bruno Zevi', 'Alberto De Rossi', 'Federico Ughi', 'Gita de Barros', 'Maurizio Bonuglia', 'Pope John XI', 'Francesca dei Baroni Blanc', 'Charles Napier', 'Michela Andreozzi', 'Roberto Cinquini', 'Lamberto Maggiorani', 'Andrea Cesaro', 'Anna Maria Rizzoli', 'Luciano Spinosi', 'Clara Petacci', 'H. Bradford Westerfield', 'Virginia Sanjust Di Teulada', 'Christina Bercovici', 'Antonio Candreva', 'Graziella Granata', 'Fabrizio Romondini', 'Luigi Romanelli', 'Paola Igliori', 'Nello Di Costanzo', 'Rinaldo Alessandrini', 'Germana Dominici', 'Francesco Mander', 'Samuel Alatri', 'Priscilla Rattazzi', 'Pierre Savorgnan de Brazza', 'Manuel De Sica', 'Stefano Salvatori', 'Giorgio Piazza', 'Nicole Murgia', 'Sergio Leone', 'Ambra', 'Enrico Toccacelo', 'Umberto Marino', 'Christian Terlizzi', 'William Hale', 'Andrea Stramaccioni', 'Alessio Faustini', 'Fabio Grosso', 'Gaius Caesar', 'Edoardo Maria Falcone', 'Laura Boccanera', 'Antonella Fulci', 'Alfonso, Duke of Anjou and Cádiz', 'Franco Frasi', 'Julia Caesaris', 'Prince William Frederick, Duke of Gloucester and Edinburgh', 'Chiara Marchitelli', 'Simone Malatesta', 'Claudio di Girólamo', 'Daniela Riccardi', 'Alessandra Panelli', 'Gianni Giovagnoni', 'Alessandro Sturba', 'Artemisia Gentileschi', 'Simone Farelli', 'Carla Vangelista', 'Daniela Bertol', 'Davide Luchetti', 'Ugo Balzani', 'Marianna De Rossi', 'Massimo Ghini', 'Antonio Donghi', 'Claudio Pavone', 'Cola di Rienzo', 'Franco Menichelli', 'Federica Faiella', 'Francesco Gaetano Caltagirone', 'Mario Tosi', 'Emanuele Pirro', 'Maria Bellonci', 'Mattia Battistini', 'Danilo Terenzi', 'Sergio Nasca', 'Clara Sereni', 'Aldo Tonti', 'Agostino Di Bartolomei', 'Massimo Fornoni', 'Sergio Citti', 'Paolo Bonolis', 'Luciano Catenacci', 'Silvia Tortora', 'Michele Alhaique', 'Giancarlo Fisichella', 'Renata Polverini', 'Pietro Cavallini', 'Emmanuel Haro Poniatowski', 'Andrea Mazzarani', 'Lamberto Leonardi', 'Giuseppe Bartolomeo Chiari', 'Luca Antei', 'Gianluca Caprari', 'Giovanna Koch', 'Guido Turchi', 'Ugo Fabrizio Giordani', 'Lando Fiorini', 'Piero Gamba', 'Anna-Maria Ferrero', 'David Grieco', 'Rossella Falk', "Francesco D'Adda", 'Pope Gregory I', 'Simona Izzo', 'Gabriella Ferri', 'Emanuela Camacci', 'Massimo Belardinelli', 'Stelvio Rosi', 'Sergio Fantoni', 'Gildo Bocci', 'Enrico Roma', 'Pope Anacletus', 'Vincenzo Albrici', 'Giulio Sarrocchi', 'Danilo Di Vincenzo', 'Riccardo Azzoli', 'Manlio Rocchetti', 'Loris Loddi', 'Violante Placido', 'Fabio Liverani', 'Felice Anerio', 'Gianni Romoli', 'Pope Honorius III', 'Fabio Firmani', 'Andrew Grima', 'Emanuele Testardi', 'Giampietro Perrulli', "Alois de Orléans-Borbón y San Martino d'Agliè", 'Silvana Pampanini', 'Otello Colangeli', 'Pietro Metastasio', 'Andrea Sacchi', 'Roberta Manfredi', 'Pope Gregory VI', 'Maffeo Barberini'}
            Answers = 2518, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.073s]
          Answers = 2518, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.074s]
        Checking schema 39 / 190: {
          [('Main', '==', 'm.06c62', ['fictional_universe.fictional_setting.fictional_characters_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:fictional_universe.fictional_setting.fictional_characters_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Marius de Romanus'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 40 / 190: {
          [('Main', '==', 'm.06c62', ['sports.sports_team_location.teams'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:sports.sports_team_location.teams ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 3
            Final Answer: {'S.S. Lazio', 'A.S. Roma', 'M. Roma Volley'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 41 / 190: {
          [('Main', '==', 'm.06c62', ['symbols.namesake.named_after'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:symbols.namesake.named_after ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Romulus and Remus'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 42 / 190: {
          [('Main', '==', 'm.06c62', ['base.biblioness.bibs_location.country'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.biblioness.bibs_location.country ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Italy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 43 / 190: {
          [('Main', '==', 'm.06c62', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Gladiator'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 44 / 190: {
          [('Main', '==', 'm.06c62', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c62 fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.06c62 fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'-0752-04-21'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 45 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 228
            Final Answer: {'Init', 'Palazzo Valentini', 'Palazzo Doria Pamphilj', 'All Saints Church (Ognissanti)', "St. Paul's Within The Walls", 'Fountain of Valle Giulia', 'Viminal Hill', 'Palazzo Barberini', 'National Museum of Oriental Art', 'Temple of Caesar', 'Atlantico', 'Palazzo della Consulta', 'Chigi Chapel', 'Largo di Torre Argentina', 'Palazzo della Farnesina', 'Santa Maria degli Angeli e dei Martiri', 'Villa Doria Pamphili', 'Fleming', 'Basilica Julia', 'Santa Bibiana', 'Piazza Barberini', 'Stazione Birra', 'Quirinal Palace', 'Motor Science University of Rome', 'Piazza Venezia', 'Fontana della Barcaccia', 'Palazzo Pallavicini-Rospigliosi', 'Caelian Hill', 'Palazzo Malta', 'Santa Sabina', "Teatro dell'Angelo", 'Municipio XII', 'Flavian Palace', 'Municipio XVII', 'Catacombs of Rome', 'Palazzo Baldassini', 'Circus Maximus', 'Teatro Valle', 'Santa Croce in Gerusalemme', 'Fontana di Piazza Nicosia', 'Pontifical University of St. Thomas Aquinas', 'Raphael Rooms', 'Municipio IX', 'Torre delle Milizie', 'Arch of Titus', 'Villa Medici', 'Janiculum', "Teatro dell'Opera di Roma", 'Palazzo Pamphili', 'Pontifical Gregorian University', 'S. Pio V University of Rome, main campus', 'Foro Italico', 'Fontana delle Anfore', 'Porta San Pancrazio', 'CSOA Forte Prenestino', 'Palazzo della Cancelleria', 'San Vitale, Rome', 'Municipio I', 'Forum Boarium', 'Campo Testaccio', 'Black Out Rock Club', 'Palazzo Mancini', 'Esquiline Hill', 'Villa del Priorato di Malta', "Galleria Nazionale d'Arte Antica", 'Palazzo Wedekind', 'Third University of Rome', 'Temple of Hadrian', 'Palazzo Muti', 'Oppian Hill', 'Trinità dei Monti', 'Basilica of Saint Paul Outside the Walls', 'Pontifical University Antonianum', 'Churches of Rome', 'Bocca della Verità', "Castel Sant'Angelo", 'Accademia Nazionale di Santa Cecilia', 'Municipio XVI', 'Palazzo Chigi', 'Porta Portese', 'Temple of Concord', 'Palazzo Venezia', 'Fontana di Piazza Colonna', 'Aqua Augusta', 'Borromini Sacristy', 'Stadio Tre Fontane', 'Temple of Minerva Medica', 'Teatro Argentina, Rome', 'San Sebastiano fuori le mura', "San Bartolomeo all'Isola", 'Vatican Hill', 'Vatican Library', 'Municipio IV', 'Piazza Navona', 'Villa Massimo', 'American University of Rome', 'Maria SS. Assunta University of Rome', 'Roman Forum', 'Quirinal Hill', 'Mausoleum of Augustus', 'Capitoline Hill', 'Fontana dei Quattro Fiumi', 'Villa Lituania', 'Palazzo Koch', 'Basilica Aemilia', 'Municipio XV', 'National Museum of Musical Instruments', 'Municipio XX', 'Municipio V', 'Orion Live Club', "Accademia d'Egitto", 'French Academy in Rome', 'Circolo degli Artisti', 'University of Rome La Sapienza', 'Municipio XI', 'Loyola University Chicago Rome Center', 'Palazzo Madama', 'Palazzo Mengarini', 'Municipio XIV', 'Villa Giulia', 'Aurelian Walls', 'Municipio III', 'Marianum', 'Fontana del Pantheon', 'Aqua Virgo', 'Seven Pilgrim Churches of Rome', 'Contestaccio', 'Pontifical Lateran University', 'Palazzo Muti Papazzurri', 'Stadio Olimpico', 'Fontana del Babuino', 'Porta Tiburtina', 'Tabularium', 'Municipio XIX', 'Amphitheatrum Castrense', 'Biomedical University of Rome', 'Ippodromo le Capannelle', 'Temple of Apollo Sosianus', 'Fontana delle Naiadi', 'John Cabot University', 'Temple of Venus and Roma', 'British School at Rome', 'Municipio VI', 'Basilica di Santa Maria Maggiore', 'Quartiere San Lorenzo', 'Link Campus University', 'Trinity College, Rome Campus', 'Villa Torlonia', 'San Teodoro, Rome', 'Pontifical North American College', 'Obelisk of Montecitorio', 'Pincian Hill', 'Pyramid of Cestius', 'Palazzo Pio', 'Parioli', 'Palazzo Massimo alle Colonne', 'Be Bop Jazz Club', 'Aventine Hill', 'Palazzo Spada', 'Galleria Borghese', 'Palazzo Margherita', 'Alban Hills', 'Domus Aurea', 'Villa Madama', 'Palazzo Altieri', 'Temple of Antoninus and Faustina', 'Aqua Marcia', 'Villa Farnesina', 'Collegio Clementino', 'Santa Maria sopra Minerva', 'Santa Maria del Popolo', 'LUISS University of Rome', 'Palazzo Colonna', 'Auditorium Parco della Musica', 'Capitoline Museums', 'Casino di Villa Boncompagni Ludovisi', 'Via Veneto', 'Appian Way', 'Villa Borghese gardens', 'Teatro Quirino', 'Municipio II', 'Pons Fabricius', 'Spanish Steps', 'Sinister Noise', 'PalaLottomatica', 'Seven hills of Rome', 'Hotel Eden, Rome', 'Santi Cosma e Damiano', 'Salone Margherita', 'Lateran Palace', 'Colosseum', 'Tiber Island', 'Municipio VIII', 'Municipio X', 'San Pietro in Vincoli', 'Villa Ludovisi', 'Municipio XVIII', 'Palazzo Corsini', 'Piazza del Popolo', 'Marforio', 'Palazzo Borghese', 'Teatro Sisto - Ostia Lido', 'Municipio VII', 'Doria Pamphili Gallery', 'San Lorenzo in Lucina', 'Palazzo Braschi', 'San Nicola in Carcere', 'Venerable English College, Rome', 'Capuchin Crypt', 'Villa Ada', 'Pantheon', 'Palazzo Poli', 'Temple of Bellona', 'Fontana della Piazza dei Quiriti', 'Baths of Caracalla', 'Palazzo Farnese', 'Fontana dei Dioscuri', 'Municipio XIII', 'Pontificio Collegio Filippino', 'Basilica of Saint Lawrence outside the Walls', 'Palazzo Montecitorio', 'Fontana di Trevi', 'Palazzo Mattei', 'Piazza della Repubblica, Rome', 'Stadio Flaminio', 'University of Rome Tor Vergata', 'Archbasilica of St. John Lateran', 'Temple of Castor and Pollux'}
            Answers = 228, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 228, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 46 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 34
            Final Answer: {'Siege of Rome', 'Battle of Silva Arsia', 'Battle of Lake Regillus', "1948 Men's European Volleyball Championship", '1987 World Championships in Athletics', '1993 Cosa Nostra Bombings', 'Capture of Rome', 'Battle of the Allia', "1978 FIVB Men's Volleyball World Championship", 'Leighton case', 'Papal conclave, 1513', 'Perusine War', 'Rome and Vienna airport attacks', 'Stand of the Swiss Guard', '1994 World Aquatics Championships', 'Great Fire of Rome', "Sulla's civil wars", '1977 Italian Open', 'Black Thursday', "1999 Women's European Volleyball Championship", 'Sack of Rome', 'Battle of Veii', 'Roman-Etruscan Wars', 'Left Bank Holiday (2009)', 'Battle of Mons Algidus', "1991 Women's European Volleyball Championship", '1960 Summer Olympics', '1954 World Artistic Gymnastics Championships', '1997 European Beach Volleyball Championships'}
            Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 29, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 47 / 190: {
          [('Main', '==', 'm.06c62', ['film.film_location.featured_in_films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:film.film_location.featured_in_films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 17
            Final Answer: {'The Taming of the Shrew', 'Qualunquemente', 'Angels and Demons', 'U-571', "The Emperor's New Clothes", 'Candy Viola', 'The Last Emperor', 'We Have a Pope', 'The Sucker', 'Cleopatra', 'When in Rome', 'My Own Private Idaho', 'Le Notti di Cabiria', 'Mission: Impossible III', 'To Rome with Love', 'Little Girl'}
            Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 16, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 48 / 190: {
          [('Main', '==', 'm.06c62', ['base.arthist.helynevek.intezmeny'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.arthist.helynevek.intezmeny ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.arthist.helynevek.intezmeny ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 2
            Final Answer: {'Vatican Library', 'Santa Maria sopra Minerva'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 49 / 190: {
          [('Main', '==', 'm.06c62', ['periodicals.newspaper_circulation_area.newspapers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:periodicals.newspaper_circulation_area.newspapers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 6
            Final Answer: {'Liberazione', 'Il Messaggero', 'Il Riformista', 'il manifesto', "l'Unità", 'Tuttosport'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 50 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.time_zones'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.time_zones ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Central European Time'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 51 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c62 fb:location.location.area ?o1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.06c62 fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'1285'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 52 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 3
            Final Answer: {'Italy', 'Province of Rome', 'Lazio'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 53 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.nearby_airports'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:location.location.nearby_airports ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 5
            Final Answer: {'Italian Met Office Airport', 'Leonardo da Vinci–Fiumicino Airport', 'Rome Viterbo Airport', 'Urbe Airport', 'Ciampino–G. B. Pastine International Airport'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 54 / 190: {
          [('Main', '==', 'm.06c62', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:29] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 185
            Final Answer: {'Roman Blood', 'The Venus Throw: A Novel of Ancient Rome', 'The Thieves of Ostia', 'Pilgrims and Shrines', 'Galen', 'Hannibal', 'Rome 1300: On the Path of the Pilgrim', 'See Delphi and Die', 'Caligula', 'The Histories Of Tacitus', 'Quo Vadis', 'Island of ghosts', 'Horace', 'The Devil You Know', 'Valentine', 'The seven hills', 'Some Problems in Roman History', 'Julian', 'Romanization in the Time of Augustus', 'City: A Story of Roman Planning and Construction', 'Roman Laws And Charters', 'Pietro da Cortona and Roman Baroque architecture', 'Gods and Legions', 'The young Carthaginian', 'Culture and national identity in Republican Rome', 'The Garden of Evil', 'The Fall of Rome', 'Last seen in Massilia', 'Studies in Ancient Greek and Roman Society', 'The making of late antiquity', 'See you later, gladiator', 'Herculaneum', 'Studies In Roman History', 'Lavinia', 'Three Hands in the Fountain', 'Roman Social Relations, 50 B.C. to A.D. 284', 'The Death of Virgil', 'Caesar and Christ', 'The History Of The Progress And Termination Of The Roman Republic V5', 'As sure as the dawn', 'The Enemies of Jupiter', 'The Accusers', 'SPQR III', 'Rubicon', 'Roman Dusk', 'The Eagle in the Sand', 'Dioses Y Legiones', 'A voice in the wind', 'Rom, Blicke', 'Anibal, el orgullo de Cartago', 'The immaculate deception', 'The Silver Pigs', 'The Dolphins of Laurentum', 'The Seasons of Rome: A Journal', 'Pharaoh', 'Julius Caesar (Life & Times S.)', 'The ancient Romans', 'Satyricon', 'The classical cookbook', 'Studies in Greek culture and Roman policy', 'La gloire', 'The Roman philosophers', 'Rome antics', 'Christianity And The Roman Government', 'The Robe', 'Eagle in the Snow', 'The Seventh Sacrament', "The Eagle's Prophecy", 'Time to Depart', 'The Grass Crown', 'A History of the Roman People', 'The Judgement of Caesar', 'Four Seasons in Rome', 'Roman mornings', 'Nero', 'Saturnalia', 'When the Eagle Hunts', 'Antony and Cleopatra', 'Tiberius', 'The evening of the world', 'The course of honor', 'Mystic Italy', 'Shadows in Bronze', 'Aeneid', 'Marius the Epicurean', 'Atlas of the Roman world', 'Roma', 'Darkling I listen', 'Decline and Fall', 'Blood of the Caesars', 'The villa of mysteries', 'The lord of horses', 'Roma Eterna', 'Last Act in Palmyra', 'In at the Death', 'Germanicus', 'Imperium: A Novel of Ancient Rome', 'Arms of Nemesis', 'The sacred cut', 'Blood Games', 'Rome and a villa', 'Scandal Takes a Holiday', 'The October Horse', "The Eagle's Conquest", 'SPQR IX', 'Hannibal Crosses the Alps', 'The last judgement', 'Spartacus', 'Final judgments', "The Eagle's Prey", 'The Gladiators from Capua', 'The Twelve Tasks of Flavia Gemina', 'The Pirates of Pompeii', 'A Time in Rome', 'The Titian committee', 'Rome in the East', 'One Virgin Too Many', 'Rome Reborn', 'Roman Fort', 'A General History Of Rome', 'The angel and the cross', 'Ancient Romans', 'Spoiler', 'The Conversion Of The Roman Empire', 'Ho ertʻas =', 'Days Near Rome', 'The beginnings of Rome', 'The Twelve Caesars', 'Like the Roman', 'Euryale', 'Claudius the god', 'Food for the Fishes', 'Rome', 'Storming the heavens', 'Render unto Caesar', 'From the Holy Mountain', 'Rome, 1630', 'Empire of pleasures', 'Venus in Copper', 'Spartan Reflections', 'An Imaginary Life', 'Under the Eagle', 'Food in the ancient world, from A to Z', 'I, Claudius', 'The Beacon at Alexandria', 'The Excalibur Alternative', 'A Struggle for Rome', 'The sword of Attila', 'The Iron Hand of Mars', 'Barbarism and religion', 'The History of the Decline and Fall of the Roman Empire', 'Ghosts of Vesuvius', 'The Roman Empire And the New Testament', 'Brave Cloelia', 'Rome, inc.', 'The Last Generation of the Roman Republic', 'As The Romans Did', 'Two for the Lions', 'An echo in the darkness', 'A Gladiator Dies Only Once', 'Christianity and paganism in the fourth to eighth centuries', 'The flames of Rome', 'The Eagle and the Wolves', 'Tiger, Tiger', 'Christianizing the Roman Empire', 'The Kingdom of the Wicked', 'Death and restoration', 'Caesar', 'Julius Caesar', 'Ode to a Banker', 'Death and Renewal', 'The Jupiter Myth', 'SPQR VI', 'The Last King', 'The reformation.', 'Roman Construction Sites', 'Foundations of Christianity', 'SPQR XI', 'Gallienus', 'The Assassins of Rome', 'The First Man in Rome', 'The house of the Vestals', 'Ben-Hur: A Tale of the Christ', 'Last rites'}
            Answers = 184, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.029s]
          Answers = 184, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.029s]
        Checking schema 55 / 190: {
          [('Main', '==', 'm.06c62', ['base.arthist.helynevek.helynev'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.arthist.helynevek.helynev ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:base.arthist.helynevek.helynev ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 56 / 190: {
          [('Main', '==', 'm.06c62', ['olympics.olympic_host_city.olympics_hosted'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:olympics.olympic_host_city.olympics_hosted ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:olympics.olympic_host_city.olympics_hosted ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'1960 Summer Olympics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 57 / 190: {
          [('Main', '==', 'm.06c62', ['user.brendan.default_domain.top_architectural_city.structure_count'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06c62 fb:user.brendan.default_domain.top_architectural_city.structure_count ?o1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.06c62 fb:user.brendan.default_domain.top_architectural_city.structure_count ?o1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'15'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 58 / 190: {
          [('Main', '==', 'm.06c62', ['user.carmenmfenn1.default_domain.cityscape.museums'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.museums ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.museums ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 9
            Final Answer: {'Capitoline Museums', 'National Museum of Rome', 'National Museum of Musical Instruments', 'Vatican Museums', "Galleria Nazionale d'Arte Moderna", 'National Etruscan Museum', 'National Museum of Oriental Art', 'Galleria Borghese', 'Museum of Roman Civilization'}
            Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 9, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 59 / 190: {
          [('Main', '==', 'm.06c62', ['user.narphorium.default_domain.base_equivalent_location.base'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.narphorium.default_domain.base_equivalent_location.base ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.narphorium.default_domain.base_equivalent_location.base ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 60 / 190: {
          [('Main', '==', 'm.06c62', ['user.carmenmfenn1.default_domain.cityscape.theatres'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.theatres ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.theatres ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 3
            Final Answer: {"Teatro dell'Opera di Roma", 'Teatro Argentina, Rome', 'Auditorium Parco della Musica'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 61 / 190: {
          [('Main', '==', 'm.06c62', ['user.carmenmfenn1.default_domain.cityscape.parks'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.parks ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.parks ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 4
            Final Answer: {"Villa d'Este", 'Villa Borghese gardens', 'Villa Ada', 'Pineto Regional Park'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 62 / 190: {
          [('Main', '==', 'm.06c62', ['time.time_zone.locations_in_this_time_zone'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:time.time_zone.locations_in_this_time_zone ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:time.time_zone.locations_in_this_time_zone ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Historical Residence Hotel I Pini'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 63 / 190: {
          [('Main', '==', 'm.06c62', ['user.carmenmfenn1.default_domain.cityscape.universities'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.universities ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.universities ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 4
            Final Answer: {'American Academy in Rome', 'British School at Rome', 'French Academy in Rome', 'Venerable English College, Rome'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 64 / 190: {
          [('Main', '==', 'm.06c62', ['user.carmenmfenn1.default_domain.cityscape.stadiums'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.stadiums ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.carmenmfenn1.default_domain.cityscape.stadiums ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Stadio Flaminio'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 65 / 190: {
          [('Main', '==', 'm.06c62', ['user.enrico_speranza.default_domain.italian_city.cod_provincia'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.enrico_speranza.default_domain.italian_city.cod_provincia ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06c62 fb:user.enrico_speranza.default_domain.italian_city.cod_provincia ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 66 / 190: {
          [('Main', '==', 'm.06cmp', ['location.country.form_of_government'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'Autocracy', 'Stratocracy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 67 / 190: {
          [('Main', '==', 'm.06cmp', ['location.country.official_language'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.official_language ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Latin Language'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 68 / 190: {
          [('Main', '==', 'm.06cmp', ['location.country.administrative_divisions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.administrative_divisions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'Hispania', 'Africa Proconsularis'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 69 / 190: {
          [('Main', '==', 'm.06cmp', ['location.dated_location.date_dissolved'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06cmp fb:location.dated_location.date_dissolved ?o1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.06cmp fb:location.dated_location.date_dissolved ?o1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'1453'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 70 / 190: {
          [('Main', '==', 'm.06cmp', ['location.location.people_born_here'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.people_born_here ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 3
            Final Answer: {'Saint Glyceria', 'Ulpian', 'Publius Quinctilius Varus'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 71 / 190: {
          [('Main', '==', 'm.06cmp', ['fictional_universe.fictional_setting.languages'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:fictional_universe.fictional_setting.languages ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:fictional_universe.fictional_setting.languages ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'Latin Language', 'Greek Language'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 72 / 190: {
          [('Main', '==', 'm.06cmp', ['base.casinos.casino_theme.casinos_in_this_theme'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:base.casinos.casino_theme.casinos_in_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:base.casinos.casino_theme.casinos_in_this_theme ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 3
            Final Answer: {'Caesars Palace', 'Caesars Atlantic City', 'Caesars Windsor'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 73 / 190: {
          [('Main', '==', 'm.06cmp', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'Gladiator', 'The Robe'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 74 / 190: {
          [('Main', '==', 'm.06cmp', ['location.dated_location.date_founded'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06cmp fb:location.dated_location.date_founded ?o1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.06cmp fb:location.dated_location.date_founded ?o1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'-0026'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.003s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 75 / 190: {
          [('Main', '==', 'm.06cmp', ['location.location.contains'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.contains ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Cilicia'}
            Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.006s]
          Answers = 1, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.006s]
        Checking schema 76 / 190: {
          [('Main', '==', 'm.06cmp', ['location.location.events'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.events ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'First Dacian War', 'Second Dacian War'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 77 / 190: {
          [('Main', '==', 'm.06cmp', ['location.location.adjectival_form'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.adjectival_form ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 78 / 190: {
          [('Main', '==', 'm.06cmp', ['location.country.capital'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.capital ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 3
            Final Answer: {'Rome', 'Ravenna', 'Constantinople'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 79 / 190: {
          [('Main', '==', 'm.06cmp', ['location.location.area'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.06cmp fb:location.location.area ?o1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 WHERE { fb:m.06cmp fb:location.location.area ?o1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'2.75e+06'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 80 / 190: {
          [('Main', '==', 'm.06cmp', ['location.location.containedby'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.location.containedby ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 3
            Final Answer: {'Middle East', 'Europe', 'North Africa'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 81 / 190: {
          [('Main', '==', 'm.06cmp', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 12
            Final Answer: {'The History of the Decline and Fall of the Roman Empire: Vol. 7', 'The History of the Decline and Fall of the Roman Empire: Vol. 6', 'The History of the Decline and Fall of the Roman Empire: Vol. 2', 'The History of the Decline and Fall of the Roman Empire: Vol. 4', 'The History of the Decline and Fall of the Roman Empire: Vol. 1', 'The History of the Decline and Fall of the Roman Empire: Vol. 5', 'Centurion', 'The Roman Empire and Its Germanic Peoples', 'The History of the Decline and Fall of the Roman Empire: Vol. 3', 'The Gladiator', 'Memoirs of Hadrian', 'The Eagle in the Sand'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 82 / 190: {
          [('Main', '==', 'm.06cmp', ['user.robert.roman_empire.roman_region.emperors'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:user.robert.roman_empire.roman_region.emperors ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:user.robert.roman_empire.roman_region.emperors ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 63
            Final Answer: {'Trajan', 'Constantine II', 'Balbinus', 'Caracalla', 'Marcus Aurelius Probus', 'Macrinus', 'Hadrian', 'Gordian II', 'Claudius Gothicus', 'Claudius', 'Publius Septimius Geta', 'Trebonianus Gallus', 'Aurelian', 'Caligula', 'Vitellius', 'Pupienus', 'Numerian', 'Maxentius', 'Quintillus', 'Vespasian', 'Antoninus Pius', 'Otho', 'Philip the Arab', 'Carus', 'Julian', 'Maximian', 'Carinus', 'Marcus Aurelius', 'Didius Julianus', 'Maximinus Thrax', 'Pertinax', 'Nero', 'Volusianus', 'Tiberius', 'Aemilianus', 'Maximinus Daia', 'Herennius Etruscus', 'Nerva', 'Constantius II', 'Flavius Valerius Severus', 'Septimius Severus', 'Galba', 'Jovian', 'Valentinian I', 'Constantine the Great', 'Constantius Chlorus', 'Elagabalus', 'Valerian', 'Gordian III', 'Galerius', 'Domitian', 'Decius', 'Marcus Claudius Tacitus', 'Florianus', 'Gallienus', 'Commodus', 'Augustus', 'Gordian I', 'Theodosius I', 'Titus', 'Diocletian', 'Valentinian II', 'Alexander Severus'}
            Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 63, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 83 / 190: {
          [('Main', '==', 'm.017cw', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 5
            Final Answer: {'2600', '1200', '5000000', '7000000', '1000'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 84 / 190: {
          [('Main', '==', 'm.017cw', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'Byzantine Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 85 / 190: {
          [('Main', '==', 'm.017cw', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'Roman emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 86 / 190: {
          [('Main', '==', 'm.017cw', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 201
            Final Answer: {'Byzantine–Sassanid War of 602–28', 'Battle of Hazir', 'Battle of the Masts', 'Fall of Gallipoli', 'Byzantine–Sassanid wars', 'Battle of Spercheios', 'Battle of Yarmouk', 'Roman–Sassanid War', 'Jewish revolt against Heraclius', 'Battle of Heliopolis', 'Siege of Germanicia', 'Battle of Zvečan', 'Battle of Bar', 'Siege of Trebizond', 'Fourth Crusade', 'Battle of the Iron Bridge', 'Battle of Antioch', 'Siege of Tyana', 'Battle of Faventia', 'Siege of Dorostolon', 'Battle of Satala', 'Battle of Achelous', 'Battle of al-Buqaia', 'Battle of Settepozzi', 'Siege of Varna', 'Battle of Cape Bon', 'Siege of Adrianople', 'Battle of the Gates of Trajan', 'Battle of Harim', 'Siege of Syracuse', 'Battle of Bathys Ryax', 'Battle of Myriokephalon', 'Siege of Jerusalem', 'Uprising of Ivaylo', 'Battle of Bitola', 'Battles of macrohistorical importance involving invasions of Europe', 'Battle of Solachon', 'Sicilian Vespers', 'Battle of the Save', 'Battle of Gallipoli', 'Seljuq campaigns in the Aegean', 'Siege of Aleppo', "Shahin's invasion of Asia Minor", 'Battle of Versinikia', 'Anastasian War', 'Battle of Nisbis', 'Fall of Philadelphia', 'Lazic War', 'Siege of Thessalonica', 'Battle of Kleidion', 'Battle of the Volturnus', 'Battle of Arcadiopolis', 'Battle of Garigliano', 'Battle of Skopje', 'Battle of Beroia', 'Battle of Serres', 'Siege of Naples', 'Uprising of Peter Delyan', 'Siege of Lovech', "Heraclius' campaign of 622", 'Second Crusade', 'Siege of Bari', 'Battle of Dara', 'Battle of Levounion', 'Battle of Pharsalus', 'Battle of Devina', 'Byzantine–Bulgarian wars', 'Battle of Iconium', 'Battle of Fahl', 'Battle of Sebastopolis', 'Battle of Mons Lactarius', 'Siege of Nicaea', 'Battle of Prinitza', 'Battle of Mauropotamos', 'Third Perso-Turkic War', 'Vandalic War', 'Battle of Tara', 'Battle of Sarus', 'Battle of Philomelion', 'Battle of Skafida', 'Battle of Hyelion and Leimocheir', 'Siege of Rome', 'Catalan Campaign in Asia Minor', 'Battle of Marcellae', 'First Crusade', 'Byzantine–Norman wars', 'Battle of Caesarea', 'Battle of Boulgarophygon', 'Battle of Blarathon', 'Battle of Tryavna', 'Siege of Bursa', 'Battle of Nineveh', 'Crusade of 1101', 'Battle of Callinicum', 'Sack of Amorium', 'Battle of Bapheus', 'Siege of Antioch', 'Battle of Philippi', 'Battles of Viminacium', 'Battle of Tricamarum', 'Battle of Lalakaon', 'Battle of Dyrrhachium', 'Battle of Kalavrye', 'Battle of Ad Decimum', 'Battle of Sasireti', 'Battle of Ajnadayn', 'Battle of the Frigidus', 'Battle of Dathin', "Maurice's Balkan campaigns", 'Battle of Pelekanon', 'Battle of Thessalonica', 'Battle of Bosra', 'Battle of Sena Gallica', 'Gothic War', 'Siege of Verona', 'Byzantine–Georgian wars', 'Sack of Rome', 'Byzantine conquest of Bulgaria', "Rus'–Byzantine War", 'Battle of Makryplagi', 'Byzantine–Sassanid War of 572–591', 'Battle of the Rishki Pass', 'Sack of Thessalonica', 'Battle of Krasos', 'Sack of Damietta', 'Arab–Byzantine wars', 'Battle of Pantino', 'Iberian War', 'Third Crusade', 'Battle of Manzikert', 'Battle of Strumica', 'Battle of Anchialus', 'Battle of Svindax', 'Battle of Rusokastro', 'Sassanid conquest of Egypt', "Battle of Mu'tah", 'Battle of Setina', 'Battle of Katasyrtai', 'Byzantine–Arab wars', 'Muslim conquest of the Levant', 'Battle of the Utus', 'Battle of Taginae', 'Crusader invasions of Egypt', 'Battle of Shirimni', 'Muslim conquest of Egypt', 'Battle of Ani', 'Battle of Carthage', 'Battle of Kreta', 'Muslim conquest of the Maghreb', 'Siege of Damascus (634)', 'Battle of Anzen', 'Battle of Pliska', 'Samaritan Revolts', 'Roman–Persian Wars', 'Battle of Kapetron', 'Battle of Ongal', 'Battle of Pegae', 'Battle of Nikiou', 'Siege of Cotyaeum', 'Battle of Demetrias', 'Battle of Neopatras', 'Muslim conquest of Persia', 'Siege of Nicomedia', 'Battle of Mucellium', 'Byzantine–Seljuq wars', 'Siege of Emesa', 'Battle of Firaz', 'Battle of Akroinon', 'Battle of Sirmium', 'Siege of Serdica', 'Battle of Berzitia', 'Jewish–Roman wars', 'Siege of Constantinople', 'Uprising of Asen and Peter', 'Battle of Ostrovo', 'Siege of Salonika', 'Battle of Maraj-al-Debaj', 'Battle of Adrianople'}
            Answers = 178, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 178, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 87 / 190: {
          [('Main', '==', 'm.017cw', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'Byzantine Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 88 / 190: {
          [('Main', '==', 'm.017cw', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 5
            Final Answer: {'1143', '0780', '1025', '0565', '1282'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 89 / 190: {
          [('Main', '==', 'm.017cw', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.017cw fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'Constantine XI Palaiologos'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 90 / 190: {
          [('Main', '==', 'm.017cw', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'34'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 91 / 190: {
          [('Main', '==', 'm.017cw', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.017cw fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 1
            Final Answer: {'29'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 92 / 190: {
          [('Main', '==', 'm.02l341', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 93 / 190: {
          [('Main', '==', 'm.02l341', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'69'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 94 / 190: {
          [('Main', '==', 'm.02l341', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'Ancient Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 95 / 190: {
          [('Main', '==', 'm.02l341', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.02l341 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.02l341'}
            Query return lines = 1
            Final Answer: {'61'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 96 / 190: {
          [('Main', '==', 'm.03gk2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 97 / 190: {
          [('Main', '==', 'm.03gk2', ['government.political_district.representatives', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'Emperor', 'Monarch'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 98 / 190: {
          [('Main', '==', 'm.03gk2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 99 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 128
            Final Answer: {'Italian War of 1494–1498', 'Battle of Vienna', 'French Revolutionary Wars', 'Siege of Léva', 'Siege of Cuneo', 'Battle of Blenheim', 'Battle of Legnano', 'Battle of Renty', "Seven Years' War", 'Fourth Crusade', 'Battle of Vítkov Hill', 'Siege of Brescia', 'Battle of Lucka', 'Battle of Drakenburg', 'Siege of Nice', 'Battle of Seneffe', 'Battle of Slankamen', 'Battle of Zenta', 'Battle of Jankau', 'Balkan campaign of 1529', 'Battle of Dornach', 'Battle of Neu Titschein', 'Siege of Esztergom', 'War of the League of Cognac', 'Long War', 'Battle of Welfesholz', 'Battle of Sablat', 'Battle of Hard', 'Kettle War', 'Ottoman–Habsburg wars', 'Battle of Konzer Brücke', 'Battle of Stadtlohn', 'War of the First Coalition', 'Siege of Namur', 'Battle of Guinegate', 'Battle of Göllheim', 'Battle of Marciano', 'Battle of Parma', 'Little War in Hungary', 'Battle of Jüterbog', 'Battle of Salvore', 'Battle of Saint Gotthard', 'Battle of Schwaderloh', 'Siege of Florence', 'Crusade of 1197', 'Battle of Tarcal', 'Battle of Benevento', 'Siege of Pilsen', "Nine Years' War", 'Second Crusade', 'Battle of Iconium', 'Battle of Trzciana', 'Battle of Calven', 'Battle of Hundsfeld', 'Battle of Byczyna', 'Deluge', 'Siege of Valenciennes', 'Battle of La Marfée', 'Battle of Stilo', 'Italian campaign of 1524–1525', 'Battle on the Marchfeld', 'Battle of Nekmíř', 'Siege of Damascus', 'Swabian War', 'First Crusade', 'Byzantine–Norman wars', 'Battle of Cortenuova', 'Battle of Lutter', 'Siege of Acre', 'Battle of Monte Porzio', 'Battle of Bicocca', 'Battle of Keresztes', 'Crusade of 1101', 'Siege of Faenza', "Hundred Years' War", 'Siege of Viterbo', 'Battle of Pavia', "Thirty Years' War", 'Schmalkaldic War', 'Battle of Szina', 'Battle of Domažlice', 'Battle of Párkány', 'Battle of Kutná Hora', 'Battle of Gavinana', 'Italian War of 1551–1559', 'Siege of Mons', 'Italian War of 1542–1546', 'Fifth Crusade', 'Sack of Rome', 'Capture of Mannheim', 'American Revolutionary War', 'War of the League of Cambrai', 'Siege of Heidelberg', 'Conquest of Tunis', 'Battle of Friedlingen', 'War of Succession of Champagne', 'Battle of Mühlberg', 'Third Crusade', 'Battle of Fossalta', 'Battle of Höchst', 'Battle of Wimpfen', 'Battle of Cedynia', 'Italian War of 1521–26', 'Battle of White Mountain', 'Battle of Nicopolis', 'Byzantine–Arab wars', 'Battle of St. Jakob an der Sihl', 'Battle of Walcourt', 'War of the Spanish Succession', 'Battle of Crécy', 'Battle of Varna', 'Battle of Dessau Bridge', 'Battle of Ceresole', "Hundred Years' Croatian–Ottoman War", 'Hungarian campaign of 1527–1528', 'Battle of Głogów', 'Battle of Salzbach', 'Battle of Agridi', 'Siege of Padua', 'Sixth Crusade', 'Battle of Legnica', 'Algiers expedition', 'Battle of Lomnice', 'Battle of Frastanz', 'Battle of Wisternitz', 'Hussite Wars', 'Battle of Wolgast', 'Battle of Fleurus'}
            Answers = 128, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 128, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Current: 100 / 190
        Checking schema 100 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 4
            Final Answer: {'Catholic League', 'Archduchy of Austria', 'Habsburg Spain'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 101 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 3
            Final Answer: {'Battle of Stilo', 'War of the Three Henries', 'Italian War of 1521–26'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 102 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {"Thirty Years' War"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 103 / 190: {
          [('Main', '==', 'm.03gk2', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.from_date ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'0800-12-25', '1153'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 104 / 190: {
          [('Main', '==', 'm.03gk2', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.system'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 105 / 190: {
          [('Main', '==', 'm.03gk2', ['government.political_district.representatives', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Otto IV, Holy Roman Emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 106 / 190: {
          [('Main', '==', 'm.03gk2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'Frederick V, Elector Palatine', 'Charlemagne'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 107 / 190: {
          [('Main', '==', 'm.03gk2', ['government.political_district.representatives', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'King of the Romans', 'Holy Roman Emperor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 108 / 190: {
          [('Main', '==', 'm.03gk2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'Holy Roman Emperor', 'Prince-elector'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 109 / 190: {
          [('Main', '==', 'm.03gk2', ['government.political_district.representatives', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 110 / 190: {
          [('Main', '==', 'm.03gk2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Electoral Palatinate of the Rhine'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 111 / 190: {
          [('Main', '==', 'm.03gk2', ['government.political_district.representatives', 'government.government_position_held.appointed_by'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.appointed_by ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'Pope Innocent III', 'Adolf I, Count of the Mark'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 112 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 113 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'1000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 114 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.force_deployments', 'military.force_strength.resource'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.resource ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.resource ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Personnel'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 115 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.force_deployments', 'military.force_strength.maximum_force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.maximum_force_size ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.maximum_force_size ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 116 / 190: {
          [('Main', '==', 'm.03gk2', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 14
            Final Answer: {'Count of Abensperg and Traun', 'Elector of Saxony', 'Prince of Anhalt-Mühlingen', 'Electress Palatine', 'Duchy of Merania', 'Duke of Lower Lorraine', 'Landgrave of Hesse-Darmstadt', 'Duchess of Merania', 'Count Palatine of Zweibrücken', 'Landgravine of Hesse-Darmstadt', 'Holy Roman Emperor', 'Prince of Anhalt-Zerbst', 'Empress of the Holy Roman Empire', 'Countess Palatine of Zweibrucken'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 117 / 190: {
          [('Main', '==', 'm.03gk2', ['symbols.flag_referent.flag', 'symbols.flag_use.flag_user'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag_user ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 118 / 190: {
          [('Main', '==', 'm.03gk2', ['symbols.flag_referent.flag', 'symbols.flag_use.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.to_date ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'1806'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 119 / 190: {
          [('Main', '==', 'm.03gk2', ['government.political_district.representatives', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'1198', '1209'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 120 / 190: {
          [('Main', '==', 'm.03gk2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'0800-12-25', '1610'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 121 / 190: {
          [('Main', '==', 'm.03gk2', ['government.political_district.representatives', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'1218', '1209'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 122 / 190: {
          [('Main', '==', 'm.03gk2', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'0814-01-28', '1623'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 123 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'Otto II, Holy Roman Emperor', 'Charles V, Holy Roman Emperor'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 124 / 190: {
          [('Main', '==', 'm.03gk2', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 125 / 190: {
          [('Main', '==', 'm.03gk2', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.to_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.to_date ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.to_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 2
            Final Answer: {'1806', '1248'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 126 / 190: {
          [('Main', '==', 'm.03gk2', ['symbols.flag_referent.flag', 'symbols.flag_use.flag'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.flag ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Flags of the Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 127 / 190: {
          [('Main', '==', 'm.03gk2', ['symbols.flag_referent.flag', 'symbols.flag_use.from_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.03gk2 fb:symbols.flag_referent.flag ?o1 . ?o1 fb:symbols.flag_use.from_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'1430'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 128 / 190: {
          [('Main', '==', 'm.03gk2', ['royalty.system_of_nobility.ranks', 'royalty.system_rank_relationship.rank'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.ranks ?o1 . ?o1 fb:royalty.system_rank_relationship.rank ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.ranks ?o1 . ?o1 fb:royalty.system_rank_relationship.rank ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 4
            Final Answer: {'Prince-elector', 'Electress', 'Landgravine', 'Landgrave'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 129 / 190: {
          [('Main', '==', 'm.03gk2', ['royalty.system_of_nobility.ranks', 'royalty.system_rank_relationship.system'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.ranks ?o1 . ?o1 fb:royalty.system_rank_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03gk2 fb:royalty.system_of_nobility.ranks ?o1 . ?o1 fb:royalty.system_rank_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Holy Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 130 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.how_to_get_here', 'travel.transportation.transport_terminus'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_terminus ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 4
            Final Answer: {'Civitavecchia Ferry Terminal', 'Leonardo da Vinci–Fiumicino Airport', 'Roma Termini railway station', 'Ciampino–G. B. Pastine International Airport'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 131 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.how_to_get_here', 'travel.transportation.travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 132 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.how_to_get_here', 'travel.transportation.mode_of_transportation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.mode_of_transportation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.mode_of_transportation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 3
            Final Answer: {'Ferry', 'Air travel', 'Train'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 133 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.how_to_get_here', 'travel.transportation.transport_operator'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_operator ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.how_to_get_here ?o1 . ?o1 fb:travel.transportation.transport_operator ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 3
            Final Answer: {'Grimaldi Lines', 'ATAC SpA', 'Moby'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 134 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_min_temp_c'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_min_temp_c ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_min_temp_c ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 10
            Final Answer: {'5', '16', '11', '14', '7', '3', '15', '8', '17', '4'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 135 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_max_temp_c'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 8
            Final Answer: {'13', '18', '30', '14', '19', '16', '27', '23'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 136 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.average_rainfall_mm'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_rainfall_mm ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.average_rainfall_mm ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 12
            Final Answer: {'98', '63', '118', '53', '81', '27', '36', '70', '17', '61', '111', '56'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 137 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.month'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.month ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.month ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 12
            Final Answer: {'May', 'October', 'July', 'January', 'June', 'September', 'April', 'December', 'November', 'March', 'August', 'February'}
            Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 12, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 138 / 190: {
          [('Main', '==', 'm.06c62', ['travel.travel_destination.climate', 'travel.travel_destination_monthly_climate.travel_destination'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:travel.travel_destination.climate ?o1 . ?o1 fb:travel.travel_destination_monthly_climate.travel_destination ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 139 / 190: {
          [('Main', '==', 'm.06c62', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 17
            Final Answer: {'518917', '1945', '1150', '2754', '2840', '2739', '422411', '930926', '660235', '2663', '2781', '1700', '1651', '2775', '2124', '2777', '2188'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 140 / 190: {
          [('Main', '==', 'm.06c62', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 141 / 190: {
          [('Main', '==', 'm.06c62', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.olympics'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.olympics ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'1960 Summer Olympics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 142 / 190: {
          [('Main', '==', 'm.06c62', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.event'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.event ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Water polo'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 143 / 190: {
          [('Main', '==', 'm.06c62', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.administrative_division'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.administrative_division ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 2
            Final Answer: {'Lazio', 'Province of Rome'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 144 / 190: {
          [('Main', '==', 'm.06c62', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 17
            Final Answer: {'2011', '1901', '1881', '1981', '1377', '2001', '1951', '1991', '2010', '1911', '1871', '1931', '1971', '1961', '1861', '1936', '1921'}
            Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 17, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 145 / 190: {
          [('Main', '==', 'm.06c62', ['protected_sites.listed_site.designation_as_natural_or_cultural_site', 'protected_sites.natural_or_cultural_site_listing.listed_site'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:protected_sites.listed_site.designation_as_natural_or_cultural_site ?o1 . ?o1 fb:protected_sites.natural_or_cultural_site_listing.listed_site ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:protected_sites.listed_site.designation_as_natural_or_cultural_site ?o1 . ?o1 fb:protected_sites.natural_or_cultural_site_listing.listed_site ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 146 / 190: {
          [('Main', '==', 'm.06c62', ['government.political_district.representatives', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Flavius Afranius Syagrius'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 147 / 190: {
          [('Main', '==', 'm.06c62', ['government.political_district.representatives', 'government.government_position_held.office_position_or_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.office_position_or_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Praefectus Urbis Romae'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 148 / 190: {
          [('Main', '==', 'm.06c62', ['government.political_district.representatives', 'government.government_position_held.district_represented'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.district_represented ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 149 / 190: {
          [('Main', '==', 'm.06c62', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'817.3'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 150 / 190: {
          [('Main', '==', 'm.06c62', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.country'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.country ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 151 / 190: {
          [('Main', '==', 'm.06c62', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 152 / 190: {
          [('Main', '==', 'm.06c62', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 153 / 190: {
          [('Main', '==', 'm.06c62', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 154 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.geolocation', 'location.geocode.latitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.latitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'41.9'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 155 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.geolocation', 'location.geocode.longitude'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }
          [2020-12-03 14:26:30] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:location.location.geolocation ?o1 . ?o1 fb:location.geocode.longitude ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'12.5'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 156 / 190: {
          [('Main', '==', 'm.06c62', ['location.location.adjoin_s', 'location.adjoining_relationship.adjoins'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.location.adjoin_s ?o1 . ?o1 fb:location.adjoining_relationship.adjoins ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 3
            Final Answer: {'Pomezia', 'Tivoli'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 157 / 190: {
          [('Main', '==', 'm.06c62', ['protected_sites.listed_site.designation_as_natural_or_cultural_site', 'protected_sites.natural_or_cultural_site_listing.designation'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:protected_sites.listed_site.designation_as_natural_or_cultural_site ?o1 . ?o1 fb:protected_sites.natural_or_cultural_site_listing.designation ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:protected_sites.listed_site.designation_as_natural_or_cultural_site ?o1 . ?o1 fb:protected_sites.natural_or_cultural_site_listing.designation ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'UNESCO World Heritage Site'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 158 / 190: {
          [('Main', '==', 'm.06c62', ['government.political_district.representatives', 'government.government_position_held.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:government.political_district.representatives ?o1 . ?o1 fb:government.government_position_held.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'0381'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 159 / 190: {
          [('Main', '==', 'm.06c62', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 160 / 190: {
          [('Main', '==', 'm.06c62', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06c62 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'803'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 161 / 190: {
          [('Main', '==', 'm.06c62', ['olympics.olympic_participating_country.medals_won', 'olympics.olympic_medal_honor.medalist'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_participating_country.medals_won ?o1 . ?o1 fb:olympics.olympic_medal_honor.medalist ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Péter Rusorán'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 162 / 190: {
          [('Main', '==', 'm.06c62', ['base.popstra.location.vacationers', 'base.popstra.vacation_choice.vacationer'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.popstra.location.vacationers ?o1 . ?o1 fb:base.popstra.vacation_choice.vacationer ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 10
            Final Answer: {'Sienna Miller', 'Teri Hatcher', 'Eva Mendes', 'David Beckham', 'Julia Roberts', 'Eva Longoria', 'David Henrie', 'Justin Timberlake', 'Tom Brady', 'Lindsay Lohan'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 163 / 190: {
          [('Main', '==', 'm.06c62', ['location.capital_of_administrative_division.capital_of', 'location.administrative_division_capital_relationship.capital'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.capital_of_administrative_division.capital_of ?o1 . ?o1 fb:location.administrative_division_capital_relationship.capital ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 164 / 190: {
          [('Main', '==', 'm.06c62', ['location.statistical_region.major_exports', 'location.imports_exports_by_industry.industry'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.statistical_region.major_exports ?o1 . ?o1 fb:location.imports_exports_by_industry.industry ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:location.statistical_region.major_exports ?o1 . ?o1 fb:location.imports_exports_by_industry.industry ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Tourism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 165 / 190: {
          [('Main', '==', 'm.06c62', ['base.arthist.helynevek.mutargy', 'base.arthist.provenienciaadat.mutargy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.mutargy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.mutargy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Cristo della Minerva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 166 / 190: {
          [('Main', '==', 'm.06c62', ['olympics.olympic_bidding_city.olympics_bid_on', 'olympics.olympic_city_bid.olympic_games'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_bidding_city.olympics_bid_on ?o1 . ?o1 fb:olympics.olympic_city_bid.olympic_games ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_bidding_city.olympics_bid_on ?o1 . ?o1 fb:olympics.olympic_city_bid.olympic_games ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'2004 Summer Olympics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 167 / 190: {
          [('Main', '==', 'm.06c62', ['olympics.olympic_bidding_city.olympics_bid_on', 'olympics.olympic_city_bid.bidding_city'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_bidding_city.olympics_bid_on ?o1 . ?o1 fb:olympics.olympic_city_bid.bidding_city ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:olympics.olympic_bidding_city.olympics_bid_on ?o1 . ?o1 fb:olympics.olympic_city_bid.bidding_city ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 168 / 190: {
          [('Main', '==', 'm.06c62', ['base.arthist.helynevek.mutargy', 'base.arthist.provenienciaadat.aktualis'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.aktualis ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.aktualis ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 169 / 190: {
          [('Main', '==', 'm.06c62', ['base.arthist.helynevek.mutargy', 'base.arthist.provenienciaadat.intezmeny'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.intezmeny ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.intezmeny ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Santa Maria sopra Minerva'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 170 / 190: {
          [('Main', '==', 'm.06c62', ['base.arthist.helynevek.mutargy', 'base.arthist.provenienciaadat.helynev'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.helynev ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06c62 fb:base.arthist.helynevek.mutargy ?o1 . ?o1 fb:base.arthist.provenienciaadat.helynev ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06c62'}
            Query return lines = 1
            Final Answer: {'Rome'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 171 / 190: {
          [('Main', '==', 'm.06cmp', ['location.statistical_region.population', 'measurement_unit.dated_integer.number'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.number ?o2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'56800000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 172 / 190: {
          [('Main', '==', 'm.06cmp', ['base.monetarydebase.governments_that_debase.largest_denomination', 'measurement_unit.dated_money_value.amount'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:base.monetarydebase.governments_that_debase.largest_denomination ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:base.monetarydebase.governments_that_debase.largest_denomination ?o1 . ?o1 fb:measurement_unit.dated_money_value.amount ?o2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 173 / 190: {
          [('Main', '==', 'm.06cmp', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.jurisdiction_of_office'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.jurisdiction_of_office ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 174 / 190: {
          [('Main', '==', 'm.06cmp', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.basic_title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.basic_title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Roman emperor'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 175 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 81
            Final Answer: {'Battle of the Teutoburg Forest', 'Battle of Brumath', 'Battle of Thyatira', 'Battle of Lingones', 'Kitos War', 'Siege of Singara', 'Battle of Thermopylae', 'Revolt of the Batavi', 'Second Battle of Tapae', 'Battle of Gamla', 'Cantabrian Wars', 'Battle of Lake Benacus', 'Battle of Placentia', 'Battle of Argentovaria', 'Battle of Watling Street', 'Siege of Senonae', 'Battle of Solicinium', 'Bar Kokhba revolt', 'Battle of Philippopolis', "Domitian's Dacian War", 'Battle of the Medway', 'Battle of Samarra', 'Battle of Ctesiphon', 'Battle of Edessa', 'Battle of Châlons', 'Battle of Misiche', 'Battle of Vindonissa', 'First Dacian War', 'Great Conspiracy', 'Marcomannic Wars', 'Battle of Sarmisegetusa', 'Battle of Antioch', 'Battle of Fano', 'Battle of the Lupia River', 'Battle of Misikhe', 'Battle of Pavia', 'Siege of Antioch', 'Battle of Nisibis', 'Siege of Amida', 'Battle of Abritus', 'Battle of Verona', 'Battle of the Weser River', 'Battle of Bagrevand', 'Jewish revolt against Constantius Gallus', 'Siege of Yodfat', 'Roman–Persian Wars', 'Battle of Durocortorum', 'Battle of Caer Caradoc', 'Roman–Parthian War of 58–63', 'Battle of Naissus', 'Second Dacian War', 'Battle of Beth Horon', 'Massacre of the Ninth Legion', 'Battle of Barbalissos', "Boudica's Uprising", 'Battle of the Willows', 'Battle at the Harzhorn', 'Masada', 'Roman–Parthian Wars', 'Battle of Thessalonica', 'Roman–Parthian War of 161–166', 'Siege of Jerusalem', 'Gothic War', 'Battle of Immae', 'Battle of Narbonne', 'Battle of Mons Seleucus', 'First Jewish–Roman War', "Raids of Hadrian's Wall", 'Battle of Firaz', 'Battle of Adamclisi', 'Battle of Forum Julii', 'Battle of Emesa', 'Battle of Mursa Major', 'Battle of Argentorate', 'Jewish–Roman wars', 'Battle of Pollentia', 'Battle of Faesulae', 'Battle of Resaena', 'Battle of Mons Graupius'}
            Answers = 79, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 79, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 176 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.military_conflicts', 'military.military_combatant_group.combatants'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_conflicts ?o1 . ?o1 fb:military.military_combatant_group.combatants ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'Sassanid Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 177 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.military_commanders', 'military.military_command.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 6
            Final Answer: {"Trajan's Dacian Wars", 'Kitos War', 'First Jewish–Roman War', 'Battle of Gamla', 'Battle of Watling Street', 'Bar Kokhba revolt'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 178 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.force_deployments', 'military.force_strength.military_conflict'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.military_conflict ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Battle of Watling Street'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 179 / 190: {
          [('Main', '==', 'm.06cmp', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.system'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.system ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 180 / 190: {
          [('Main', '==', 'm.06cmp', ['location.statistical_region.population', 'measurement_unit.dated_integer.year'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:location.statistical_region.population ?o1 . ?o1 fb:measurement_unit.dated_integer.year ?o2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'-0024'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 181 / 190: {
          [('Main', '==', 'm.06cmp', ['base.monetarydebase.governments_that_debase.largest_denomination', 'measurement_unit.dated_money_value.currency'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:base.monetarydebase.governments_that_debase.largest_denomination ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:base.monetarydebase.governments_that_debase.largest_denomination ?o1 . ?o1 fb:measurement_unit.dated_money_value.currency ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Denarius'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 182 / 190: {
          [('Main', '==', 'm.06cmp', ['government.governmental_jurisdiction.governing_officials', 'government.government_position_held.office_holder'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:government.governmental_jurisdiction.governing_officials ?o1 . ?o1 fb:government.government_position_held.office_holder ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Theodosius I'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 183 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.military_commanders', 'military.military_command.military_combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 184 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.force_deployments', 'military.force_strength.force_size'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 WHERE { fb:m.06cmp fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.force_size ?o2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'1000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 185 / 190: {
          [('Main', '==', 'm.06cmp', ['royalty.system_of_nobility.titles', 'royalty.system_title_relationship.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:royalty.system_of_nobility.titles ?o1 . ?o1 fb:royalty.system_title_relationship.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'Parthicus', 'Britannicus'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 186 / 190: {
          [('Main', '==', 'm.06cmp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 187 / 190: {
          [('Main', '==', 'm.06cmp', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 188 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.military_commanders', 'military.military_command.military_commander'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.military_commanders ?o1 . ?o1 fb:military.military_command.military_commander ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 7
            Final Answer: {'Trajan', 'Gaius Suetonius Paulinus', 'Vespasian', 'Lusius Quietus', 'Hadrian', 'Titus', 'Sextus Julius Severus'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 189 / 190: {
          [('Main', '==', 'm.06cmp', ['military.military_combatant.force_deployments', 'military.force_strength.combatant'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06cmp fb:military.military_combatant.force_deployments ?o1 . ?o1 fb:military.force_strength.combatant ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 1
            Final Answer: {'Roman Empire'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        182 / 190 coarse schemas kept with ans_size > 0.
      } [2.209s]
      Coarse level ended, resulting in 182 schemas.
    } [2.594s]
    Type level searching (total types = 10): {
      Current: 0 / 182
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'government.governmental_body'}]
[{'type.datetime'}]
[{'people.person'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.citytown'}]
[{'location.location'}]
[{'book.written_work'}]
[{'user.robert.roman_empire.roman_emperor'}]
[{'type.datetime'}]
[{'people.person'}]
[{'film.film'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'exhibitions.exhibition'}]
[{'book.written_work'}]
[{'visual_art.artwork'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'type.datetime'}]
[{'people.person'}]
[{'language.human_language'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.citytown'}]
[{'location.location'}]
[{'book.written_work'}]
[{'travel.tourist_attraction'}]
[{'metropolitan_transit.transit_system'}]
[{'people.person'}]
[{'fictional_universe.fictional_character'}]
[{'sports.sports_team'}]
[{'symbols.name_source'}]
[{'location.location'}]
[{'film.film'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'film.film'}]
[{'base.arthist.int_zm_nyek'}]
[{'book.newspaper'}]
[{'time.time_zone'}]
[{'type.float'}]
[{'location.location'}]
[{'aviation.airport'}]
[{'book.written_work'}]
[{'olympics.olympic_games'}]
[{'type.int'}]
[{'architecture.museum'}]
[{'type.domain'}]
[{'theater.theater'}]
[{'base.greatgardens.botanical_garden'}]
[{'location.location'}]
[{'education.university'}]
[{'sports.sports_facility'}]
[{'government.form_of_government'}]
[{'language.human_language'}]
[{'location.administrative_division'}]
[{'type.datetime'}]
[{'people.person'}]
[{'fictional_universe.fictional_language'}]
[{'base.casinos.casino'}]
[{'film.film'}]
[{'type.datetime'}]
[{'location.location'}]
[{'time.event'}]
[{'location.citytown'}]
[{'type.float'}]
[{'location.location'}]
[{'book.written_work'}]
[{'user.robert.roman_empire.roman_emperor'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'royalty.system_title_relationship'}, {'type.datetime'}]
[{'royalty.system_title_relationship'}, {'royalty.system_of_nobility'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.politician'}]
      Current: 100 / 182
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'government.government_position_held'}, {'government.political_appointer'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'military.force_strength'}, {'type.int'}]
[{'military.force_strength'}, {'military.military_resource'}]
[{'military.force_strength'}, {'type.int'}]
[{'royalty.system_title_relationship'}, {'royalty.noble_title'}]
[{'symbols.flag_use'}, {'symbols.flag_referent'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'military.force_strength'}, {'military.military_combatant'}]
[{'royalty.system_title_relationship'}, {'type.datetime'}]
[{'symbols.flag_use'}, {'symbols.flag'}]
[{'symbols.flag_use'}, {'type.datetime'}]
[{'royalty.system_rank_relationship'}, {'royalty.noble_rank'}]
[{'royalty.system_rank_relationship'}, {'royalty.system_of_nobility'}]
[{'travel.transportation'}, {'travel.transport_terminus'}]
[{'travel.transportation'}, {'travel.travel_destination'}]
[{'travel.transportation'}, {'travel.transportation_mode'}]
[{'travel.transportation'}, {'travel.transport_operator'}]
[{'travel.travel_destination_monthly_climate'}, {'type.float'}]
[{'travel.travel_destination_monthly_climate'}, {'type.float'}]
[{'travel.travel_destination_monthly_climate'}, {'type.int'}]
[{'travel.travel_destination_monthly_climate'}, {'time.month'}]
[{'travel.travel_destination_monthly_climate'}, {'travel.travel_destination'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_games'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_event_competition'}]
[{'location.administrative_division_capital_relationship'}, {'location.administrative_division'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'protected_sites.natural_or_cultural_site_listing'}, {'protected_sites.listed_site'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'government.government_position_held'}, {'government.government_office_or_title'}]
[{'government.government_position_held'}, {'government.political_district'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_participating_country'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.location'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'location.geocode'}, {'type.float'}]
[{'location.geocode'}, {'type.float'}]
[{'location.adjoining_relationship'}, {'location.location'}]
[{'protected_sites.natural_or_cultural_site_listing'}, {'protected_sites.natural_or_cultural_site_designation'}]
[{'government.government_position_held'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'olympics.olympic_medal_honor'}, {'olympics.olympic_athlete'}]
[{'base.popstra.vacation_choice'}, {'base.popstra.celebrity'}]
[{'location.administrative_division_capital_relationship'}, {'location.capital_of_administrative_division'}]
[{'location.imports_exports_by_industry'}, {'business.industry'}]
[{'base.arthist.provenienciaadat'}, {'base.arthist.mutargyak'}]
[{'olympics.olympic_city_bid'}, {'olympics.olympic_games'}]
[{'olympics.olympic_city_bid'}, {'olympics.olympic_bidding_city'}]
[{'base.arthist.provenienciaadat'}, {'base.arthist.int_zm_nyek'}]
[{'base.arthist.provenienciaadat'}, {'base.arthist.helynevek'}]
[{'measurement_unit.dated_integer'}, {'type.int'}]
[{'measurement_unit.dated_money_value'}, {'type.float'}]
[{'government.government_position_held'}, {'government.governmental_jurisdiction'}]
[{'government.government_position_held'}, {'government.government_office_category'}]
[{'military.military_combatant_group'}, {'military.military_conflict'}]
[{'military.military_combatant_group'}, {'military.military_combatant'}]
[{'military.military_command'}, {'military.military_conflict'}]
[{'military.force_strength'}, {'military.military_conflict'}]
[{'royalty.system_title_relationship'}, {'royalty.system_of_nobility'}]
[{'measurement_unit.dated_integer'}, {'type.datetime'}]
[{'measurement_unit.dated_money_value'}, {'finance.currency'}]
[{'government.government_position_held'}, {'government.politician'}]
[{'military.military_command'}, {'military.military_combatant'}]
[{'military.force_strength'}, {'type.int'}]
[{'royalty.system_title_relationship'}, {'royalty.noble_title'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'military.military_command'}, {'military.military_commander'}]
[{'military.force_strength'}, {'military.military_combatant'}]
      3 typed schemas retrieved from 182 coarse schemas.
      Calculating F1 for 3 typed schemas: {
        Current: 0 / 3
        Checking schema 0 / 3: {
          [('Main', '==', 'm.017cw', ['location.country.form_of_government']), ('Type', '==', 'government.form_of_government', ['type.object.type'])]
          var_types: [{'government.form_of_government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.017cw fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.017cw'}
            Query return lines = 2
            Final Answer: {'Absolute monarchy', 'Autocracy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 1 / 3: {
          [('Main', '==', 'm.03gk2', ['location.country.form_of_government']), ('Type', '==', 'government.form_of_government', ['type.object.type'])]
          var_types: [{'government.form_of_government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03gk2 fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03gk2'}
            Query return lines = 1
            Final Answer: {'Elective monarchy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 2 / 3: {
          [('Main', '==', 'm.06cmp', ['location.country.form_of_government']), ('Type', '==', 'government.form_of_government', ['type.object.type'])]
          var_types: [{'government.form_of_government'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:26:31] Q_Schema Request: {
            WebQ_2197|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06cmp fb:location.country.form_of_government ?o1 . ?o1 fb:type.object.type fb:government.form_of_government . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06cmp'}
            Query return lines = 2
            Final Answer: {'Autocracy', 'Stratocracy'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        3 / 3 typed schemas kept with ans_size > 0.
      } [0.030s]
      Typed level ended, resulting in 185 schemas.
    } [0.038s]
    Time level searching (total times = 0): {
      Current: 0 / 185
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'user.robert.roman_empire.roman_emperor.to', 'user.robert.roman_empire.roman_emperor.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'metropolitan_transit.transit_system.inception'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'sports.sports_team.founded'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'architecture.museum.established'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'time.event.start_date', 'time.event.end_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'user.robert.roman_empire.roman_emperor.to', 'user.robert.roman_empire.roman_emperor.from'}]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
      Current: 100 / 185
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
self.var_time_preds: [{'royalty.system_rank_relationship.to_date', 'royalty.system_rank_relationship.from_date'}, set()]
self.var_time_preds: [{'royalty.system_rank_relationship.to_date', 'royalty.system_rank_relationship.from_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'protected_sites.natural_or_cultural_site_listing.date_listed'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'protected_sites.natural_or_cultural_site_listing.date_listed'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
self.var_time_preds: [{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
self.var_time_preds: [{'location.imports_exports_by_industry.date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
self.var_time_preds: [{'measurement_unit.dated_integer.year'}, set()]
self.var_time_preds: [{'measurement_unit.dated_money_value.valid_date'}, set()]
self.var_time_preds: [{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'military.force_strength.date'}, set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 185 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 185 schemas.
    } [0.004s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 185
[set()]
[set()]
[{'government.governmental_body.date_dissolved', 'government.governmental_body.date_formed'}]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'user.robert.roman_empire.roman_emperor.to', 'user.robert.roman_empire.roman_emperor.from'}]
[set()]
[{'people.person.date_of_birth'}]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[{'metropolitan_transit.transit_system.inception'}]
[{'people.person.date_of_birth'}]
[set()]
[{'sports.sports_team.founded'}]
[set()]
[set()]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[{'architecture.museum.established'}]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[{'base.casinos.casino.opened', 'base.casinos.casino.closed'}]
[{'film.film.initial_release_date'}]
[set()]
[set()]
[{'time.event.start_date', 'time.event.end_date'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'user.robert.roman_empire.roman_emperor.to', 'user.robert.roman_empire.roman_emperor.from'}]
[{'measurement_unit.dated_integer.year'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
[{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
      Current: 100 / 185
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[{'military.force_strength.date'}, set()]
[{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'symbols.flag_use.to_date', 'symbols.flag_use.from_date'}, set()]
[{'royalty.system_rank_relationship.to_date', 'royalty.system_rank_relationship.from_date'}, set()]
[{'royalty.system_rank_relationship.to_date', 'royalty.system_rank_relationship.from_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'protected_sites.natural_or_cultural_site_listing.date_listed'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'protected_sites.natural_or_cultural_site_listing.date_listed'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'base.popstra.vacation_choice.end_date', 'base.popstra.vacation_choice.start_date'}, set()]
[{'location.administrative_division_capital_relationship.to', 'location.administrative_division_capital_relationship.from'}, set()]
[{'location.imports_exports_by_industry.date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, {'royalty.system_of_nobility.used_to_date', 'royalty.system_of_nobility.used_from_date'}]
[{'measurement_unit.dated_integer.year'}, set()]
[{'measurement_unit.dated_money_value.valid_date'}, set()]
[{'government.government_position_held.from', 'government.government_position_held.to'}, set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[{'royalty.system_title_relationship.from_date', 'royalty.system_title_relationship.to_date'}, set()]
[set(), set()]
[set(), set()]
[set(), set()]
[{'military.force_strength.date'}, set()]
[set()]
[set()]
[set()]
      0 ordinal schemas retrieved from 185 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 185 schemas.
    } [0.004s]
    [2020-12-03 14:26:31] buffer saved.
    185 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2197_schema].
  } [1m28.470s]
  Entering Q 2198 / 5810 [b'what did fred goodwin do?']: {
    Show 2 E + 10 T + 0 Tm + 0 Ord = 12 linkings: {
      #00 Entity: [2, 4) (fred goodwin) == m.05cfvw (Fred_Goodwin) {'score': 17435.391674, 'source': 0.0}
      #01 Entity: [2, 4) (fred goodwin) == m.0cnz_xg (Fred_Goodwin_(footballer)) {'score': 2.426104, 'source': 0.0}
      #02 Type: [0, 2) (what did) == media_common.lost_work (lost work) {'sim': 0.72612}
      #03 Type: [4, 5) (do) == dataworld.do_not_merge_mediator (do not merge mediator) {'sim': 0.724217}
      #04 Type: [0, 1) (what) == location.us_state (us state) {'sim': 0.655521}
      #05 Type: [0, 1) (what) == business.company_name_change (organization name change) {'sim': 0.645394}
      #06 Type: [0, 1) (what) == chemistry.phase_of_matter (phase of matter) {'sim': 0.636732}
      #07 Type: [0, 2) (what did) == book.written_work (written work) {'sim': 0.63443}
      #08 Type: [0, 1) (what) == religion.place_of_worship_historical_use (place of worship historical use) {'sim': 0.630171}
      #09 Type: [0, 2) (what did) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.628466}
      #10 Type: [0, 2) (what did) == government.us_president (us president) {'sim': 0.627789}
      #11 Type: [0, 2) (what did) == media_common.finished_work (finished work) {'sim': 0.627325}
    } [0.000s]
    12 link data save to file.
    Coarse level searching (total entities = 2): {
      [Len-1||F1/2] (2020-12-03 14:27:57) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.05cfvw ?p1 ?o1 . }
        [2020-12-03 14:27:57] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.05cfvw ?p1 ?o1 . }
          Query return lines = 15
        } [0.008s]
        Filt_Query_Ret = 6 / 15 ( 0.009s)
      } [0.009s]
      [Len-1||F2/2] (2020-12-03 14:27:57) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.0cnz_xg ?p1 ?o1 . }
        [2020-12-03 14:27:57] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.0cnz_xg ?p1 ?o1 . }
          Query return lines = 7
        } [0.004s]
        Filt_Query_Ret = 2 / 7 ( 0.005s)
      } [0.005s]
      [Len-2||F1/2] (2020-12-03 14:27:57) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05cfvw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:57] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.05cfvw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 281
        } [0.060s]
        Filt_Query_Ret = 4 / 281 ( 0.061s)
      } [0.061s]
      [Len-2||F2/2] (2020-12-03 14:27:57) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnz_xg ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:57] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.0cnz_xg ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 150
        } [0.016s]
        Filt_Query_Ret = 0 / 150 ( 0.016s)
      } [0.016s]
      12 coarse schemas retrieved from scratch.
      Calculating F1 for 12 coarse schemas: {
        Current: 0 / 12
        Checking schema 0 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.05cfvw fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 WHERE { fb:m.05cfvw fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 1
            Final Answer: {'1958'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 1
            Final Answer: {'United Kingdom'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 2 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.ethnicity'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.ethnicity ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 1
            Final Answer: {'Jewish people'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 3 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 2
            Final Answer: {'Businessperson', 'Chartered Accountant'}
            Answers = 2, P = 1.000000, R = 1.000000, F1 = 1.000000
          } [0.013s]
          Answers = 2, P = 1.000000, R = 1.000000, F1 = 1.000000
        } [0.013s]
        Checking schema 4 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 5 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 1
            Final Answer: {'Paisley'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 6 / 12: {
          [('Main', '==', 'm.0cnz_xg', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnz_xg fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnz_xg fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnz_xg'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 7 / 12: {
          [('Main', '==', 'm.0cnz_xg', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnz_xg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnz_xg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnz_xg'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 8 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 1
            Final Answer: {'Fred Goodwin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 9 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 4
            Final Answer: {'National Westminster Bank', 'NatWest', 'The Royal Bank of Scotland', 'Royal Bank of Scotland Group'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 10 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 2
            Final Answer: {'Paisley Grammar School', 'University of Glasgow'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 11 / 12: {
          [('Main', '==', 'm.05cfvw', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 1
            Final Answer: {'Fred Goodwin'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        12 / 12 coarse schemas kept with ans_size > 0.
      } [0.105s]
      Coarse level ended, resulting in 12 schemas.
    } [0.197s]
    Type level searching (total types = 10): {
      Current: 0 / 12
[{'type.datetime'}]
[{'location.country'}]
[{'people.ethnicity'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'people.gender'}]
[{'location.location'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
      4 typed schemas retrieved from 12 coarse schemas.
      Calculating F1 for 4 typed schemas: {
        Current: 0 / 4
        Checking schema 0 / 4: {
          [('Main', '==', 'm.05cfvw', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.05cfvw fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 1 / 4: {
          [('Main', '==', 'm.0cnz_xg', ['people.person.place_of_birth']), ('Type', '==', 'location.us_state', ['type.object.type'])]
          var_types: [{'location.us_state', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnz_xg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.0cnz_xg fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_state . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.0cnz_xg'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 2 / 4: {
          [('Main', '==', 'm.05cfvw', ['people.person.employment_history', 'business.employment_tenure.person']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'business.employment_tenure'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 3 / 4: {
          [('Main', '==', 'm.05cfvw', ['people.person.education', 'education.education.student']), ('Type', '==', 'government.us_president', ['type.object.type'])]
          var_types: [{'education.education'}, {'government.us_president', 'people.person'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:27:57] Q_Schema Request: {
            WebQ_2198|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.05cfvw fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.type fb:government.us_president . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.05cfvw'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        0 / 4 typed schemas kept with ans_size > 0.
      } [0.049s]
      Typed level ended, resulting in 12 schemas.
    } [0.050s]
    Time level searching (total times = 0): {
      Current: 0 / 12
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
      0 timed schemas retrieved from 12 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 12 schemas.
    } [0.000s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 12
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
      0 ordinal schemas retrieved from 12 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 12 schemas.
    } [0.000s]
    [2020-12-03 14:27:57] buffer saved.
    12 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2198_schema].
  } [1.330s]
  Entering Q 2199 / 5810 [b'what did isaac newton contribute to science?']: {
    Show 3 E + 10 T + 0 Tm + 0 Ord = 13 linkings: {
      #00 Entity: [2, 4) (isaac newton) == m.03s9v (Isaac_Newton) {'score': 31673.794904, 'source': 0.0}
      #01 Entity: [6, 7) (science) == m.02q6gzw (Science_Daily) {'score': 1.606914, 'source': 1.0}
      #02 Entity: [6, 7) (science) == m.06mq7 (science) {'score': 26203.964629, 'source': 2.0}
      #03 Type: [0, 2) (what did) == media_common.lost_work (lost work) {'sim': 0.72612}
      #04 Type: [5, 7) (to science) == fictional_universe.work_of_fiction (work of fiction) {'sim': 0.717841}
      #05 Type: [5, 7) (to science) == fictional_universe.school_in_fiction (school in fiction) {'sim': 0.710048}
      #06 Type: [5, 8) (to science ?) == fictional_universe.person_in_fiction (person or being in fiction) {'sim': 0.707057}
      #07 Type: [5, 7) (to science) == education.field_of_study (field of study) {'sim': 0.685918}
      #08 Type: [4, 7) (contribute to science) == fictional_universe.fictional_organization (organization in fiction) {'sim': 0.681574}
      #09 Type: [4, 7) (contribute to science) == location.us_cbsa (us core based statistical area) {'sim': 0.675482}
      #10 Type: [4, 7) (contribute to science) == book.scholarly_work (scholarly work) {'sim': 0.673967}
      #11 Type: [4, 7) (contribute to science) == protected_sites.natural_or_cultural_preservation_agency (natural or cultural preservation agency) {'sim': 0.67262}
      #12 Type: [5, 7) (to science) == fictional_universe.medical_condition_in_fiction (medical condition in fiction) {'sim': 0.671908}
    } [0.000s]
    13 link data save to file.
    Coarse level searching (total entities = 3): {
      [Len-1||F1/3] (2020-12-03 14:27:58) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.02q6gzw ?p1 ?o1 . }
        [2020-12-03 14:27:58] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.02q6gzw ?p1 ?o1 . }
          Query return lines = 9
        } [0.009s]
        Filt_Query_Ret = 0 / 9 ( 0.009s)
      } [0.009s]
      [Len-1||F2/3] (2020-12-03 14:27:58) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.03s9v ?p1 ?o1 . }
        [2020-12-03 14:27:58] SPARQL hit!
        Filt_Query_Ret = 36 / 52 ( 0.000s)
        [Len-1||F2/3||1/3-1] (2020-12-03 14:27:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.02q6gzw . }
          [2020-12-03 14:27:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.02q6gzw . }
            Query return lines = 0
          } [0.005s]
          Filt_Query_Ret = 0 / 0 ( 0.005s)
        } [0.005s]
        [Len-1||F2/3||3/3-1] (2020-12-03 14:27:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.06mq7 . }
          [2020-12-03 14:27:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 fb:m.06mq7 . }
            Query return lines = 4
          } [0.055s]
          Filt_Query_Ret = 4 / 4 ( 0.055s)
        } [0.055s]
      } [0.061s]
      [Len-1||F3/3] (2020-12-03 14:27:58) {
        Fuzzy query: SELECT DISTINCT ?p1 WHERE { fb:m.06mq7 ?p1 ?o1 . }
        [2020-12-03 14:27:58] SPARQL Request: {
          SELECT DISTINCT ?p1 WHERE { fb:m.06mq7 ?p1 ?o1 . }
          Query return lines = 37
        } [0.014s]
        Filt_Query_Ret = 26 / 37 ( 0.015s)
        [Len-1||F3/3||2/3-1] (2020-12-03 14:27:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 fb:m.03s9v . }
          [2020-12-03 14:27:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 fb:m.03s9v . }
            Query return lines = 4
          } [0.015s]
          Filt_Query_Ret = 4 / 4 ( 0.015s)
        } [0.015s]
      } [0.030s]
      [Len-2||F1/3] (2020-12-03 14:27:58) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02q6gzw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:58] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.02q6gzw ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 61
        } [0.010s]
        Filt_Query_Ret = 3 / 61 ( 0.011s)
        [Len-2||F1/3||2/3-1] (2020-12-03 14:27:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02q6gzw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
          [2020-12-03 14:27:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02q6gzw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
            Query return lines = 0
          } [0.007s]
          Filt_Query_Ret = 0 / 0 ( 0.007s)
        } [0.007s]
        [Len-2||F1/3||2/3-2] (2020-12-03 14:27:58) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02q6gzw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
          [2020-12-03 14:27:58] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.02q6gzw ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
            Query return lines = 0
          } [0.347s]
          Filt_Query_Ret = 0 / 0 ( 0.347s)
        } [0.347s]
      } [0.365s]
      [Len-2||F2/3] (2020-12-03 14:27:59) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:59] SPARQL hit!
        Filt_Query_Ret = 25 / 777 ( 0.003s)
        [Len-2||F2/3||1/3-1] (2020-12-03 14:27:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02q6gzw . }
          [2020-12-03 14:27:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.02q6gzw . }
            Query return lines = 0
          } [0.034s]
          Filt_Query_Ret = 0 / 0 ( 0.034s)
        } [0.034s]
        [Len-2||F2/3||1/3-2] (2020-12-03 14:27:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02q6gzw . }
          [2020-12-03 14:27:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.02q6gzw . }
            Query return lines = 0
          } [0.021s]
          Filt_Query_Ret = 0 / 0 ( 0.021s)
        } [0.021s]
        [Len-2||F2/3||3/3-1] (2020-12-03 14:27:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06mq7 . }
          [2020-12-03 14:27:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.06mq7 . }
            Query return lines = 70
          } [0.035s]
          Filt_Query_Ret = 0 / 70 ( 0.035s)
        } [0.035s]
        [Len-2||F2/3||3/3-2] (2020-12-03 14:27:59) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06mq7 . }
          [2020-12-03 14:27:59] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.03s9v ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.06mq7 . }
            Query return lines = 29
          } [0.772s]
          Filt_Query_Ret = 0 / 29 ( 0.772s)
        } [0.772s]
      } [0.866s]
      [Len-2||F3/3] (2020-12-03 14:27:59) {
        Fuzzy query: SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
        [2020-12-03 14:27:59] SPARQL Request: {
          SELECT DISTINCT ?p1 ?p2 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 ?o2 . }
          Query return lines = 727
        } [0.101s]
        Filt_Query_Ret = 14 / 727 ( 0.104s)
        [Len-2||F3/3||2/3-1] (2020-12-03 14:28:00) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
          [2020-12-03 14:28:00] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o1 ?p3 fb:m.03s9v . }
            Query return lines = 70
          } [0.017s]
          Filt_Query_Ret = 0 / 70 ( 0.017s)
        } [0.017s]
        [Len-2||F3/3||2/3-2] (2020-12-03 14:28:00) {
          Fuzzy query: SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
          [2020-12-03 14:28:00] SPARQL Request: {
            SELECT DISTINCT ?p1 ?p2 ?p3 WHERE { fb:m.06mq7 ?p1 ?o1 . ?o1 ?p2 ?o2 . ?o2 ?p3 fb:m.03s9v . }
            Query return lines = 39
          } [0.757s]
          Filt_Query_Ret = 2 / 39 ( 0.757s)
        } [0.757s]
      } [0.879s]
      114 coarse schemas retrieved from scratch.
      Calculating F1 for 114 coarse schemas: {
        Current: 0 / 114
        Checking schema 0 / 114: {
          [('Main', '==', 'm.03s9v', ['base.schemastaging.context_name.official_name'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.schemastaging.context_name.official_name ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 1 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.date_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.person.date_of_birth ?o1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.person.date_of_birth ?o1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1642'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 2 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.nationality'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.nationality ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'Kingdom of Great Britain', 'England', 'Kingdom of England'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 3 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.parents'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.parents ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Hannah Ayscough', 'Isaac Newton Sr.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 4 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.religion'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.religion ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'Monotheism', 'Arianism', 'Anglicanism'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 5 / 114: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.place_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Kensington'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 6 / 114: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.place_of_burial'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_burial ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Westminster Abbey'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 7 / 114: {
          [('Main', '==', 'm.03s9v', ['law.inventor.inventions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:law.inventor.inventions ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Reflecting telescope'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 8 / 114: {
          [('Main', '==', 'm.03s9v', ['education.academic.advisees'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.advisees ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.advisees ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Roger Cotes', 'William Whiston'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 9 / 114: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.assessment'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.assessment ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 10 / 114: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.connections_to'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_to ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 56
            Final Answer: {'rasmus bartholin contradicted theory of isaac newton', 'john napier anticipated isaac newton', 'edmond halley settled calculus row with isaac newton', 'georges-louis leclerc, comte de buffon translated isaac newton', 'john arbuthnot worked with isaac newton', 'anton van leeuwenhoek royal society member with isaac newton', 'john wallis a fan was isaac newton', 'galileo galilei influenced isaac newton', 'johann bernoulli ranked with isaac newton', 'john dalton studied isaac newton', 'nicolaus copernicus triggered gravity work by isaac newton', 'samuel pepys a pal of isaac newton', 'john locke visited by isaac newton', 'hans sloane a pal of isaac newton', 'william oughtred a fan was isaac newton', 'abraham de moivre studied work of isaac newton', 'john winthrop, the younger corresponded with isaac newton', 'nehemiah grew knew isaac newton', 'david brewster wrote about isaac newton', 'thomas hobbes influenced isaac newton', 'robert boyle influenced isaac newton', 'samuel koenig studied isaac newton', 'nicolas-claude fabri de peiresc work used by isaac newton', 'john collins corresponded with isaac newton', "willem jacob 's gravesande met isaac newton", 'john tillotson fellow rs member with isaac newton', 'john flamsteed not friendly with isaac newton', 'william cheselden at deathbed of isaac newton', 'gottfried wilhelm leibniz met isaac newton', 'emilie, marquise du chatelet wrote on work of isaac newton', 'rene descartes laid ground for isaac newton', 'edmond halley a pal of isaac newton', 'francis hauksbee invited to demonstrate by isaac newton', 'francois-marie arouet de voltaire attended funeral of isaac newton', 'christiaan huyghens work related to isaac newton', 'edme mariotte cited by isaac newton', 'george graham work related to isaac newton', 'giovanni alfonso borelli work known to isaac newton', 'johannes kepler laid basis of isaac newton', 'pierre gassendi influenced isaac newton', 'jean buridan anticipated isaac newton', 'william of ockham influenced isaac newton', 'charles-marie de la condamine checked theory of isaac newton', 'thomas bayes defended isaac newton', 'john dollond work related to isaac newton', 'francesco algarotti wrote a book about isaac newton', 'simon stevin anticipated isaac newton', 'john evelyn a pal of isaac newton', 'isaac barrow taught isaac newton', 'pierre-louis moreau de maupertuis defend views of isaac newton', 'robert hooke inspired isaac newton', 'thomas sprat a pal of isaac newton', 'henry cavendish checked isaac newton', 'ole romer met isaac newton', 'pierre de fermat superseded by isaac newton', 'william ferrel studied isaac newton'}
            Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 56, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 11 / 114: {
          [('Main', '==', 'm.03s9v', ['base.eating.practicer_of_diet.diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:00] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.eating.practicer_of_diet.diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Vegetarianism'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 12 / 114: {
          [('Main', '==', 'm.03s9v', ['influence.influence_node.influenced_by'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced_by ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 8
            Final Answer: {'Isaac Barrow', 'Euclid', 'Maimonides', 'René Descartes', 'Ibn Tufail', 'Christiaan Huygens', 'Nicolaus Copernicus', 'Johannes Kepler'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 13 / 114: {
          [('Main', '==', 'm.03s9v', ['symbols.name_source.namesakes'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:symbols.name_source.namesakes ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 19
            Final Answer: {"Newton's cradle", 'Schrödinger–Newton equations', '8000 Isaac Newton', 'Newton–Euler equations', 'Newton', 'Newton–Cotes formulas', 'Newton disc', "Newton's inequalities", "Newton's theorem of revolving orbits", 'Newton polygon', 'Newton polynomial', "Newton's cannonball", 'Newtonian telescope', "Newton's method", "Newton's notation", 'Newton fractal', "Newton's laws of motion"}
            Answers = 17, P = 0.529412, R = 1.000000, F1 = 0.692308
          } [0.016s]
          Answers = 17, P = 0.529412, R = 1.000000, F1 = 0.692308
        } [0.016s]
        Checking schema 14 / 114: {
          [('Main', '==', 'm.03s9v', ['book.author.book_editions_published'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.book_editions_published ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 5
            Final Answer: {'Mathematical principles of natural philosophy', 'Philosophiae naturalis principia mathematica.', 'Mathematical principles of natural philosophy ...', 'The mathematical principles of natural philosophy', 'Mathematical Principles of Natural Philosophy and His System of the World (Principia.)'}
            Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 5, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 15 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.quotations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.quotations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 11
            Final Answer: {'A man may imagine things that are false, but he can only understand things that are true, for if the things be false, the apprehension of them is not understanding.', 'If I have done the public any service, it is due to my patient thought.', 'The Christian ministry is the worst of all trades, but the best of all professions.', 'If I have made any valuable discoveries, it has been owing more to patient attention than to any other talent.', 'Yet one thing secures us what ever betide, the scriptures assures us the Lord will provide.', 'I keep the subject of my inquiry constantly before me, and wait till the first dawning opens gradually, by little and little, into a full and clear light.', 'Every body continues in its state of rest, or of uniform motion in a right line, unless it is compelled to change that state by forces impressed upon it.', 'I seem to have been only like a boy playing on the seashore, and diverting myself in now and then finding a smoother pebble or a prettier shell than ordinary, whilst the great ocean of truth lay all undiscovered before me.', 'If I have seen further... it is by standing upon the shoulders of giants.', 'This most beautiful system -- The Universe could only proceed from the dominion of an intelligent and powerful Being.', 'If I am anything, which I highly doubt, I have made myself so by hard work.'}
            Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 11, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 16 / 114: {
          [('Main', '==', 'm.03s9v', ['education.academic.research_areas'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.research_areas ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.research_areas ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Algebra', 'Mathematics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 17 / 114: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.category'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.category ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 18 / 114: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.has_sentences'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 60
            Final Answer: {'Soon after, he also found the missing link in the identification of the force of terrestrial gravity by discovering that a spherically-symmetrical distribution of matter exerts the same attraction at external points as if its mass were concentrated at its center.', 'The inverse problem of calculating the orbit from the law of force (which had baffled Hooke, Wren , Halley and others) was solved by Newton around 1680.', 'In a discussion of the shape of the orbit under the inverse square law of attraction towards a fixed center, Newton suggested the shape would be an ellipse, and promised to send Halley the calculation from which he had calculated the answer.', 'In the summer of 1684, Halley visited Newton at Cambridge to discuss orbital dynamics.', "Erasmus Bartholin's work questioned Newton's work on optics.", 'The paper provoked skepticism from the curator of the Royal Society, Hooke , and, on the Continent, from Christiaan Huyghens .', 'Contemporary scientists believed that white light was a basic single entity, but the chromatic aberration seen in a telescope lens convinced Newton otherwise.', 'A constant preoccupation for Newton was the continuing fight with Leibniz over who first invented calculus.', 'One of the greatest scientists of all time.', 'He wondered whether the force that pulled an apple to the ground could also pull the Moon into an orbit around the Earth.', 'The idea of a law of attraction according to the inverse square of the distance between the sun and the planets was now a topic of wide discussion in scientific circles.', 'Newton knew or worked with Tillotson, Sprat, Leeuwenhoek, Grew, Sloane and Arbuthnot.', 'He also was fascinated by the mechanics of Copernican astronomy as set out by Galileo and by Kepler\'s ""Optics"".', 'Also at this time, Newton began to think about gravity.', 'This tract, which over the next two years Newton expanded, formed the basis of the first book of ""Philosophiae naturalis principia mathematica"" (""Mathematical Principles of Natural Philosophy"") or the ""Principia"", as it commonly known.', 'In this paper, Newton demonstrated the existence of periodic optical phenomena: he had discovered concentric colored rings in the thin film of air between a lens and a flat sheet of glass and calculated that the distance between these concentric rings (""Newton\'s rings"") depended on the thickness of the film of air.', 'A Royal Society panel, including Halley and mathematician William Jones ,  decided that Newton was the first to unify and make explicit what had been latent in the work of various forerunners.', 'In 1703, he was elected President of the Royal Society, an office he held until his death.', 'In 1672, Newton published an account of his findings on white light in the Royal Society\'s ""Philosophical Transactions"".', 'During his third year at Cambridge, Newton went beyond the compulsory study of Aristotle and read the works of Descartes , Gassendi , Hobbes , and 17th-century chemist Boyle .', 'This led to an exchange between the two on the subject of elliptical orbits.', 'The physicist Brewster wrote his biography.', 'Newton influenced Cheselden, Dalton, De Moivre, Maupertius, Buffon, Winthrop, Hales, Pieter van Musschenbroek and Whiston.', 'With Halley\'s help, the ""Principia"" was published in 1687 and hailed as a masterpiece.', 'However, in 1692, the strain of his studies and his scientific disputes, especially with Leibniz, Flamsteed and Hooke, cast him into a severe depression and rumors spread that he had gone mad.', 'In 1696, he was appointed Warden of the London Mint, becoming Master of the Mint in 1699.', "His work related to that of Algarotti, Gregory, Stevin,  'sGravesende  Haukesbee, Wallis, Johann Bernoulli, Stevin, Cavendish, Ferrel, Copernicus, Peiresc and William of Ockham.", 'He also said he thought light consisted of the motion of small particles, rather than waves.', "Barrow then resigned his Lucasian Professor's chair to make way for Newton.", 'In 1705, he was knighted by Queen Anne.', 'His laws of motion laid the basis for classical mechanics.', 'His theory of gravity was particularly important in working out the motions of the planets.', 'Passing a beam of sunlight through a prism, he observed that the beam spread into a colored band of light (spectrum), and from this he argued that sunlight is really a combination of all the colors.', 'Disappointed, he set aside his figures and did not return to them until about 12 years later.', '""Principia"" was translated into French by du Chatelet in 1759.', "It was acknowledged that though Leibniz's discoveries were later in time, he preceded Newton in publishing a full account.", "In the simple case of circular orbit, the law of attraction followed from Kepler's Third Law (relating the times of revolution of the planets around the sun to the sizes of their orbits) together with Huyghens's 1673 expression for the centripetal acceleration of a body moving in a circle.", 'He assumed that the rate of fall is proportional to the force of gravity and that this force is inversely proportional to the square of the distance from the center of the Earth.', 'By their application, Newton formulated the universal laws of nature with which he was able to solve virtually all the unsolved problems of his day.', 'Three months later, Halley received a short tract, (""On Motion"") which at Halley\'s request was registered with the Royal Society in early 1685.', 'In 1689, Newton campaigned for a seat in Parliament and became Member for Cambridge.', 'Newton turned his attention to the nature of light.', 'He then worked out what the motion of the Moon would be if these assumptions were correct, but obtained a figure that was too low.', 'His gravitational law declared that the force of gravity is proportional to the masses of the objects and decreases in proportion to the square of the distance between two bodies.', 'Voltaire remarked that England had honored a mathematician as other nations had honored a king.', 'Newton was given a state funeral and was buried in Westminster Abbey.', "He studied higher mathematics under Professor Isaac Barrow , who recognized Newton's genius and encouraged him.", 'Over the next three years he summarized his findings in an essay, ""Of Colours"", which  became Book One of his ""Opticks"",  published in 1704.', 'From 1664, he recorded his thoughts in a notebook he called ""Certain Philosophical Questions"".', 'He met Romer.', 'The ""Principia"" contained Newton\'s three laws of motion (now known as Newton\'s Laws: laws of inertia, action and reaction, and acceleration proportional to force),  his theory of tides and lunar motion,  and his theory of gravitation as a universal law of attraction between any two objects.', 'He admired the work of Oughtred.', "Between 1665 and 1667, Newton made revolutionary advances in optics, physics, and astronomy, and laid the foundations for differential and integral calculus, several years before Leibniz's  discoveries.", 'In 1669, Barrow decided the world must know about Newton\'s mathematical achievements and sent Newton\'s preliminary work, ""On Analysis by Infinite Series,""  to John Collins in London.', 'In 1675, when Newton published another paper on the color phenomena in thin films, he annoyed Hooke again, this time because Hooke thought Newton had stolen some of his own optical results.', 'While in London, he met famous diarists Evelyn and Pepys and philosopher Locke .', 'The ""method of fluxions"", as he called it,  produced simple analytical methods that unified many existing techniques so as to solve problems like finding areas, tangents, the lengths of curves, and the maximums and minimums of functions.', "Both objected to Newton's attempt to prove by experiment alone that light consisted of the motion of small particles.", 'Late in 1679, Hooke wrote to Newton describing his analysis of planetary motion.', 'Now obliged to deliver an annual course of lectures, Newton chose optics as his first subject.'}
            Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 60, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 19 / 114: {
          [('Main', '==', 'm.03s9v', ['influence.influence_node.influenced'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:influence.influence_node.influenced ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 28
            Final Answer: {'Immanuel Kant', 'David Gregory', 'Pierre Louis Maupertuis', 'Albert Einstein', 'John Keill', 'George Boole', 'Iain King', 'Thomas Bayes', 'Thomas Jefferson', 'John Craig', 'William Whiston', 'Neil deGrasse Tyson', 'George Berkeley', 'Kurt Gödel', 'Lawrence Sklar', 'Abraham de Moivre', 'William Wollaston', 'Ralph Waldo Emerson', 'David Hartley', 'Emanuel Swedenborg', 'Ernst Mach', "Willem 's Gravesande", 'John Theophilus Desaguliers', 'Edmond Halley', 'Voltaire', 'Joseph Raphson', 'Gregory Chaitin', 'David Hume'}
            Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 28, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 20 / 114: {
          [('Main', '==', 'm.03s9v', ['book.author.works_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 47
            Final Answer: {'The optical papers of Isaac Newton', 'Mathematical Works of Isaac Newton', 'Opera quae exstant omnia', "Sir Isaac Newton's Chronology, abridged by himself", "The three first sections and part of the seventh section of Newton's Principia", 'Optical lectures read in the publick schools of the University of Cambridge, Anno domini, 1669', 'La Méthode des fluxions et des suites infinies', 'Über die Gravitation--', 'Arithmetica Universalis', 'Naturvetenskapens matematiska principer', "An abstract of Sir Isaac Newton's Chronology of ancient kingdoms", 'Principia', 'Unpublished scientific papers of Isaac Newton', "The first three sections of Newton's Principia", 'Opticks: or, A treatise of the reflexions, refractions, inflexions and colours of light', 'Theological manuscripts', "Isaac Newton's Observations on the Prophecies of Daniel and the Apocalypse of St. John: A Critical Edition", 'Observations Upon the Prophecies of Daniel and the Apocalypse of St. John', 'Universal arithmetick', 'An Historical Account of Two Notable Corruptions of Scripture', 'Observations upon the prophecies of Daniel, and the Apocalypse of St. John', 'Daniel and the Apocalypse', 'Cuatro Cartas Al Dr Bentley', 'Newtons abhandlung über die quadratur der kurven', 'Die Mathematischen Prinzipien Der Physik', 'Lekt͡s︡ii po optike', 'A treatise of the system of the world', 'Two letters of Sir Isaac Newton to Mr. Le Clerc', 'Optice', 'The Chronology of Ancient Kingdoms', 'New theory about light and colors', "The ninth and eleventh sections of Newton's Principia", 'Method of Fluxions', 'Opticks', 'The present state of Ireland', 'Thirteen letters from Sir Isaac Newton', 'Tables for renewing and purchasing the leases of cathedral-churches and colleges', "The preliminary manuscripts for Isaac Newton's 1687 Principia, 1684-1685", "Traité d'optique", 'Lettres inédites de Newton', "Newton's Philosophy of Nature Selections from his Writings", 'Newton', 'Philosophiæ Naturalis Principia Mathematica', "Sir Isaac Newton's corollaries from his philosophy and chronology", 'Papers & letters on natural philosophy and related documents', 'A letter of Mr. Isaac Newton... containing his theory about light and colours'}
            Answers = 46, P = 0.021739, R = 0.111111, F1 = 0.036364
          } [0.011s]
          Answers = 46, P = 0.021739, R = 0.111111, F1 = 0.036364
        } [0.012s]
        Checking schema 21 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 6
            Final Answer: {'Mathematician', 'Chemist', 'Scientist', 'Physicist', 'Astronomer', 'Philosopher'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 22 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.gender'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.gender ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Male'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.025s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.025s]
        Checking schema 23 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.place_of_birth'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Woolsthorpe-by-Colsterworth'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 24 / 114: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.date_of_death'])]
          var_types: None
          SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.deceased_person.date_of_death ?o1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 WHERE { fb:m.03s9v fb:people.deceased_person.date_of_death ?o1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1727'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 25 / 114: {
          [('Main', '==', 'm.03s9v', ['music.lyricist.lyrics_written'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:music.lyricist.lyrics_written ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:music.lyricist.lyrics_written ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'A Source of Light'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.022s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.022s]
        Checking schema 26 / 114: {
          [('Main', '==', 'm.03s9v', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'Relativity in curved spacetime', 'Isaac Newton: The Last Sorcerer', 'The calculus wars'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 27 / 114: {
          [('Main', '==', 'm.03s9v', ['fictional_universe.person_in_fiction.representations_in_fiction'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:fictional_universe.person_in_fiction.representations_in_fiction ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 28 / 114: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.connections_from'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.connections_from ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 42
            Final Answer: {'isaac newton work related to william ferrel', 'isaac newton translated by emilie, marquise du chatelet', 'isaac newton studied johannes kepler', 'isaac newton met john locke', 'isaac newton knew thomas sprat', 'isaac newton met john evelyn', 'isaac newton work related to francesco algarotti', 'isaac newton studied aristotle', 'isaac newton studied thomas hobbes', 'isaac newton work related to simon stevin', 'isaac newton work questioned by rasmus bartholin', 'isaac newton work related to nicolas-claude fabri de peiresc', 'isaac newton work related to william of ockham', 'isaac newton criticized by christiaan huyghens', 'isaac newton criticized by robert hooke', 'isaac newton studied rene descartes', 'isaac newton co-developed calculus with gottfried wilhelm leibniz', 'isaac newton influenced william cheselden', 'isaac newton biography by david brewster', 'isaac newton influenced abraham de moivre', 'isaac newton influenced georges-louis leclerc, comte de buffon', 'isaac newton met samuel pepys', 'isaac newton published by john collins', 'isaac newton admired by francois-marie arouet de voltaire', 'isaac newton knew nehemiah grew', 'isaac newton influenced john dalton', 'isaac newton work related to henry cavendish', 'isaac newton knew john tillotson', 'isaac newton studied pierre gassendi', 'isaac newton work related to johann bernoulli', 'isaac newton knew hans sloane', 'isaac newton work related to john wallis', 'isaac newton studied under isaac barrow', 'isaac newton influenced john winthrop, the younger', 'isaac newton work related to nicolaus copernicus', 'isaac newton knew john arbuthnot', 'isaac newton work related to christopher wren', 'isaac newton knew anton van leeuwenhoek', 'isaac newton a fan of william oughtred', 'isaac newton primacy asserted by william jones', 'isaac newton met ole romer', 'isaac newton row with john flamsteed'}
            Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 42, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 29 / 114: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.kwtype'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.kwtype ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 30 / 114: {
          [('Main', '==', 'm.03s9v', ['base.kwebbase.kwtopic.disciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.disciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 31 / 114: {
          [('Main', '==', 'm.03s9v', ['visual_art.art_subject.artwork_on_the_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:visual_art.art_subject.artwork_on_the_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 32 / 114: {
          [('Main', '==', 'm.03s9v', ['base.rivalries.rival.rivals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Leibniz–Newton calculus controversy'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 33 / 114: {
          [('Main', '==', 'm.03s9v', ['base.argumentmaps.innovator.original_ideas'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.argumentmaps.innovator.original_ideas ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:base.argumentmaps.innovator.original_ideas ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {"Newton's law of universal gravitation"}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 34 / 114: {
          [('Main', '==', 'm.03s9v', ['food.diet_follower.follows_diet'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:food.diet_follower.follows_diet ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Vegetarian food'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 35 / 114: {
          [('Main', '==', 'm.03s9v', ['user.rlyeh.certainty.complete.completeproperties'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:user.rlyeh.certainty.complete.completeproperties ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:user.rlyeh.certainty.complete.completeproperties ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Children', 'Spouse (or domestic partner)'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 36 / 114: {
          [('Main', '==', 'm.03s9v', ['book.author.works_written']), ('Entity', '==', 'm.06mq7', ['book.written_work.subjects'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:book.written_work.subjects fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:book.written_work.subjects fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 3
            Final Answer: {'Arithmetica Universalis', 'Opticks', 'Philosophiæ Naturalis Principia Mathematica'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 37 / 114: {
          [('Main', '==', 'm.03s9v', ['book.author.works_written']), ('Entity', '==', 'm.06mq7', ['book.book.genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:book.book.genre fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:book.book.genre fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Philosophiæ Naturalis Principia Mathematica'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 38 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.profession']), ('Entity', '==', 'm.06mq7', ['people.profession.specializations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:people.profession.specializations fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:people.profession.specializations fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Scientist'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 39 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.profession']), ('Entity', '==', 'm.06mq7', ['user.narphorium.default_domain.job_title.professions'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:user.narphorium.default_domain.job_title.professions fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.profession ?o1 . ?o1 fb:user.narphorium.default_domain.job_title.professions fb:m.06mq7 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Scientist'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 40 / 114: {
          [('Main', '==', 'm.06mq7', ['base.skosbase.vocabulary_equivalent_topic.equivalent_concept'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 41 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.subdisciplines'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:education.field_of_study.subdisciplines ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:education.field_of_study.subdisciplines ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 7
            Final Answer: {'Social science', 'Formal science', 'Computer Science', 'Political Science', 'Natural science', 'Library science', 'Medicine'}
            Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 7, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 42 / 114: {
          [('Main', '==', 'm.06mq7', ['media_common.quotation_subject.quotations_about_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.quotation_subject.quotations_about_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 8
            Final Answer: {'Very little in science fiction can transcend the gimmickry of a technical conceit, yet without that conceit at its heart a book is not truly science fiction. Furthermore, so little emerging thought and technology is employed by sf writers today that the genre is lagging far behind reality both in the cosmology area and the technology area: sf is no longer a place to experiment, but is now very derivative.', 'Science is organized knowledge. Wisdom is organized life.', 'Science is like a blabbermouth who ruins a movie by telling you how it ends.', 'A knowledge of the existence of something we cannot penetrate, of the manifestations of the profoundest reason and the most radiant beauty, which are only accessible to our reason in their most elementary forms—it is this knowledge and this emotion that constitute the truly religious attitude; in this sense, and in this alone, I am a deeply religious man.', 'Science is what we understand well enough to explain to a computer. Art is everything else we do.', 'Science is a differential equation. Religion is a boundary condition.', 'A religion old or new, that stressed the magnificence of the universe as revealed by modern science, might be able to draw forth reserves of reverence and awe hardly tapped by the conventional faiths.', '“As a methodology for research, science adopts as its cardinal postulate (proved fruitful by its enormous success since the time of Galileo, Newton and Descartes) the commitment to explain empirical phenomena by reference to invariant laws of nature and to avoid appeals to the miraculous, defined as a suspension of those laws for particular events. The notion of ‘abrupt appearance,’ the origin of complex somethings from previous nothings, resides in this domain of miracle and is not part of science.  “Punctuated equilibrium, catastrophic theories of mass extinction, hopeful monsters, and a variety of hypotheses about rapid rates of change in continuous sequences, not about unintelligible abrupt appearances, are part of scientific debate and bear no relationship to the nonscientific notion of abrupt appearance, despite pernicious and willful attempts by many creationists to distort such claims by misquote and halfquote to their alien purposes. Punctuated equilibrium, in particular, is a'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 43 / 114: {
          [('Main', '==', 'm.06mq7', ['book.periodical_subject.periodicals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:book.periodical_subject.periodicals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 4
            Final Answer: {'The New York Times Magazine', 'Wired', 'Seed', 'Discover'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.031s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.031s]
        Checking schema 44 / 114: {
          [('Main', '==', 'm.06mq7', ['media_common.literary_genre.books_in_this_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.literary_genre.books_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.literary_genre.books_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 810
            Final Answer: {'Temperature', 'Up From Dragons', 'The Best American Science Writing 2002', 'CYBERPUNK', 'Mauve', 'The Music of the Primes', 'Gemini 6: The NASA Mission Reports', 'Enough', 'Erase Una Vez El Zorro y El Erizo', "Questioning the Millennium: A Rationalist's Guide to a Precisely Arbitrary Countdown", 'Goliath Bird-Eating Tarantula', 'Extinction', "Broca's Brain", 'The Stars in their Courses', 'The science of Star wars', 'Total Solar Eclipses and How to Observe Them', 'A History of Warfare', 'Made in America', 'Icebergs and glaciers', 'Inside Delta Force', "Leonardo's Mountain of Clams and the Diet of Worms", 'Wonderful Life: The Burgess Shale and the Nature of History', 'Pequena Historia Del Perfurme', 'The Primordial Emotions: The Dawning of Consciousness', 'The Best American Science Writing 2000', 'The Voyage of the Beagle', 'A separate creation', 'Science Business: The Promise, the Reality, and the Future of Biotech', 'Religion Explained', 'The Seed I Planted', 'The Cosmic War', "Lunar and Planetary Webcam User's Guide", 'Placenames of the World', 'War and existence', 'Empire of Mind', 'Strange Angel', 'Boer War', 'The turning point', 'Particle Dark Matter', 'Understanding Lung Sounds', 'Far Off or Asia and Australia Described', 'The Fringe of the Unknown', 'Bioethics in a Liberal Society', 'Sidereus Nuncius', 'Evolution', 'Materials', 'Apollo 12: The NASA Mission Reports Vol 2', 'In the Presence of Fear', 'The power of identity', 'Space Shuttle Pocket Space Guide', 'Volcanoes', 'Success through failure', 'These United States: The Questions of Our Past', 'Reinventing gravity', 'When the Sun Goes Down', 'The cartoon guide to genetics', 'Soil Exhaustion As a Factor in the Agricultural History of Virginia And Maryland, 1606-1860', 'Rocks of Ages: Science and Religion in the Fullness of Life', 'Native Science', 'Garden Birds', 'The Language of Stars and Planets', 'The land of little rain', 'The Theory of Evolution', 'Programming With Visual Basic.NET', 'Falling in Love', 'Eco-pragmatism', 'Being digital', 'Why Darwin Matters', 'A Brief History of Thyme and Other Herbs', 'Scientific Evidence', 'The Link: Uncovering Our Earliest Ancestor', 'A Rumor of War', 'The Bone Museum', 'Global Climate Change: Human and Natural Influences', 'How We Use Soil', 'The Lunar Exploration Scrapbook', 'The Giza Death Star Deployed', 'Representation and Invariance of Scientific Structures', 'Precipitation', 'Recent Advances In Organic Chemistry', 'Encyclopedia of Science Technology and Ethics', 'Hydrogen', 'Performing Tourist Places', 'Bringing Back The Dodo', 'The Best American Science Writing 2006', 'Halfway to Anywhere', 'The Mississippi Valley', 'The Book of Life', 'Apocalypse and Paradigm', 'Introduction to the Theories of Measurement and Meaningfulness and the Use of Symmetry in Science', 'The Monk in the Garden', 'Bathtub science', 'The Story of Science', 'Moths of the Limberlost', 'Battle Ready', 'The Intention Experiment', 'The Making of the Atomic Bomb', 'Accepting the universe', 'The Yellow Peril', 'The Pattern Book', 'Marijuana Botany', 'The Hidden Connections', 'The Way and the Word', 'Life Beyond Earth', 'The Quiet Limit of the World', 'Agaves of continental North America', 'The time before history', 'Lives of a Biologist', 'Success With Small Fruits', 'Victorian Slate Mining', 'The New Amateur Astronomer', 'Theories in Probability', 'Refiguring life', 'Salvar El Planeta. Plan B/ Plan B.', 'The secret house', 'The Education of a Mathematician', 'Methods of Numerical Integration', 'The brain', 'The key to great leadership', 'Big bang', 'Patrick Moore on Mars.', 'A to Z of Scientists in Weather and Climate', 'The Great Food Gamble', 'Mars', 'Blessed Unrest', 'The Night Is Large', 'The fire in the equations', 'My Stroke of Insight', 'The Evolutionist At Large', 'How it works', 'Wildlife in the Garden', 'Life Cycles', 'One Good Turn', "Don't Be Such a Scientist", 'Foundations of Measurement Volume II', 'Sidelights on relativity', 'Theories of Vision from Al-Kindi to Kepler', 'Auto Mania', 'The Pleasure of Finding Things Out: The Best Short Works of Richard Feynman', 'Brontosaurus Y La Nalga Del Ministro', 'The Chemical Promise', 'A feeling for the organism', 'The Physicists', 'Stick and Rudder', 'De revolutionibus orbium coelestium', 'Two New Sciences', 'Salt', 'Flip-O-Matic', 'Men of Invention and Industry', 'Primer of biostatistics', 'Fact, Fiction, and Forecast', 'Landing Your First Job', 'The Ambidextrous Universe', 'Neanderthals, Bandits and Farmers', 'Confirmation', 'Frantastic Voyage', 'The pencil', 'Southwestern Agriculture', 'Mental Improvement', 'The Dinosaur Hunters', 'The New World of Mr Tompkins', 'Minibeasts', 'Altering Eden', 'Science to the rescue', 'Virtual war', 'The web of life', 'Finding Fault in California', 'Potato Radio, Dizzy Dice, and More Wacky, Weird Experiments from the Mad Scientist', 'Backyard Ballistics', 'Far as Human Eye Could See', 'Columbia Accident Investigation Report', 'The Ape-Man Within', 'Eight Little Piggies: Reflections in Natural History', 'Due to the Weather', 'Space Shuttle STS 1 - 5: The NASA Mission Reports', 'Life Is a Miracle', 'The Fractal Geometry of Nature', 'The Suicidal Planet', 'The Herschels And Modern Astronomy', 'Seasons Turning', 'University Physics', 'The Secret of the Universe', 'The grammar of science', 'The Thermal Warriors', 'Out of the Everywhere', 'Pulse', 'Number', 'Greenpeace', 'The science gap', 'Small Things Considered', 'The Roads to Sata', 'Virtual Reality', 'Belonging to the Universe', 'With Speed and Violence', 'Frontiers 2', 'Octopuses', 'The optics book', 'Wheels Keep Turning', 'Predicting the future', 'Un hérisson dans la tempête', 'How to Build an Elephant', 'The Subatomic Monster', 'Apollo 17: The NASA Mission Reports Vol 1', 'Full House: The Spread of Excellence From Plato to Darwin', 'The Visual Display of Quantitative Information', 'Charting new pathways to C4 rice', 'Letters Of Asa Gray V2', 'Interpretar a Los Animales', 'Captando Genomas', "The Panda's Thumb: More Reflections in Natural History", 'Conversations About the End of Time', 'Quantum Questions', 'Ears', 'Spoken and Written Language', 'The Reenchantment of Science', 'The Collapse of Chaos: Discovering Simplicity in a Complex World', 'The Society of Mind', 'The God Effect', 'Unification and conquest', 'The Search for the Alpha and Omega', 'Explosive Experiments', 'The Sceptical Chymist', 'The Official Guide to Germs', 'Building Bots', 'Mapping Human History', 'The Sun, The Genome, and The Internet', 'Rabi', 'Field, Form and Fate', 'How We Use Water', 'High Tide, Low Tide', 'Mr. Tompkins gets serious', 'Atom-Smashing Power of Mind', 'Pierre-Simon Laplace, 1749-1827', 'Que Se Yo de Geografia', 'Una Breve Historia de Casi Todo', 'Ever Since Darwin: Reflections in Natural History', "Time's Arrow, Time's Cycle: Myth and Metaphor in the Discovery of Geological Time", 'The Elements of Physical Chemistry', 'Blue gold', 'Sleepy Book', 'The Expression of the Emotions in Man and Animals', 'Comets', 'The Rough Guide to the Universe', 'Environmentalism', 'The Coming Convergence', 'The wreck of the William Brown', 'Philosophy of Arithmetic', 'View from a Height', 'The Tragedy of the Moon', 'Genes', 'In a Patch of Fireweed', 'Decoding the Universe', 'Loudspeaker Design Cookbook', 'Supply-Side Sustainability', "Dawkins' God: Genes, Memes, and the Meaning of Life", 'Biomimicry', 'The Last Great Sea', 'The Regulatory Genome', 'Into the Cool', 'Wings of darkness and other cases', 'The Solar System and Back', 'The Origin of Modern Humans', 'A Natural History of the Senses', 'Rocket And Space Corporation Energia', 'Hawking and Black Holes the Big Idea', 'Muscles', 'Investigating Astronomy', 'Karl Pearson', 'Mind into Matter', 'Biology', 'Pale Blue Dot', 'Crossing Over: Where Art and Science Meet', 'Tycho and Kepler', 'Theories of Meaningfulness', 'The Invention that Changed the World', 'The Century of the Gene', 'Fish Caught In Time the Search for The', 'Encyclopedia of Biology', 'Science since Babylon', 'An Essay About The Origins And Virtues Of Gems', 'Systems Engineering', 'The Infinite Book', 'Glimpses of unfamiliar Japan', 'Biodiesel', 'Bohr and Quantum Theory', 'The British Army, Manpower and Society into the Twenty-first Century', 'Plantae Asiaticae Rariores', 'Genius', 'First Signals', 'El Siglo del Gen', 'Calendar', 'The Myth of Ability', 'Astronomia', 'Apollo 8: The NASA Mission Reports', 'Natural acts', 'Why Size Matters', 'The incredible secret formula book', 'Ciencias/ Science School', 'The Future of Food', 'Out of Gas: The End of the Age of Oil', 'The Green Reader', 'The Varieties of Scientific Experience', 'Dark Sun', 'Marijuana Pest and Disease Control', 'The Species Problem, Biological Species, Ontology, and the Metaphysics of Biology', 'Antisense and Ribozyme Methodology', 'The individual in Darwinʼs world', 'Ages in Chaos', 'The soul of the night', 'Robert Anton Wilson Explains Everything', 'The Mobius Strip', 'All the Rivers Run', 'The Logic of Scientific Discovery', 'Error', 'Zero', 'The invisible man and other cases', 'Mr. Tompkins in paperback', 'Putting Science in Its Place', 'The System Of The Stars', 'The Formation of the Scientific Mind', 'Seaside Scientist', 'Deep Space: The NASA Mission Reports', 'La radiologie et la guerre', 'The Soul of a New Machine', 'The Granite Landscape', 'The song of the dodo', 'Freshwater fish distribution', 'The Structure and Distribution of Coral Reefs', 'A Natural History of Australia', 'The beginnings of Western science', 'Worlds in Collision', 'First Science Experiments', 'Earth in Upheaval', 'Great Mambo Chicken and the Transhuman Condition: Science Slightly over the Edge', 'Coherence in Spoken and Written Discourse', 'The Agile Gene', 'Measuring the universe', 'Getting Science', 'Exploring the night sky with binoculars', 'The Demon-Haunted World', 'Project Apollo', 'One Voice', 'The Spirit of Science', 'Literature and Science', 'The Dreaming Universe', 'Universe', 'The Left Hand of the Electron', 'Science Rules', 'Times of Triumph, Times of Doubt', 'Einstein 1905', 'Trust in Numbers', 'Walking Zero', 'Punctuated Equilibrium', 'God: The Failed Hypothesis', 'The Generation of Diversity', 'Cosmos', 'Ideas and opinions', 'Quantum Society', 'The Myth of Progress', 'The presence of the past', 'Grades 3-4', 'The Oxford Book of Modern Science Writing', 'Reducing And Recycling Waste', 'The Life Era', 'The Sun Shines Bright', 'Extraterrestrial Civilizations', 'Out of my later years', 'Tools for Thought', 'The Correspondence of Charles Darwin, Volume 15: 1867', 'The Story of Science in America', 'The Mechanical Bride', 'Future Evolution', 'Careers in science', 'A Question and Answer Guide to Astronomy', 'The Experimental Animal in Biomedical Research', 'Sphereland', 'The Secret Life of the Home', 'Marte', 'A Study In Human Nature', 'The Late, Great Planet Earth', 'On The Revolutions of Heavenly Spheres', 'Mathematics in Ancient Greece', 'Electromagnetic fields and waves', 'Big Bang', 'The Best American Science Writing 2001', 'Everything and More', 'Kicking the sacred cow', 'Concepts of Science', 'Models for Planning Wildlife Conservation in Large Landscapes', 'Dinosaur in a Haystack: Reflections in Natural History', 'Unstoppable Global Warming: Every 1,500 Years', 'The Naked Woman', 'Friendship 7: The NASA Mission Reports', 'Physics Lab Experiments, Custom Publication', 'Ciencia Versus Religion - Un Falso Conflicto', 'Blacks in Science', 'The starry sky', 'Stargazers', 'Hello H2O', 'Lonely hearts of the cosmos', 'The Ten Most Beautiful Experiments', 'Et Dieu dit: ""Que Darwin soit!""', 'Apollo 9', 'The closed world', 'The estrogen effect', 'The Science Times Book of Language and Linguistics', 'VISIONS OF TECHNOLOGY', 'Chemistry and Medical Debate', 'The Immortal Life of Henrietta Lacks', 'Why We Run', 'Eighth Army', 'The German Penetration of SOE', 'Saxons, Vikings, and Celts', 'Traité Élémentaire de Chimie', 'The End of Nature', 'To a Distant Day: The Rocket Pioneers', 'The Inevitable Domination by Man', 'Hubble Space Telescope Pocket Space Guide', 'Animal Cell Biotechnology', 'Lucretius And the Atomic Theory', 'Indiscrete thoughts', 'Shaping Life', 'The Hydrogen Economy', 'How things work', 'Treatise on the gods', 'The Emperor of Scent', 'Making Waves', 'Statistical Concepts and Applications in Clinical Medicine', 'Amazing and Wonderful Mind Machines You Can Build', 'Earthmind', 'Species of Origins', 'An Interethnic Companion to Asian American Literature', 'The Impact of the Gene', 'The Brain Explorer', 'Leadership and the new science', 'Intimate Behavior', 'Icky, squishy science', 'Leaning Towards Infinity', 'Racing the Antelope', 'Snakes: Ecology and Conservation', 'Helter Skelter', 'Philippine rats', 'The Book of Evidence', 'Chasers', 'European Background Of American History', 'Small World', 'A Long Way from Euclid', 'Linguistics in Context : Connecting Observation and Understanding', 'The shaky game', 'Apollo 10', 'The Right Stuff', 'Saturn', 'Science Friction: Where the Known Meets the Unknown', 'Killer Energy', 'Convection', 'Edgar Huntly', 'Sky and Ocean Joined', 'Life Script', "L' isotopie et les éléments isotopes", 'The Origin Of The Earth', 'Darwin et les grandes énigmes de la vie', 'A Monk and Two Peas', 'Livestock Handling and Transport', 'Assembly Automation and Product Design, Second Edition', 'The planets', 'Genetics', 'Humane Livestock Handling', 'Natural Grace', 'Mother in the middle', 'The Collected Papers of Albert Einstein, Volume 1: The Early Years: 1879-1902', 'Top Secret', 'A Dark Place in the Jungle', 'Syntax', 'First Light', 'The Story of a Storm', 'Mathematics And Common Sense', 'Evolution and the Big Questions', 'How I Killed Pluto and Why It Had It Coming', 'Darwinian Reductionism', 'Ecology', 'The Comprehensible Cosmos', 'Written In Stone', 'The God Delusion', 'Basic Home Networking', 'Bully for Brontosaurus', 'The City of the Sun', 'Autism', 'How We Can Save the Planet', 'In the Shadow of the Moon', 'Astrology', 'The Laws of Physics', 'The Dawkins Delusion?', 'Illusion Fortschritt. Die vielfältigen Wege der Evolution', "Darwin's Dangerous Idea", 'Electricity and Electronics for HVAC', 'Fact and Fancy', 'The Humanizing of Knowledge', 'Russian Spacecraft Pocket Space Guide', 'Seven experiments that could change the world', 'Time, Love, Memory', 'The Naked Man', 'A Treatise on Probability', 'Into the storm', 'Hawaiian Volcanoes', 'Acquainted with the Night', 'The Chicago Guide to Communicating Science', 'Encyclopedia Of Chemistry', 'Giza', 'Fundamentals of Metal Machining and Machine Tools', 'Plato', 'My Early Life', 'Rubbish', 'The companion guide to The mathematical experience, study edition', 'Crazy Horse and Custer', 'Mechanistic Biology and the Religious Consciousness', 'Suspended In Language', 'By sea and land', 'Who Dares Wins', 'The birth and death of the sun', 'Ecosystem Sustainability and Health', 'Pilgermann', 'Science in Action', 'Genomic Regulatory Systems', 'Electronics the easy way', 'A Brief History of Infinity', 'Magic universe', 'Only a Trillion', 'When the Sky Fell', 'The Long Dark Tea-Time of the Soul', 'An Intimate History of Killing', 'The Companion Guide to the Mathematical Experience, Study Edition', 'Timeless Reality', 'Fatal Forces', 'Apollo 11', 'The Foundations of Mathematics', 'King of Hearts', 'Rebuilding the Matrix', 'Exploring the Earth and the Cosmos', 'Elements Of The Philosophy Of The Human Mind', 'Introduction to language pathology', 'Neuro-Linguistic Programming', 'When Religion Becomes Evil', 'Shadow Warriors', 'The Relativity of Wrong', 'The Ideas of Biology', 'Consciousness Explained', 'Four Laws That Drive the Universe', 'New Elements Of Geometry', 'Building a Gas Fired Crucible Furnace', 'Kabbalistic Astrology Made Easy', 'The Barrel in the Basement', 'The Mathematics of Oz', 'Trama Oculta del Universo', 'Digital Apollo', 'Hot talk, cold science', 'The Autobiography of Charles Darwin', 'Computers, Pattern, Chaos and Beauty', 'The Case for Mars', 'Redesigning Humans', 'The Whole Shebang: A State-of-the-Universe(s) Report', 'Evolving the Alien', 'The origin of birds', 'The Richness of Life: The Essential', 'Trucks', 'Apollo 14: The NASA Mission Reports', 'The Degradation Of The Democratic Dogma', 'Notes from the Holocene', 'Chemical Chaos', 'Stargazing', 'Historia Naturalis Brasiliae', 'The secret family', 'World prehistory', 'Animal Passions', 'The Biology of Transcendence', 'Quantum Self', "The Conchologist's First Book", 'Yuungnaqpiallerput/ the Way We Genuinely Live', 'Inside Construction Management', 'The Blind Watchmaker', 'The Medusa and the Snail', 'Southern United States', 'Psychogenetics', 'Experiments and Considerations Touching Colours', 'The Salinity Crisis', 'Principia Mathematica', 'Where wizards stay up late', 'The Descent of Man, and Selection in Relation to Sex', 'White racism', 'Tales of a Tin Mine', 'Trying cases to win', 'The Last Recreations', "The Intelligent Man's Guide to Science", 'Super Storms That Rocked the World', 'Characterology', 'Hot Air', 'Out of the Earth', 'Out of Eden', 'Grades K-2', 'Nine Against the Unknown', 'I Have Landed', 'Metafisica Medicina y Sanacion', 'Pi in the sky', 'Trends in Biomedical Regulation', 'Parallel Universes', 'Masterminds', 'X-15', 'The Evolution of Gryphaea', 'The Fabric of the Heavens', 'What the Dormouse Said', 'Prime Obsession', 'The White Nile', 'Epistemology', 'Promised the Moon', 'Apollo 15', 'The Language Instinct', 'Doubt and certainty', 'Dogs That Know When Their Owners Are Coming Home', 'A Sense of the Cosmos', 'Gutenberg to Plantin an Outline of the Early History of Printing', 'Metamaterials: Physics and Engineering Explorations', 'The Connection Of The Physical Sciences', 'Killer Whales', 'Sailing Alone Around the World', 'Gregor Mendel', 'Man, Beast and Zombie', 'Home to war', 'The Discovery of Global Warming', 'Science', 'The Science of Good and Evil', 'Origins of Sex', 'Cleansing the Doors of Perception', 'Finders, Keepers: Eight Collectors', 'The universe', 'Allies', 'The Zen of Magic Squares, Circles, and Stars', 'Industrial Electricity and Motor Controls', "The Shorter Science and Civilisation in China. An Abridgment of Joseph Needham's Original Text. Volume 2", 'The Dragons of Eden', 'The Unfit', 'Tales of the Rational', 'Native Lordship in Medieval Scotland', 'Moon Hunters', 'Dialogue Concerning the Two Chief World Systems', 'Life Science', 'X Stands for Unknown', 'Whoosh Boom Splat', 'Cape Cod', 'Into Africa', 'Theory of Colours', 'Earth-Based Psychology', 'The Lying Stones of Marrakech', 'Thinking About Thought', 'One, two, three-- infinity', 'Trawler', 'The Cartoon Guide to Chemistry', 'Sacred Mathematics', 'The First Nonlinear System of Differential and Integral Calculus', 'Apollo 7', 'The Secret Language of Life', 'Primer of Applied Regression & Analysis of Variance', 'Engineers of dreams', "Les Quatre Antilopes de l'Apocalypse", 'Figments of Reality', 'In the Company of Soldiers', 'The Moon and the Western Imagination', 'The Structure of Evolutionary Theory', 'Farm', 'Industrial Biography', 'The Hype about Hydrogen', 'The Physiological Basis for Exercise and Sport', 'Advanced Skywatching', 'Britannia and Other Tubular Bridges', 'The River That Flows Uphill', 'Uranus', 'Energy and Power', 'Humanizing Madness', 'An Alchemy of Mind', 'Incompleteness', 'First Course in Mathematical Logic', 'A History of Pi', 'Icons of Evolution', 'Captured By Aliens', 'Clausewitz in English', 'Questions of Truth', 'Becoming a Science Observer', 'Limits of Science', "The Hedgehog, the Fox, and the Magister's Pox", 'Das Reich', 'Building Blocks of Matter', 'The red limit', 'Animal fact/animal fable', 'Prognostic Astronomy', 'Comme les huit doigts de la main', 'The Mismeasure of Man', 'Electric motor controls', 'Freedom 7', 'Philosophiæ Naturalis Principia Mathematica', 'From zero to infinity', 'The heart', 'The immune self', 'Radioactivité', 'The Good Guide to the Lakes', 'The last harvest', 'Fundamentals of Electromagnetic Phenomena', 'Sun up, sun down', 'The Feynman Lectures on Physics', 'June 29, 1999', 'The artful universe', 'A new science of life', 'Wild Dunedin', 'Complexity', 'Life on other worlds', 'An Introduction to Celestial Mechanics', 'The View From the Oak', 'ENGINES OF TOMORROW', 'The emergence of probability', 'On the Connexion of the Physical Sciences', 'The Hall of Heavenly Records', "Hen's Teeth and Horse's Toes: Further Reflections in Natural History", 'On Human Nature', 'Flora Britannica', 'Human Natures', 'Scientific knowledge', 'Uncle Tungsten', 'The Discoverers', 'Shallow Waters', 'John Dee', 'Marine Diesel Engines', 'Quasar, Quasar, Burning Bright', 'The Politically Incorrect Guide to Darwinism and Intelligent Design', 'Patterns in evolution', 'Fantastic Realities', 'Bones', 'Understanding Development', 'From Eternity to Here', 'The cerebral code', 'Making Sense of Life', 'Traite de radioactivite', 'Astronomy', 'The New York Times Book of the Brain', 'Science And Religion', 'Terrible Lizard', 'Alaska Science Nuggets', 'Theory of Games and Economic Behavior', 'Mars on Earth', 'Biology of Cancer', 'The Curious Life of Robert Hooke', 'Gemini 7: The NASA Mission Reports', 'Edge of Objectivity', 'Strange brains and genius', 'In Search of Memory', 'E=mc2', 'Apollo 16: The NASA Mission Reports Vol 1', 'Spinors and space-time', 'Ontogeny and Phylogeny', 'The scientific process.', 'Desde El Exterior', 'Animals in translation', "L'Eventail du vivant", 'La foire aux dinosaures', 'The Tao of Physics', 'Second Sight', 'The Fran with Four Brains', 'The Universe Story', 'Adding a Dimension', "The Flamingo's Smile: Reflections in Natural History", 'The Dancing Wu Li Masters', 'Manual Of The Botany Of The Northern United States', 'Science in Translation', 'Inner Space', 'An Urchin in the Storm: Essays About Books and Ideas', 'The Skeptic Encyclopedia of Pseudoscience', '10th edition of Systema Naturae', 'The Next Fifty Years: Science in the First Half of the Twenty-First Century', 'The great arc', 'National Life From The Standpoint Of Science', 'Seeing in the Dark', 'Infinite Ascent', 'River Out of Eden', 'Three Hundred and Sixty Five Starry Nights', 'The Magic School Bus at the Waterworks', 'El Mundo y Sus Demonios', 'La Locura En El Divan', 'The biotech century', 'Programming With C#.NET', 'Current Controversies in the Biological Sciences', 'An Intimate Look at the Night Sky', 'Cloning the Buddha', 'The Eye of the Lynx', 'Understanding electricity', 'De Nieuwe en Onbekende Weereld', 'De Re Anatomica', 'The Invisible Man', 'The Best American Science Writing 2004', 'Departures & arrivals', 'Earthshaking Science', 'The Born-Einstein Letters', 'The Sun, the Genome and the Internet', 'Disgusting Digestion', 'Flatland: A Romance of Many Dimensions', 'Earthbound', 'Ubiquity', 'The evolution of culture in animals', 'Adventures from the technology underground'}
            Answers = 804, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.039s]
          Answers = 804, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.039s]
        Checking schema 45 / 114: {
          [('Main', '==', 'm.06mq7', ['tv.tv_genre.programs'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:tv.tv_genre.programs ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:tv.tv_genre.programs ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 51
            Final Answer: {'Whizz Whizz Bang Bang', 'Mad Labs', 'Unchained Reaction', 'British television Apollo 11 coverage', 'Smash Lab', 'The Big Idea', 'Horizon', 'Science International', 'Brink', "That's Impossible", "James May's Man Lab", 'Science Magazine', 'Mysterious Castles of Clay', 'Naked Science', "How It's Made", "I Didn't Know That", 'Q.E.D.', "Let's Get Inventin'", 'Scrapheap Challenge', 'Head Rush', 'El Hormiguero', 'The Big Bang', 'Prototype This!', "Don't Ask Me", 'Catch It Keep It', 'Cosmos: A Personal Voyage', 'Equinox', 'MythBusters', 'The Story of Science: Power, Proof and Passion', "Walter Cronkite's Universe", 'The New Explorers', 'The What in the World? Quiz', 'Wonders of the Solar System', 'Stuck with Hackett', 'Star Gazers', 'Bang Goes the Theory', 'The Zula Patrol', "It's Effin' Science", 'FORA.tv Science', 'Forbidden Love', "James May's Things You Need To Know", 'Moon Machines', 'Disaster Eyewitness', 'QTV', 'Quantum', 'Catalyst', 'When We Left Earth: The NASA Missions', "Wallace and Gromit's World of Invention", 'Look Around You', 'National Geographic Explorer', 'In the Womb'}
            Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 51, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 46 / 114: {
          [('Main', '==', 'm.06mq7', ['film.film_subject.films'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:film.film_subject.films ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 2
            Final Answer: {'Wonders Are Many', 'The Pleasure of Finding Things Out'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 47 / 114: {
          [('Main', '==', 'm.06mq7', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:people.profession.people_with_this_profession ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:people.profession.people_with_this_profession ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Rahul Sankrityayan'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 48 / 114: {
          [('Main', '==', 'm.06mq7', ['organization.organization_sector.organizations_in_this_sector'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:organization.organization_sector.organizations_in_this_sector ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:organization.organization_sector.organizations_in_this_sector ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 4
            Final Answer: {'American Medical Writers Association', 'Society for the Diffusion of Useful Knowledge', 'Council of Science Editors', 'International Union for Science Communicators'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 49 / 114: {
          [('Main', '==', 'm.06mq7', ['award.award_discipline.awards_in_this_discipline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:award.award_discipline.awards_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:award.award_discipline.awards_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 4
            Final Answer: {'Los Angeles Times Book Prize for Science and Technology', 'National Book Award for Science, Philosophy and Religion', 'National Book Award for The Sciences', 'National Book Award for Science'}
            Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 4, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 50 / 114: {
          [('Main', '==', 'm.06mq7', ['base.database.database_topic.database_s_for_this_topic'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.database.database_topic.database_s_for_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.database.database_topic.database_s_for_this_topic ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 2
            Final Answer: {'Science Citation Index Expanded', 'ScientificCommons'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 51 / 114: {
          [('Main', '==', 'm.06mq7', ['media_common.netflix_genre.titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.netflix_genre.titles ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 61
            Final Answer: {'Geography: People, Places & Interesting Things', "Chemistry: Lesson 24: La Chatelier's Principle 2", 'Chemistry: Lesson 30: Solubility Equilibria', 'Chemistry: Lesson 12: Empirical Formula Problems', 'Chemistry: Lesson 7: The Mole Concept', 'Core Physics: Classical Physics', 'Chemistry: Lesson 14: Introduction to Stoichiometry', 'Chemistry: Lesson 19: Additional Molarity Problems', 'Rock-On: Educational Music Videos for 5th Grade Science', 'Anatomy & Genetics: Science, Sound & Energy', 'Physical Geography: Volcanoes of the United States', 'Physics Power: Learning Physics: The Standard Deviants', 'Chemistry: Lesson 18: Solving Molarity Problems', 'Chemistry: Lesson 5: The SI System of Measure', 'The Zula Patrol: Vol. 2: Moons Mayhem', 'Physical Geography: Introduction to Rocks and Minerals', 'Chemistry: Lesson 28: Strong Acids and Bases 2', 'Chemistry: Lesson 17: Introduction to Molarity', 'Ecosystems & Environment: Water & Weather', 'Chemistry: Lesson 9: Solving Mole Problems', 'Chemistry: Lesson 26: The Self-Ionization of Water', 'Biology', 'Chemistry: Lesson 29: Weak Acids and Bases', 'Science in Action: Lenses and Mirrors', 'Chemistry: Lesson 8: The Mole', 'Understanding Science: Vol. 1: Scientific Problem Solving', 'Chemistry: Lesson 27: Strong Acids and Bases 1', 'Physical Geography: Glaciers That Shape Our Earth', 'Science in Action: Rocks and Minerals', 'Chemistry: Lesson 22: Interpreting an Equilbrium', 'Chemistry: Lesson 20: Basic Concepts of Chemical Equilibrium 1', 'Physical Geography: Underground Water', "Chemistry: Lesson 10: Avogadro's Hypothesis", 'Physical Geography: The Hydrologic Cycle', 'Chemistry: Lesson 4: Density', 'Physical Geography: Sedimentary Rocks', 'Chemistry: Lesson 13: Writing and Balancing Chemical Reactions', 'Chemistry: Lesson 11: Percent Composition and Empirical Formula', 'Science in Action: Color and Light', 'Core Physics: Modern Physics', 'The Zula Patrol: Animal Adventures in Space', 'Physical Geography: Running Water: How It Erodes and Deposits', 'The Earth Is a Giant Magnet: Understanding Magnetism', 'Physical Geography: Metamorphic Rocks', 'Growing Up in the Universe', "Let's Form a Band: Understanding Sound", 'Science in Action: Pieces of the Past', 'Gravity Is Attractive: What Is Gravity?', 'Flight: Time, Money & Measurement', 'Chromosomes and Genes', 'Understanding Science: Vol. 2: Matter', 'Physical Geography: Earthquakes and How They Are Measured', 'Science in Action: Pollution', 'Chemistry: Lesson 15: Stoichiometry Problems', 'Chemistry: Lesson 16: Advanced Stoichiometry', "Newton's Wagon: Understanding Motion", 'Understanding Science: Vol. 6: Weather Systems', 'Physical Geography: Weathering and Erosion', 'Physical Geography: Forces That Shape Our Earth', 'Power of the Periodic Table', 'Chemistry: Lesson 1: Introduction and Philosophy'}
            Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.023s]
          Answers = 61, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.023s]
        Checking schema 52 / 114: {
          [('Main', '==', 'm.06mq7', ['user.alexander.philosophy.subject.philosophers'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.alexander.philosophy.subject.philosophers ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.alexander.philosophy.subject.philosophers ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Avicenna'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 53 / 114: {
          [('Main', '==', 'm.06mq7', ['book.book_subject.works'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:book.book_subject.works ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1597
            Final Answer: {'Listening point', 'CYBERPUNK', 'The Music of the Primes', 'The Cultural Landscape', 'Erase Una Vez El Zorro y El Erizo', '1 is for one', 'Scientific expeditions in the Portuguese overseas territories, 1783-1808', 'Tornadoes', 'Science on trial', 'The Evolution of ScientificThought from Newton to Einstein', 'Spotlight on spiders', 'The turning point', 'Teach yourself VBScript in 21 days', "Galileo's Commandment: An Anthology of Great Science Writing", 'Mind and brain', 'The chemical philosophy', 'Bad Science', 'An overview of science education in the United States and selected foreign countries', 'The ultimate bubble book', 'Manipulated science', 'Open horizons', 'Science and hypothesis', 'Inside XML DTDs', 'Venus', 'The unified modeling language reference manual', 'Fun with nature', 'The Origins of Virtue: Human Instincts and the Evolution of Cooperation', 'Among the Forces', 'The teaching-learning strategy of the primary science project of the science education programme for Africa', 'Essentials of scientific method', 'New and improved stupid Mac tricks', 'A historical introduction to the philosophy of science', 'The kingdom of man', 'The human side of science', 'Dinosaur', 'One Day on Beetle Rock', 'The Intention Experiment', 'Introduction to general science', 'NT Workstation 4', 'The Hidden Connections', 'Darwin and the Darwinian revolution', 'The field guide to wildlife habitats of the eastern United States', 'Agaves of continental North America', 'Wild thoughts from wild places', 'Butterflies of the Pacific Northwest', 'The master thinkers', 'The principles of natural philosophy', 'Snappy little opposites', 'The ingenious Dr. Franklin', 'Persons and minds', 'The brain', 'The Peterson field guide to animal tracks', 'Science and Life', 'Preserving the Nation', '1, 2, 3 to the zoo', 'Creatine', 'Rethinking smart objects', 'Common sense science', "Conversations With Neil's Brain", 'Early science in Oxford', 'The hip pocket guide to HTML 4', 'Modern scientific ideas', 'Mind, language, and reality', 'Conjectures and Refutations', 'Sidelights on relativity', 'Theories of Vision from Al-Kindi to Kepler', 'The tree where man was born', 'Weather words and what they mean', 'The Newtonian system of philosophy adapted to the capacities of young gentlemen and ladies', 'Sneaky Uses for Everyday Things', 'Bite-size Einstein', 'Uncertainty models for knowledge-based systems', 'Silicon Snake Oil', 'The creation of the universe', 'Flutter by, butterfly', 'Lemons are not red', 'Computer Game Museum website files: DVD, 2006', 'Birds in jeopardy', 'Science and mathematics education', 'Science to the rescue', 'Gerald Durrell', 'Buying a Computer for Dummies', 'Debian GNU\\/Linux', 'Java in a nutshell', 'The beginnings of science, biologically and psychologically considered', 'Nicole Oresme and the marvels of nature', 'Sports science', 'Physico-chemical evolution', 'Classification of knowledge in Islam', 'Answers to the practical questions and problems contained in the fourteen weeks courses in physiology, philosophy, astronomy and chemistry (old and new edition)', 'Number', 'Virtual Reality', 'Comparative vertebrate reproduction', 'The optics book', 'A System of Logic', 'Test driving Linux', 'The future is wild', 'Adaptation and Natural Selection', 'Switching to the Mac', 'Secrets of life, secrets of death', 'Oral Training Lessons In Natural Science And General Knowledge', 'The librarian who measured the earth', 'Men of mathematics', 'The Major Transitions in Evolution', 'The Hindu-Arabic numerals', 'Aspects of science', 'Mr. Tompkins gets serious', 'Happy thoughts on a sunny day in New York City', 'Sharing the joy of nature', 'Trends in the number of pupils who take physical science, biology and mathematics at secondary schools for whites in the RSA', 'Pierre-Simon Laplace, 1749-1827', 'Ever Since Darwin: Reflections in Natural History', 'Birds That Hunt And Are Hunted', 'The Ivory-Billed Woodpecker', 'The Expression of the Emotions in Man and Animals', 'The Rough Guide to the Universe', 'Mechanism and personality', 'The limitations of science', 'The Atmosphere', 'General Chemistry', 'Dinosaur discovery', 'The Solar System and Back', 'Refuge: An Unnatural History of Family and Place', 'Weather of the San Francisco Bay region', 'Eccentricities of the Animal Creation', 'Burndy Library in mitosis', 'C for dummies', 'Reflections on the decline of science in England', 'Of the advancement and proficiencie of learning', 'Biology', 'A Short History Of Natural Science And Of The Progress Of Discovery; From The Time Of The Greeks To The Present Day', 'Ruby in a Nutshell', 'Turing and the computer', 'The magic numbers of Dr. Matrix', 'Introductory Chemistry, Media Update 5e Paperback w/o student support package', 'Soaring with the wind', 'The Outermost House', 'You can, toucan, math', 'The Search for Truth', 'Big Cats', 'Science for fun experiments', 'Counting Down with Polar Animals', 'Zero', 'Wild Britain', "You're in charge", 'The Soul of a New Machine', 'History of the inductive sciences from the earliest to the present time', 'Minor works', 'The complete works of Count Rumford.', 'Worlds in Collision', 'Wonderful nature, wonderful you', 'The origins of life', 'Marjory Stoneman Douglas', 'Universe', 'Arctic Dreams', 'An address to the Literary and Philosophical Society of South-Carolina', 'Times of Triumph, Times of Doubt', 'Born free, a lioness of two worlds', 'New Conceptions In Science', 'Scientific dialogues, intended for the instruction and entertainment of young people', 'Darwin and the nature of species', 'Modern scientific knowledge of nature, man and society', 'Teacher effectiveness and style as related to participation in a science curriculum workshop', 'Julia, a life in mathematics', 'The status of middle school and junior high school science', "Shelley's Frankenstein", 'The panorama of science', 'Anglo-American and German abbreviations in science and technology', 'Fear of math', 'Extraterrestrial Civilizations', 'Cosmic Dawn', 'Popular lectures on scientific subjects', 'The harmonies of nature, or, The unity of creation', 'The impact of science technology and society courses in higher education', 'The unofficial countryside', 'Mac OS X Panther for dummies', 'Entertaining science experiments with everyday objects', 'An introduction to intersection homology theory.', 'Kuby Immunology', 'Object-oriented artificial intelligence using C++', 'Logic and Information', 'Objects, abstraction, data structures and design using Java', 'MCSE Exchange Server 5.5 exam prep', 'Electromagnetic fields and waves', 'Concepts of Science', 'The magnet book', 'Unstoppable Global Warming: Every 1,500 Years', 'The starry sky', 'Man and Dolphin', 'Tracking reason', 'Lectures on natural and experimental philosophy, considered in its present state of improvement', 'Windows NT networking for dummies', 'Science around the world', 'Parallelism in production systems', 'Why We Run', 'They walk the earth', 'Lucretius And the Atomic Theory', 'Indiscrete thoughts', 'Shaping Life', 'Teach yourself SunSoft Java WorkShop in 21 days', 'The scientific voice', 'The Emperor of Scent', 'Introduction to Geography', 'ANSI Common Lisp', 'Learning Kernel Classifiers', 'Earthmind', 'New Theories of Everything', 'Philosophy and sociology of science', 'Teach yourself C++ in 21 days', 'Life and Letters of James David Forbes', 'Atlas of the universe', 'Shadows in the dawn', 'Rabbits, squirrels, and chipmunks', 'Aristotle leads the way', 'Teach yourself Java for Macintosh in 21 days', 'Reflections from the North Country', 'A process for developing a turn-on science program for native Indian students at the secondary level', 'Do the right thing', 'The Origin Of The Earth', 'Darwin and His Great Discovery', 'The planets', 'Java 2 and Javascript for C and C++ programmers', 'Scientific inference', 'MCSE core-four exam cram pack', 'My best mathematical and logic puzzles', 'The Log from the Sea of Cortez', 'Ecology', 'Look at the sky and tell the weather', 'Bully for Brontosaurus', 'The pursuit of simplicity', 'Introduction to artificial life', 'Principles of Philosophy', 'Fact and Fancy', 'Student perceptions of science classes, science teachers, scientists, and the usefulness of science study in elementary and secondary schools in Bandung, Indonesia', 'Online science learning', 'My ten book', 'The structure of biological science', 'Science Fair Success Using The Internet', 'Into the porcupine cave and other odysseys', 'Problem Solving with Java', 'The computer revolution in philosophy', 'Windows XP pro', 'Stalking the healthful herbs', 'A survey of the wisdom of God in the creation, or, A compendium of natural philosophy', 'Wild to the Heart', 'How we became posthuman', 'The Magic of Reality', 'Audubon', 'Making peace with the planet', 'Thermodynamics and an introduction to thermostatistics', 'An aspect of history of science and technology in Kanem-Borno', 'The Moral Landscape', 'Genetic maps and human imaginations', 'Hilbert', 'The Foundations of Mathematics', 'Food for Free', 'The Groundwork Of Science', 'Mathematics, queen and servant of science', 'The Relativity of Wrong', 'Where is science going?', 'Baby wolf', 'The Case for Mars', 'Ravenous Reptiles', 'Writings and drawings', 'Improving math & science education', 'The Rise of Man', 'The emissivity of metals and oxides.', 'Rosalind Franklin', 'Field guide to Microsoft Windows 95', 'Hooked on Java', 'The terminology of physical science', 'The Medusa and the Snail', 'The golden lion tamarin comes home', 'Natural Disasters', 'Welcome to the icehouse', 'The Roy Bedichek family letters', 'The Last Recreations', 'Science education in New Zealand', 'Cosmos: A Sketch of the Physical Description of the Universe Vol. 4', 'The man who knew too much', 'The Rarest of the Rare', 'The Art of Unix Programming', 'Creative HTML design', 'Life', 'Easy lessons in popular science', 'At home in the universe', 'FileMaker Pro 4 companion', 'XML elements of style', "Dalton's memoirs", 'The universe', 'Mathematical carnival', 'The moon by whale light', 'Jacobi Rohaulti Physica', 'Life and Energy', 'The cartoon guide to statistics', 'Lads before the wind', 'Eversion', 'Wild rivers', 'Mind over machine', 'Scientific Computing: An Introductory Survey', 'Two treatises', 'A problem-solving model for integrating science and language in bilingual/bicultural education', 'Programming Perl', 'One, two, three-- infinity', 'An inaugural essay on physeodesmos, or, The tie of creation', 'The Book of Nothing', 'Mathematics, matter, and method', 'Vulture', 'The downfall of all false writers', 'Anatomy and Physiology Revealed Version 2.0 CD', 'Microsoft Exchange 5.0 field guide', 'Logique du probable', 'Beyond AI', 'Energy and Power', 'Inside the body', 'A History of Pi', 'Icons of Evolution', 'The sphere of science', 'The new law', 'Critiques and addresses', 'The flight of the iguana', 'Scientific books libraries and collectors', 'The context of explanation', 'The heat is on', 'TCP/IP exam cram', 'The anatomy of science', 'Jackals', 'Musk oxen', 'The heart', 'The immune self', 'An introductory discourse', 'The mysterious universe', 'Macworld Mac upgrade and repair bible', 'Science in free society', 'Life on other worlds', 'Re-thinking science', 'Outside and inside spiders', 'The universe is a green dragon', 'The velvet claw', 'American edition of the British encyclopedia, or, Dictionary of arts and sciences', 'The View From the Oak', 'Mammals of Europe', 'The Crystal Desert', 'Outside and inside kangaroos', 'The Picnic', 'Pascal applications for the sciences', 'Wildlife in America', 'Through the Woods', 'Scientific knowledge', 'Life Of A Scotch Naturalist', 'Splendid Solution', 'Quasar, Quasar, Burning Bright', 'Secret Languages of the Sea', 'Astronomy', 'The Constants of Nature', 'Machine learning', 'Spinors and space-time', 'Wolves', 'The scientific process.', 'The leaping hare', 'Tasmanian devils', 'The Beak of the Finch: A Story of Evolution in Our Time', 'The Magic School Bus Lost in the Solar System', 'Cybernetics and the environment', 'Some specimens of a work on the principles of chemistry', 'The Universe Story', 'The structure of appearance', 'Field flora of the British Isles', 'The Dancing Wu Li Masters', 'Birds of the Mid-Atlantic', 'Biology and atomic physics', 'Orangutan', 'Birds, Nests and Eggs', 'Whale Nation', 'How to Make a Wildlife Garden', 'Advanced Windows Programming', 'Mac OS 8.5', 'The Seeing Eye', 'The book of dolphins', 'Birds of New England', "Science education in the People's Republic of China", 'Ubiquity', 'The evolution of culture in animals', 'The Fourth Dimension', 'The science of Star wars', 'Introduction to artificial intelligence techniques', 'Volcano evacuation', 'My Winter Garden', 'Application of sociology to science teaching', 'The loom of God', 'Roger Bacon and the origins of Perspectiva in the Middle Ages', 'The old humanities and the new science', 'On the wild side', 'They swim the seas', 'Science, old and new', 'Opticks', 'The philosophy of science', 'Sidereus Nuncius', 'The Burgess animal book for children', 'Mac OS X Tiger for dummies', 'The follies of science at the court of Rudolph II', 'My double life', 'Way to Bliss', 'The microscope book', 'The cartoon guide to genetics', 'The world within the world', 'Bird Neighbors', 'A valedictory address, delivered before the social fraternity of Leicester Academy, Mass., at the close of the autumnal term, Tuesday evening, November 3d, 1818', 'Year Million: Science at the Far Edge of Knowledge', 'How the Mind Works', 'A syllabus of a course of lectures on natural and experimental philosophy', 'Garden Animals', 'Thinking in Java', 'Applied natural language processing', 'Data trash', 'Progress in learning science project', 'Philosophy and the physicists', 'A familiar introduction to the arts and sciences', 'Illustrations of universal progress', 'Independence and deterrence', 'Problems of teaching M.C.E. physical science practicals in secondary schools in Malawi', 'The Mars mystery', 'Light science for leisure hours', 'Linux pocket guide', 'Fundamentals of Heat and Mass Transfer', 'SAMS teach yourself C++ in 24 hours', 'The concept of nature', 'Accepting the universe', 'Toronto the wild', 'Science and science policy in the Arab world', 'Labyrinths', 'Foundations in Microbiology', 'A survey of continuing education opportunities available to nonacademic scientists, engineers, and mathematicians', 'Black holes', 'The scattering of electromagnetic waves from rough surfaces', 'The universe for the beginner', 'Catechism of general knowledge, or, A brief introduction to the arts and sciences', 'The connexion of the physical sciences', 'Mac OS 8.6', 'The secret house', 'To walk in wilderness', 'Methods of Numerical Integration', 'century of science, and other essays', 'Patrick Moore on Mars.', 'Microsoft Windows Me Millennium Edition for dummies', 'Icarus at the Edge of Time', 'PC Magazine Fighting Spyware, Viruses, and Malware', 'Mars', 'Scientific method', 'Animals in disguise', 'My two book', 'Stephen Hawking', 'Survey of first-year graduate and postdoctoral enrollment in science and engineering', 'Life Cycles', 'Cycles of Time', 'Intuition', 'Applying UML and patterns', 'History of science teaching in England', 'An introductory discourse delivered before the Literary and Philosophical Society of New-York', 'The Ambidextrous Universe', 'Science since 1500', 'Miracles in motion', 'Natural organization and education', 'The Riddle of Scheherazade', 'Science and polity in France', 'Wild Fiordland', 'Object-Oriented Software Construction', 'Outside and inside rats and mice', 'The reason why', 'Miscellaneous Scientific Papers', 'Excel for scientists and engineers', 'The Origin of the Universe', 'Last animals at the zoo', 'Evolution and the Myth of Creationism', 'Time travel and other mathematical bewilderments', 'Mycelium running', 'More Windows 95 for dummies', 'Kaleidorama', 'Autumnal tints', 'Kaleidoscopes', 'Knotted doughnuts and other mathematical entertainments', 'Scary Spiders', 'The World Wide Web for scientists & engineers', 'The life of matter', 'Introduction to Cryptography with Java Applets', 'Fortran', 'Improving science education in the United States', 'Natural philosophy through the 18th century, and allied topics', 'The Subatomic Monster', 'Modern structured analysis', 'Risk, ambiguity, and decision', 'Science, Good, Bad, and Bogus', 'Nuclear Fear', 'Conversations About the End of Time', 'Physics of the Impossible: A Scientific Exploration into the World of Phasers, Force Fields, Teleportation, and Time Travel', 'Report on teaching of technical and science subjects in Sri Lanka', 'Science for a new world', 'The march of science', 'My four book', 'Sleepy Book', 'Snow leopard', 'View from a Height', "Fashionable Nonsense: Postmodern Intellectuals' Abuse of Science", 'Crossing platforms', 'Far ridges', 'Synopsis of sciences and arts, arranged under the general heads of philosophy, history & arts', 'Structured design', 'How math works', 'Microsoft Windows 98 field guide', 'Karl Pearson', 'Discovering Geometry', 'The metaphysical foundations of modern physical science', 'War of the Worldviews', 'The science book of sound', 'The Ninemile Wolves', 'The magic of numbers', 'Optimal system of current scientific and technological information for small developed and developing countries', 'Chaos in wonderland', "Sparks from a geologist's hammer", 'Roman numerals', 'The soul of the night', 'The winking, blinking sea', 'Programming Web services with XML-RPC', 'The vanity of arts and sciences', 'Human Accomplishment: The Pursuit of Excellence in the Arts and Sciences, 800 B.C. to 1950', 'Running a perfect BBS', 'The Aquarium Book', 'The most beautiful roof in the world', 'Connectionism and Meaning', 'People and chips', 'Windows NT 4 Workstation unleashed', 'The Newtonian philosophy, and natural philosophy in general', 'Measuring the universe', 'Exploring the night sky with binoculars', 'Teaching a Stone to Talk', 'Alchemy and alchemists', 'Exercise Physiology', 'Snowflakes and ice skates', "The new ROSIE reference manual and user's guide", 'Caterpillars, bugs, and butterflies', 'AI theory and applications in the VAX environment', 'Ada, the enchantress of numbers', 'How to Attract the Wombat', 'Thirty years that shook physics', 'The Extended Phenotype', "Rohault's System of natural philosophy", 'The open world', 'Modeling reactive systems with statecharts', 'Initialisms of scientific and technical organizations', 'Abstract science in America, 1776-1876', 'Programming in mathematica', 'New Atlantis', 'The Structure of Scientific Revolutions', 'Ideas and opinions', 'The Life Era', 'Beaches and bicycles', 'MAC OS 7.6 for dummies', 'Tools for Thought', 'The practical performance analyst', 'Particle modeling', 'De Magnete', 'The new wolves', 'Last Chance to See', 'The Little Mac Book', 'Programming C#', 'The Grizzly King', 'Black Holes', 'Understanding the present', 'Dinosaur in a Haystack: Reflections in Natural History', 'Gallio, or, The tyranny of science', 'Familiar lectures on scientific subjects', 'Agile and iterative development', 'The biological universe', 'NightWatch', 'Black mischief', "Students' misconceptions interfere with learning", 'Girls in school, women in science', 'How to do everything with your iMac', 'Recent Discussions In Science, Philosophy, And Morals', 'Bats', 'Planet Earth, inside out', 'Scientific dialogues', 'The space atlas', 'Painter in a Savage Land: The Strange Saga of the First European Artist in North America', 'Einstein plus two', 'New flora of the British Isles', 'Geometric Perturbation Theory in Physics', 'End of the Earth', 'American medicinal plants', 'Human Anatomy and Physiology Lab Manual, Cat Version', 'Networking essentials', 'The Frampton Flora', 'Between inner space and outer space', 'Vitamins, herbs, minerals & supplements', 'Engineering Intelligent Systems', 'Lexicon Technicum', 'The Swiss Family Robinson', 'Icky, squishy science', 'Time', 'Racing the Antelope', 'C++ unleashed', 'Sams teach yourself ColdFusion Express in 24 hours', 'Physical science', 'Slippery, slimy baby frogs', 'Physics and psychics', 'The nature and development of problem solving behaviour in school science through environmental education during adolescence', 'Puzzling questions about the solar system', 'Sky and Ocean Joined', 'NeuralSource', 'The Little Schemer', 'Advanced ColdFusion 4.0 application development', 'Diagnostic problem solving', 'The Man Who Loved Only Numbers: The Story of Paul Erdos and the Search for Mathematical Truth', 'Introduction to science', 'Red-eyed tree frog', 'The story of human error', 'Sharks', 'Introduction to the history of science', 'The unconscious quantum', 'Theoretical knowledge', 'Comets, meteors, and asteroids', 'Science, nature and ethics', 'Living science', 'Organic Chemistry', 'Close to the machine', 'Lions and tigers', 'Our solar system', 'Practical Research', 'The Wisdom of the Body', 'An introduction to the history of science', 'Time, Love, Memory', 'The Physics of Immortality', 'The power of your plate', 'Monster of God: The Man-Eating Predator in the Jungles of History and the Mind', 'Piaget interviews and interaction analysis in the preparation of science teachers', 'The companion guide to The mathematical experience, study edition', 'Windows 3.11 for dummies', 'Discover Java', 'General Systems Theory', 'Isaac Newton', 'A volume of letters', 'How tall, how short, how far away', 'Science in traditional China', 'Magnitude 8', 'Essentials of Programming Languages', 'Dummies 101.', 'Fifty years of science', 'PCs for dummies', 'Darwin on Trial', 'Age of Science', 'Mac OS X Panther Hacks', 'Comparative study of the classroom practices and teaching rationale of high school biology teachers using different curriculum materials', 'Islamic sciences', 'New worlds in science', 'The Autobiography of Charles Darwin', 'On evolution', 'Climate Policy--From Rio to Kyoto', 'The road of science and the ways to God', 'Dissemination by state science supervisors of a CD-ROM disc for innovation in curriculum planning', 'The Whole Shebang: A State-of-the-Universe(s) Report', 'Tog on Interface', 'The club and coral mushrooms (Clavarias) of the United States and Canada', 'A review of research on teacher behavior', 'The modern ark', 'Introduction to Heat Transfer', 'Dinosaurs', 'The secret family', 'The Wild Beasts, Birds and Reptiles of the World', 'Monarch butterfly', 'Voyage of the turtle', 'HTML Web publishing 6-in-1', 'Rural hours', 'Decoding Reality', 'The Descent of Man, and Selection in Relation to Sex', 'Unweaving the Rainbow: Science, Delusion and the Appetite for Wonder', 'Science on the Web', 'Windows 98 for dummies', 'Mathematical encounters of the second kind', 'Object-oriented systems design', 'The structure and properties of matter', 'Changing Views Of The Universe', 'Applied Chaos Theory', 'Pi in the sky', 'Parallel Universes', 'Complete Essays, Vol. 5: 1938-1956', 'Preliminary discourse on the study of natural history', 'Northwoods wildlife', 'The works of Charles Babbage', 'Chaotic logic', 'Army ants', 'OMT insights', 'Albert Einstein, Hedwig und Max Born, Briefwechsel', 'Dialogue Concerning the Two Chief World Systems', 'Evolution in science and religion', 'Calculus', 'One Red Sun, a Counting Book', 'Animal Skulls', 'Theory of Colours', 'Metamagical Themas', 'The Lying Stones of Marrakech', 'Melatonin', 'The Gasteromycetes of the Eastern United States and Canada', 'Logisches Schliessen bei Unsicherheit', 'The adventure of science', 'The First Nonlinear System of Differential and Integral Calculus', 'Entertaining mathematical puzzles', 'Riddles of the sphinx, and other mathematical puzzle tales', 'Discovering the natural laws', 'Dino dots', 'The sexy years', 'Charles Darwin', 'Public knowledge', 'The principles of science', 'User-friendly handbook for project evaluation', 'Savage Sharks', 'Frankenstein', 'Machine Learning', 'The World Without Us', 'The Female Brain', 'Principles of Geology', 'The Impact of Science on Society', 'An Introduction to General Systems Thinking', 'The Big Switch: Rewiring the World, from Edison to Google', 'Scientific progress', 'Wolverines', 'The honey makers', 'Slovarʹ po nauke i tekhnike', 'Software project survival guide', 'Hurricanes and tornadoes', 'Science byways', 'Mapping Scientific Frontiers', 'Knowledge elicitation', 'Philosophiæ Naturalis Principia Mathematica', 'Excursions in science', 'Discover Windows 95', 'From zero to infinity', 'Chameleon, chameleon', 'Sun up, sun down', 'Flamingos, loons, and pelicans', 'One bear at bedtime', 'My one book', 'Astronomical equipment for amateurs', 'An autumn gleaning', 'EXP', 'Climatic effects on individual, social, and economic behavior', 'History of mathematics', 'Life Of Benjamin Silliman', 'The universe of suns', 'Destination, Mars', 'On the Connexion of the Physical Sciences', 'Scientific realism', 'ClarisWorks office for dummies', 'Method and results', 'Shallow Waters', 'An oration on curiosity', 'Code Complete', 'The cerebral code', 'The electronic scholar', 'The three phase primary science project in Papua New Guinea', 'Super cool science', 'Heat', 'Introduction to analysis', 'Animal signals', 'The Last Flight of the Scarlet Macaw', 'An introduction to the methodology of science', 'The scientific renaissance, 1450-1630', 'Acrobat 3 for Macintosh and Windows', 'Evolutionary Humanism', 'The philosophy of the inductive sciences', 'Turtles, Termites and Traffic Jams', 'Planning Extreme Programming', 'Arithmetica Universalis', 'Science and technology in Nigeria', 'Engineering Cybernetics', 'Birds', 'Adding a Dimension', 'Complex algebraic curves', 'Mental Magic', 'River Out of Eden', 'Mathematical methods in artificial intelligence', 'The Hawaiian honeycreepers', 'Sixty years of biology', 'Software shock', 'A discourse on the importance to practical men of scientific knowledge and on the encouragements to its pursuit', 'A history of European thought in the nineteenth century', 'Incredible sharks', 'Understanding electricity', 'The little MLer', 'On Natural Selection', 'Exploring Mars', 'Mac OS X v.10.3 Panther', 'Owls of the World', 'HTML 4 for Dummies', 'Cats in the Belfry', 'Understanding intelligence', 'Extinction', 'Geosystems', 'Crows and Jays', 'Wonderful Life: The Burgess Shale and the Nature of History', 'The Voyage of the Beagle', 'Molecular Cell Biology', 'The Vitamin Bible', 'Sharing nature with children', 'Perspectives on education and science teaching', 'Select works of John Tyndall', 'Volcanoes', 'Planet Mars', 'The Life of James Clerk Maxwell', 'Sasquatch', 'The white island.', 'Darwiniana', 'Fragments of Science for Unscientific People: A Series of Detached Essays, Lectures And Reviews (1871)', 'A guide for planning a volunteer program for science, mathematics and technology education', 'Orangutan baby', 'The Mathematical Experience', 'Of the advancement and proficience of learning', 'My seven book', 'Science and the human temperament', 'Representation and Invariance of Scientific Structures', 'Last of the Curlews', 'Relatively Speaking', 'Physics', 'The two bookes of Sr Francis Bacon, Of the proficience and advancement of learning, divine and humane', 'In Search of the Person', 'Natural law as controlled but not determined by experiment', 'The Monk in the Garden', 'Mind of the Raven', 'Deep woods', 'Moths of the Limberlost', 'Of the proficience and advancement of learning', 'International scientific activities at selected institutions, 1975-76 and 1976-77', 'Neptune', 'The Spirit Of The Hive', 'Refiguring life', 'JavaScript and DHTML cookbook', 'Materials Science and Engineering', 'Stalking the wild asparagus', 'The powers of chymistry in relation to things visible & invisible, or, A walk through the laboratory of the skies, through the indulgence of the goddess of science', 'Problems of science', 'Evolutionary biology', 'A study of the effectiveness of science radio programmes in the teaching of science to primary six classes in Kiambu District, Kenya', 'Science and life', 'Mac OS 9', 'The correlation and conservation of forces', 'Metaphysical myths, mathematical practice', 'Man and nature in the Renaissance', 'Fads and Fallacies in the Name of Science', 'The Physicists', 'Coming of age in the Milky Way', 'Climbing Mount Improbable', 'Microsoft Access 97 field guide', 'Life-Span Development', 'Salt', 'Ride the wind', 'Voice of the Coyote', 'The practical geologist', "Scientific terms' dictionary", 'Modern science and modern man', 'Destination, Jupiter', 'The scientists speak', 'Rapid development', 'Java foundation classes in a nutshell', 'Minibeasts', 'A history of the warfare of science with theology in Christendom', 'Periodychni vydanni͡a Nat͡sionalʹnoï akademiï nauk Ukraïny, 2001', 'The complete Y2K home preparation guide', 'Windows 95 in a Nutshell', 'Backyard Ballistics', 'Hunter in the snow', 'Far as Human Eye Could See', 'The new world of science', 'General science syllabus', 'Windows 95 exam cram', 'Eight Little Piggies: Reflections in Natural History', 'Silent Spring', 'Building Web database applications with Visual Studio 6', ".NET framework programmer's reference", 'The Common Ground', 'The iMac for dummies', 'The message is the medium', 'Implementation Patterns', 'A brief outline of the history of science', 'World guide to terminological activities', 'My eight book', 'More Macs for dummies', 'Sams teach yourself database programming with Visual Basic 6 in 24 hours', 'Microcomputers in science teaching', 'Greenpeace', 'The eighth day of creation', 'An oration, on the progress of arts and sciences', 'America Online 3 for Macintosh', 'The Visual Display of Quantitative Information', 'A eulogium on the Newtonian philosophy', 'Building artificial knowledge with objects', 'Operating systems', 'A History of Science', 'The optical illusion book', 'Spiders', 'Humphrey the wayward whale', 'First steps in scientific knowledge', 'LabVIEW for Everyone', 'The singing wilderness', 'My little 1 2 3 book', 'The 3-Pound Universe', 'Six discourses delivered before the Royal Society at their anniversary meetings, on the award of the Royal and Copley medals', 'Penrose tiles to trapdoor ciphers', 'Find your future', 'Computer programs that works!', 'JUnit in Action', 'Job surfing', 'Models of scientific development and the case of nuclear magnetic resonance', 'Creating artificial life', 'Philosophical Papers', 'Foundations of probability with applications', 'Science and culture, and other essays', 'Ending Aging: The Rejuvenation Breakthroughs That Could Reverse Human Aging in Our Lifetime', 'In a Patch of Fireweed', 'Effective primary level science teaching in the Philippines', 'Christian Huygens and the development of science in the seventeenth century', 'Muscles', 'Introduction to algorithms', 'Where the Sea Breaks Its Back', 'Deflating Existential Consequence', 'Heads of a course of lectures on natural history', 'Discovery, or, The spirit and service of science', 'Big numbers', 'Factastic book of comparisons', 'First Signals', 'Learning Visual Basic. NET', 'Natural acts', 'Natural law in science and philosophy', 'Introduction to General, Organic and Biochemistry', 'The Brain That Changes Itself', 'Big bugs', 'Death as a Fact of Life', 'Zoo', 'The Forest', 'Inside the Brain', 'The Logic of Scientific Discovery', 'The origin of species by means of natural selection, or, The preservation of favored races in the struggle for life', 'Pocket Ref', 'Welcome to the sea of sand', 'Particles and waves', 'Pinhook', 'Freshwater fish distribution', 'First Science Experiments', 'The Demon-Haunted World', 'Light Years and Time Travel', 'The evolution and classification of flowering plants', 'Longitude: The True Story of a Lone Genius Who Solved the Greatest Scientific Problem of His Time', 'The magic school bus plants seeds', 'Trust in Numbers', 'XML for Dummies', 'Microbiology', 'Environmental Science', 'The ZX81 in science teaching', 'The advent of the algorithm', 'Human Biology', 'Representing and intervening', 'Wild babies', 'Cosmos', 'Gravity', 'Surfing through hyperspace', 'More DOS for dummies', 'Knowledge engineering', 'Supermom', 'The Story of Science in America', 'Birding With a Purpose', 'Careers in science', 'Impossibility', 'The Blue Whale', 'Artificial Intelligence', 'The foundations of science', 'Thinking in C++: vol. 2,  Practical Programming', 'Metchnikoff and the origins of immunology', 'Lay sermons, addresses, and reviews', 'Pacing the Void', 'The ultimate generalization', 'The birth-time of the world and other scientific essays', 'Shark attack almanac', 'Stargazers', 'The Mysteryes of Nature and Art', 'Lonely hearts of the cosmos', 'The Ten Most Beautiful Experiments', 'A brief guide to sources of scientific and technical information', 'The mathematical experience', 'The closed world', 'The science of aliens', 'Relativity simply explained', 'Crow', "It Ain't Necessarily So: How the Media Make and Unmake the Scientific Picture of Reality", 'A history of magic and experimental science', 'Footballs and falling leaves', 'Artificial Experts', 'Imagining the Tenth Dimension', 'Science and scientists in the nineteenth century', 'Real world QuarkImmedia', 'The Old Boot', 'The shaky game', 'Teaching science', 'Guide to sources in Northern California for history of science and technology', 'A Brief History of Time', 'Phenotypic plasticity', 'From magic to science', 'Scary snakes', 'Using HTML 3.2', 'Evolution in Hawaii', 'Genetics', 'The Sleepwalkers', 'Mac OS 9 for dummies', 'Case studies in object-oriented analysis and design', 'Science and human affairs from the viewpoint of biology', 'World Regions in Global Context', 'Eyes on the universe', 'Natural philosophy', 'Icebound Summer', 'Clinical Microbiology Made Ridiculously Simple', 'The great Macintosh Easter egg hunt', 'A shorter history of science', 'The origin of species : complete and fully illustrated', 'An illustrated dictionary of scientific terms', 'Paddle to the Amazon', 'Jolly Green Giant', 'Lightning', 'The Humanizing of Knowledge', 'Seven experiments that could change the world', 'Vultures', 'Reflections on Gender and Science', 'Krakatoa: The Day the World Exploded', 'Francis Crick: Discoverer of the Genetic Code', 'New-Englands rarities discovered', 'Dissertation second, exhibiting a general view of the progress of mathematical and physical science, since the revival of letters in Europe', 'The development of mathematics', 'For Spacious Skies', 'Wholeness and the Implicate Order', 'Microsoft Office v.X for Mac', 'Principles of Anatomy and Physiology', 'The earth manual', 'Diversity Amid Globalization', 'Tigers in the snow', 'The birth and death of the sun', 'Science in Action', 'Practical applications of expert systems', 'Listening to Nature', 'Science on the web', 'The Snow Leopard', 'The order of nature', 'The tiny seed', 'Creating your own AOL web pages', 'Escape velocity', 'The defeat of learned humbugs, and the downfall of all false philosophers, in the nineteenth century, for the good of all mankind, and the Christian Church', 'Tiger-Wallahs', 'A history of science and its relations with philosophy & religion', 'The Best of Beston', 'Teach yourself more Web publishing with HTML in a week', 'Linus Torvalds', 'Exploring the Earth and the Cosmos', 'Intelligent knowledge based systems', 'Adventures with a Texas Naturalist', 'The left hand of creation', 'A short history of natural science', "Tryon's letters upon several occasions", 'The Correspondence of Charles Darwin, Volume 1: 1821-1836', 'The evolution of complexity by means of natural selection', 'Introduction to the physical sciences', 'Hot talk, cold science', 'Access 97 for Windows', 'Fun with your microscope', 'Redesigning Humans', 'Macworld Mac SECRETS', 'Marine biologist', 'Notes from the Holocene', 'The missing factor in science', 'Computers Ltd', 'Introduction to Genetic Analysis', 'The complete HyperCard 2.2 handbook', 'Artificial intelligence for microcomputers', 'The Cutler lectures of Robert Hooke', 'Experiments and Considerations Touching Colours', 'The seven seals of science', 'C++ pointers and dynamic memory management', 'Windows XP home edition', 'Realism and reason', 'The fairyland of science', 'Drink deep, or taste not the Pierian Spring', 'The Human Brain', 'Backyard birds', 'Doubt and certainty', 'Field notes from a catastrophe', 'The Connection Of The Physical Sciences', 'My three book', 'Eye of the Albatross', 'The Problem Of Age, Growth, And Death', 'Ecology, the ascendent perspective', "The Botany of Desire: A Plant's-Eye View of the World", 'Complete guide to vitamins, minerals, nutrients & supplements', 'More HTML for dummies', 'Rattlesnakes', 'Instant Physics', 'The ColdFusion 4.0 Web application construction kit', 'Fundamentals of General, Organic, and Biological Chemistry', 'Big bluestem', 'From the standpoint of a man of science', 'Not by design', 'By this wing', 'Systems Analysis and Design Methods', 'Science, the false messiah', 'The catechism of nature, for the use of children', 'An oration on curiosity, pronounced in the University of Vermont, 24th April, 1810, on induction into office', 'The science book of air', 'Uranus', 'The unknown quantity', 'The Hubble wars', 'The meaning of wilderness', 'The Hairy Book', 'Essays In Science', 'Foundations of Python network programming', 'Limits of Science', "The Hedgehog, the Fox, and the Magister's Pox", 'Integrat͡sii͡a nauki', 'Formalism in AI and computer science', 'The Proficience and Advancement of Learning', 'The recent progress of astronomy', 'The red limit', 'Comme les huit doigts de la main', 'The physical and metaphysical works of Lord Bacon ..', 'The growth of scientific ideas', 'Science of common life', 'Extreme Programming Adventures in C#', 'The cerebral symphony', 'Tiburones fabulosos', 'Techniques of Differential Topology in Relativity', 'Development of the exact sciences in the U.S.S.R', 'Wild Dunedin', 'The Day of the Dinosaur', 'Designing Virtual Worlds', 'The reasons for seasons', 'An Introduction to Celestial Mechanics', 'Nature and Understanding', 'Everyday science', 'A little Java, a few patterns', 'Killer whales', 'Fasciculus Chemicus', 'Principles of Microeconomics', 'Faith in a seed', 'Patterns in evolution', 'Sea turtles', 'Visual Basic 4 performance tuning and optimization', 'Gilbert White', 'Never Cry Wolf', 'Visions', 'Windows performance secrets', 'The attentive heart', 'Animal biomarkers as pollution indicators', 'Microsoft Windows NT 4 expert companion', 'Edge of Objectivity', 'Strange brains and genius', 'Programming Visual Basic .NET', 'Byte wars', 'How seeds travel', 'Windows NT 4 for busy people', 'Pregnenolone', 'Scutellosaurus and other small dinosaurs', 'Frogs, Toads and Turtles', 'Chemistry', 'Dissertation sixth', 'Manual Of The Botany Of The Northern United States', 'Inner Space', 'SafeWare', 'An anagram of ideas on art, form and film', 'Exploring science', 'The Doctrine of Chances', 'Structured Computer Organization', 'Scientific visualization', 'Algorithmic inference in machine learning', 'In Search of the Real Tasmanian Devil', 'Cambridge readings in the literature of science', 'Flatland: A Romance of Many Dimensions', 'Catholic churchmen in science', 'Essential JavaScript for Web professionals', 'Continuing education for scientists', 'Primary Education Project (PEP) of Kenya', 'The Book of Nature', 'Rodents of the World', 'The Story of Modern Science', 'Birdwatching', 'The lost grizzlies', 'Fundamentals of Anatomy & Physiology', 'Artificial intelligence--expert systems', 'The Selfish Gene', 'The universe in a handkerchief', 'FRM', 'The enchanted braid', 'Science, Order, and Creativity', 'Weather', 'My dog Tulip', 'Getting started with MATLAB', 'Artificial intelligence', 'The Fringe of the Unknown', 'Shadows of the Mind', 'Hexaflexagons and other mathematical diversions', 'Thinking in complexity', 'Smoky the Cowhorse', 'Hatteras journal', 'Advanced Win32 Programming', "Evaluation of the American Association for the Advancement of Science's Project 2061", 'Atomic shield, 1947/1952', 'Your year 2000 survival guide', 'Building large knowledge-based systems', 'Asa Gray, American Botanist, Friend of Darwin', 'Funny bones', 'IMac for Dummies', 'The Theory of Evolution', 'Towards a theory of cognition and computing', 'Magic, reason and experience', 'Falling in Love', 'The ColdFusion 5 Web application construction kit', 'Randomized Algorithms', 'The BBC microcomputer in science teaching', 'A short history of science', 'The logic of knowledge bases', 'Rivers for Life', 'On the revolutions', 'Fundamentals of Engineering Thermodynamics', 'Right Where You Are Sitting Now', 'Travels in China', 'Earth', 'Ralph Waldo Gerard, citizen of science', 'Applied science for metal and wood workers', 'Pamphlets by and about Paul Bert', 'The Art of Computer Programming', 'Bathtub science', 'Electric Universe: The Shocking True Story of Electricity', 'The Story of Science', 'Keys to infinity', 'Extreme Programming Explained', 'The Nest', 'Galaxies', 'RealAge', 'The Making of the Atomic Bomb', 'Dinosaurs at the ends of the earth', 'The amazing human body', 'The Windows 95 black box', 'Certified Macromedia Coldfusion MX 7', 'The Quiet Limit of the World', 'Science and the new civilization', 'Accent on form', 'Lehninger principles of biochemistry.', 'Einstein in Love: A Scientific Romance', 'The End of Science: Facing the Limits of Knowledge in the Twilight of the Scientific Age', 'Big bang', 'My five book', 'Mathematics and physical science in classical antiquity', 'Illustrated computer dictionary for dummies', 'Science and Sanity', 'Lotus in the lab', 'Autonomous learning from the environment', 'Flowers and showers', 'The Man Who Loved China', 'The Evolutionist At Large', 'Hyenas', 'The impact of science and society', 'My little color book', 'Makers of science', 'The Pleasure of Finding Things Out: The Best Short Works of Richard Feynman', 'Earth Science', 'Distributed systems: Principles and Paradigms', 'The march of mind', 'Slithering Snakes', 'Mental Improvement', 'The wisdom of God manifested in the works of the creation', 'Collected papers of Sir James Dewar', 'Wild life in a Southern county', 'The universe that discovered itself', 'Amazing bats', 'Neural networks and qualitative physics', 'The Manhattan Project', 'Dissertation second', 'The web of life', 'The Ape-Man Within', "Guidelines for a generalized science curriculum generated by an East African educators' survey", 'iWoz: Computer Geek to Cult Icon - How I Invented the Personal Computer, Co-Founded Apple, and Had Fun Doing It', 'Plants of prey', 'The Chinese Academy of Sciences', 'Higher education science and technology', 'Mycomedicinals', 'Tall blondes', '1-2-3 for scientists and engineers', 'Ring of bright water', 'Science and Social Change, 1700-1900', 'Pivotal figures of science', 'The Secret of the Universe', 'The grammar of science', 'The Thermal Warriors', 'Spring across America', 'New Zealanders and science', 'On the improvement of society by the diffusion of knowledge, or, An illustration of the advantages which would result from a more general dissemination of rational and scientific information among all ranks', 'The Hungry Scientist Handbook', 'The science gap', 'Professional software development', 'Inconsistent mathematics', 'Pleasant ways in science', 'Opening scientific literacy for all', 'A report on the status of science and technology in Botswana, and recommendations for their improvement', "The Panda's Thumb: More Reflections in Natural History", 'Fight Global Warming Now', 'Olivia Counts', 'The Sceptical Chymist', 'The watercolors for The birds of America', 'Mapping Human History', 'Mercury', 'HTML by example', 'Round River', 'Neyman', 'The book of Yaak', 'Gulls Gulls Gulls', 'Comets', 'Smalltalk best practice patterns', '12 Ways to Get to 11', 'Philosophy of Arithmetic', 'MAC OS8 for dummies', 'Anatomy And Physiology', 'Gavin Maxwell', 'Math mini-mysteries', 'Secure coding in C and C++', 'Introduction to Algebra', 'Pale Blue Dot', 'Crossing Over: Where Art and Science Meet', 'Blue meridian', 'Science since Babylon', 'The sun is my favorite star', 'Genius', 'Where Rolls The Oregon', 'Science and human experience', 'Two thousand years of science', 'The Throwing Madonna', 'A bibliography of translations from Mainland Chinese periodicals in Chemistry, general science and technology published by united States Join Publications Research Service, 1957-1966', 'Grizzly bear', 'Biochemistry', 'Mr. Tompkins in paperback', 'The moon book', 'The social relations of science', 'The colossal book of short puzzles and problems', 'Guerrilla Capacity Planning', 'The Formation of the Scientific Mind', 'An exploratory study on the cultural relevance of science instructional materials', 'The Perfect Storm', 'The song of the dodo', '1 hunter', 'Wild fruits', 'The Structure and Distribution of Coral Reefs', 'Outside and inside alligators', 'The beginnings of Western science', 'The Giant Book of the Human Body', 'Discovering graph secrets', 'Earth in Upheaval', 'The Wall Street journal book of personal technology', 'Reading the forested landscape', 'Gay Neck, the Story of a Pigeon', 'A provisional list of scientific societies in Japan', 'Micrographia', 'World Regional Geography', 'Listening in the Dark', 'Network security', 'The River of the Mother of God', 'The Jew in science', 'Science and the common understanding', 'The presence of the past', 'Earth Evolution And Its Facial Expression', 'Out of my later years', 'My nine book', 'MCSE NT Server 4 in the enterprise exam cram', 'Science & labour', 'Programming in Visual Basic.NET', 'Sams teach yourself Perl in 21 days', 'Science in Arcady', 'Running MS-DOS', 'On The Revolutions of Heavenly Spheres', 'Dictionary of science and technology', 'The Frankenstein syndrome', 'The Beast That Walks Like Man', 'Kicking the sacred cow', 'Science and the modern world', 'The search for E.T. Bell', 'Manual of Determinative Mineralogy', 'Hispanics, engineering, and the sciences', 'Philosophia Britannica', 'Miserable Miracle', 'Mind matters', 'The principle of uniformity in geology, biology, and theology', 'Survival of the Sickest', 'A Brief Retrospect of the Eighteenth Century', 'Wings of Fire', 'The individual in the animal kingdom', 'Dr. Mac', 'An Introduction To Practical Astronomy', 'The tiger in the house', 'Design for Emergence', 'Postgraduate science and technology education in LDCs', 'Giant pandas', 'Volcano Adventure', 'Principles of condensed matter physics', 'Dynamic HTML', 'al-Bīrūnī', 'Teach yourself ActiveX control programming with Visual Basic 5 in 21 days', 'Mastering AI tools and techniques', 'Pilgrim at Tinker Creek', 'Icaro, O, El Futuro de La Ciencia', 'Some theoretical considerations and experiences related to research and development in the teaching of mathematics and science', 'Saturn', 'French science and its principal discoveries since the seventeenth century', 'Garden of microbial delights', 'Desert quartet', 'Trail Blazers of Science', 'Wind', 'Beastly Bugs', 'Whales, Dolphins and Porpoises', 'My body, your body', 'The Collected Papers of Albert Einstein, Volume 1: The Early Years: 1879-1902', 'First Light', 'FrontPage 98 exam cram', 'Microsoft certified systems engineer.', 'The rural life', 'The Discovery of Insulin', 'The nature of the physical world', 'Written In Stone', 'Software design and data structures in Turbo Pascal', 'The Body has a Mind of Its Own', 'Sociology of development and philosophy of science', 'Chapters On Animals', 'Desert Solitaire', 'Instrumental biology, or, The disunity of science', 'Science and technology in Canadian history', 'Zebras', 'The Reluctant Mr. Darwin', 'The logic of science', 'Lure and Romance of Alchemy', 'Science and engineering education', 'Exercitatio Anatomica de Motu Cordis et Sanguinis in Animalibus', 'Magic universe', 'The effect of a science simulation game on cognitive learning retention and affective reaction', 'Only a Trillion', 'Copernicusʹs originality', 'On Lisp', 'Biology of plants', 'Of time and place', 'The development of physics in Meiji Japan, 1868-1912', 'The master key', 'Wild Central', 'Dignifying science', 'Modern physical science', 'Gian-Carlo Rota on combinatorics', 'The Ideas of Biology', 'Windows NT 4 for dummies', 'The metaphorical brain 2', 'Axiomatic set theory', 'The Unexpected Hanging And Other Mathematical Diversions', 'Science and thought in the fifteenth century', 'Advanced BASIC scientific subroutines', 'Applied Cryptography', 'FORTRAN 77 for engineers and scientists', 'Creepy, Crawly Baby Bugs', 'Essays on Philosophical Subjects', 'Problems of relative growth', 'Quantum Self', 'The Blind Watchmaker', 'Java examples in a nutshell', 'The ctaechism [sic] of nature, for the use of children', 'The Natural history essays', 'Wissenschaft und Forschung in der Bundesrepublik Deutschland', 'Neuroscience', 'Basic category theory for computer scientists', 'The Einstein delusion and other essays', 'The history of the belles lettres and of arts and sciences', 'New Fragments', 'Mac OS X Panther edition', 'Elementary general science', 'The Catlins and the Southern Scenic Route', 'Shadow of the bear', 'A formative evaluation of the unified science and mathematics in the elementary schools curriculum', 'College science laboratory practices', 'What the Dormouse Said', 'The C++ Programming Language', 'DOS for dummies Windows 95 edition', 'Wonders of Numbers', 'Psilocybin mushrooms of the world', 'Programming in Mathematica', 'Practical Physics', 'Darwin', 'Learning Perl', 'Mac OS X v. 10.2 Jaguar Killer Tips', 'The Discovery of Global Warming', 'Lectures delivered in connection with the dedication of the Graduate college of Princeton university in October, 1913', 'Science in the Federal Government', 'The saga of Ring of bright water', 'Outside and Inside Birds', 'Algorithmics', 'Cambridge guide to stars and planets', 'Mathematica for the sciences', 'Essential Einstein', 'The essence of artificial intelligence', 'The Cartoon Guide to Physics', 'Icarus, or, The future of science', 'Primer of Applied Regression & Analysis of Variance', 'Evolution and the Theory of Games', 'Middle and secondary science', 'The River That Flows Uphill', 'Science as social knowledge', 'The mission of the scientist, [microform]', 'The great physicists from Galileo to Einstein', 'The positive sciences of the ancient Hindus', 'Learning and generalisation', 'Motor Learning And Control', 'The Song of the Cardinal', 'True tales of birds and beasts', 'Rethinking cognitive computation', 'Exploring the universe', 'Teaching modern science', 'AppleScript', 'The Newtonian system of philosophy', 'Animal fact/animal fable', 'I knew two who said moo', 'Brave new worlds', 'Expert systems and applied artificial intelligence', 'New mathematical diversions', 'The complete how to figure it', 'Gorilla walk', 'Weather forecasting', 'Growing up wild', 'EXP, the font development kit', 'Fundamentals of Electromagnetic Phenomena', 'The Science of Leonardo', 'The Feynman Lectures on Physics', 'Shorebirds', 'The life of Benjamin Banneker', 'Gravity and levity', 'Wild Voice Of The North', 'The emergence of probability', 'Selected journals and other writings', 'The Kingdom Of Man', 'Stargazers and Gravediggers', 'One child, one seed', "Child's Book of Nature", 'Unidentified flying objects and extraterrestrial life', 'After the Earth quakes', 'The naked eye', 'Bones', 'Guide to the records relating to science and technology in the British Public Record Office', 'Cicada sing-song', 'Growth and Development', 'Realms, Regions and Concepts', 'Game Design Workshop', 'Birds of Prey', 'JUnit recipes', 'The unexpected universe', 'The wonders of science in modern life', 'My six book', 'Microsoft Works Suite 99 at a glance', 'Space, time and geometry.', 'Getting to Know ArcGIS Desktop', 'Animals in translation', 'Faster: The Acceleration of Just About Everything', 'AI theory and applications inthe VAX environment', 'An oration on science', 'The Tao of Physics', 'Measurement of growth in science by students experiencing various curricular patterns over a twelve year period', 'Artificial Intelligence and Expert Systems', 'Saltopus and other first dinosaurs', 'Time Bomb 2000', 'Prehistoric animals', 'An Urchin in the Storm: Essays About Books and Ideas', 'Of Moths and Men: Intrigue, Tragedy & The Peppered Moth', 'Macromedia Coldfusion MX Web application construction kit', 'The poetry of science, or, Studies of the physical phenomena of nature', 'Somnium', 'From so simple a beginning', 'The great arc', 'Science and the social resposibility of natural scientists', 'To See Every Bird on Earth', "Britain's heritage of science", 'Paradigms of Artificial Intelligence Programming', 'On Being a Machine', 'The Born-Einstein Letters', 'Science education and behavioral technology', 'Our physical world'}
            Answers = 1585, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.071s]
          Answers = 1585, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.071s]
        Checking schema 54 / 114: {
          [('Main', '==', 'm.06mq7', ['people.profession.specialization_of'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:people.profession.specialization_of ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:people.profession.specialization_of ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Scientist'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 55 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.journals_in_this_discipline'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:education.field_of_study.journals_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:education.field_of_study.journals_in_this_discipline ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 8
            Final Answer: {'Annals of the New York Academy of Sciences', 'PLOS ONE', 'Le Scienze', 'Histoire des sciences médicales', 'Journal of Indigenous Studies', 'International Journal of Bifurcation and Chaos', 'Perspectives in Biology and Medicine', "Comptes rendus de l'Académie des sciences"}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.009s]
        Checking schema 56 / 114: {
          [('Main', '==', 'm.06mq7', ['internet.website_category.sites'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:internet.website_category.sites ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:internet.website_category.sites ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 3
            Final Answer: {'arXiv', 'Futurity', 'Web of Science'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 57 / 114: {
          [('Main', '==', 'm.06mq7', ['broadcast.genre.content'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:broadcast.genre.content ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:broadcast.genre.content ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 198
            Final Answer: {'Joy!Cast', 'Radio Lab', '60-Second Psych', 'PeerView CME/CE Audio Podcast - Endocrinology', 'Choice Chat for Choice Moms', 'National Geographic News', 'PeerView CME/CE Audio Podcast - Rheumatology', 'Hypnotherapy Podcast', 'KunstlerCast', 'PeerView CME/CE Video Podcast - Nephrology', 'PeerView CME/CE Audio Podcast - Urology', 'PeerView CME/CE Video Podcast - AIDS/HIV', 'Diggnation - Podcast Feed', "KQED's Pacific Time", 'Take One Step for a Healthy Heart - companion podcast | PBS', 'TERRA: THE NATURE OF OUR WORLD', 'Kinetic City Super Crew', 'Fitness Rocks', 'Rice University Events Podcasts', 'PeerView CME/CE Video Podcast - Cardiology', '60-Second Science', 'PeerView CME/CE Audio Podcast - Hepatic/BiliaryDisorders', 'PeerView CME/CE Audio Podcast - Cardiology', 'Medri Vodcast: Neonatologija', 'PeerView CME/CE Video Podcast - Hematology', 'National Geographic Minutes', 'Mental Health Missives', 'PeerView CME/CE Video Podcast - Pathology', 'Science On The Wild Side Podcast', 'Forum', 'MPR - My Public Radio', 'HerbalEd.org Podcast', 'Useless Information Podcast', "HD - NASA's Jet Propulsion Laboratory", 'Star Stuff', 'The Way of Reason - An Infidel Guy Production', 'RTÉ - Mind Matters', 'RFUMS Class Recordings', 'Surgery ICU Rounds Podcast', 'TED Talks (video)', 'NPR: On Health', 'NEJM This Week', 'NOVA E = mc2 | PBS', 'MicrobeWorld Radio', 'Ask the Podcast Doctor', 'PeerView CME/CE Audio Podcast - Immunology', 'Brain Bites Ask NASA', 'CBC Radio: Quirks & Quarks Segmented Show', 'One on One', 'NOVA Vodcast | PBS', 'Kryptographik', "The Skeptics' Guide to the Universe", 'Brains Matter', 'the Brain Science Podcast with Dr. Ginger Campbell', 'PetSpeak', 'Good Dog', 'PeerView CME/CE Audio Podcast - Gynecology/Obstetrics', 'PeerView CME/CE Audio Podcast - Ophthalmology', 'Hubblecast HD', 'Science Friday', '- The Naked Scientists Naked Science Radio Show PODCAST - Stripping Down Science', 'WebbAlert', 'Science Elements', 'Futures in Biotech', 'The Nursing Show: News, Tips, and Commentary for Nurses and Students', 'CBS Technology Podcast - Larry Magid', '.', 'CMEcorner2go: Asthma and COPD', 'NASACast: This Week @NASA Audio', 'Empowering Your Health', 'PeerView CME/CE Audio Podcast - Infectious Diseases', 'PeerView CME/CE Video Podcast - Oncology', 'PeerView CME/CE Audio Podcast - Neurology', 'CNN: Paging Dr. Gupta (video)', 'The Science Show', 'BrainStuff: The HowStuffWorks Podcast', 'Peerview CME/CE Video Podcast - Pulmonology', 'Mysterious Universe', 'New York Times: Science Times', 'NASAcast: Space Shuttle and Space Station Video', 'Airspeed', 'The Antipodean Podcast', 'The Winter Maintenance Podcast - A Podcast supporting transportation winter maintenance', 'bayblab Podcast', 'MedicCast:  News and Training for EMT and Paramedic medical professionals.', 'PeerView CME/CE Audio Podcast - Nephrology', 'JournalJunkie.com: Podcast of Audio Medical Abstracts', 'The Eclectic Review', 'NASACast: Universe Video', 'All in the Mind', 'Experiment of the Week', 'Tekzilla', 'MAKE Magazine', 'PeerView CME/CE Audio Podcast - Gastroenterology', 'National Geographic Video Shorts', 'The View from the Quad', 'NASAcast: Solar System Video', 'Encouraging Motivation in the Classroom', 'The Robert Scott Bell Show', 'Peerview CME/CE Video Podcast - Ophthalmology', 'The History Channel: Just Another Day', 'PeerView CME/CE Audio Podcast - AIDS/HIV', 'Intellectual Icebergs', 'Wild Chronicles', 'PeerView CME/CE Video Podcast - Endocrinology', 'Absolute Science', '""Los Amantes de Urania""', 'Peerview CME/CE Audio Podcast - Internal Medicine', "NSTA's Lab Out Loud", 'Shark Task Force', 'PeerView CME/CE Video Podcast - Geriatrics', 'Peerview CME/CE Video Podcast - Internal Medicine', "Ockham's Razor", 'NOVA scienceNOW', 'PBS & NPR Forum Network | Public Domain', 'PhysLink.com Science Podcast', 'Life Lines - The Podcast of The American Physiological Society', '- The Naked Scientists Naked Science Radio Show ENHANCED PODCAST - Stripping Down Science', 'Sorting out Science', "KQED's Perspectives", 'Science on Mornings, on triple j', 'PeerView CME/CE Audio Podcast - Pulmonology', 'EERIE Radio', 'Boards of Pharmacy Against Counterfeit Drugs', "goodfeeling's Podcast", 'Astronomy Cast', 'PeerView CME/CE Audio Podcast - Primary Care', 'Science in Action', '60 Second Science Video Podcast', 'Interview With A Psychiatrist: Slavery Today In The U.S.A.', 'PeerView CME/CE Audio Podcast - Pathology', 'NASAcast: Exploration Video', 'Peerview CME/CE Video Podcast - Rheumatology', 'OSA Podblog', 'Health Report', 'Canine Campus', 'PeerView CME/CE Audio Podcast - Geriatrics', 'The Missing Link', 'Changkhui: Chang Khui Kab Mor', 'DentalCast - Video Only', 'NPR: Environment', 'The Sounds of Science from the National Academies', 'The Wonderful World of Science', 'Discovery Channel Video Podcasts', 'de Volkskrant Kenniscafe', "NASA's Jet Propulsion Laboratory Video and Audio Podcasts", 'The Future And You', 'Focus on Autism', 'Podding Linnaeus', 'PeerView CME/CE Audio Podcast - Hematology', 'Psoriasis Cure Now Podcasts', 'NOVA | PBS', 'Science @ NASA Feature Stories Podcast', 'RTÉ - Into the Deep', 'PeerView CME/CE Audio Podcast - Oncology', 'PeerView CME/CE Video Podcast - Hepatic and Biliary Disorders', 'PeerView CME/CE Video Podcast - Neurology', 'Institute for Research and Innovation in Social Services Podcast', 'Skepticality - Science and Revolutionary Ideas', 'Peerview CME/CE Video Podcast - Gastroenterology', 'MAKE Magazine: MAKE Podcast', 'PeerView CME/CE Audio Podcast - Psychiatry', 'Dick Dynamo the 5th Dimensional Man', 'NASAcast: This Week @ NASA Video', 'More or Less', 'Pulse of the Planet Podcasts', 'PeerView CME/CE Video Podcast - Psychiatry', 'Tech Talk With Craig Peterson', 'NBC29.com Podcasts', 'Diabetes and You', 'PolarTREC Podcasts', 'Berkeley Groks - Science Show Podcast', 'Afropop Worldwide', 'physics - meaghersclasses', 'Skeptic', 'APM: Future Tense', 'The Medical Minute', 'Science Talk: The Podcast of Scientific American', 'DentalCast - Audio Only', 'Elder Law Today Podcast', 'As Seen From Here', 'Rice University Events Video Podcasts', 'NPR: Justice Talking', 'The Jodcast - astronomy podcast', 'The Best of National Geographic Magazine', 'National Geographic World Talk', 'PeerView CME/CE Video Podcast - Urology', 'Jean-Michel Cousteau: Ocean Adventures . Podcasts | PBS', 'Monterey Bay Aquarium\'s ""Aquarium of the Air""', 'The Unsayable Podcast', 'Australian Family Physician audio', 'loschuecos.com', 'Universe Today', 'Quirks & Quarks', 'StarTalk', 'Hollow Hill podcasts', 'This Week in Science - The Kickass Science Podcast'}
            Answers = 197, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.026s]
          Answers = 197, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.026s]
        Checking schema 58 / 114: {
          [('Main', '==', 'm.06mq7', ['base.rivalries.rival.rivals'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.rivalries.rival.rivals ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Creation and evolution in public education'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 59 / 114: {
          [('Main', '==', 'm.06mq7', ['tv.tv_subject.tv_programs'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:tv.tv_subject.tv_programs ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:tv.tv_subject.tv_programs ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 2
            Final Answer: {'The Elegant Universe', 'Scientific Tuesdays'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 60 / 114: {
          [('Main', '==', 'm.06mq7', ['media_common.literary_genre.stories_in_this_genre'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.literary_genre.stories_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.literary_genre.stories_in_this_genre ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Runaround'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 61 / 114: {
          [('Main', '==', 'm.06mq7', ['base.webvideo.internet_video_genre.series'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.webvideo.internet_video_genre.series ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.webvideo.internet_video_genre.series ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 2
            Final Answer: {'Leadership Stage', 'Nature Hates You'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 62 / 114: {
          [('Main', '==', 'm.06mq7', ['user.narphorium.default_domain.profession.job_titles'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.narphorium.default_domain.profession.job_titles ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.narphorium.default_domain.profession.job_titles ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Scientist'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 63 / 114: {
          [('Main', '==', 'm.06mq7', ['radio.radio_subject.programs_with_this_subject'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:radio.radio_subject.programs_with_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:radio.radio_subject.programs_with_this_subject ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 10
            Final Answer: {'We March with Faith', 'Science Editor', 'Human Adventure', 'The Wonderful World of Science', 'One on One', 'The DNA Files', 'Quirks & Quarks', 'StarTalk', 'Kinetic City Super Crew', 'Science Story'}
            Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 10, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 64 / 114: {
          [('Main', '==', 'm.06mq7', ['user.narphorium.default_domain.profession.specializations'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.narphorium.default_domain.profession.specializations ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.narphorium.default_domain.profession.specializations ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 6
            Final Answer: {'Physics', 'Geology', 'Biology', 'Geography', 'Computer Science', 'Chemistry'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 65 / 114: {
          [('Main', '==', 'm.06mq7', ['base.ikariam.ikariam_research_category.researches'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.ikariam.ikariam_research_category.researches ?o1 . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:base.ikariam.ikariam_research_category.researches ?o1 . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 14
            Final Answer: {'Well Digging', 'Cultural Exchange', "Bird's Flight", 'Pressure Chamber', 'Anatomy', 'Espionage', 'Letter Chute', 'Paper', 'Ink', 'The Archimedic Principle', 'Glass', 'Scientific Future', 'Mechanical Pen', 'Invention'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 66 / 114: {
          [('Main', '==', 'm.06mq7', ['media_common.literary_genre.books_in_this_genre']), ('Entity', '==', 'm.03s9v', ['book.written_work.author'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.literary_genre.books_in_this_genre ?o1 . ?o1 fb:book.written_work.author fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:media_common.literary_genre.books_in_this_genre ?o1 . ?o1 fb:book.written_work.author fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Philosophiæ Naturalis Principia Mathematica'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 67 / 114: {
          [('Main', '==', 'm.06mq7', ['book.book_subject.works']), ('Entity', '==', 'm.03s9v', ['book.written_work.author'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.author fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:book.book_subject.works ?o1 . ?o1 fb:book.written_work.author fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 3
            Final Answer: {'Arithmetica Universalis', 'Opticks', 'Philosophiæ Naturalis Principia Mathematica'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 68 / 114: {
          [('Main', '==', 'm.06mq7', ['people.profession.specialization_of']), ('Entity', '==', 'm.03s9v', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:people.profession.specialization_of ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:people.profession.specialization_of ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Scientist'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.017s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.017s]
        Checking schema 69 / 114: {
          [('Main', '==', 'm.06mq7', ['user.narphorium.default_domain.profession.job_titles']), ('Entity', '==', 'm.03s9v', ['people.profession.people_with_this_profession'])]
          var_types: None
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.narphorium.default_domain.profession.job_titles ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.06mq7 fb:user.narphorium.default_domain.profession.job_titles ?o1 . ?o1 fb:people.profession.people_with_this_profession fb:m.03s9v . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Scientist'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 70 / 114: {
          [('Main', '==', 'm.02q6gzw', ['internet.website.owner_new', 'internet.website_ownership.website'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02q6gzw fb:internet.website.owner_new ?o1 . ?o1 fb:internet.website_ownership.website ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02q6gzw fb:internet.website.owner_new ?o1 . ?o1 fb:internet.website_ownership.website ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02q6gzw'}
            Query return lines = 1
            Final Answer: {'Science Daily'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.032s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.033s]
        Checking schema 71 / 114: {
          [('Main', '==', 'm.02q6gzw', ['base.schemastaging.entity_hint.corresponds_to', 'base.schemastaging.corresponding_entity.entities'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02q6gzw fb:base.schemastaging.entity_hint.corresponds_to ?o1 . ?o1 fb:base.schemastaging.corresponding_entity.entities ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02q6gzw fb:base.schemastaging.entity_hint.corresponds_to ?o1 . ?o1 fb:base.schemastaging.corresponding_entity.entities ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02q6gzw'}
            Query return lines = 2
            Final Answer: {'ScienceDaily LLC'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.024s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.024s]
        Checking schema 72 / 114: {
          [('Main', '==', 'm.02q6gzw', ['internet.website.owner_new', 'internet.website_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02q6gzw fb:internet.website.owner_new ?o1 . ?o1 fb:internet.website_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.02q6gzw fb:internet.website.owner_new ?o1 . ?o1 fb:internet.website_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.02q6gzw'}
            Query return lines = 1
            Final Answer: {'ScienceDaily LLC'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 73 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1703'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 74 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'President'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 75 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Bachelor of Arts', 'M.A.'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 76 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 3
            Final Answer: {'1668', '1665', '1661'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.004s]
        Checking schema 77 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.places_lived', 'people.place_lived.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 78 / 114: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.from'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.from ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'1703', '1691'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 79 / 114: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.role'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.role ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'President of the Royal Society'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 80 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.sibling_s', 'people.sibling_relationship.sibling'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.sibling_s ?o1 . ?o1 fb:people.sibling_relationship.sibling ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 4
            Final Answer: {'Mary Smith', 'Hannah Smith Pilkington', 'Benjamin Smith'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 81 / 114: {
          [('Main', '==', 'm.03s9v', ['organization.organization_member.member_of', 'organization.organization_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 82 / 114: {
          [('Main', '==', 'm.03s9v', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.owner'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.owner ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 83 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }
          [2020-12-03 14:28:01] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1727'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 84 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.places_lived', 'people.place_lived.location'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'England'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 85 / 114: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Royal Society', 'Priory of Sion'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 86 / 114: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.to'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.to ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1727'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 87 / 114: {
          [('Main', '==', 'm.03s9v', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 88 / 114: {
          [('Main', '==', 'm.03s9v', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 89 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.person'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.person ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 90 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.employment_history', 'business.employment_tenure.company'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.employment_history ?o1 . ?o1 fb:business.employment_tenure.company ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'University of Cambridge', 'Royal Society'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.018s]
        Checking schema 91 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Trinity College, Cambridge', "The King's School, Grantham"}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 92 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 93 / 114: {
          [('Main', '==', 'm.03s9v', ['people.person.education', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.03s9v fb:people.person.education ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'1661'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.004s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 94 / 114: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.member'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.member ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Isaac Newton'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 95 / 114: {
          [('Main', '==', 'm.03s9v', ['business.board_member.organization_board_memberships', 'organization.organization_board_membership.title'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:business.board_member.organization_board_memberships ?o1 . ?o1 fb:organization.organization_board_membership.title ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 96 / 114: {
          [('Main', '==', 'm.03s9v', ['organization.organization_member.member_of', 'organization.organization_membership.organization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:organization.organization_member.member_of ?o1 . ?o1 fb:organization.organization_membership.organization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Royal Society'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 97 / 114: {
          [('Main', '==', 'm.03s9v', ['base.famouspets.pet_owner.pets_owned', 'base.famouspets.pet_ownership.pet'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:base.famouspets.pet_owner.pets_owned ?o1 . ?o1 fb:base.famouspets.pet_ownership.pet ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 1
            Final Answer: {'Diamond'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 98 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.degree'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.degree ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 6
            Final Answer: {"Bachelor's degree", 'Bachelor of Science', 'Associate degree', 'Honorary degree', 'Bachelor of Arts', 'Master of Science'}
            Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 6, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 99 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.end_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.end_date ?o2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.end_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 8
            Final Answer: {'2009', '1985', '2001', '1911', '1978', '1976', '2005', '1967'}
            Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 8, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Current: 100 / 114
        Checking schema 100 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.specialization'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.specialization ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Technology'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.012s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.012s]
        Checking schema 101 / 114: {
          [('Main', '==', 'm.06mq7', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.taxonomy'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.taxonomy ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Library of Congress Classification'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.018s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 102 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.major_field_of_study'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 4
            Final Answer: {'Economics', 'Education', 'Mathematics'}
            Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 3, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 103 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.minor'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Mathematics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.014s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.014s]
        Checking schema 104 / 114: {
          [('Main', '==', 'm.06mq7', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.high'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.high ?o2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'385'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.016s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.016s]
        Checking schema 105 / 114: {
          [('Main', '==', 'm.06mq7', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.ontology'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.ontology ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'OpenCyc'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.020s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.020s]
        Checking schema 106 / 114: {
          [('Main', '==', 'm.06mq7', ['base.ontologies.ontology_instance.equivalent_instances', 'base.ontologies.ontology_instance_mapping.freebase_topic'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:base.ontologies.ontology_instance.equivalent_instances ?o1 . ?o1 fb:base.ontologies.ontology_instance_mapping.freebase_topic ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.021s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.021s]
        Checking schema 107 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.institution'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.institution ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 14
            Final Answer: {'Tokubetsu Kagaku Gakkyu', 'ITI E. Alessandrini of Vittuone (Milan)', 'University of Arizona', 'King Edward Medical University', 'Clarkson University', 'Meerut College', 'Chalmers University of Technology', 'Corning Community College', 'Georgetown University', 'New York University', 'Government College at Ropar', 'Bates College', 'University of Canterbury', 'Valparaiso University'}
            Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.019s]
          Answers = 14, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.019s]
        Checking schema 108 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.student'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.student ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 13
            Final Answer: {'Anote Tong', 'Ayman Hariri', 'Kanshi Ram', 'Jūzō Itami', 'David B. Snow Jr.', 'Claudio Rava', 'Javaid I. Sheikh', 'Eileen Collins', 'Hans C. Bjornsson', 'Dean Kamen', 'Kushal Pal Singh', 'Lowell Thomas', 'Deborah H Gruenfeld'}
            Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.015s]
          Answers = 13, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.015s]
        Checking schema 109 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.start_date'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.start_date ?o2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.start_date ?o2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'2000'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 110 / 114: {
          [('Main', '==', 'm.06mq7', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.subject'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.subject ?o2 . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'Science'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.013s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.013s]
        Checking schema 111 / 114: {
          [('Main', '==', 'm.06mq7', ['user.tsegaran.random.taxonomy_subject.entry', 'user.tsegaran.random.taxonomy_entry.low'])]
          var_types: None
          SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 WHERE { fb:m.06mq7 fb:user.tsegaran.random.taxonomy_subject.entry ?o1 . ?o1 fb:user.tsegaran.random.taxonomy_entry.low ?o2 . }|None|||None||None
            Forbidden mid: {'m.06mq7'}
            Query return lines = 1
            Final Answer: {'1'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.006s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.006s]
        Checking schema 112 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.major_field_of_study']), ('Entity', '==', 'm.03s9v', ['education.field_of_study.academics_in_this_field'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:education.field_of_study.academics_in_this_field fb:m.03s9v . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.major_field_of_study ?o2 . ?o2 fb:education.field_of_study.academics_in_this_field fb:m.03s9v . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Mathematics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 113 / 114: {
          [('Main', '==', 'm.06mq7', ['education.field_of_study.students_majoring', 'education.education.minor']), ('Entity', '==', 'm.03s9v', ['education.field_of_study.academics_in_this_field'])]
          var_types: None
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:education.field_of_study.academics_in_this_field fb:m.03s9v . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.06mq7 fb:education.field_of_study.students_majoring ?o1 . ?o1 fb:education.education.minor ?o2 . ?o2 fb:education.field_of_study.academics_in_this_field fb:m.03s9v . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.06mq7', 'm.03s9v'}
            Query return lines = 1
            Final Answer: {'Mathematics'}
            Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 1, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        108 / 114 coarse schemas kept with ans_size > 0.
      } [1.506s]
      Coarse level ended, resulting in 108 schemas.
    } [3.715s]
    Type level searching (total types = 10): {
      Current: 0 / 108
[{'type.datetime'}]
[{'location.country'}]
[{'people.person'}]
[{'religion.religion'}]
[{'location.location'}]
[{'people.place_of_interment'}]
[{'law.invention'}]
[{'education.academic'}]
[{'base.kwebbase.kwconnection'}]
[{'base.eating.diets'}]
[{'influence.influence_node'}]
[{'symbols.namesake'}]
[{'book.book_edition'}]
[{'media_common.quotation'}]
[{'education.field_of_study'}]
[{'base.kwebbase.kwsentence'}]
[{'influence.influence_node'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.gender'}]
[{'location.location'}]
[{'type.datetime'}]
[{'music.composition'}]
[{'book.written_work'}]
[{'fictional_universe.fictional_character'}]
[{'base.kwebbase.kwconnection'}]
[{'visual_art.artwork'}]
[{'base.rivalries.rivalry'}]
[{'base.argumentmaps.original_idea'}]
[{'food.diet'}]
[{'type.property'}]
[{'book.written_work'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'people.profession'}]
[{'base.skosbase.skos_concept'}]
[{'education.field_of_study'}]
[{'media_common.quotation'}]
[{'book.periodical'}]
[{'book.book'}]
[{'tv.tv_program'}]
[{'film.film'}]
[{'people.person'}]
[{'organization.organization'}]
[{'award.award_category'}]
[{'base.database.database'}]
[{'media_common.netflix_title'}]
[{'user.alexander.philosophy.philosopher'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'book.journal'}]
[{'internet.website'}]
[{'broadcast.content'}]
[{'base.rivalries.rivalry'}]
[{'tv.tv_program'}]
[{'book.short_story'}]
[{'base.webvideo.internet_video_series'}]
[{'user.narphorium.default_domain.job_title'}]
[{'radio.radio_program'}]
[{'user.narphorium.default_domain.profession'}]
[{'base.ikariam.ikariam_research'}]
[{'book.book'}]
[{'book.written_work'}]
[{'people.profession'}]
[{'user.narphorium.default_domain.job_title'}]
[{'internet.website_ownership'}, {'internet.website'}]
[{'base.schemastaging.corresponding_entity'}, {'base.schemastaging.entity_hint'}]
[{'internet.website_ownership'}, {'internet.website_owner'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'business.employment_tenure'}, {'business.job_title'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'people.place_lived'}, {'people.person'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'organization.role'}]
[{'people.sibling_relationship'}, {'people.person'}]
[{'organization.organization_membership'}, {'organization.organization_member'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet_owner'}]
[{'business.employment_tenure'}, {'type.datetime'}]
[{'people.place_lived'}, {'location.location'}]
[{'organization.organization_board_membership'}, {'organization.organization'}]
[{'organization.organization_board_membership'}, {'type.datetime'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'business.employment_tenure'}, {'people.person'}]
[{'business.employment_tenure'}, {'business.employer'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'organization.organization_board_membership'}, {'business.board_member'}]
[{'organization.organization_membership'}, {'organization.membership_organization'}]
[{'base.famouspets.pet_ownership'}, {'base.famouspets.pet'}]
[{'education.education'}, {'education.educational_degree'}]
[{'education.education'}, {'type.datetime'}]
[{'education.education'}, {'education.field_of_study'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.subject_taxonomy'}]
[{'education.education'}, {'education.field_of_study'}]
[{'education.education'}, {'education.field_of_study'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology'}]
      Current: 100 / 108
[{'base.ontologies.ontology_instance_mapping'}, {'base.ontologies.ontology_instance'}]
[{'education.education'}, {'education.educational_institution'}]
[{'education.education'}, {'people.person'}]
[{'education.education'}, {'type.datetime'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'user.tsegaran.random.taxonomy_subject'}]
[{'user.tsegaran.random.taxonomy_entry'}, {'type.float'}]
[{'education.education'}, {'education.field_of_study'}]
[{'education.education'}, {'education.field_of_study'}]
      8 typed schemas retrieved from 108 coarse schemas.
      Calculating F1 for 8 typed schemas: {
        Current: 0 / 8
        Checking schema 0 / 8: {
          [('Main', '==', 'm.03s9v', ['people.deceased_person.place_of_death']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.us_cbsa', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.deceased_person.place_of_death ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 1 / 8: {
          [('Main', '==', 'm.03s9v', ['education.academic.research_areas']), ('Type', '==', 'education.field_of_study', ['type.object.type'])]
          var_types: [{'education.field_of_study'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.research_areas ?o1 . ?o1 fb:type.object.type fb:education.field_of_study . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:education.academic.research_areas ?o1 . ?o1 fb:type.object.type fb:education.field_of_study . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 2
            Final Answer: {'Algebra', 'Mathematics'}
            Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
          } [0.008s]
          Answers = 2, P = 0.000000, R = 0.000000, F1 = 0.000000
        } [0.008s]
        Checking schema 2 / 8: {
          [('Main', '==', 'm.03s9v', ['book.author.works_written']), ('Type', '==', 'fictional_universe.work_of_fiction', ['type.object.type'])]
          var_types: [{'fictional_universe.work_of_fiction', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:fictional_universe.work_of_fiction . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:fictional_universe.work_of_fiction . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.011s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.011s]
        Checking schema 3 / 8: {
          [('Main', '==', 'm.03s9v', ['book.author.works_written']), ('Type', '==', 'book.scholarly_work', ['type.object.type'])]
          var_types: [{'book.scholarly_work', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:book.scholarly_work . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.author.works_written ?o1 . ?o1 fb:type.object.type fb:book.scholarly_work . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.007s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.007s]
        Checking schema 4 / 8: {
          [('Main', '==', 'm.03s9v', ['people.person.place_of_birth']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'location.us_cbsa', 'location.location'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:people.person.place_of_birth ?o1 . ?o1 fb:type.object.type fb:location.us_cbsa . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 5 / 8: {
          [('Main', '==', 'm.03s9v', ['book.book_subject.works']), ('Type', '==', 'fictional_universe.work_of_fiction', ['type.object.type'])]
          var_types: [{'fictional_universe.work_of_fiction', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:fictional_universe.work_of_fiction . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:fictional_universe.work_of_fiction . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.005s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.005s]
        Checking schema 6 / 8: {
          [('Main', '==', 'm.03s9v', ['book.book_subject.works']), ('Type', '==', 'book.scholarly_work', ['type.object.type'])]
          var_types: [{'book.scholarly_work', 'book.written_work'}]
          SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:book.scholarly_work . ?o1 fb:type.object.name ?n1 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o1 ?n1 WHERE { fb:m.03s9v fb:book.book_subject.works ?o1 . ?o1 fb:type.object.type fb:book.scholarly_work . ?o1 fb:type.object.name ?n1 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.010s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        Checking schema 7 / 8: {
          [('Main', '==', 'm.03s9v', ['people.person.places_lived', 'people.place_lived.location']), ('Type', '==', 'location.us_cbsa', ['type.object.type'])]
          var_types: [{'people.place_lived'}, {'location.us_cbsa', 'location.location'}]
          SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }
          [2020-12-03 14:28:02] Q_Schema Request: {
            WebQ_2199|SELECT DISTINCT ?o2 ?n2 WHERE { fb:m.03s9v fb:people.person.places_lived ?o1 . ?o1 fb:people.place_lived.location ?o2 . ?o2 fb:type.object.type fb:location.us_cbsa . ?o2 fb:type.object.name ?n2 . }|None|||None||None
            Forbidden mid: {'m.03s9v'}
            Query return lines = 0
            Final Answer: set()
            Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
          } [0.009s]
          Answers = 0, P = 1.000000, R = 0.000000, F1 = 0.000000
        } [0.010s]
        1 / 8 typed schemas kept with ans_size > 0.
      } [0.062s]
      Typed level ended, resulting in 109 schemas.
    } [0.068s]
    Time level searching (total times = 0): {
      Current: 0 / 109
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'law.invention.date_of_invention'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.book_edition.publication_date'}]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
self.var_time_preds: [{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
self.var_time_preds: [{'base.rivalries.rivalry.end_of_rivalry', 'base.rivalries.rivalry.start_of_rivalry'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'media_common.quotation.date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [{'film.film.initial_release_date'}]
self.var_time_preds: [{'people.person.date_of_birth'}]
self.var_time_preds: [{'organization.organization.date_founded'}]
self.var_time_preds: [{'award.award_category.date_discontinued', 'award.award_category.date_established'}]
self.var_time_preds: [{'base.database.database.launch_date'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.website.ended', 'internet.website.launched'}]
self.var_time_preds: [{'broadcast.content.production_end', 'broadcast.content.production_start'}]
self.var_time_preds: [{'base.rivalries.rivalry.end_of_rivalry', 'base.rivalries.rivalry.start_of_rivalry'}]
self.var_time_preds: [{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'radio.radio_program.final_broadcast', 'radio.radio_program.first_broadcast'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
self.var_time_preds: [set()]
self.var_time_preds: [set()]
self.var_time_preds: [{'internet.website_ownership.from', 'internet.website_ownership.to'}, {'internet.website.ended', 'internet.website.launched'}]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'internet.website_ownership.from', 'internet.website_ownership.to'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [set(), {'people.person.date_of_birth'}]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
self.var_time_preds: [{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
self.var_time_preds: [{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
      Current: 100 / 109
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [set(), set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [{'education.education.start_date', 'education.education.end_date'}, set()]
self.var_time_preds: [set()]
      0 timed schemas retrieved from 109 typed schemas.
      Calculating F1 for 0 timed schemas: {
        0 / 0 timed schemas kept with ans_size > 0.
      } [0.000s]
      Time level ended, resulting in 109 schemas.
    } [0.002s]
    Ordinal level searching (total ordinals = 0): {
      Current: 0 / 109
[set()]
[set()]
[{'people.person.date_of_birth'}]
[set()]
[set()]
[set()]
[{'law.invention.date_of_invention'}]
[set()]
[{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
[set()]
[set()]
[set()]
[{'book.book_edition.publication_date'}]
[{'media_common.quotation.date'}]
[set()]
[{'base.kwebbase.kwsentence.from', 'base.kwebbase.kwsentence.until'}]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'music.composition.date_completed', 'music.composition.date_of_first_performance'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[{'base.kwebbase.kwconnection.until', 'base.kwebbase.kwconnection.from'}]
[{'visual_art.artwork.date_completed', 'visual_art.artwork.date_begun'}]
[{'base.rivalries.rivalry.end_of_rivalry', 'base.rivalries.rivalry.start_of_rivalry'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[set()]
[set()]
[{'media_common.quotation.date'}]
[set()]
[set()]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[{'film.film.initial_release_date'}]
[{'people.person.date_of_birth'}]
[{'organization.organization.date_founded'}]
[{'award.award_category.date_discontinued', 'award.award_category.date_established'}]
[{'base.database.database.launch_date'}]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[{'internet.website.ended', 'internet.website.launched'}]
[{'broadcast.content.production_end', 'broadcast.content.production_start'}]
[{'base.rivalries.rivalry.end_of_rivalry', 'base.rivalries.rivalry.start_of_rivalry'}]
[{'tv.tv_program.air_date_of_first_episode', 'tv.tv_program.air_date_of_final_episode'}]
[set()]
[set()]
[set()]
[{'radio.radio_program.final_broadcast', 'radio.radio_program.first_broadcast'}]
[set()]
[set()]
[set()]
[{'book.written_work.date_of_first_publication', 'book.written_work.copyright_date', 'book.written_work.date_written'}]
[set()]
[set()]
[{'internet.website_ownership.from', 'internet.website_ownership.to'}, {'internet.website.ended', 'internet.website.launched'}]
[set(), set()]
[{'internet.website_ownership.from', 'internet.website_ownership.to'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, {'people.person.date_of_birth'}]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[set(), {'people.person.date_of_birth'}]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'people.place_lived.end_date', 'people.place_lived.start_date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, {'organization.organization.date_founded'}]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[set(), set()]
[set(), set()]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, {'people.person.date_of_birth'}]
[{'business.employment_tenure.to', 'business.employment_tenure.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'organization.organization_board_membership.from', 'organization.organization_board_membership.to'}, set()]
[{'organization.organization_membership.from', 'organization.organization_membership.to'}, set()]
[{'base.famouspets.pet_ownership.to', 'base.famouspets.pet_ownership.from'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[set(), set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[set(), set()]
[set(), set()]
      Current: 100 / 109
[set(), set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, {'people.person.date_of_birth'}]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[set(), set()]
[set(), set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[{'education.education.start_date', 'education.education.end_date'}, set()]
[set()]
      0 ordinal schemas retrieved from 109 timed schemas.
      Calculating F1 for 0 ordinal schemas: {
        0 / 0 ordinal schemas kept with ans_size > 0.
      } [0.000s]
      Ordinal level ended, we finally collected 109 schemas.
    } [0.002s]
    [2020-12-03 14:28:02] buffer saved.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:common.topic.notable_types ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
query: PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?o1 """Principia"" was translated into French by du Chatelet in 1759."@en ?type1 WHERE { fb:m.03s9v fb:base.kwebbase.kwtopic.has_sentences ?o1 . ?o1 fb:type.object.name """Principia"" was translated into French by du Chatelet in 1759."@en . OPTIONAL { ?o1 fb:type.object.type ?type1 .} }
    Return code 400.
    109 schemas successfully saved into [../../runnings/candgen_WebQ/20201202_entity_time_type_ordinal/data/2100-2199/2199_schema].
  } [1m14.664s]
  All Done.
} [13m33.016s]
Time tracker display: {
              Name	Avg. (s)	    Freq	Time (s)
          single_q	 54.0740	      15	811.1104
       coarse_comb	  4.6893	      15	 70.3392
      query_sparql	  0.2349	     298	 70.0075
   query_q_sc_stat	  0.0120	    2130	 25.5533
         coarse_F1	  1.5516	      15	 23.2737
           linking	  0.7059	      15	 10.5888
              type	  0.7559	      14	 10.5831
          typed_F1	  0.1653	      15	  2.4792
        timed_comb	  0.0172	      15	  0.2573
        typed_comb	  0.0082	      15	  0.1235
          ord_comb	  0.0030	      15	  0.0455
          timed_F1	  0.0000	      15	  0.0006
        ordinal_F1	  0.0000	      15	  0.0006
              time	  0.0000	      14	  0.0005
            entity	  0.0000	      14	  0.0002
           ordinal	  0.0000	      14	  0.0001
} [0.000s]
